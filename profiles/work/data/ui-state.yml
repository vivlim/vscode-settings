appulate.filewatcher: '{"isEnabled":true}'
donjayamanne.kusto: "{\"prefixForDatabasesInACluster:https://ddtelvsraw.kusto.w\
  indows.net\":[\"VS\",\"LookupTables\"],\"prefixForTablesInAClusterDB:https://\
  ddtelvsraw.kusto.windows.net:VS\":{\"name\":\"VS\",\"majorVersion\":4657,\"mi\
  norVersion\":84034,\"tables\":[{\"entityType\":\"Table\",\"name\":\"RawEvents\
  VS\",\"columns\":[{\"name\":\"EventId\",\"type\":\"string\",\"docstring\":\"\
  \"},{\"name\":\"EventName\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"ABExpFlights\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ActivePr\
  ojectId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ActivityCorrela\
  tionId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ActivityDuration\
  InMilliseconds\",\"type\":\"long\",\"docstring\":\"\"},{\"name\":\"ActivityEn\
  dInTicks\",\"type\":\"long\",\"docstring\":\"\"},{\"name\":\"ActivityStartInT\
  icks\",\"type\":\"long\",\"docstring\":\"\"},{\"name\":\"AdvancedServerTimest\
  ampUtc\",\"type\":\"datetime\",\"docstring\":\"\"},{\"name\":\"AltSecId\",\"t\
  ype\":\"string\",\"docstring\":\"\"},{\"name\":\"Attributes\",\"type\":\"dyna\
  mic\",\"docstring\":\"\"},{\"name\":\"BranchName\",\"type\":\"string\",\"docs\
  tring\":\"\"},{\"name\":\"BuildManifestId\",\"type\":\"string\",\"docstring\":\
  \"\"},{\"name\":\"BuildNumber\",\"type\":\"real\",\"docstring\":\"\"},{\"name\
  \":\"BuildNumberFull\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"Buil\
  dNumberMajorVersion\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"Build\
  NumberMicroUpdate\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Build\
  NumberMinorVersion\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"BuildW\
  orkloads\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ChannelId\",\"\
  type\":\"string\",\"docstring\":\"\"},{\"name\":\"ChannelManifestId\",\"type\
  \":\"string\",\"docstring\":\"\"},{\"name\":\"ClientTimestampUtc\",\"type\":\
  \"datetime\",\"docstring\":\"\"},{\"name\":\"ClrVersion\",\"type\":\"string\",\
  \"docstring\":\"\"},{\"name\":\"CommandGuid\",\"type\":\"string\",\"docstring\
  \":\"\"},{\"name\":\"CommandName\",\"type\":\"string\",\"docstring\":\"\"},{\
  \"name\":\"CommandSource\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"ComputerName\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"CpuArchi\
  tecture\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"CpuCount\",\"ty\
  pe\":\"real\",\"docstring\":\"\"},{\"name\":\"CpuDataWidth\",\"type\":\"real\
  \",\"docstring\":\"\"},{\"name\":\"CpuDescription\",\"type\":\"string\",\"doc\
  string\":\"\"},{\"name\":\"CpuFamily\",\"type\":\"real\",\"docstring\":\"\"},{\
  \"name\":\"CpuFrequency\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"C\
  puModel\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"CpuStepping\",\"t\
  ype\":\"real\",\"docstring\":\"\"},{\"name\":\"DataHandlingTags\",\"type\":\"\
  string\",\"docstring\":\"\"},{\"name\":\"DisplayColorDepth\",\"type\":\"real\
  \",\"docstring\":\"\"},{\"name\":\"DisplayCount\",\"type\":\"real\",\"docstri\
  ng\":\"\"},{\"name\":\"DisplayDpi\",\"type\":\"real\",\"docstring\":\"\"},{\"\
  name\":\"DisplayHighContrastEnabled\",\"type\":\"bool\",\"docstring\":\"\"},{\
  \"name\":\"DisplayHighContrastName\",\"type\":\"string\",\"docstring\":\"\"},{\
  \"name\":\"DisplayResolution\",\"type\":\"real\",\"docstring\":\"\"},{\"name\
  \":\"DisplayScalingFactor\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\
  \"DisplayVirtualXY\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Disp\
  layXY\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ExeName\",\"type\
  \":\"string\",\"docstring\":\"\"},{\"name\":\"ExeVersion\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"ExtensionName\",\"type\":\"string\",\"docs\
  tring\":\"\"},{\"name\":\"Extensions\",\"type\":\"dynamic\",\"docstring\":\"\
  \"},{\"name\":\"ExtensionTypeName\",\"type\":\"string\",\"docstring\":\"\"},{\
  \"name\":\"ExtensionVersion\",\"type\":\"string\",\"docstring\":\"\"},{\"name\
  \":\"FeedbackSessionId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"\
  Flags\",\"type\":\"long\",\"docstring\":\"\"},{\"name\":\"GeoCity\",\"type\":\
  \"string\",\"docstring\":\"\"},{\"name\":\"GeoCountryRegionIso\",\"type\":\"s\
  tring\",\"docstring\":\"\"},{\"name\":\"HardDriveFreeVolumeSize\",\"type\":\"\
  real\",\"docstring\":\"\"},{\"name\":\"HardDriveOsMediaType\",\"type\":\"stri\
  ng\",\"docstring\":\"\"},{\"name\":\"HardDriveProductFileSystemType\",\"type\
  \":\"string\",\"docstring\":\"\"},{\"name\":\"HardDriveProductMediaType\",\"t\
  ype\":\"string\",\"docstring\":\"\"},{\"name\":\"HardDriveTotalSize\",\"type\
  \":\"real\",\"docstring\":\"\"},{\"name\":\"HardDriveTotalVolumeSize\",\"type\
  \":\"real\",\"docstring\":\"\"},{\"name\":\"IdentityProvider\",\"type\":\"str\
  ing\",\"docstring\":\"\"},{\"name\":\"IdSubject\",\"type\":\"string\",\"docst\
  ring\":\"\"},{\"name\":\"InLowImpactMode\",\"type\":\"string\",\"docstring\":\
  \"\"},{\"name\":\"IsInternal\",\"type\":\"bool\",\"docstring\":\"\"},{\"name\
  \":\"IsOptedIn\",\"type\":\"bool\",\"docstring\":\"\"},{\"name\":\"LastSoluti\
  onBuildId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Locale\",\"ty\
  pe\":\"string\",\"docstring\":\"\"},{\"name\":\"LocaleCode\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"MacAddressHash\",\"type\":\"string\",\"doc\
  string\":\"\"},{\"name\":\"MachineId\",\"type\":\"string\",\"docstring\":\"\"\
  },{\"name\":\"ManifestId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"Measures\",\"type\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"MicroUpdate\
  Version\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"NovaProperties\
  \",\"type\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"OID\",\"type\":\"stri\
  ng\",\"docstring\":\"\"},{\"name\":\"Os\",\"type\":\"string\",\"docstring\":\"\
  \"},{\"name\":\"OsLocale\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"OsLocaleUser\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"OsLocale\
  UserUi\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"OsMajorVersion\",\
  \"type\":\"real\",\"docstring\":\"\"},{\"name\":\"OsMinorVersion\",\"type\":\
  \"real\",\"docstring\":\"\"},{\"name\":\"OsServicePack\",\"type\":\"real\",\"\
  docstring\":\"\"},{\"name\":\"OsVersion\",\"type\":\"string\",\"docstring\":\"\
  \"},{\"name\":\"PackageGuid\",\"type\":\"string\",\"docstring\":\"\"},{\"name\
  \":\"PackageLoadType\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Pe\
  rsonalizationVsId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Produ\
  ct\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ProjectId\",\"type\":\
  \"string\",\"docstring\":\"\"},{\"name\":\"Properties\",\"type\":\"dynamic\",\
  \"docstring\":\"\"},{\"name\":\"PUID\",\"type\":\"string\",\"docstring\":\"\"\
  },{\"name\":\"RamTotal\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"Se\
  quenceNumber\",\"type\":\"int\",\"docstring\":\"\"},{\"name\":\"SessionId\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Sku\",\"type\":\"string\",\
  \"docstring\":\"\"},{\"name\":\"SkuId\",\"type\":\"real\",\"docstring\":\"\"}\
  ,{\"name\":\"SolutionId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"SolutionSessionId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Tags\
  \",\"type\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"TelemetryApiVersion\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"TelemetryChannelUsed\",\"\
  type\":\"string\",\"docstring\":\"\"},{\"name\":\"TimeSinceSessionStart\",\"t\
  ype\":\"long\",\"docstring\":\"\"},{\"name\":\"UserAlias\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"UserDomainName\",\"type\":\"string\",\"doc\
  string\":\"\"},{\"name\":\"UserId\",\"type\":\"string\",\"docstring\":\"\"},{\
  \"name\":\"UtcDeviceClass\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"UtcDeviceLocalId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"UtcF\
  lags\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"UtcGlobalDeviceId\
  \",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"VirtualMachineAzureIma\
  ge\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"VsId\",\"type\":\"st\
  ring\",\"docstring\":\"\"},{\"name\":\"VsInstanceId\",\"type\":\"string\",\"d\
  ocstring\":\"\"},{\"name\":\"VsLocale\",\"type\":\"string\",\"docstring\":\"\
  \"},{\"name\":\"WorkloadTags\",\"type\":\"string\",\"docstring\":\"\"},{\"name\
  \":\"SessionRole\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Connec\
  tedSessionId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"RemoteSess\
  ionIds\",\"type\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"CloudEnvironmen\
  tId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"IsAzureCloudEnviron\
  ment\",\"type\":\"bool\",\"docstring\":\"\"},{\"name\":\"RemoteRepoURLInternal\
  \",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"DataModelActionType\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"DataModelCorrelationId\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"DataModelActionResult\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"VsCoreIs64BitProcess\",\"\
  type\":\"bool\",\"docstring\":\"\"},{\"name\":\"ProcessArchitecture\",\"type\
  \":\"string\",\"docstring\":\"\"},{\"name\":\"SchemaVersion\",\"type\":\"stri\
  ng\",\"docstring\":\"\"}]},{\"entityType\":\"Table\",\"name\":\"RawEventsVSBl\
  essed\",\"columns\":[{\"name\":\"EventId\",\"type\":\"string\",\"docstring\":\
  \"\"},{\"name\":\"EventName\",\"type\":\"string\",\"docstring\":\"\"},{\"name\
  \":\"ABExpFlights\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Activ\
  eProjectId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ActivityCorr\
  elationId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ActivityDurat\
  ionInMilliseconds\",\"type\":\"long\",\"docstring\":\"\"},{\"name\":\"Activit\
  yEndInTicks\",\"type\":\"long\",\"docstring\":\"\"},{\"name\":\"ActivityStart\
  InTicks\",\"type\":\"long\",\"docstring\":\"\"},{\"name\":\"AdvancedServerTim\
  estampUtc\",\"type\":\"datetime\",\"docstring\":\"\"},{\"name\":\"AltSecId\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Attributes\",\"type\":\"d\
  ynamic\",\"docstring\":\"\"},{\"name\":\"BranchName\",\"type\":\"string\",\"d\
  ocstring\":\"\"},{\"name\":\"BuildManifestId\",\"type\":\"string\",\"docstring\
  \":\"\"},{\"name\":\"BuildNumber\",\"type\":\"real\",\"docstring\":\"\"},{\"n\
  ame\":\"BuildNumberFull\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"B\
  uildNumberMajorVersion\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"Bu\
  ildNumberMicroUpdate\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Bu\
  ildNumberMinorVersion\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"Bui\
  ldWorkloads\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ChannelId\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ChannelManifestId\",\"type\
  \":\"string\",\"docstring\":\"\"},{\"name\":\"ClientTimestampUtc\",\"type\":\
  \"datetime\",\"docstring\":\"\"},{\"name\":\"ClrVersion\",\"type\":\"string\",\
  \"docstring\":\"\"},{\"name\":\"CommandGuid\",\"type\":\"string\",\"docstring\
  \":\"\"},{\"name\":\"CommandName\",\"type\":\"string\",\"docstring\":\"\"},{\
  \"name\":\"CommandSource\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"ComputerName\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"CpuArchi\
  tecture\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"CpuCount\",\"ty\
  pe\":\"real\",\"docstring\":\"\"},{\"name\":\"CpuDataWidth\",\"type\":\"real\
  \",\"docstring\":\"\"},{\"name\":\"CpuDescription\",\"type\":\"string\",\"doc\
  string\":\"\"},{\"name\":\"CpuFamily\",\"type\":\"real\",\"docstring\":\"\"},{\
  \"name\":\"CpuFrequency\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"C\
  puModel\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"CpuStepping\",\"t\
  ype\":\"real\",\"docstring\":\"\"},{\"name\":\"DataHandlingTags\",\"type\":\"\
  string\",\"docstring\":\"\"},{\"name\":\"DisplayColorDepth\",\"type\":\"real\
  \",\"docstring\":\"\"},{\"name\":\"DisplayCount\",\"type\":\"real\",\"docstri\
  ng\":\"\"},{\"name\":\"DisplayDpi\",\"type\":\"real\",\"docstring\":\"\"},{\"\
  name\":\"DisplayHighContrastEnabled\",\"type\":\"bool\",\"docstring\":\"\"},{\
  \"name\":\"DisplayHighContrastName\",\"type\":\"string\",\"docstring\":\"\"},{\
  \"name\":\"DisplayResolution\",\"type\":\"real\",\"docstring\":\"\"},{\"name\
  \":\"DisplayScalingFactor\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\
  \"DisplayVirtualXY\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Disp\
  layXY\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ExeName\",\"type\
  \":\"string\",\"docstring\":\"\"},{\"name\":\"ExeVersion\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"ExtensionName\",\"type\":\"string\",\"docs\
  tring\":\"\"},{\"name\":\"Extensions\",\"type\":\"dynamic\",\"docstring\":\"\
  \"},{\"name\":\"ExtensionTypeName\",\"type\":\"string\",\"docstring\":\"\"},{\
  \"name\":\"ExtensionVersion\",\"type\":\"string\",\"docstring\":\"\"},{\"name\
  \":\"FeedbackSessionId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"\
  Flags\",\"type\":\"long\",\"docstring\":\"\"},{\"name\":\"GeoCity\",\"type\":\
  \"string\",\"docstring\":\"\"},{\"name\":\"GeoCountryRegionIso\",\"type\":\"s\
  tring\",\"docstring\":\"\"},{\"name\":\"HardDriveFreeVolumeSize\",\"type\":\"\
  real\",\"docstring\":\"\"},{\"name\":\"HardDriveOsMediaType\",\"type\":\"stri\
  ng\",\"docstring\":\"\"},{\"name\":\"HardDriveProductFileSystemType\",\"type\
  \":\"string\",\"docstring\":\"\"},{\"name\":\"HardDriveProductMediaType\",\"t\
  ype\":\"string\",\"docstring\":\"\"},{\"name\":\"HardDriveTotalSize\",\"type\
  \":\"real\",\"docstring\":\"\"},{\"name\":\"HardDriveTotalVolumeSize\",\"type\
  \":\"real\",\"docstring\":\"\"},{\"name\":\"IdentityProvider\",\"type\":\"str\
  ing\",\"docstring\":\"\"},{\"name\":\"IdSubject\",\"type\":\"string\",\"docst\
  ring\":\"\"},{\"name\":\"InLowImpactMode\",\"type\":\"string\",\"docstring\":\
  \"\"},{\"name\":\"IsInternal\",\"type\":\"bool\",\"docstring\":\"\"},{\"name\
  \":\"IsOptedIn\",\"type\":\"bool\",\"docstring\":\"\"},{\"name\":\"LastSoluti\
  onBuildId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Locale\",\"ty\
  pe\":\"string\",\"docstring\":\"\"},{\"name\":\"LocaleCode\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"MacAddressHash\",\"type\":\"string\",\"doc\
  string\":\"\"},{\"name\":\"MachineId\",\"type\":\"string\",\"docstring\":\"\"\
  },{\"name\":\"ManifestId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"Measures\",\"type\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"MicroUpdate\
  Version\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"NovaProperties\
  \",\"type\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"OID\",\"type\":\"stri\
  ng\",\"docstring\":\"\"},{\"name\":\"Os\",\"type\":\"string\",\"docstring\":\"\
  \"},{\"name\":\"OsLocale\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"OsLocaleUser\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"OsLocale\
  UserUi\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"OsMajorVersion\",\
  \"type\":\"real\",\"docstring\":\"\"},{\"name\":\"OsMinorVersion\",\"type\":\
  \"real\",\"docstring\":\"\"},{\"name\":\"OsServicePack\",\"type\":\"real\",\"\
  docstring\":\"\"},{\"name\":\"OsVersion\",\"type\":\"string\",\"docstring\":\"\
  \"},{\"name\":\"PackageGuid\",\"type\":\"string\",\"docstring\":\"\"},{\"name\
  \":\"PackageLoadType\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Pe\
  rsonalizationVsId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Produ\
  ct\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ProjectId\",\"type\":\
  \"string\",\"docstring\":\"\"},{\"name\":\"Properties\",\"type\":\"dynamic\",\
  \"docstring\":\"\"},{\"name\":\"PUID\",\"type\":\"string\",\"docstring\":\"\"\
  },{\"name\":\"RamTotal\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"Se\
  quenceNumber\",\"type\":\"int\",\"docstring\":\"\"},{\"name\":\"SessionId\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Sku\",\"type\":\"string\",\
  \"docstring\":\"\"},{\"name\":\"SkuId\",\"type\":\"real\",\"docstring\":\"\"}\
  ,{\"name\":\"SolutionId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"SolutionSessionId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Tags\
  \",\"type\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"TelemetryApiVersion\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"TelemetryChannelUsed\",\"\
  type\":\"string\",\"docstring\":\"\"},{\"name\":\"TimeSinceSessionStart\",\"t\
  ype\":\"long\",\"docstring\":\"\"},{\"name\":\"UserAlias\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"UserDomainName\",\"type\":\"string\",\"doc\
  string\":\"\"},{\"name\":\"UserId\",\"type\":\"string\",\"docstring\":\"\"},{\
  \"name\":\"UtcDeviceClass\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"UtcDeviceLocalId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"UtcF\
  lags\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"UtcGlobalDeviceId\
  \",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"VirtualMachineAzureIma\
  ge\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"VsId\",\"type\":\"st\
  ring\",\"docstring\":\"\"},{\"name\":\"VsInstanceId\",\"type\":\"string\",\"d\
  ocstring\":\"\"},{\"name\":\"VsLocale\",\"type\":\"string\",\"docstring\":\"\
  \"},{\"name\":\"WorkloadTags\",\"type\":\"string\",\"docstring\":\"\"},{\"name\
  \":\"SessionRole\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Connec\
  tedSessionId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"RemoteSess\
  ionIds\",\"type\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"CloudEnvironmen\
  tId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"IsAzureCloudEnviron\
  ment\",\"type\":\"bool\",\"docstring\":\"\"},{\"name\":\"RemoteRepoURLInternal\
  \",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"DataModelActionType\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"DataModelCorrelationId\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"DataModelActionResult\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"VsCoreIs64BitProcess\",\"\
  type\":\"bool\",\"docstring\":\"\"},{\"name\":\"ProcessArchitecture\",\"type\
  \":\"string\",\"docstring\":\"\"},{\"name\":\"SchemaVersion\",\"type\":\"stri\
  ng\",\"docstring\":\"\"}]},{\"entityType\":\"Table\",\"name\":\"RawEventsVSIn\
  ternal\",\"columns\":[{\"name\":\"EventId\",\"type\":\"string\",\"docstring\":\
  \"\"},{\"name\":\"EventName\",\"type\":\"string\",\"docstring\":\"\"},{\"name\
  \":\"ABExpFlights\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Activ\
  eProjectId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ActivityCorr\
  elationId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ActivityDurat\
  ionInMilliseconds\",\"type\":\"long\",\"docstring\":\"\"},{\"name\":\"Activit\
  yEndInTicks\",\"type\":\"long\",\"docstring\":\"\"},{\"name\":\"ActivityStart\
  InTicks\",\"type\":\"long\",\"docstring\":\"\"},{\"name\":\"AdvancedServerTim\
  estampUtc\",\"type\":\"datetime\",\"docstring\":\"\"},{\"name\":\"AltSecId\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Attributes\",\"type\":\"d\
  ynamic\",\"docstring\":\"\"},{\"name\":\"BranchName\",\"type\":\"string\",\"d\
  ocstring\":\"\"},{\"name\":\"BuildManifestId\",\"type\":\"string\",\"docstring\
  \":\"\"},{\"name\":\"BuildNumber\",\"type\":\"real\",\"docstring\":\"\"},{\"n\
  ame\":\"BuildNumberFull\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"B\
  uildNumberMajorVersion\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"Bu\
  ildNumberMicroUpdate\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Bu\
  ildNumberMinorVersion\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"Bui\
  ldWorkloads\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ChannelId\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ChannelManifestId\",\"type\
  \":\"string\",\"docstring\":\"\"},{\"name\":\"ClientTimestampUtc\",\"type\":\
  \"datetime\",\"docstring\":\"\"},{\"name\":\"ClrVersion\",\"type\":\"string\",\
  \"docstring\":\"\"},{\"name\":\"CommandGuid\",\"type\":\"string\",\"docstring\
  \":\"\"},{\"name\":\"CommandName\",\"type\":\"string\",\"docstring\":\"\"},{\
  \"name\":\"CommandSource\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"ComputerName\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"CpuArchi\
  tecture\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"CpuCount\",\"ty\
  pe\":\"real\",\"docstring\":\"\"},{\"name\":\"CpuDataWidth\",\"type\":\"real\
  \",\"docstring\":\"\"},{\"name\":\"CpuDescription\",\"type\":\"string\",\"doc\
  string\":\"\"},{\"name\":\"CpuFamily\",\"type\":\"real\",\"docstring\":\"\"},{\
  \"name\":\"CpuFrequency\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"C\
  puModel\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"CpuStepping\",\"t\
  ype\":\"real\",\"docstring\":\"\"},{\"name\":\"DataHandlingTags\",\"type\":\"\
  string\",\"docstring\":\"\"},{\"name\":\"DisplayColorDepth\",\"type\":\"real\
  \",\"docstring\":\"\"},{\"name\":\"DisplayCount\",\"type\":\"real\",\"docstri\
  ng\":\"\"},{\"name\":\"DisplayDpi\",\"type\":\"real\",\"docstring\":\"\"},{\"\
  name\":\"DisplayHighContrastEnabled\",\"type\":\"bool\",\"docstring\":\"\"},{\
  \"name\":\"DisplayHighContrastName\",\"type\":\"string\",\"docstring\":\"\"},{\
  \"name\":\"DisplayResolution\",\"type\":\"real\",\"docstring\":\"\"},{\"name\
  \":\"DisplayScalingFactor\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\
  \"DisplayVirtualXY\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Disp\
  layXY\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ExeName\",\"type\
  \":\"string\",\"docstring\":\"\"},{\"name\":\"ExeVersion\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"ExtensionName\",\"type\":\"string\",\"docs\
  tring\":\"\"},{\"name\":\"Extensions\",\"type\":\"dynamic\",\"docstring\":\"\
  \"},{\"name\":\"ExtensionTypeName\",\"type\":\"string\",\"docstring\":\"\"},{\
  \"name\":\"ExtensionVersion\",\"type\":\"string\",\"docstring\":\"\"},{\"name\
  \":\"FeedbackSessionId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"\
  Flags\",\"type\":\"long\",\"docstring\":\"\"},{\"name\":\"GeoCity\",\"type\":\
  \"string\",\"docstring\":\"\"},{\"name\":\"GeoCountryRegionIso\",\"type\":\"s\
  tring\",\"docstring\":\"\"},{\"name\":\"HardDriveFreeVolumeSize\",\"type\":\"\
  real\",\"docstring\":\"\"},{\"name\":\"HardDriveOsMediaType\",\"type\":\"stri\
  ng\",\"docstring\":\"\"},{\"name\":\"HardDriveProductFileSystemType\",\"type\
  \":\"string\",\"docstring\":\"\"},{\"name\":\"HardDriveProductMediaType\",\"t\
  ype\":\"string\",\"docstring\":\"\"},{\"name\":\"HardDriveTotalSize\",\"type\
  \":\"real\",\"docstring\":\"\"},{\"name\":\"HardDriveTotalVolumeSize\",\"type\
  \":\"real\",\"docstring\":\"\"},{\"name\":\"IdentityProvider\",\"type\":\"str\
  ing\",\"docstring\":\"\"},{\"name\":\"IdSubject\",\"type\":\"string\",\"docst\
  ring\":\"\"},{\"name\":\"InLowImpactMode\",\"type\":\"string\",\"docstring\":\
  \"\"},{\"name\":\"IsInternal\",\"type\":\"bool\",\"docstring\":\"\"},{\"name\
  \":\"IsOptedIn\",\"type\":\"bool\",\"docstring\":\"\"},{\"name\":\"LastSoluti\
  onBuildId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Locale\",\"ty\
  pe\":\"string\",\"docstring\":\"\"},{\"name\":\"LocaleCode\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"MacAddressHash\",\"type\":\"string\",\"doc\
  string\":\"\"},{\"name\":\"MachineId\",\"type\":\"string\",\"docstring\":\"\"\
  },{\"name\":\"ManifestId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"Measures\",\"type\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"MicroUpdate\
  Version\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"NovaProperties\
  \",\"type\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"OID\",\"type\":\"stri\
  ng\",\"docstring\":\"\"},{\"name\":\"Os\",\"type\":\"string\",\"docstring\":\"\
  \"},{\"name\":\"OsLocale\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"OsLocaleUser\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"OsLocale\
  UserUi\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"OsMajorVersion\",\
  \"type\":\"real\",\"docstring\":\"\"},{\"name\":\"OsMinorVersion\",\"type\":\
  \"real\",\"docstring\":\"\"},{\"name\":\"OsServicePack\",\"type\":\"real\",\"\
  docstring\":\"\"},{\"name\":\"OsVersion\",\"type\":\"string\",\"docstring\":\"\
  \"},{\"name\":\"PackageGuid\",\"type\":\"string\",\"docstring\":\"\"},{\"name\
  \":\"PackageLoadType\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Pe\
  rsonalizationVsId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Produ\
  ct\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ProjectId\",\"type\":\
  \"string\",\"docstring\":\"\"},{\"name\":\"Properties\",\"type\":\"dynamic\",\
  \"docstring\":\"\"},{\"name\":\"PUID\",\"type\":\"string\",\"docstring\":\"\"\
  },{\"name\":\"RamTotal\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"Se\
  quenceNumber\",\"type\":\"int\",\"docstring\":\"\"},{\"name\":\"SessionId\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Sku\",\"type\":\"string\",\
  \"docstring\":\"\"},{\"name\":\"SkuId\",\"type\":\"real\",\"docstring\":\"\"}\
  ,{\"name\":\"SolutionId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"SolutionSessionId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Tags\
  \",\"type\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"TelemetryApiVersion\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"TelemetryChannelUsed\",\"\
  type\":\"string\",\"docstring\":\"\"},{\"name\":\"TimeSinceSessionStart\",\"t\
  ype\":\"long\",\"docstring\":\"\"},{\"name\":\"UserAlias\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"UserDomainName\",\"type\":\"string\",\"doc\
  string\":\"\"},{\"name\":\"UserId\",\"type\":\"string\",\"docstring\":\"\"},{\
  \"name\":\"UtcDeviceClass\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"UtcDeviceLocalId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"UtcF\
  lags\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"UtcGlobalDeviceId\
  \",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"VirtualMachineAzureIma\
  ge\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"VsId\",\"type\":\"st\
  ring\",\"docstring\":\"\"},{\"name\":\"VsInstanceId\",\"type\":\"string\",\"d\
  ocstring\":\"\"},{\"name\":\"VsLocale\",\"type\":\"string\",\"docstring\":\"\
  \"},{\"name\":\"WorkloadTags\",\"type\":\"string\",\"docstring\":\"\"},{\"name\
  \":\"SessionRole\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Connec\
  tedSessionId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"RemoteSess\
  ionIds\",\"type\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"CloudEnvironmen\
  tId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"IsAzureCloudEnviron\
  ment\",\"type\":\"bool\",\"docstring\":\"\"},{\"name\":\"RemoteRepoURLInternal\
  \",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"DataModelActionType\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"DataModelCorrelationId\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"DataModelActionResult\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"VsCoreIs64BitProcess\",\"\
  type\":\"bool\",\"docstring\":\"\"},{\"name\":\"ProcessArchitecture\",\"type\
  \":\"string\",\"docstring\":\"\"},{\"name\":\"SchemaVersion\",\"type\":\"stri\
  ng\",\"docstring\":\"\"}]},{\"entityType\":\"Table\",\"name\":\"RawEventsVSUn\
  classified\",\"columns\":[{\"name\":\"EventId\",\"type\":\"string\",\"docstri\
  ng\":\"\"},{\"name\":\"EventName\",\"type\":\"string\",\"docstring\":\"\"},{\
  \"name\":\"ABExpFlights\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"ActiveProjectId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Activ\
  ityCorrelationId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Activi\
  tyDurationInMilliseconds\",\"type\":\"long\",\"docstring\":\"\"},{\"name\":\"\
  ActivityEndInTicks\",\"type\":\"long\",\"docstring\":\"\"},{\"name\":\"Activi\
  tyStartInTicks\",\"type\":\"long\",\"docstring\":\"\"},{\"name\":\"AdvancedSe\
  rverTimestampUtc\",\"type\":\"datetime\",\"docstring\":\"\"},{\"name\":\"AltS\
  ecId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Attributes\",\"type\
  \":\"dynamic\",\"docstring\":\"\"},{\"name\":\"BranchName\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"BuildManifestId\",\"type\":\"string\",\"do\
  cstring\":\"\"},{\"name\":\"BuildNumber\",\"type\":\"real\",\"docstring\":\"\
  \"},{\"name\":\"BuildNumberFull\",\"type\":\"real\",\"docstring\":\"\"},{\"na\
  me\":\"BuildNumberMajorVersion\",\"type\":\"real\",\"docstring\":\"\"},{\"name\
  \":\"BuildNumberMicroUpdate\",\"type\":\"string\",\"docstring\":\"\"},{\"name\
  \":\"BuildNumberMinorVersion\",\"type\":\"real\",\"docstring\":\"\"},{\"name\
  \":\"BuildWorkloads\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Cha\
  nnelId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ChannelManifestId\
  \",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ClientTimestampUtc\",\
  \"type\":\"datetime\",\"docstring\":\"\"},{\"name\":\"ClrVersion\",\"type\":\
  \"string\",\"docstring\":\"\"},{\"name\":\"CommandGuid\",\"type\":\"string\",\
  \"docstring\":\"\"},{\"name\":\"CommandName\",\"type\":\"string\",\"docstring\
  \":\"\"},{\"name\":\"CommandSource\",\"type\":\"string\",\"docstring\":\"\"},{\
  \"name\":\"ComputerName\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"CpuArchitecture\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"CpuCo\
  unt\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"CpuDataWidth\",\"type\
  \":\"real\",\"docstring\":\"\"},{\"name\":\"CpuDescription\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"CpuFamily\",\"type\":\"real\",\"docstring\
  \":\"\"},{\"name\":\"CpuFrequency\",\"type\":\"real\",\"docstring\":\"\"},{\"\
  name\":\"CpuModel\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"CpuStep\
  ping\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"DataHandling\",\"type\
  \":\"dynamic\",\"docstring\":\"\"},{\"name\":\"DataHandlingTags\",\"type\":\"\
  string\",\"docstring\":\"\"},{\"name\":\"DisplayColorDepth\",\"type\":\"real\
  \",\"docstring\":\"\"},{\"name\":\"DisplayCount\",\"type\":\"real\",\"docstri\
  ng\":\"\"},{\"name\":\"DisplayDpi\",\"type\":\"real\",\"docstring\":\"\"},{\"\
  name\":\"DisplayHighContrastEnabled\",\"type\":\"bool\",\"docstring\":\"\"},{\
  \"name\":\"DisplayHighContrastName\",\"type\":\"string\",\"docstring\":\"\"},{\
  \"name\":\"DisplayResolution\",\"type\":\"real\",\"docstring\":\"\"},{\"name\
  \":\"DisplayScalingFactor\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\
  \"DisplayVirtualXY\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Disp\
  layXY\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ExeName\",\"type\
  \":\"string\",\"docstring\":\"\"},{\"name\":\"ExeVersion\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"ExtensionName\",\"type\":\"string\",\"docs\
  tring\":\"\"},{\"name\":\"Extensions\",\"type\":\"dynamic\",\"docstring\":\"\
  \"},{\"name\":\"ExtensionTypeName\",\"type\":\"string\",\"docstring\":\"\"},{\
  \"name\":\"ExtensionVersion\",\"type\":\"string\",\"docstring\":\"\"},{\"name\
  \":\"FeedbackSessionId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"\
  Flags\",\"type\":\"long\",\"docstring\":\"\"},{\"name\":\"GeoCity\",\"type\":\
  \"string\",\"docstring\":\"\"},{\"name\":\"GeoCountryRegionIso\",\"type\":\"s\
  tring\",\"docstring\":\"\"},{\"name\":\"HardDriveFreeVolumeSize\",\"type\":\"\
  real\",\"docstring\":\"\"},{\"name\":\"HardDriveOsMediaType\",\"type\":\"stri\
  ng\",\"docstring\":\"\"},{\"name\":\"HardDriveProductFileSystemType\",\"type\
  \":\"string\",\"docstring\":\"\"},{\"name\":\"HardDriveProductMediaType\",\"t\
  ype\":\"string\",\"docstring\":\"\"},{\"name\":\"HardDriveTotalSize\",\"type\
  \":\"real\",\"docstring\":\"\"},{\"name\":\"HardDriveTotalVolumeSize\",\"type\
  \":\"real\",\"docstring\":\"\"},{\"name\":\"IdentityProvider\",\"type\":\"str\
  ing\",\"docstring\":\"\"},{\"name\":\"IdSubject\",\"type\":\"string\",\"docst\
  ring\":\"\"},{\"name\":\"InLowImpactMode\",\"type\":\"string\",\"docstring\":\
  \"\"},{\"name\":\"IsInternal\",\"type\":\"bool\",\"docstring\":\"\"},{\"name\
  \":\"IsOptedIn\",\"type\":\"bool\",\"docstring\":\"\"},{\"name\":\"LastSoluti\
  onBuildId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Locale\",\"ty\
  pe\":\"string\",\"docstring\":\"\"},{\"name\":\"LocaleCode\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"MacAddressHash\",\"type\":\"string\",\"doc\
  string\":\"\"},{\"name\":\"MachineId\",\"type\":\"string\",\"docstring\":\"\"\
  },{\"name\":\"ManifestId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"Measures\",\"type\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"MicroUpdate\
  Version\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"NovaProperties\
  \",\"type\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"OID\",\"type\":\"stri\
  ng\",\"docstring\":\"\"},{\"name\":\"Os\",\"type\":\"string\",\"docstring\":\"\
  \"},{\"name\":\"OsLocale\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"OsLocaleUser\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"OsLocale\
  UserUi\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"OsMajorVersion\",\
  \"type\":\"real\",\"docstring\":\"\"},{\"name\":\"OsMinorVersion\",\"type\":\
  \"real\",\"docstring\":\"\"},{\"name\":\"OsServicePack\",\"type\":\"real\",\"\
  docstring\":\"\"},{\"name\":\"OsVersion\",\"type\":\"string\",\"docstring\":\"\
  \"},{\"name\":\"PackageGuid\",\"type\":\"string\",\"docstring\":\"\"},{\"name\
  \":\"PackageLoadType\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Pe\
  rsonalizationVsId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Produ\
  ct\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ProjectId\",\"type\":\
  \"string\",\"docstring\":\"\"},{\"name\":\"Properties\",\"type\":\"dynamic\",\
  \"docstring\":\"\"},{\"name\":\"PUID\",\"type\":\"string\",\"docstring\":\"\"\
  },{\"name\":\"RamTotal\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"Se\
  quenceNumber\",\"type\":\"int\",\"docstring\":\"\"},{\"name\":\"SessionId\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Sku\",\"type\":\"string\",\
  \"docstring\":\"\"},{\"name\":\"SkuId\",\"type\":\"real\",\"docstring\":\"\"}\
  ,{\"name\":\"SolutionId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"SolutionSessionId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Tags\
  \",\"type\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"TelemetryApiVersion\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"TelemetryChannelUsed\",\"\
  type\":\"string\",\"docstring\":\"\"},{\"name\":\"TimeSinceSessionStart\",\"t\
  ype\":\"long\",\"docstring\":\"\"},{\"name\":\"UserAlias\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"UserDomainName\",\"type\":\"string\",\"doc\
  string\":\"\"},{\"name\":\"UserId\",\"type\":\"string\",\"docstring\":\"\"},{\
  \"name\":\"UtcDeviceClass\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"UtcDeviceLocalId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"UtcF\
  lags\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"UtcGlobalDeviceId\
  \",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"VirtualMachineAzureIma\
  ge\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"VsId\",\"type\":\"st\
  ring\",\"docstring\":\"\"},{\"name\":\"VsInstanceId\",\"type\":\"string\",\"d\
  ocstring\":\"\"},{\"name\":\"VsLocale\",\"type\":\"string\",\"docstring\":\"\
  \"},{\"name\":\"WorkloadTags\",\"type\":\"string\",\"docstring\":\"\"},{\"name\
  \":\"SessionRole\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Connec\
  tedSessionId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"RemoteSess\
  ionIds\",\"type\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"CloudEnvironmen\
  tId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"IsAzureCloudEnviron\
  ment\",\"type\":\"bool\",\"docstring\":\"\"},{\"name\":\"RemoteRepoURLInternal\
  \",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"DataModelActionType\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"DataModelCorrelationId\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"DataModelActionResult\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"VsCoreIs64BitProcess\",\"\
  type\":\"bool\",\"docstring\":\"\"},{\"name\":\"ProcessArchitecture\",\"type\
  \":\"string\",\"docstring\":\"\"},{\"name\":\"SchemaVersion\",\"type\":\"stri\
  ng\",\"docstring\":\"\"},{\"name\":\"GdprQuarantined\",\"type\":\"dynamic\",\
  \"docstring\":\"\"}]},{\"entityType\":\"Table\",\"name\":\"RawEventsVSStaging\
  \",\"columns\":[{\"name\":\"EventId\",\"type\":\"string\",\"docstring\":\"\"}\
  ,{\"name\":\"EventName\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"\
  ABExpFlights\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ActiveProj\
  ectId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ActivityCorrelati\
  onId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ActivityDurationIn\
  Milliseconds\",\"type\":\"long\",\"docstring\":\"\"},{\"name\":\"ActivityEndI\
  nTicks\",\"type\":\"long\",\"docstring\":\"\"},{\"name\":\"ActivityStartInTic\
  ks\",\"type\":\"long\",\"docstring\":\"\"},{\"name\":\"AdvancedServerTimestam\
  pUtc\",\"type\":\"datetime\",\"docstring\":\"\"},{\"name\":\"AltSecId\",\"type\
  \":\"string\",\"docstring\":\"\"},{\"name\":\"Attributes\",\"type\":\"dynamic\
  \",\"docstring\":\"\"},{\"name\":\"BranchName\",\"type\":\"string\",\"docstri\
  ng\":\"\"},{\"name\":\"BuildManifestId\",\"type\":\"string\",\"docstring\":\"\
  \"},{\"name\":\"BuildNumber\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\
  \"BuildNumberFull\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"BuildNu\
  mberMajorVersion\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"BuildNum\
  berMicroUpdate\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"BuildNum\
  berMinorVersion\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"BuildWork\
  loads\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ChannelId\",\"type\
  \":\"string\",\"docstring\":\"\"},{\"name\":\"ChannelManifestId\",\"type\":\"\
  string\",\"docstring\":\"\"},{\"name\":\"ClientTimestampUtc\",\"type\":\"date\
  time\",\"docstring\":\"\"},{\"name\":\"ClrVersion\",\"type\":\"string\",\"doc\
  string\":\"\"},{\"name\":\"CommandGuid\",\"type\":\"string\",\"docstring\":\"\
  \"},{\"name\":\"CommandName\",\"type\":\"string\",\"docstring\":\"\"},{\"name\
  \":\"CommandSource\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Comp\
  uterName\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"CpuArchitecture\
  \",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"CpuCount\",\"type\":\"\
  real\",\"docstring\":\"\"},{\"name\":\"CpuDataWidth\",\"type\":\"real\",\"doc\
  string\":\"\"},{\"name\":\"CpuDescription\",\"type\":\"string\",\"docstring\":\
  \"\"},{\"name\":\"CpuFamily\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\
  \"CpuFrequency\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"CpuModel\",\
  \"type\":\"real\",\"docstring\":\"\"},{\"name\":\"CpuStepping\",\"type\":\"re\
  al\",\"docstring\":\"\"},{\"name\":\"DataHandlingTags\",\"type\":\"string\",\
  \"docstring\":\"\"},{\"name\":\"DisplayColorDepth\",\"type\":\"real\",\"docst\
  ring\":\"\"},{\"name\":\"DisplayCount\",\"type\":\"real\",\"docstring\":\"\"}\
  ,{\"name\":\"DisplayDpi\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"D\
  isplayHighContrastEnabled\",\"type\":\"bool\",\"docstring\":\"\"},{\"name\":\
  \"DisplayHighContrastName\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"DisplayResolution\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"Displ\
  ayScalingFactor\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"DisplayVi\
  rtualXY\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"DisplayXY\",\"t\
  ype\":\"string\",\"docstring\":\"\"},{\"name\":\"ExeName\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"ExeVersion\",\"type\":\"string\",\"docstri\
  ng\":\"\"},{\"name\":\"ExtensionName\",\"type\":\"string\",\"docstring\":\"\"\
  },{\"name\":\"Extensions\",\"type\":\"dynamic\",\"docstring\":\"\"},{\"name\":\
  \"ExtensionTypeName\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Ext\
  ensionVersion\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"FeedbackS\
  essionId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Flags\",\"type\
  \":\"long\",\"docstring\":\"\"},{\"name\":\"GeoCity\",\"type\":\"string\",\"d\
  ocstring\":\"\"},{\"name\":\"GeoCountryRegionIso\",\"type\":\"string\",\"docs\
  tring\":\"\"},{\"name\":\"HardDriveFreeVolumeSize\",\"type\":\"real\",\"docst\
  ring\":\"\"},{\"name\":\"HardDriveOsMediaType\",\"type\":\"string\",\"docstri\
  ng\":\"\"},{\"name\":\"HardDriveProductFileSystemType\",\"type\":\"string\",\
  \"docstring\":\"\"},{\"name\":\"HardDriveProductMediaType\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"HardDriveTotalSize\",\"type\":\"real\",\"d\
  ocstring\":\"\"},{\"name\":\"HardDriveTotalVolumeSize\",\"type\":\"real\",\"d\
  ocstring\":\"\"},{\"name\":\"IdentityProvider\",\"type\":\"string\",\"docstri\
  ng\":\"\"},{\"name\":\"IdSubject\",\"type\":\"string\",\"docstring\":\"\"},{\
  \"name\":\"InLowImpactMode\",\"type\":\"string\",\"docstring\":\"\"},{\"name\
  \":\"IsInternal\",\"type\":\"bool\",\"docstring\":\"\"},{\"name\":\"IsOptedIn\
  \",\"type\":\"bool\",\"docstring\":\"\"},{\"name\":\"LastSolutionBuildId\",\"\
  type\":\"string\",\"docstring\":\"\"},{\"name\":\"Locale\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"LocaleCode\",\"type\":\"string\",\"docstri\
  ng\":\"\"},{\"name\":\"MacAddressHash\",\"type\":\"string\",\"docstring\":\"\
  \"},{\"name\":\"MachineId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"ManifestId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Measures\",\
  \"type\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"MicroUpdateVersion\",\"t\
  ype\":\"string\",\"docstring\":\"\"},{\"name\":\"NovaProperties\",\"type\":\"\
  dynamic\",\"docstring\":\"\"},{\"name\":\"OID\",\"type\":\"string\",\"docstri\
  ng\":\"\"},{\"name\":\"Os\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"OsLocale\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"OsLocaleUser\
  \",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"OsLocaleUserUi\",\"type\
  \":\"string\",\"docstring\":\"\"},{\"name\":\"OsMajorVersion\",\"type\":\"real\
  \",\"docstring\":\"\"},{\"name\":\"OsMinorVersion\",\"type\":\"real\",\"docst\
  ring\":\"\"},{\"name\":\"OsServicePack\",\"type\":\"real\",\"docstring\":\"\"\
  },{\"name\":\"OsVersion\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"PackageGuid\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"PackageLo\
  adType\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"PersonalizationV\
  sId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Product\",\"type\":\
  \"string\",\"docstring\":\"\"},{\"name\":\"ProjectId\",\"type\":\"string\",\"\
  docstring\":\"\"},{\"name\":\"Properties\",\"type\":\"dynamic\",\"docstring\":\
  \"\"},{\"name\":\"PUID\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"\
  RamTotal\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"SequenceNumber\",\
  \"type\":\"int\",\"docstring\":\"\"},{\"name\":\"SessionId\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"Sku\",\"type\":\"string\",\"docstring\":\"\
  \"},{\"name\":\"SkuId\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"Sol\
  utionId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"SolutionSession\
  Id\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Tags\",\"type\":\"dy\
  namic\",\"docstring\":\"\"},{\"name\":\"TelemetryApiVersion\",\"type\":\"stri\
  ng\",\"docstring\":\"\"},{\"name\":\"TelemetryChannelUsed\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"TimeSinceSessionStart\",\"type\":\"long\",\
  \"docstring\":\"\"},{\"name\":\"UserAlias\",\"type\":\"string\",\"docstring\":\
  \"\"},{\"name\":\"UserDomainName\",\"type\":\"string\",\"docstring\":\"\"},{\
  \"name\":\"UserId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"UtcDe\
  viceClass\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"UtcDeviceLoca\
  lId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"UtcFlags\",\"type\":\
  \"string\",\"docstring\":\"\"},{\"name\":\"UtcGlobalDeviceId\",\"type\":\"str\
  ing\",\"docstring\":\"\"},{\"name\":\"VirtualMachineAzureImage\",\"type\":\"s\
  tring\",\"docstring\":\"\"},{\"name\":\"VsId\",\"type\":\"string\",\"docstring\
  \":\"\"},{\"name\":\"VsInstanceId\",\"type\":\"string\",\"docstring\":\"\"},{\
  \"name\":\"VsLocale\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Wor\
  kloadTags\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"CloudEnvironm\
  entId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"IsAzureCloudEnvir\
  onment\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ConnectedSession\
  Id\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"RemoteRepoURLInternal\
  \",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"RemoteSessionIds\",\"t\
  ype\":\"string\",\"docstring\":\"\"},{\"name\":\"SessionRole\",\"type\":\"str\
  ing\",\"docstring\":\"\"},{\"name\":\"DataModelActionType\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"DataModelCorrelationId\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"DataModelActionResult\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"Test1\",\"type\":\"string\",\"docstring\":\
  \"\"},{\"name\":\"Test2\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"Test3\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Test4\",\"type\
  \":\"string\",\"docstring\":\"\"},{\"name\":\"Test5\",\"type\":\"string\",\"d\
  ocstring\":\"\"},{\"name\":\"Test6\",\"type\":\"string\",\"docstring\":\"\"},{\
  \"name\":\"Test7\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Test8\
  \",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Test9\",\"type\":\"str\
  ing\",\"docstring\":\"\"}]},{\"entityType\":\"Table\",\"name\":\"KO_Log\",\"c\
  olumns\":[{\"name\":\"PreciseTimeStamp\",\"type\":\"datetime\",\"docstring\":\
  \"\"},{\"name\":\"AppName\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"AppInstance\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Level\",\
  \"type\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"Message\",\"type\":\"str\
  ing\",\"docstring\":\"\"},{\"name\":\"MachineName\",\"type\":\"string\",\"doc\
  string\":\"\"},{\"name\":\"AppVersion\",\"type\":\"string\",\"docstring\":\"\
  \"}]},{\"entityType\":\"Table\",\"name\":\"KO_StreamingQueryStatistic\",\"col\
  umns\":[{\"name\":\"AppInstance\",\"type\":\"string\",\"docstring\":\"\"},{\"\
  name\":\"ActivityId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Fun\
  ctionName\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"OutputTable\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"RepeatableQueryActorId\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"TimeSliceStartTime\",\"ty\
  pe\":\"datetime\",\"docstring\":\"\"},{\"name\":\"TimeSliceEndTime\",\"type\":\
  \"datetime\",\"docstring\":\"\"},{\"name\":\"StartedOn\",\"type\":\"datetime\
  \",\"docstring\":\"\"},{\"name\":\"ChunkId\",\"type\":\"long\",\"docstring\":\
  \"\"}]},{\"entityType\":\"Table\",\"name\":\"KO_RepeatableQueryStatistic\",\"\
  columns\":[{\"name\":\"AppInstance\",\"type\":\"string\",\"docstring\":\"\"},{\
  \"name\":\"ActorId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Quer\
  yString\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"OutputTable\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"StartedOn\",\"type\":\"da\
  tetime\",\"docstring\":\"\"},{\"name\":\"Duration\",\"type\":\"timespan\",\"d\
  ocstring\":\"\"},{\"name\":\"ExecutionAttempts\",\"type\":\"long\",\"docstring\
  \":\"\"},{\"name\":\"State\",\"type\":\"dynamic\",\"docstring\":\"\"},{\"name\
  \":\"CreatedExtents\",\"type\":\"dynamic\",\"docstring\":\"\"}]},{\"entityType\
  \":\"Table\",\"name\":\"BlessedAudit\",\"columns\":[{\"name\":\"EventName\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Owner\",\"type\":\"string\
  \",\"docstring\":\"\"}]},{\"entityType\":\"Table\",\"name\":\"RawEventsVSUncl\
  assifiedStaging\",\"columns\":[{\"name\":\"EventId\",\"type\":\"string\",\"do\
  cstring\":\"\"},{\"name\":\"EventName\",\"type\":\"string\",\"docstring\":\"\
  \"},{\"name\":\"ABExpFlights\",\"type\":\"string\",\"docstring\":\"\"},{\"name\
  \":\"ActiveProjectId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Ac\
  tivityCorrelationId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Act\
  ivityDurationInMilliseconds\",\"type\":\"long\",\"docstring\":\"\"},{\"name\":\
  \"ActivityEndInTicks\",\"type\":\"long\",\"docstring\":\"\"},{\"name\":\"Acti\
  vityStartInTicks\",\"type\":\"long\",\"docstring\":\"\"},{\"name\":\"Advanced\
  ServerTimestampUtc\",\"type\":\"datetime\",\"docstring\":\"\"},{\"name\":\"Al\
  tSecId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Attributes\",\"t\
  ype\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"BranchName\",\"type\":\"str\
  ing\",\"docstring\":\"\"},{\"name\":\"BuildManifestId\",\"type\":\"string\",\
  \"docstring\":\"\"},{\"name\":\"BuildNumber\",\"type\":\"real\",\"docstring\":\
  \"\"},{\"name\":\"BuildNumberFull\",\"type\":\"real\",\"docstring\":\"\"},{\"\
  name\":\"BuildNumberMajorVersion\",\"type\":\"real\",\"docstring\":\"\"},{\"n\
  ame\":\"BuildNumberMicroUpdate\",\"type\":\"string\",\"docstring\":\"\"},{\"n\
  ame\":\"BuildNumberMinorVersion\",\"type\":\"real\",\"docstring\":\"\"},{\"na\
  me\":\"BuildWorkloads\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"C\
  hannelId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ChannelManifes\
  tId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ClientTimestampUtc\
  \",\"type\":\"datetime\",\"docstring\":\"\"},{\"name\":\"ClrVersion\",\"type\
  \":\"string\",\"docstring\":\"\"},{\"name\":\"CommandGuid\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"CommandName\",\"type\":\"string\",\"docstr\
  ing\":\"\"},{\"name\":\"CommandSource\",\"type\":\"string\",\"docstring\":\"\
  \"},{\"name\":\"ComputerName\",\"type\":\"string\",\"docstring\":\"\"},{\"name\
  \":\"CpuArchitecture\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Cp\
  uCount\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"CpuDataWidth\",\"t\
  ype\":\"real\",\"docstring\":\"\"},{\"name\":\"CpuDescription\",\"type\":\"st\
  ring\",\"docstring\":\"\"},{\"name\":\"CpuFamily\",\"type\":\"real\",\"docstr\
  ing\":\"\"},{\"name\":\"CpuFrequency\",\"type\":\"real\",\"docstring\":\"\"},{\
  \"name\":\"CpuModel\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"CpuSt\
  epping\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"DataHandling\",\"t\
  ype\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"DataHandlingTags\",\"type\":\
  \"string\",\"docstring\":\"\"},{\"name\":\"DisplayColorDepth\",\"type\":\"real\
  \",\"docstring\":\"\"},{\"name\":\"DisplayCount\",\"type\":\"real\",\"docstri\
  ng\":\"\"},{\"name\":\"DisplayDpi\",\"type\":\"real\",\"docstring\":\"\"},{\"\
  name\":\"DisplayHighContrastEnabled\",\"type\":\"bool\",\"docstring\":\"\"},{\
  \"name\":\"DisplayHighContrastName\",\"type\":\"string\",\"docstring\":\"\"},{\
  \"name\":\"DisplayResolution\",\"type\":\"real\",\"docstring\":\"\"},{\"name\
  \":\"DisplayScalingFactor\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\
  \"DisplayVirtualXY\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Disp\
  layXY\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ExeName\",\"type\
  \":\"string\",\"docstring\":\"\"},{\"name\":\"ExeVersion\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"ExtensionName\",\"type\":\"string\",\"docs\
  tring\":\"\"},{\"name\":\"Extensions\",\"type\":\"dynamic\",\"docstring\":\"\
  \"},{\"name\":\"ExtensionTypeName\",\"type\":\"string\",\"docstring\":\"\"},{\
  \"name\":\"ExtensionVersion\",\"type\":\"string\",\"docstring\":\"\"},{\"name\
  \":\"FeedbackSessionId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"\
  Flags\",\"type\":\"long\",\"docstring\":\"\"},{\"name\":\"GeoCity\",\"type\":\
  \"string\",\"docstring\":\"\"},{\"name\":\"GeoCountryRegionIso\",\"type\":\"s\
  tring\",\"docstring\":\"\"},{\"name\":\"HardDriveFreeVolumeSize\",\"type\":\"\
  real\",\"docstring\":\"\"},{\"name\":\"HardDriveOsMediaType\",\"type\":\"stri\
  ng\",\"docstring\":\"\"},{\"name\":\"HardDriveProductFileSystemType\",\"type\
  \":\"string\",\"docstring\":\"\"},{\"name\":\"HardDriveProductMediaType\",\"t\
  ype\":\"string\",\"docstring\":\"\"},{\"name\":\"HardDriveTotalSize\",\"type\
  \":\"real\",\"docstring\":\"\"},{\"name\":\"HardDriveTotalVolumeSize\",\"type\
  \":\"real\",\"docstring\":\"\"},{\"name\":\"IdentityProvider\",\"type\":\"str\
  ing\",\"docstring\":\"\"},{\"name\":\"IdSubject\",\"type\":\"string\",\"docst\
  ring\":\"\"},{\"name\":\"InLowImpactMode\",\"type\":\"string\",\"docstring\":\
  \"\"},{\"name\":\"IsInternal\",\"type\":\"bool\",\"docstring\":\"\"},{\"name\
  \":\"IsOptedIn\",\"type\":\"bool\",\"docstring\":\"\"},{\"name\":\"LastSoluti\
  onBuildId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Locale\",\"ty\
  pe\":\"string\",\"docstring\":\"\"},{\"name\":\"LocaleCode\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"MacAddressHash\",\"type\":\"string\",\"doc\
  string\":\"\"},{\"name\":\"MachineId\",\"type\":\"string\",\"docstring\":\"\"\
  },{\"name\":\"ManifestId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"Measures\",\"type\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"MicroUpdate\
  Version\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"NovaProperties\
  \",\"type\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"OID\",\"type\":\"stri\
  ng\",\"docstring\":\"\"},{\"name\":\"Os\",\"type\":\"string\",\"docstring\":\"\
  \"},{\"name\":\"OsLocale\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"OsLocaleUser\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"OsLocale\
  UserUi\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"OsMajorVersion\",\
  \"type\":\"real\",\"docstring\":\"\"},{\"name\":\"OsMinorVersion\",\"type\":\
  \"real\",\"docstring\":\"\"},{\"name\":\"OsServicePack\",\"type\":\"real\",\"\
  docstring\":\"\"},{\"name\":\"OsVersion\",\"type\":\"string\",\"docstring\":\"\
  \"},{\"name\":\"PackageGuid\",\"type\":\"string\",\"docstring\":\"\"},{\"name\
  \":\"PackageLoadType\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Pe\
  rsonalizationVsId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Produ\
  ct\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ProjectId\",\"type\":\
  \"string\",\"docstring\":\"\"},{\"name\":\"Properties\",\"type\":\"dynamic\",\
  \"docstring\":\"\"},{\"name\":\"PUID\",\"type\":\"string\",\"docstring\":\"\"\
  },{\"name\":\"RamTotal\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"Se\
  quenceNumber\",\"type\":\"int\",\"docstring\":\"\"},{\"name\":\"SessionId\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Sku\",\"type\":\"string\",\
  \"docstring\":\"\"},{\"name\":\"SkuId\",\"type\":\"real\",\"docstring\":\"\"}\
  ,{\"name\":\"SolutionId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"SolutionSessionId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Tags\
  \",\"type\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"TelemetryApiVersion\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"TelemetryChannelUsed\",\"\
  type\":\"string\",\"docstring\":\"\"},{\"name\":\"TimeSinceSessionStart\",\"t\
  ype\":\"long\",\"docstring\":\"\"},{\"name\":\"UserAlias\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"UserDomainName\",\"type\":\"string\",\"doc\
  string\":\"\"},{\"name\":\"UserId\",\"type\":\"string\",\"docstring\":\"\"},{\
  \"name\":\"UtcDeviceClass\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"UtcDeviceLocalId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"UtcF\
  lags\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"UtcGlobalDeviceId\
  \",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"VirtualMachineAzureIma\
  ge\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"VsId\",\"type\":\"st\
  ring\",\"docstring\":\"\"},{\"name\":\"VsInstanceId\",\"type\":\"string\",\"d\
  ocstring\":\"\"},{\"name\":\"VsLocale\",\"type\":\"string\",\"docstring\":\"\
  \"},{\"name\":\"WorkloadTags\",\"type\":\"string\",\"docstring\":\"\"},{\"name\
  \":\"SessionRole\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Connec\
  tedSessionId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"RemoteSess\
  ionIds\",\"type\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"CloudEnvironmen\
  tId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"IsAzureCloudEnviron\
  ment\",\"type\":\"bool\",\"docstring\":\"\"},{\"name\":\"RemoteRepoURLInternal\
  \",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"DataModelActionType\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"DataModelCorrelationId\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"DataModelActionResult\",\
  \"type\":\"string\",\"docstring\":\"\"}]},{\"entityType\":\"Table\",\"name\":\
  \"RawEventsVS_DataModelTest\",\"columns\":[{\"name\":\"EventId\",\"type\":\"s\
  tring\",\"docstring\":\"\"},{\"name\":\"EventName\",\"type\":\"string\",\"doc\
  string\":\"\"},{\"name\":\"ABExpFlights\",\"type\":\"string\",\"docstring\":\"\
  \"},{\"name\":\"ActiveProjectId\",\"type\":\"string\",\"docstring\":\"\"},{\"\
  name\":\"ActivityCorrelationId\",\"type\":\"string\",\"docstring\":\"\"},{\"n\
  ame\":\"ActivityDurationInMilliseconds\",\"type\":\"long\",\"docstring\":\"\"\
  },{\"name\":\"ActivityEndInTicks\",\"type\":\"long\",\"docstring\":\"\"},{\"n\
  ame\":\"ActivityStartInTicks\",\"type\":\"long\",\"docstring\":\"\"},{\"name\
  \":\"AdvancedServerTimestampUtc\",\"type\":\"datetime\",\"docstring\":\"\"},{\
  \"name\":\"AltSecId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Att\
  ributes\",\"type\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"BranchName\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"BuildManifestId\",\"type\
  \":\"string\",\"docstring\":\"\"},{\"name\":\"BuildNumber\",\"type\":\"real\",\
  \"docstring\":\"\"},{\"name\":\"BuildNumberFull\",\"type\":\"real\",\"docstri\
  ng\":\"\"},{\"name\":\"BuildNumberMajorVersion\",\"type\":\"real\",\"docstring\
  \":\"\"},{\"name\":\"BuildNumberMicroUpdate\",\"type\":\"string\",\"docstring\
  \":\"\"},{\"name\":\"BuildNumberMinorVersion\",\"type\":\"real\",\"docstring\
  \":\"\"},{\"name\":\"BuildWorkloads\",\"type\":\"string\",\"docstring\":\"\"}\
  ,{\"name\":\"ChannelId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"\
  ChannelManifestId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Clien\
  tTimestampUtc\",\"type\":\"datetime\",\"docstring\":\"\"},{\"name\":\"ClrVers\
  ion\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"CommandGuid\",\"type\
  \":\"string\",\"docstring\":\"\"},{\"name\":\"CommandName\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"CommandSource\",\"type\":\"string\",\"docs\
  tring\":\"\"},{\"name\":\"ComputerName\",\"type\":\"string\",\"docstring\":\"\
  \"},{\"name\":\"CpuArchitecture\",\"type\":\"string\",\"docstring\":\"\"},{\"\
  name\":\"CpuCount\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"CpuData\
  Width\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"CpuDescription\",\"\
  type\":\"string\",\"docstring\":\"\"},{\"name\":\"CpuFamily\",\"type\":\"real\
  \",\"docstring\":\"\"},{\"name\":\"CpuFrequency\",\"type\":\"real\",\"docstri\
  ng\":\"\"},{\"name\":\"CpuModel\",\"type\":\"real\",\"docstring\":\"\"},{\"na\
  me\":\"CpuStepping\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"DataHa\
  ndlingTags\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"DisplayColor\
  Depth\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"DisplayCount\",\"ty\
  pe\":\"real\",\"docstring\":\"\"},{\"name\":\"DisplayDpi\",\"type\":\"real\",\
  \"docstring\":\"\"},{\"name\":\"DisplayHighContrastEnabled\",\"type\":\"bool\
  \",\"docstring\":\"\"},{\"name\":\"DisplayHighContrastName\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"DisplayResolution\",\"type\":\"real\",\"do\
  cstring\":\"\"},{\"name\":\"DisplayScalingFactor\",\"type\":\"real\",\"docstr\
  ing\":\"\"},{\"name\":\"DisplayVirtualXY\",\"type\":\"string\",\"docstring\":\
  \"\"},{\"name\":\"DisplayXY\",\"type\":\"string\",\"docstring\":\"\"},{\"name\
  \":\"ExeName\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ExeVersion\
  \",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ExtensionName\",\"type\
  \":\"string\",\"docstring\":\"\"},{\"name\":\"Extensions\",\"type\":\"dynamic\
  \",\"docstring\":\"\"},{\"name\":\"ExtensionTypeName\",\"type\":\"string\",\"\
  docstring\":\"\"},{\"name\":\"ExtensionVersion\",\"type\":\"string\",\"docstr\
  ing\":\"\"},{\"name\":\"FeedbackSessionId\",\"type\":\"string\",\"docstring\":\
  \"\"},{\"name\":\"Flags\",\"type\":\"long\",\"docstring\":\"\"},{\"name\":\"G\
  eoCity\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"GeoCountryRegion\
  Iso\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"HardDriveFreeVolume\
  Size\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"HardDriveOsMediaType\
  \",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"HardDriveProductFileSy\
  stemType\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"HardDriveProdu\
  ctMediaType\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"HardDriveTo\
  talSize\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"HardDriveTotalVol\
  umeSize\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"IdentityProvider\
  \",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"IdSubject\",\"type\":\
  \"string\",\"docstring\":\"\"},{\"name\":\"InLowImpactMode\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"IsInternal\",\"type\":\"bool\",\"docstring\
  \":\"\"},{\"name\":\"IsOptedIn\",\"type\":\"bool\",\"docstring\":\"\"},{\"name\
  \":\"LastSolutionBuildId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"Locale\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"LocaleCode\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"MacAddressHash\",\"type\":\
  \"string\",\"docstring\":\"\"},{\"name\":\"MachineId\",\"type\":\"string\",\"\
  docstring\":\"\"},{\"name\":\"ManifestId\",\"type\":\"string\",\"docstring\":\
  \"\"},{\"name\":\"Measures\",\"type\":\"dynamic\",\"docstring\":\"\"},{\"name\
  \":\"MicroUpdateVersion\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"NovaProperties\",\"type\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"OID\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Os\",\"type\":\"string\",\
  \"docstring\":\"\"},{\"name\":\"OsLocale\",\"type\":\"string\",\"docstring\":\
  \"\"},{\"name\":\"OsLocaleUser\",\"type\":\"string\",\"docstring\":\"\"},{\"n\
  ame\":\"OsLocaleUserUi\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"\
  OsMajorVersion\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"OsMinorVer\
  sion\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"OsServicePack\",\"ty\
  pe\":\"real\",\"docstring\":\"\"},{\"name\":\"OsVersion\",\"type\":\"string\",\
  \"docstring\":\"\"},{\"name\":\"PackageGuid\",\"type\":\"string\",\"docstring\
  \":\"\"},{\"name\":\"PackageLoadType\",\"type\":\"string\",\"docstring\":\"\"\
  },{\"name\":\"PersonalizationVsId\",\"type\":\"string\",\"docstring\":\"\"},{\
  \"name\":\"Product\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Proj\
  ectId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Properties\",\"ty\
  pe\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"PUID\",\"type\":\"string\",\
  \"docstring\":\"\"},{\"name\":\"RamTotal\",\"type\":\"real\",\"docstring\":\"\
  \"},{\"name\":\"SequenceNumber\",\"type\":\"int\",\"docstring\":\"\"},{\"name\
  \":\"SessionId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Sku\",\"\
  type\":\"string\",\"docstring\":\"\"},{\"name\":\"SkuId\",\"type\":\"real\",\
  \"docstring\":\"\"},{\"name\":\"SolutionId\",\"type\":\"string\",\"docstring\
  \":\"\"},{\"name\":\"SolutionSessionId\",\"type\":\"string\",\"docstring\":\"\
  \"},{\"name\":\"Tags\",\"type\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"T\
  elemetryApiVersion\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Tele\
  metryChannelUsed\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"TimeSi\
  nceSessionStart\",\"type\":\"long\",\"docstring\":\"\"},{\"name\":\"UserAlias\
  \",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"UserDomainName\",\"type\
  \":\"string\",\"docstring\":\"\"},{\"name\":\"UserId\",\"type\":\"string\",\"\
  docstring\":\"\"},{\"name\":\"UtcDeviceClass\",\"type\":\"string\",\"docstring\
  \":\"\"},{\"name\":\"UtcDeviceLocalId\",\"type\":\"string\",\"docstring\":\"\
  \"},{\"name\":\"UtcFlags\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"UtcGlobalDeviceId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Vir\
  tualMachineAzureImage\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"V\
  sId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"VsInstanceId\",\"ty\
  pe\":\"string\",\"docstring\":\"\"},{\"name\":\"VsLocale\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"WorkloadTags\",\"type\":\"string\",\"docst\
  ring\":\"\"},{\"name\":\"SessionRole\",\"type\":\"string\",\"docstring\":\"\"\
  },{\"name\":\"ConnectedSessionId\",\"type\":\"string\",\"docstring\":\"\"},{\
  \"name\":\"RemoteSessionIds\",\"type\":\"dynamic\",\"docstring\":\"\"},{\"name\
  \":\"CloudEnvironmentId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"IsAzureCloudEnvironment\",\"type\":\"bool\",\"docstring\":\"\"},{\"name\":\
  \"RemoteRepoURLInternal\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"DataModelActionType\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"D\
  ataModelCorrelationId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"D\
  ataModelActionResult\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"vs\
  _core_is64bitprocess\",\"type\":\"bool\",\"docstring\":\"\"}]}],\"functions\"\
  :[{\"name\":\"RawEventsVSBlessedIngestion\",\"body\":\"{\\r\\n// Alter this
  function via source control:\\r\\n//
  DSI-Curation/EngineeringSystems/KustoFunctions/AdminScripts/RawEventsVSBlesse\
  dIngestion.csl\\r\\n//\\r\\n// this script controls kusto ingestion of
  \\\"Blessed\\\" VS Raw Events to Kusto Blessed Table\\r\\n// wiki:
  https://wiki.vsdata.io/kusto_blessed\\r\\n// execute on
  ddtelvsraw\\r\\n    RawEventsVS\\r\\n    | where EventName in
  (\\r\\n    //manishj\\r\\n      \\\"vs/ide/vbcs/liveunittesting/start-lut\\\"          \
  \\r\\n    , \\\"vs/ide/vbcs/liveunittesting/stop-lut\\\"          \\r\\n    ,
  \\\"vs/ide/vbcs/liveunittesting/pause-lut\\\"          \\r\\n    ,
  \\\"vs/ide/vbcs/liveunittesting/continue-lut\\\"\\r\\n    //bertaygu\\r\\n    \
  , \\\"vs/ide/performancecenter/extensiontagged\\\"          \\r\\n    ,
  \\\"vs/ide/performancecenter/notification/show-notification\\\"          \\r\
  \\n    ,
  \\\"vs/ide/performancecenter/toolwindownotification\\\"          \\r\\n    ,
  \\\"vs/ide/performancecenter/notification/close-notification\\\"          \\r\
  \\n    ,
  \\\"vs/ide/performancecenter/extensionnotification\\\"          \\r\\n    ,
  \\\"vs/ide/performancecenter/notification/handle-notification\\\"          \\r\
  \\n    , \\\"vs/ide/performancecenter/dialog/open\\\"          \\r\\n    ,
  \\\"vs/ide/performancecenter/toolwindow/overridestartup\\\"          \\r\\n    \
  , \\\"vs/ide/performancecenter/extensionaction\\\"          \\r\\n    ,
  \\\"vs/ide/performancecenter/typingextensionnotification\\\"          \\r\\n    \
  , \\\"vs/core/packagecostsummary/startup\\\"          \\r\\n    ,
  \\\"vs/core/packagecostsummary/startuptoolwindows\\\"          \\r\\n    ,
  \\\"vs/core/packagecostsummary/modalsolutionload\\\"          \\r\\n    ,
  \\\"vs/core/packagecostsummary/modalsolutionloadtoolwindows\\\"          \\r\
  \\n    ,
  \\\"vs/core/packagecostsummary/solutionload\\\"\\r\\n    //rsarwar\\r\\n    ,
  \\\"vs/vc/fasterprojectload\\\"\\r\\n    //olgaark\\r\\n    ,\\\"vs/vc/faster\
  projectload\\\"\\r\\n    //wibu,
  lucappa\\r\\n    ,\\\"vs/vc/project/cmake/project/workspace\\\"          \\r\
  \\n    ,\\\"vs/vc/project/cmake/project/scancounts\\\"          \\r\\n    ,\\\
  \"vs/vc/project/cmake/project/remotedebug\\\"          \\r\\n    ,\\\"vs/vc/p\
  roject/cmake/project/parse/target\\\"          \\r\\n    ,\\\"vs/vc/project/c\
  make/project/parse\\\"          \\r\\n    ,\\\"vs/vc/project/cmake/project/de\
  bug\\\"          \\r\\n    ,\\\"vs/vc/project/cmake/project/cancel\\\"          \
  \\r\\n    ,\\\"vs/vc/project/cmake/project/build\\\"\\r\\n    ,\\\"vs/vc/ide/\
  codestore\\\"\\r\\n    //olegkhar\\r\\n    ,\\\"vs/vc/ide/command/parsesln\\\"\
  \\r\\n    ,\\\"vs/vc/ide/command/openfile\\\"\\r\\n    ,\\\"vs/vc/project/cma\
  ke/azuresphere/open\\\"\\r\\n    ,\\\"vs/vc/project/cmake/azuresphere/build\\\
  \"\\r\\n    ,\\\"vs/vc/project/cmake/azuresphere/deploy\\\"\\r\\n    ,\\\"vs/\
  vc/project/cmake/azuresphere/debug\\\"\\r\\n    ,\\\"vs/vc/azuresphere/open\\\
  \"\\r\\n    ,\\\"vs/vc/azuresphere/build\\\"\\r\\n    ,\\\"vs/vc/azuresphere/\
  deploy\\\"\\r\\n    ,\\\"vs/vc/azuresphere/debug\\\"\\r\\n    ,\\\"vs/vc/linu\
  x/project/devcontainers/createcontainer\\\"\\r\\n    ,\\\"vs/vc/linux/project\
  /devcontainers/infobar\\\"\\r\\n    ,\\\"vs/vc/project/linux/devcontainers/op\
  tions\\\"\\r\\n    ,\\\"vs/vc/linux/project/devcontainers/installcli\\\"\\r\\\
  n    //mgoodner\\r\\n    ,\\\"vs/vc/solution/references\\\"\\r\\n    // mike
  morton                            \\r\\n    ,\\\"vs/azuretools/servicefabric/\
  publish\\\"                              \\r\\n    ,\\\"vs/azuretools/service\
  fabric/publishfailure\\\"\\r\\n    ,\\\"vs/azuretools/servicefabric/createsfc\
  luster\\\"\\r\\n    //mikemort, Date: 07/26/2018, Entries made by:
  sumabh\\r\\n    ,'vs/azuretools/sfapptools/createapplicationproject'   \\r\\n\
  \\t//mikemort, Date: 09/25/2018, entries made by:
  sumabh\\r\\n\\t,'vs/azuretools/servicefabric/serviceprojectcreation'\\r\\n\\t\
  // luca cappa 2019/2/22 by
  mattev\\r\\n\\t,'vs/vc/project/cmake/project/cmakesettingseditor'\\t\\r\\n\\t\
  // Sam Freed 2019/3/27 by
  mattev\\r\\n\\t,'vs/vc/project/cmake/project/unsupported'\\r\\n\\t,'vs/vc/pro\
  ject/cmake/project/deployinfobaraction'\\r\\n\\t,'vs/vc/project/cmake/project\
  /deploystatus'\\r\\n    // ersweet
  2019/10/17\\r\\n  ,'vs/vc/project/linux/linuxrsyncfailure'\\r\\n  ,'vs/vc/pro\
  ject/cmake/project/rsyncfailed'\\r\\n  // Andy Sterland
  2020/11/2\\r\\n  ,'vs/diagnostics/debugger/breakpoints/advancedsettings/actio\
  ns/logmessage'\\r\\n  ,'vs/diagnostics/debugger/tracepointexperiment/activate\
  suggestion'\\r\\n  ,'vs/diagnostics/debugger/tracepointexperiment/showlightbu\
  lb'\\r\\n    //bemcmorr\\r\\n    ,'vs/vc/linux/project/sshconnection'\\r\\n    \
  // Mark Downie
  2020/11/25\\r\\n    ,'vs/diagnostics/debugger/coredumpsummarypage/show'\\r\\n    \
  ,'vs/diagnostics/diagnostictools/diagnosticanalysis/close-decompilationwarnin\
  g'\\r\\n    ,'vs/diagnostics/diagnostictools/diagnosticanalysis/run-analysis'\
  \\r\\n    ,'vs/diagnostics/diagnostictools/diagnosticanalysis/finish-analysis'\
  \\r\\n    ,'vs/diagnostics/diagnostictools/diagnosticanalysis/select-analysis\
  result'\\r\\n    ,'vs/diagnostics/diagnostictools/diagnosticanalysis/show-ana\
  lysisresultcallstack'\\r\\n    ,'vs/diagnostics/diagnostictools/diagnosticana\
  lysis/show-analysisresultcallstack-error'\\r\\n    // Christian Gunderman -
  2021/3/18\\r\\n\\t,'vs/ide/search/completed'\\r\\n\\t,'vs/ide/search/extensio\
  n/fault'\\r\\n\\t,'vs/ide/search/command/querystatusoverthreshold'\\r\\n\\t,'\
  vs/ide/search/index/create/fault'\\r\\n\\t,'vs/ide/search/mru/fault'\\r\\n\\t\
  ,'vs/ide/search/index/lookup/fault'\\r\\n\\t,'vs/ide/search/mrq/fault'\\r\\n\
  \\t,'vs/ide/search/telemetryproperties/fault'\\r\\n\\t,'vs/ide/search/solutio\
  noptions/fault'\\r\\n\\t,'vs/ide/search/telemetryprocessing/fault'\\r\\n    ,\
  'vs/ide/search/index/load/fault'\\r\\n    //sinem akinci -
  2022/03/07\\r\\n    ,'vs/vc/project/cmake/project/parse/start'\\r\\n    //
  Mark Downie
  2022/11/16\\r\\n\\t,'vs/diagnostics/diagnostictools/diagnosticanalysis/start-\
  diagnosticanalysis'\\r\\n\\t,'vs/diagnostics/diagnostictools/diagnosticanalys\
  is/stop-diagnosticanalysis'\\r\\n\\t,'vs/diagnostics/diagnostictools/diagnost\
  icanalysis/select-analysisresult'\\r\\n\\t,'vs/diagnostics/diagnostictools/di\
  agnosticanalysis/linkclicked'\\r\\n    )\\r\\n}\",\"inputParameters\":[]},{\"\
  name\":\"RawEventsVSVNextUpdate\",\"body\":\"{\\r\\ncluster(\\\"ddtelinsights\
  \\\").database(\\\"DDTelInsights\\\").VS_Release_Telemetry_Manifest  \\r\\n|
  where isnotempty(ReleaseDate)\\r\\n| where ReleaseDate < ago(7d)\\r\\n| where
  ReleaseScope contains \\\"Public\\\"\\r\\n| join (
  \\r\\n   cluster(\\\"ddtelinsights\\\").database(\\\"DDTelInsights\\\").VS_Re\
  lease_Telemetry_ChannelItems  \\r\\n   | extend ManifestID = ChannelManifestID
  \\r\\n   | where Type =~ \\\"channel\\\" and ChannelName contains
  \\\"Release\\\"  \\r\\n) on ManifestID  \\r\\n| order by ReleaseDate desc
  nulls first \\r\\n| project ManifestIdToSuppress=ManifestID \\r\\n| join kind
  = rightouter hint.remote=local (\\r\\nRawEventsVS\\r\\n| where not (ExeName ==
  \\\"devenv\\\" and ExeVersion startswith \\\"10\\\")\\r\\n| where not (ExeName
  == \\\"devenv\\\" and ExeVersion startswith \\\"11\\\")\\r\\n| where not
  (ExeName == \\\"devenv\\\" and ExeVersion startswith \\\"12\\\")\\r\\n| where
  not (ExeName == \\\"devenv\\\" and ExeVersion startswith \\\"14\\\")\\r\\n|
  where not (ExeName in (\\\"vsta_ls\\\", \\\"vsixautoupdate\\\",
  \\\"microsoft.vshub.server.httphost\\\", \\\"wdexpress\\\",
  \\\"vs_professional\\\", \\\"vwdexpress\\\", \\\"vshub\\\", \\\"blend\\\",
  \\\"vs_community\\\", \\\"vs_enterprise\\\") and ExeVersion startswith
  \\\"14\\\")\\r\\n| where not (ExeName contains \\\"vs14\\\")\\r\\n| where
  EventName !in ( \\\"vs/setupengine/package-operation\\\",
  \\\"vs/setupengine/channel-operation\\\",\\\"vs/setupengine/build-dependency-\
  graph\\\", \\\"vs/willow/query-product\\\", \\\"vs/willow/focus-window\\\"
  )\\r\\n) on $left.ManifestIdToSuppress == $right.ChannelManifestId  \\r\\n|
  where isempty(ManifestIdToSuppress)\\r\\n| project-away
  ManifestIdToSuppress\\r\\n}\",\"inputParameters\":[]},{\"name\":\"RawEventsVS\
  InternalUpdate\",\"body\":\"{\\r\\n    RawEventsVS\\r\\n    | where IsInternal
  == \\\"True\\\"
  \\r\\n}\",\"inputParameters\":[]},{\"name\":\"VS_Telemetry_Releases_Func\",\"\
  docstring\":\"VSReleases latest distinct records\",\"body\":\"{
  \\r\\n    cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").VS_T\
  elemetry_Releases    \\r\\n    | extend UpdateDate = iif(isempty(UpdateDate),
  datetime(1/1/1900), UpdateDate) \\r\\n    | summarize
  argmax(UpdateDate,\\r\\n        ChannelShortName,     \\r\\n        ChannelId\
  ,     \\r\\n        VsVersion,     \\r\\n        VsBranch,\\r\\n        Build\
  Date, \\r\\n        ReleaseDate,
  \\r\\n        ReleaseScope,   \\r\\n        WillowInstallerVersion,     \\r\\\
  n        ManifestVersion,     \\r\\n        ReleaseGroupLabel,     \\r\\n        \
  ReleaseName,\\t   \\r\\n        BuildNumberMajorVersion,     \\r\\n        Pr\
  oductMilestone,
  \\r\\n        ProductDisplayVersion,\\r\\n        ProductSemanticVersion,\\r\
  \\n        RoadmapWitId) by ChannelManifestId, ProductManifestId\\r\\n    |
  extend ChannelShortName = max_UpdateDate_ChannelShortName\\r\\n    | extend
  ChannelId = max_UpdateDate_ChannelId\\r\\n    | extend VsVersion =
  max_UpdateDate_VsVersion\\r\\n    | extend VsBranch =
  max_UpdateDate_VsBranch\\r\\n    | extend BuildDate =
  max_UpdateDate_BuildDate\\r\\n    | extend ReleaseDate =
  max_UpdateDate_ReleaseDate\\r\\n    | extend ReleaseScope =
  max_UpdateDate_ReleaseScope\\r\\n    | extend WillowInstallerVersion =
  max_UpdateDate_WillowInstallerVersion\\r\\n    | extend ManifestVersion =
  max_UpdateDate_ManifestVersion\\r\\n    | extend ReleaseGroupLabel =
  max_UpdateDate_ReleaseGroupLabel\\r\\n    | extend ReleaseName =
  max_UpdateDate_ReleaseName\\r\\n    | extend BuildNumberMajorVersion =
  max_UpdateDate_BuildNumberMajorVersion\\r\\n    | extend ProductMilestone =
  max_UpdateDate_ProductMilestone\\r\\n    | extend ProductDisplayVersion =
  max_UpdateDate_ProductDisplayVersion \\r\\n    | extend ProductSemanticVersion
  = max_UpdateDate_ProductSemanticVersion\\r\\n    | extend RoadmapWitId =
  max_UpdateDate_RoadmapWitId  \\r\\n    | extend UpdateDate =
  max_UpdateDate    \\r\\n    | project \\r\\n       ChannelManifestId,
  \\r\\n       ProductManifestId,
  \\r\\n       ChannelShortName,  \\r\\n       ChannelId,
  \\r\\n       VsVersion, \\r\\n       VsBranch, \\r\\n       BuildDate,
  \\r\\n       ReleaseDate, \\r\\n       ReleaseScope,
  \\r\\n       WillowInstallerVersion, \\r\\n       ManifestVersion,
  \\r\\n       ReleaseGroupLabel,
  \\r\\n       ReleaseName,\\t   \\r\\n       ProductDisplayVersion,\\r\\n       \
  BuildNumberMajorVersion,
  \\r\\n       ProductMilestone,\\r\\n       ProductSemanticVersion,\\r\\n       \
  UpdateDate,\\r\\n       RoadmapWitId\\r\\n
  }\",\"inputParameters\":[]},{\"name\":\"Setup100_BootstrapperOperationEvents\
  \",\"docstring\":\"Returns VS bootstrapper operation
  events.\",\"body\":\"{\\r\\n    cluster('Ddtelvsraw').database('VS').RawEvent\
  sVS\\r\\n    | where AdvancedServerTimestampUtc > startTime\\r\\n    | where
  IsInternal == false\\r\\n    | where EventName ==
  \\\"vs/setup/bootstrapper/app-run\\\"\\r\\n    | where
  tostring(Properties[\\\"reserved.datamodel.action.type\\\"]) ==
  \\\"End\\\"\\r\\n    | where
  Properties[\\\"context.default.vs.setup.bootstrapper.commandline.startuptype\\\
  \"] == operationName\\r\\n    | where
  Properties[\\\"context.default.vs.setup.bootstrapper.commandline.responsefile\
  .channelid\\\"] == channelId\\r\\n    | where
  tostring(Properties[\\\"reserved.datamodel.action.resultsummary\\\"]) != \\\"A
  second vs/setup/bootstrapper/app-run event was requested.\\\"\\r\\n    //
  Ignoring \\\"Exit code=1\\\" since the bootstrapper is waiting for CLI or
  Willow to complete and this is their error code.  CLI and Willow code are
  track separately in their respectively event.\\r\\n    | where
  tostring(Properties[\\\"vs.setup.bootstrapper.error\\\"]) != \\\"Exit
  code=1\\\"\\r\\n    | where GeoCountryRegionIso ==
  countryIso\\r\\n}\",\"inputParameters\":[{\"name\":\"channelId\",\"cslType\":\
  \"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\"country\
  Iso\",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\
  \"name\":\"operationName\",\"cslType\":\"string\",\"type\":\"System.String\",\
  \"docstring\":\"\"},{\"name\":\"startTime\",\"cslType\":\"datetime\",\"type\":\
  \"System.DateTime\",\"docstring\":\"\"}]},{\"name\":\"Setup100_BootstrapperOp\
  erationGoal\",\"docstring\":\"Returns VS bootstrapper operation success
  rate.\",\"body\":\"{\\r\\n    Setup100_BootstrapperOperationEvents(channelId,
  countryIso, operationName, now() - lookbackPeriod)\\r\\n    | where
  tostring(Properties[\\\"reserved.datamodel.action.result\\\"]) !=
  \\\"UserCancel\\\"\\r\\n    | where
  isempty(Properties[\\\"vs.setup.bootstrapper.blocktype\\\"])\\r\\n    // 1641
  is a machine is being rebooted case, so we are going to treat it as a
  success.\\r\\n    | summarize Total = dcount(MacAddressHash), Success =
  dcountif(MacAddressHash,
  tostring(Properties[\\\"reserved.datamodel.action.result\\\"]) ==
  \\\"Success\\\" and tostring(Properties[\\\"vs.setup.bootstrapper.error\\\"])
  != \\\"Exit code=1641\\\")\\r\\n    | extend Result = iif(Total >=
  minEventCount, (Success * 100.0) / Total,
  100.0)\\r\\n}\",\"inputParameters\":[{\"name\":\"channelId\",\"cslType\":\"st\
  ring\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\"countryIso\
  \",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"n\
  ame\":\"operationName\",\"cslType\":\"string\",\"type\":\"System.String\",\"d\
  ocstring\":\"\"},{\"name\":\"minEventCount\",\"cslType\":\"int\",\"type\":\"S\
  ystem.Int32\",\"docstring\":\"\"},{\"name\":\"lookbackPeriod\",\"cslType\":\"\
  timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"}]},{\"name\":\"Set\
  up100_BootstrapperOperationGoalDetails\",\"docstring\":\"Returns VS
  bootstrapper failure
  details.\",\"body\":\"{\\r\\n    Setup100_BootstrapperOperationEvents(channel\
  Id, countryIso, operationName, now() - lookbackPeriod)\\r\\n    | where
  tostring(Properties[\\\"reserved.datamodel.action.result\\\"]) !=
  \\\"UserCancel\\\"\\r\\n    | where
  isempty(Properties[\\\"vs.setup.bootstrapper.blocktype\\\"])\\r\\n    | extend
  Error = tostring(Properties[\\\"vs.setup.bootstrapper.error\\\"])\\r\\n    |
  where Error != \\\"Exit code=1641\\\"\\r\\n    | where isempty(Error) !=
  true\\r\\n    | summarize hits = count(), dhits = dcount(MacAddressHash) by
  Error\\r\\n}\",\"inputParameters\":[{\"name\":\"channelId\",\"cslType\":\"str\
  ing\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\"countryIso\",\
  \"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\
  \":\"operationName\",\"cslType\":\"string\",\"type\":\"System.String\",\"docs\
  tring\":\"\"},{\"name\":\"minEventCount\",\"cslType\":\"int\",\"type\":\"Syst\
  em.Int32\",\"docstring\":\"\"},{\"name\":\"lookbackPeriod\",\"cslType\":\"tim\
  espan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"}]},{\"name\":\"Setup1\
  00_Failures\",\"docstring\":\"Return failures per
  release\",\"body\":\"{\\r\\nlet latestReleaseName =
  cluster(\\\"Ddtelvsraw\\\").database(\\\"LookupTables\\\").VS_Telemetry_Relea\
  ses_Func() \\r\\n                        | where ChannelId ==
  channelId\\r\\n                        | summarize by ManifestVersion,
  ProductDisplayVersion \\r\\n                        | top 1 by ManifestVersion
  desc\\r\\n                        | project ProductDisplayVersion;\\r\\nlet
  bugs =
  cluster(\\\"DDTelInsights\\\").database(\\\"Playground\\\").SetupErrorToBugMa\
  pping\\r\\n    | where isempty(Ignore) and isnotempty(IssueId)\\r\\n    |
  extend IssueId = toint(IssueId)\\r\\n    | summarize bugId = any(IssueId) by
  errorMessage = tolower(replace(\\\"\\\\\\\\s*\\\", \\\"\\\",
  ErrorMessage));\\r\\nlet events =
  cluster(\\\"DDTelInsights\\\").database(\\\"DDTelInsights\\\").SetupWillowIns\
  tallProductMerged\\r\\n    | where ReleaseScope contains
  \\\"public\\\"\\r\\n    | where EngineProductDisplayVersion ==
  iif(isempty(releaseName), toscalar(latestReleaseName), releaseName)\\r\\n    |
  where IsInternal == false\\r\\n    | where GeneralReportResult in
  (\\\"Success\\\",\\\"Failure\\\",\\\"MissingEnd\\\",\\\"Cancel\\\",\\\"Block\\\
  \",\\\"Warning\\\")\\r\\n    | project   InstallSessionId,
  \\r\\n                GeneralResult = GeneralReportResult,
  \\r\\n                FailedPackageIds,\\r\\n                ErrorMessage,
  \\r\\n                MacAddressHash;\\r\\nlet errors = events\\r\\n    |
  where GeneralResult in (\\\"Warning\\\", \\\"Failure\\\")\\r\\n;\\r\\nlet
  total = errors \\r\\n    | summarize totalMachines = dcount(MacAddressHash, 2)
  \\r\\n    | project key = 1, totalMachines;\\r\\nerrors\\r\\n    | parse
  ErrorMessage with GeneralException \\\": \\\" GeneralError \\\"\\\\n\\\"
  *\\r\\n    | parse ErrorMessage with
  \\\"Microsoft.VisualStudio.Setup.PackageFailureException: \\\" PackageError
  \\\"\\\\n\\\" *\\r\\n    | extend ReportErrorMessage =
  iif(isempty(PackageError), GeneralError, PackageError) \\r\\n    | extend
  ReportErrorMessage = iif(isempty(ReportErrorMessage), ErrorMessage,
  ReportErrorMessage) \\r\\n    | extend ReportException =
  iif(isempty(PackageError), GeneralException, \\\"PackageFailureException\\\")
  \\r\\n    | extend ReportException = iif(isempty(ReportException),
  \\\"Unknown\\\", ReportException) \\r\\n    | parse ReportErrorMessage with
  MessageToKeep \\\";\\\" *  // If there are multiple package report failures,
  take the first one\\r\\n    | extend ReportErrorMessage =
  iif(isempty(MessageToKeep), ReportErrorMessage, MessageToKeep)\\r\\n    |
  parse FailedPackageIds with \\\"[\\\"\\\"\\\" PackageIds \\\"\\\"\\\"]\\\"
  *  // If there are multiple package report failures, take the first
  one\\r\\n    | parse PackageIds with PackageId \\\",\\\" *  // If there are
  multiple package report failures, take the first one\\r\\n    | extend
  PackageId = trim(\\\"\\\\\\\"\\\", tostring(iif(isempty(PackageId) and
  PackageIds != \\\"\\\", PackageIds, PackageId)))\\r\\n    | extend
  ReportErrorMessage = iif(ReportErrorMessage contains 'Недостаточно места на
  диске.', 'There is not enough space on the
  disk.',\\r\\n                                iif(ReportErrorMessage contains
  '磁盘空间不足。', 'There is not enough space on the
  disk.',\\r\\n                                iif(ReportErrorMessage contains
  '디스크 공간이 부족합니다.', 'There is not enough space on the
  disk.',\\r\\n                                iif(ReportErrorMessage contains
  'Microsoft.VisualStudio.Setup.ChannelsLockedException', 'Exception of type
  \\\\'Microsoft.VisualStudio.Setup.ChannelsLockedException\\\\' was
  thrown.',\\r\\n                                iif(ReportException =~
  'System.NullReferenceException', 'Object reference not set to an instance of
  an object.',\\r\\n                                iif(ReportErrorMessage
  contains 'There is not enough space on the disk.', 'There is not enough space
  on the disk.', ReportErrorMessage))))))\\r\\n| join kind=leftouter
  \\r\\n    (cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").Dat\
  aModelFault\\r\\n        | where EventName ==
  \\\"vs/setupengine/packagefailure\\\"\\r\\n        | extend OperationType =
  tostring(Properties[\\\"vs.setupengine.operationtype\\\"])\\r\\n        |
  extend PackageId =
  tostring(Properties[\\\"vs.setupengine.packageid\\\"])\\r\\n        | extend
  SharedWillowInstallSessionId =
  tostring(Properties[\\\"context.default.vs.setupengine.sharedwillowinstallses\
  sionid\\\"])\\r\\n        | extend ResultSummary =
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam8\\\"])\\r\\n        \
  | extend ErrorCode_P7 =
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam7\\\"])\\r\\n        \
  | extend Operation_P6 = iif(ErrorCode_P7 == \\\"-2146889721\\\", \\\"Install -
  Win10SDK\\\",
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam6\\\"]))\\r\\n        \
  | extend PackageFailureMessage = strcat(PackageId, \\\"_\\\", ErrorCode_P7,
  \\\"_\\\", Operation_P6)\\r\\n        | join kind=leftouter (
  \\r\\n                                cluster(\\\"DDTelInsights\\\").database(\
  \\\"Playground\\\").SetupErrorRemapper \\r\\n                              )
  \\r\\n                              on $left.ErrorCode_P7 ==
  $right.FilterInSignature\\r\\n        | extend PackageFailureMessage =
  iif(isempty(Title), PackageFailureMessage, Title)\\r\\n        | where
  isnotempty(SharedWillowInstallSessionId)\\r\\n        | project PackageId,
  SharedWillowInstallSessionId, PackageFailureMessage, PackageErrorCode =
  ErrorCode_P7\\r\\n    ) on PackageId, $left.InstallSessionId ==
  $right.SharedWillowInstallSessionId\\r\\n| join kind=leftouter \\r\\n     (
  cluster('Ddtelvsraw').database('VS').RawEventsVS\\r\\n        | where
  EventName == \\\"vs/setupengine/packagefailure\\\"\\r\\n        | where
  IsInternal == false\\r\\n        | extend PackageId =
  tostring(Properties[\\\"vs.setupengine.packageid\\\"])\\r\\n        | extend
  SharedWillowInstallSessionId =
  tostring(Properties[\\\"context.default.vs.setupengine.sharedwillowinstallses\
  sionid\\\"])\\r\\n        | extend ResultSummary =
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam8\\\"])\\r\\n        \
  | extend ErrorCode_P7 =
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam7\\\"])\\r\\n        \
  | extend Operation_P6 = iif(ErrorCode_P7 == \\\"-2146889721\\\", \\\"Install -
  Win10SDK\\\",
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam6\\\"]))\\r\\n        \
  | extend PackageFailureMessage = strcat(PackageId, \\\"_\\\", ErrorCode_P7,
  \\\"_\\\", Operation_P6)\\r\\n        | join kind=leftouter (
  \\r\\n                                cluster(\\\"DDTelInsights\\\").database(\
  \\\"Playground\\\").SetupErrorRemapper \\r\\n                              )
  \\r\\n                              on $left.ErrorCode_P7 ==
  $right.FilterInSignature\\r\\n        | extend PackageFailureMessage =
  iif(isempty(Title), PackageFailureMessage, Title)\\r\\n        |
  project   rPackageId = PackageId,
  \\r\\n                    rSharedWillowInstallSessionId =
  SharedWillowInstallSessionId, \\r\\n                    rPackageFailureMessage
  = PackageFailureMessage,\\r\\n                    rPackageErrorCode =
  ErrorCode_P7\\r\\n     ) on $left.PackageId == $right.rPackageId,
  $left.InstallSessionId == $right.rSharedWillowInstallSessionId\\r\\n| extend
  ReportErrorMessage = iif(isnotempty(PackageFailureMessage),
  PackageFailureMessage,\\r\\n                                    iif(isnotempt\
  y(rPackageFailureMessage), rPackageFailureMessage, ReportErrorMessage))\\r\\n|
  extend ReportErrorCode = iif(isnotempty(PackageErrorCode),
  PackageErrorCode,\\r\\n                                    iif(isnotempty(rPa\
  ckageErrorCode), rPackageErrorCode, ReportErrorMessage))\\r\\n| summarize
  machineCount = dcount(MacAddressHash, 2) by errorMessage = ReportErrorMessage,
  operationResult = GeneralResult, exception = ReportException, errorCode =
  ReportErrorCode\\r\\n| extend errorMessageForJoin =
  tolower(replace(\\\"\\\\\\\\s*\\\", \\\"\\\", errorMessage))\\r\\n| where
  errorMessage != \\\"\\\"\\r\\n| extend key=1\\r\\n| join kind=inner total on
  key\\r\\n| extend percentageMachines = todouble(machineCount) / totalMachines
  * 100\\r\\n| join kind=leftouter bugs on $left.errorMessageForJoin ==
  $right.errorMessage\\r\\n| extend errorMessage = iif(errorMessage contains
  \\\"Underlying stream has closed\\\", \\\"The underlying stream has
  closed\\\", errorMessage)\\r\\n| extend errorCode = iif(errorCode contains
  \\\"Underlying stream has closed\\\", \\\"The underlying stream has
  closed\\\", errorCode)\\r\\n| project errorMessage, operationResult,
  exception, machineCount, round(percentageMachines,2), bugId, errorCode\\r\\n|
  order by percentageMachines
  desc\\r\\n}\",\"inputParameters\":[{\"name\":\"releaseName\",\"cslType\":\"st\
  ring\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\"channelId\",\
  \"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"}]},{\"na\
  me\":\"Setup100_Failures_IntPreview\",\"docstring\":\"Return failures per
  release\",\"body\":\"{\\r\\nlet bugs =
  cluster(\\\"DDTelInsights\\\").database(\\\"Playground\\\").SetupErrorToBugMa\
  pping\\r\\n    | where isempty(Ignore) and isnotempty(IssueId)\\r\\n    |
  extend IssueId = toint(IssueId)\\r\\n    | summarize bugId = any(IssueId) by
  errorMessage = tolower(replace(\\\"\\\\\\\\s*\\\", \\\"\\\",
  ErrorMessage));\\r\\nlet versions =
  cluster(\\\"Ddtelvsraw\\\").database(\\\"LookupTables\\\").VS_Telemetry_Relea\
  ses_Func()\\r\\n                        | where ProductDisplayVersion contains
  releaseName\\r\\n                        | distinct ManifestVersion;\\r\\nlet
  events =
  cluster(\\\"DDTelInsights\\\").database(\\\"DDTelInsights\\\").SetupWillowIns\
  tallProductMerged\\r\\n| where ChannelId ==
  \\\"VisualStudio.15.IntPreview\\\"\\r\\n| where AppVersion in (versions)
  \\r\\n    | where GeneralReportResult in
  (\\\"Success\\\",\\\"Failure\\\",\\\"MissingEnd\\\",\\\"Cancel\\\",\\\"Block\\\
  \",\\\"Warning\\\")\\r\\n    | project   InstallSessionId,
  \\r\\n                GeneralResult = GeneralReportResult,
  \\r\\n                FailedPackageIds,\\r\\n                ErrorMessage,
  \\r\\n                MacAddressHash;\\r\\nlet errors = events\\r\\n    |
  where GeneralResult in (\\\"Warning\\\", \\\"Failure\\\")\\r\\n;\\r\\nlet
  total = errors \\r\\n    | summarize totalMachines = dcount(MacAddressHash, 2)
  \\r\\n    | project key = 1, totalMachines;\\r\\nerrors\\r\\n    | parse
  ErrorMessage with GeneralException \\\": \\\" GeneralError \\\"\\\\n\\\"
  *\\r\\n    | parse ErrorMessage with
  \\\"Microsoft.VisualStudio.Setup.PackageFailureException: \\\" PackageError
  \\\"\\\\n\\\" *\\r\\n    | extend ReportErrorMessage =
  iif(isempty(PackageError), GeneralError, PackageError) \\r\\n    | extend
  ReportErrorMessage = iif(isempty(ReportErrorMessage), ErrorMessage,
  ReportErrorMessage) \\r\\n    | extend ReportException =
  iif(isempty(PackageError), GeneralException, \\\"PackageFailureException\\\")
  \\r\\n    | extend ReportException = iif(isempty(ReportException),
  \\\"Unknown\\\", ReportException) \\r\\n    | parse ReportErrorMessage with
  MessageToKeep \\\";\\\" *  // If there are multiple package report failures,
  take the first one\\r\\n    | extend ReportErrorMessage =
  iif(isempty(MessageToKeep), ReportErrorMessage, MessageToKeep)\\r\\n    |
  parse FailedPackageIds with \\\"[\\\"\\\"\\\" PackageIds \\\"\\\"\\\"]\\\"
  *  // If there are multiple package report failures, take the first
  one\\r\\n    | parse PackageIds with PackageId \\\",\\\" *  // If there are
  multiple package report failures, take the first one\\r\\n    | extend
  PackageId = trim(\\\"\\\\\\\"\\\", tostring(iif(isempty(PackageId) and
  PackageIds != \\\"\\\", PackageIds, PackageId)))\\r\\n    | extend
  ReportErrorMessage = iif(ReportErrorMessage contains 'Недостаточно места на
  диске.', 'There is not enough space on the
  disk.',\\r\\n                                iif(ReportErrorMessage contains
  '磁盘空间不足。', 'There is not enough space on the
  disk.',\\r\\n                                iif(ReportErrorMessage contains
  '디스크 공간이 부족합니다.', 'There is not enough space on the
  disk.',\\r\\n                                iif(ReportErrorMessage contains
  'Microsoft.VisualStudio.Setup.ChannelsLockedException', 'Exception of type
  \\\\'Microsoft.VisualStudio.Setup.ChannelsLockedException\\\\' was
  thrown.',\\r\\n                                iif(ReportException =~
  'System.NullReferenceException', 'Object reference not set to an instance of
  an object.',\\r\\n                                iif(ReportErrorMessage
  contains 'There is not enough space on the disk.', 'There is not enough space
  on the disk.', ReportErrorMessage))))))\\r\\n| join kind=leftouter
  \\r\\n    (cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").Dat\
  aModelFault\\r\\n        | where EventName ==
  \\\"vs/setupengine/packagefailure\\\"\\r\\n        | extend OperationType =
  tostring(Properties[\\\"vs.setupengine.operationtype\\\"])\\r\\n        |
  extend PackageId =
  tostring(Properties[\\\"vs.setupengine.packageid\\\"])\\r\\n        | extend
  SharedWillowInstallSessionId =
  tostring(Properties[\\\"context.default.vs.setupengine.sharedwillowinstallses\
  sionid\\\"])\\r\\n        | extend ResultSummary =
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam8\\\"])\\r\\n        \
  | extend ErrorCode_P7 =
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam7\\\"])\\r\\n        \
  | extend Operation_P6 = iif(ErrorCode_P7 == \\\"-2146889721\\\", \\\"Install -
  Win10SDK\\\",
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam6\\\"]))\\r\\n        \
  | extend PackageFailureMessage = strcat(PackageId, \\\"_\\\", ErrorCode_P7,
  \\\"_\\\", Operation_P6)\\r\\n        | where
  isnotempty(SharedWillowInstallSessionId)\\r\\n        | join kind=leftouter (
  \\r\\n                                cluster(\\\"DDTelInsights\\\").database(\
  \\\"Playground\\\").SetupErrorRemapper \\r\\n                              )
  \\r\\n                              on $left.ErrorCode_P7 ==
  $right.FilterInSignature\\r\\n        | extend PackageFailureMessage =
  iif(isempty(Title), PackageFailureMessage, Title)\\r\\n        | project
  PackageId, SharedWillowInstallSessionId, PackageFailureMessage,
  PackageErrorCode = ErrorCode_P7\\r\\n    ) on PackageId,
  $left.InstallSessionId == $right.SharedWillowInstallSessionId\\r\\n| join
  kind=leftouter \\r\\n     (
  cluster('Ddtelvsraw').database('VS').RawEventsVS\\r\\n        | where
  EventName == \\\"vs/setupengine/packagefailure\\\"\\r\\n        | extend
  PackageId =
  tostring(Properties[\\\"vs.setupengine.packageid\\\"])\\r\\n        | extend
  SharedWillowInstallSessionId =
  tostring(Properties[\\\"context.default.vs.setupengine.sharedwillowinstallses\
  sionid\\\"])\\r\\n        | extend ResultSummary =
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam8\\\"])\\r\\n        \
  | extend ErrorCode_P7 =
  tostring(Properties[\\\"Reserved.DataModel.Fault.BucketParam7\\\"])\\r\\n        \
  | extend Operation_P6 = iif(ErrorCode_P7 == \\\"-2146889721\\\", \\\"Install -
  Win10SDK\\\",
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam6\\\"]))\\r\\n        \
  | extend PackageFailureMessage = strcat(PackageId, \\\"_\\\", ErrorCode_P7,
  \\\"_\\\", Operation_P6)\\r\\n        | join kind=leftouter (
  \\r\\n                                cluster(\\\"DDTelInsights\\\").database(\
  \\\"Playground\\\").SetupErrorRemapper \\r\\n                              )
  \\r\\n                              on $left.ErrorCode_P7 ==
  $right.FilterInSignature\\r\\n        | extend PackageFailureMessage =
  iif(isempty(Title), PackageFailureMessage, Title)\\r\\n        |
  project   rPackageId = PackageId,
  \\r\\n                    rSharedWillowInstallSessionId =
  SharedWillowInstallSessionId, \\r\\n                    rPackageFailureMessage
  = PackageFailureMessage,\\r\\n                    rPackageErrorCode =
  ErrorCode_P7\\r\\n     ) on $left.PackageId == $right.rPackageId,
  $left.InstallSessionId == $right.rSharedWillowInstallSessionId\\r\\n| extend
  ReportErrorMessage = iif(isnotempty(PackageFailureMessage),
  PackageFailureMessage,\\r\\n                                    iif(isnotempt\
  y(rPackageFailureMessage), rPackageFailureMessage, ReportErrorMessage))\\r\\n|
  extend ReportErrorCode = iif(isnotempty(PackageErrorCode),
  PackageErrorCode,\\r\\n                                    iif(isnotempty(rPa\
  ckageErrorCode), rPackageErrorCode, ReportErrorMessage))\\r\\n| summarize
  machineCount = dcount(MacAddressHash, 2) by errorMessage = ReportErrorMessage,
  operationResult = GeneralResult, exception = ReportException, errorCode =
  ReportErrorCode\\r\\n| extend errorMessageForJoin =
  tolower(replace(\\\"\\\\\\\\s*\\\", \\\"\\\", errorMessage))\\r\\n| where
  errorMessage != \\\"\\\"\\r\\n| extend key=1\\r\\n| join kind=inner total on
  key\\r\\n| extend percentageMachines = todouble(machineCount) / totalMachines
  * 100\\r\\n| join kind=leftouter bugs on $left.errorMessageForJoin ==
  $right.errorMessage\\r\\n| extend errorCode = iif(errorCode contains
  \\\"Underlying stream has closed\\\", \\\"The underlying stream has
  closed\\\", errorCode)\\r\\n| project errorMessage, operationResult,
  exception, machineCount, round(percentageMachines,2), bugId, errorCode\\r\\n|
  order by percentageMachines
  desc\\r\\n}\",\"inputParameters\":[{\"name\":\"releaseName\",\"cslType\":\"st\
  ring\",\"type\":\"System.String\",\"docstring\":\"\"}]},{\"name\":\"Setup100_\
  Issues_stage\",\"docstring\":\"Return issues from last x
  days.\",\"body\":\"{\\r\\nlet GetSurveyConfigurationError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/get-surveyconfiguration-error\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | extend ErrorMessage = ExceptionMessageHash\\r\\n    | extend
  ErrorMessage = iif(ErrorMessage contains \\\"The underlying stream has
  closed\\\", \\\"The underlying stream has closed\\\",ErrorMessage) \\r\\n    |
  extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage = trim(\\\" \\\",ErrorMessage), Type =
  EventName;\\r\\nlet DeleteShotcutFailed =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/deleteshortcutfailed\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | extend ErrorMessage = FaultDescription\\r\\n    | extend
  MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage = trim(\\\" \\\",ErrorMessage), Type =
  EventName;\\r\\nlet UserDataWriteFailed =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/userdatawritefailed\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | parse ExceptionMessageHash with Error \\\", open\\\"
  *\\r\\n    | extend Error = iff(isempty(Error), ExceptionMessageHash,
  Error)\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | summarize Hits = count(), sHits =
  dcount(SessionId), dHits = dcount(MacAddressHash) by ErrorMessage = trim(\\\"
  \\\",Error), Type = EventName;\\r\\nlet GraphConstructionError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/setupengine/graphconstructionerrors\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | extend ErrorMessage =
  Properties[\\\"vs.setupengine.errormessage\\\"]\\r\\n    | parse ErrorMessage
  with Error \\\"found in catalog\\\" *\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | summarize Hits = count(), sHits =
  dcount(SessionId), dHits = dcount(MacAddressHash) by ErrorMessage = trim(\\\"
  \\\",Error), Type = EventName;\\r\\nlet VsixInstallerFault =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where IsInternal == false\\r\\n    | where EventName
  == \\\"vs/extensionmanager/vsixinstaller/fault\\\"\\r\\n    | where
  ExceptionMessageHash !contains \\\"[UserName]\\\"\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash contains
  \\\"/admin\\\",\\\"You must have administrative privileges to install using
  the /admin switch.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash contains \\\"IncrediBuild
  Build Acceleration\\\" and ExceptionMessageHash contains
  \\\"IncrediBuildMenu\\\",\\\"Uninstall of IncrediBuild Build Acceleration
  failed. To uninstall this extension please uninstall all of the following
  components: IncrediBuildMenu, IncrediBuild - Build
  Acceleration\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash contains
  \\\"VSIXInstaller.UserCancelledException\\\",\\\"Exception of type
  'VSIXInstaller.UserCancelledException' was
  thrown.\\\",ExceptionMessageHash)\\r\\n    // This extension is already
  installed to all applicable products.\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash contains
  \\\"此扩展已安装到所有适用的产品。\\\",\\\"This extension is already installed to all
  applicable products.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash contains
  \\\"この拡張機能は、すべての適用可能な製品に既にインストールされています。\\\",\\\"This extension is already
  installed to all applicable products.\\\",ExceptionMessageHash)\\r\\n    |
  extend ExceptionMessageHash  = iif(ExceptionMessageHash contains \\\"Это
  расширение уже установлено для всех возможных продуктов.\\\",\\\"This
  extension is already installed to all applicable
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash contains \\\"Esta extensão já foi instalada em todos
  os produtos aplicáveis.\\\",\\\"This extension is already installed to all
  applicable products.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash contains \\\"Cette extension
  est déjà installée dans tous les produits applicables.\\\",\\\"This extension
  is already installed to all applicable
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash contains \\\"Rozszerzenie zostało już zainstalowane
  do wszystkich dających się zastosować produktów.\\\",\\\"This extension is
  already installed to all applicable
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash contains \\\"이 확장은 적용 가능한 모든 제품에 이미 설치되어
  있습니다.\\\",\\\"This extension is already installed to all applicable
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash contains \\\"Bu uzantı zaten uygun tüm ürünler için
  yüklü.\\\",\\\"This extension is already installed to all applicable
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash contains \\\"Questa estensione è già installata per
  tutti i prodotti utilizzabili.\\\",\\\"This extension is already installed to
  all applicable products.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash contains \\\"Diese
  Erweiterung ist bereits für alle entsprechenden Produkte
  installiert.\\\",\\\"This extension is already installed to all applicable
  products.\\\",ExceptionMessageHash)\\r\\n    // This extension is not
  installable on any currently installed products.\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash contains
  \\\"此扩展不能安装在任何当前安装的产品上。\\\",\\\"This extension is not installable on any
  currently installed products.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash contains \\\"Bu uzantı yüklü
  ürünlerden herhangi birinde yüklenebilir değil.\\\",\\\"This extension is not
  installable on any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash contains \\\"Esta extensión no se puede instalar en
  ninguno de los productos instalados actualmente.\\\",\\\"This extension is not
  installable on any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash contains \\\"Cette extension n'est installée sur
  aucun des produits actuellement installés.\\\",\\\"This extension is not
  installable on any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash contains \\\"Это расширение не может быть установлено
  ни для одного из установленных продуктов.\\\",\\\"This extension is not
  installable on any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash contains
  \\\"この拡張機能は、現在インストール済みの製品にはインストールできません。\\\",\\\"This extension is not
  installable on any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash contains \\\"이 확장은 현재 설치되어 있는 제품에 설치할 수
  없습니다.\\\",\\\"This extension is not installable on any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash contains \\\"Diese Erweiterung kann auf den derzeit
  installierten Produkten nicht installiert werden.\\\",\\\"This extension is
  not installable on any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash contains \\\"Esta extensión está ya instalada en
  todos los productos aplicables.\\\",\\\"This extension is not installable on
  any currently installed products.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash contains \\\"Esta extensão
  não é instalável em nenhum dos produtos atualmente instalados.\\\",\\\"This
  extension is not installable on any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash contains \\\"Esta extensión está ya instalada en
  todos los productos aplicables.\\\",\\\"This extension is not installable on
  any currently installed products.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"The extension
  with ID\\\" and ExceptionMessageHash endswith \\\"is not installed to any
  currently installed products.\\\",\\\"The extension with ID 'x' is not
  installed to any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"ID 为\\\" and ExceptionMessageHash
  endswith \\\"的扩展未安装到任何当前已安装的产品中。\\\",\\\"The extension with ID 'x' is not
  installed to any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"L'extension avec l\\\" and
  ExceptionMessageHash endswith \\\"est installée sur aucun des produits
  actuellement installés.\\\",\\\"The extension with ID 'x' is not installed to
  any currently installed products.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"ID 为\\\" and
  ExceptionMessageHash endswith \\\"的扩展未安装到任何当前已安装的产品中。\\\",\\\"The extension
  with ID 'x' is not installed to any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"현재 설치된 제품에 ID가 \\\" and
  ExceptionMessageHash endswith \\\"인 확장이 설치되어 있지 않습니다.\\\",\\\"The extension
  with ID 'x' is not installed to any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash endswith \\\"kimlikli uzantı yüklü ürünlerden
  herhangi birinde yüklü değil.\\\",\\\"The extension with ID 'x' is not
  installed to any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"ID 为\\\" and ExceptionMessageHash
  endswith \\\"的扩展未安装到任何当前已安装的产品中。\\\",\\\"The extension with ID 'x' is not
  installed to any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Rozszerzenie o identyfikatorze \\\"
  and ExceptionMessageHash endswith \\\"nie jest zainstalowane dla żadnego
  obecnie zainstalowanego rozszerzenia.\\\",\\\"The extension with ID 'x' is not
  installed to any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"ID\\\" and ExceptionMessageHash
  endswith \\\"の拡張機能は、現在インストールされているどの製品にもインストールされていません。\\\",\\\"The extension
  with ID 'x' is not installed to any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"A extensão com a ID\\\" and
  ExceptionMessageHash endswith \\\"não foi instalada em nenhum dos produtos
  atualmente instalados.\\\",\\\"The extension with ID 'x' is not installed to
  any currently installed products.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"L'estensione
  con ID\\\" and ExceptionMessageHash endswith \\\"non è installata in nessuno
  dei prodotti attualmente installati.\\\",\\\"The extension with ID 'x' is not
  installed to any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Расширение с идентификатором \\\" and
  ExceptionMessageHash endswith \\\"не установлено в какой-либо из установленных
  продуктов.\\\",\\\"The extension with ID 'x' is not installed to any currently
  installed products.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"La extensión
  con el identificador \\\" and ExceptionMessageHash endswith \\\"no está
  instalada en ninguno de los productos actualmente instalados.\\\",\\\"The
  extension with ID 'x' is not installed to any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Rozšíření s ID \\\" and
  ExceptionMessageHash endswith \\\"není nainstalováno do žádného z momentálně
  nainstalovaných produktů.\\\",\\\"The extension with ID 'x' is not installed
  to any currently installed products.\\\",ExceptionMessageHash)\\r\\n    |
  extend ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"Die
  Erweiterung mit der ID \\\" and ExceptionMessageHash endswith \\\"ist für
  keines der momentan installierten Produkte installiert.\\\",\\\"The extension
  with ID 'x' is not installed to any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"The extension with ID\\\" and
  ExceptionMessageHash endswith \\\"is not installed to Community.\\\",\\\"The
  extension with ID 'x' is not installed to Community | Pro |
  Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"The extension
  with ID\\\" and ExceptionMessageHash endswith \\\"is not installed to
  Pro.\\\",\\\"The extension with ID 'x' is not installed to Community | Pro |
  Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"The extension
  with ID\\\" and ExceptionMessageHash endswith \\\"is not installed to
  Enterprise.\\\",\\\"The extension with ID 'x' is not installed to Community |
  Pro | Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"Die
  Erweiterung mit der ID \\\" and ExceptionMessageHash endswith \\\"wird nicht
  für Pro installiert.\\\",\\\"The extension with ID 'x' is not installed to
  Community | Pro | Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash endswith \\\"
  Pro.\\\",\\\"The extension with ID 'x' is not installed to Community | Pro |
  Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash endswith
  \\\"Pro'.\\\",\\\"The extension with ID 'x' is not installed to Community |
  Pro | Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash endswith \\\"
  Pro。\\\",\\\"The extension with ID 'x' is not installed to Community | Pro |
  Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash endswith \\\"인 확장이 Pro에 설치되어
  있지 않습니다.\\\",\\\"The extension with ID 'x' is not installed to Community | Pro
  | Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"ID 为\\\" and
  ExceptionMessageHash endswith \\\"的扩展未安装到 Community。\\\",\\\"The extension
  with ID 'x' is not installed to Community | Pro |
  Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"ID '\\\" and
  ExceptionMessageHash endswith \\\"の拡張機能は Community にインストールされません。\\\",\\\"The
  extension with ID 'x' is not installed to Community | Pro |
  Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"Die
  Erweiterung mit der ID \\\" and ExceptionMessageHash endswith \\\"wird nicht
  für Community installiert.\\\",\\\"The extension with ID 'x' is not installed
  to Community | Pro | Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash endswith \\\"
  Community.\\\",\\\"The extension with ID 'x' is not installed to Community |
  Pro | Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash endswith
  \\\"Community'.\\\",\\\"The extension with ID 'x' is not installed to
  Community | Pro | Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash endswith \\\"
  Community。\\\",\\\"The extension with ID 'x' is not installed to Community |
  Pro | Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash endswith \\\"인 확장이 Community에
  설치되어 있지 않습니다.\\\",\\\"The extension with ID 'x' is not installed to Community
  | Pro | Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"ID 为\\\" and
  ExceptionMessageHash endswith \\\"的扩展未安装到 Enterprise。\\\",\\\"The extension
  with ID 'x' is not installed to Community | Pro |
  Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"Die
  Erweiterung mit der ID \\\" and ExceptionMessageHash endswith \\\"wird nicht
  für Enterprise installiert.\\\",\\\"The extension with ID 'x' is not installed
  to Community | Pro | Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"ID '\\\" and
  ExceptionMessageHash endswith \\\"の拡張機能は Enterprise にインストールされません。\\\",\\\"The
  extension with ID 'x' is not installed to Community | Pro |
  Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"ID '\\\" and
  ExceptionMessageHash endswith \\\"の拡張機能は Pro にインストールされません。\\\",\\\"The
  extension with ID 'x' is not installed to Community | Pro |
  Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash endswith \\\"
  Enterprise.\\\",\\\"The extension with ID 'x' is not installed to Community |
  Pro | Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash endswith
  \\\"Enterprise'.\\\",\\\"The extension with ID 'x' is not installed to
  Community | Pro | Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash endswith \\\"
  Enterprise。\\\",\\\"The extension with ID 'x' is not installed to Community |
  Pro | Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash endswith \\\"인 확장이 Enterpise에
  설치되어 있지 않습니다.\\\",\\\"The extension with ID 'x' is not installed to Community
  | Pro | Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"ID 为\\\" and
  ExceptionMessageHash endswith \\\"的扩展未安装到 Pro。\\\",\\\"The extension with ID
  'x' is not installed to Community | Pro |
  Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"Package\\\"
  and ExceptionMessageHash endswith \\\"failed to install\\\",\\\"Package 'x'
  failed to install\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"Package\\\"
  and ExceptionMessageHash endswith \\\"failed to download\\\",\\\"Package 'x'
  failed to download\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"The following
  processes need to be shut down before executing extension
  changes\\\",\\\"Blocking Processes\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"Os processos a
  seguir precisam ser encerrados antes de executar alterações de
  extensão\\\",\\\"Blocking Processes\\\",ExceptionMessageHash)\\r\\n    |
  extend ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"Перед
  тем как совершать изменения расширения, необходимо завершить следующие
  процессы:\\\",\\\"Blocking Processes\\\",ExceptionMessageHash)\\r\\n    |
  extend ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"확장 변경
  내용을 실행하기 전에 다음 프로세스를 종료해야 합니다.\\\",\\\"Blocking
  Processes\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Les processus suivants doivent être
  arrêtés avant l'exécution des modifications d'extension :\\\",\\\"Blocking
  Processes\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith
  \\\"拡張機能の変更を実行する前に、次のプロセスをシャットダウンする必要があります:\\\",\\\"Blocking
  Processes\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Uzantı değişiklikleri yürütülmeden
  önce aşağıdaki işlemlerin kapatılması gerekiyor:\\\",\\\"Blocking
  Processes\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"執行延伸模組變更前，必須先關閉下列處理序:\\\",\\\"Blocking
  Processes\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Než se provedou změny rozšíření, musí
  se vypnout tyto procesy:\\\",\\\"Blocking
  Processes\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Przed wprowadzeniem zmian rozszerzenia
  należy zamknąć następujące procesy:\\\",\\\"Blocking
  Processes\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Prima di apportare le modifiche alle
  estensioni, è necessario arrestare i processi seguenti:\\\",\\\"Blocking
  Processes\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Die folgenden Prozesse müssen
  heruntergefahren werden, bevor die Erweiterungsänderungen ausgeführt
  werden:\\\",\\\"Blocking Processes\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"Es necesario
  apagar los procesos siguientes antes de ejecutar los cambios de
  extensión:\\\",\\\"Blocking Processes\\\",ExceptionMessageHash)\\r\\n    |
  extend ExceptionMessageHash  = iif(ExceptionMessageHash endswith \\\"because
  it is being used by another process.\\\",\\\"The process cannot access the
  file 'x' because it is being used by another
  process.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"执行扩展更改前，需要关闭以下进程:\\\",\\\"Blocking
  Processes\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"No product with instance
  id(s)\\\",\\\"No product with instance id(s) x are
  installed.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Kein Produkt mit
  Instanz-ID(s)\\\",\\\"No product with instance id(s) x are
  installed.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"未安裝執行個體識別碼為 \\\",\\\"No product with
  instance id(s) x are installed.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"Продукты с
  идентификатором экземпляра \\\",\\\"No product with instance id(s) x are
  installed.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Örnek kimliği \\\",\\\"No product with
  instance id(s) x are installed.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"Nenhum produto
  com as IDs \\\",\\\"No product with instance id(s) x are
  installed.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Aucun produit avec le ou les
  ID\\\",\\\"No product with instance id(s) x are
  installed.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"No hay ningún producto instalado con
  este identificador de instancia:\\\",\\\"No product with instance id(s) x are
  installed.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"未安装具有实例\\\",\\\"No product with
  instance id(s) x are installed.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"The dependent
  package of \\\",\\\"The dependent package of 'x' cannot be found:
  y.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"找不到依赖包 \\\",\\\"The dependent package
  of 'x' cannot be found: y.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash contains
  \\\"CancelledException'\\\",\\\"Exception of type
  'VSIXInstaller.UserCancelledException' was
  thrown.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"This extension cannot be installed
  because the following references are missing:\\\",\\\"Missing
  references\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Could not find file \\\",\\\"Could not
  find file 'x'.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith
  \\\"未能找到文件\\\",\\\"Could not find file
  'x'.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Не удалось найти часть
  пути\\\",\\\"Could not find file 'x'.\\\",ExceptionMessageHash)\\r\\n    |
  extend ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"Could
  not find a part of the path\\\",\\\"Could not find a part of the path
  'x'.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"未能找到路径\\\",\\\"Could not find a part
  of the path 'x'.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"Access to the
  path \\\",\\\"Access to the path 'x' is
  denied.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Access to the registry key
  \\\",\\\"Access to the registry key 'x' is
  denied.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"WebClient download
  failed\\\",\\\"Download Failure\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"VSHiveStub.exe
  failed\\\",\\\"VSHiveStub.exe failed\\\",ExceptionMessageHash)\\r\\n    // No
  modifications could be applied.\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"无法应用修改。\\\",\\\"No modifications could
  be applied.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith
  \\\"変更を適用できませんでした。\\\",\\\"No modifications could be
  applied.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"The application\\\" and
  ExceptionMessageHash endswith \\\"is not installed.\\\",\\\"The application
  'Enterprise | Pro | Community', version x, is not
  installed.\\\",ExceptionMessageHash)\\r\\n    | where ExceptionMessageHash
  !startswith \\\"Pre-check verification\\\"\\r\\n    | where
  ExceptionMessageHash !contains (\\\"/admin\\\") \\r\\n    | where
  ExceptionMessageHash !contains (\\\"Blocking Processes\\\")\\r\\n    | where
  ExceptionMessageHash !contains (\\\"Exception of type
  'VSIXInstaller.UserCancelledException' was thrown.\\\")\\r\\n    | extend
  Error = ExceptionMessageHash\\r\\n    // Filter out known issue\\r\\n    |
  where Error != \\\"The extension with ID 'x' is not installed to any currently
  installed products.\\\"\\r\\n    | where Error != \\\"This extension is not
  installable on any currently installed products.\\\"\\r\\n    | where Error !=
  \\\"This extension is already installed to all applicable
  products.\\\"\\r\\n    | where Error != \\\"No modifications could be
  applied.\\\"\\r\\n    | where Error != \\\"No product with instance id(s) x
  are installed.\\\"\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | summarize Hits = count(), sHits =
  dcount(SessionId), dHits = dcount(MacAddressHash) by ErrorMessage = trim(\\\"
  \\\",Error), Type = EventName;\\r\\nlet SetupEngineFault =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/setupengine/fault\\\"\\r\\n    | where IsInternal == false\\r\\n    |
  extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | extend ExceptionMessageHash =
  iif(isempty(ExceptionMessageHash), FaultDescription,
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionType == \\\"System.NullReferenceException\\\",
  strcat(\\\"NullReferenceException:\\\",Properties[\\\"reserved.datamodel.faul\
  t.bucketparam6\\\"]), ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash contains
  \\\"https://download.visualstudio.microsoft.com/download\\\" and ExeName ==
  \\\"backgrounddownload\\\", strcat(ExeName,\\\": \\\",ExceptionType),
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"12029\\\", \\\"12029 Download Failure\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"The operation was canceled.\\\", \\\"The
  operation was canceled.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"已取消该操作。\\\", \\\"The
  operation was canceled.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"Operación
  cancelada.\\\", \\\"The operation was canceled.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"Операция была отменена.\\\", \\\"The operation
  was canceled.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"A operação foi
  cancelada.\\\", \\\"The operation was canceled.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"Der Vorgang wurde abgebrochen.\\\", \\\"The
  operation was canceled.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"操作は取り消されました。\\\",
  \\\"The operation was canceled.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"已取消一个任务。\\\", \\\"The
  operation was canceled.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"L'opération a été
  annulée.\\\", \\\"The operation was canceled.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"작업이 취소되었습니다.\\\", \\\"The operation was
  canceled.\\\", ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"Se canceló una tarea.\\\", \\\"A task was
  canceled.\\\", ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"The operation was canceled.\\\", \\\"The
  operation was canceled.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"文件包含损坏的数据。\\\",
  \\\"File contains corrupted data.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"Dosya bozuk veri
  içeriyor.\\\", \\\"File contains corrupted data.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"ファイルのデータが壊れています。\\\", \\\"File contains
  corrupted data.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"El archivo contiene
  datos dañados.\\\", \\\"File contains corrupted data.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"Il file contiene dati danneggiati.\\\",
  \\\"File contains corrupted data.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"Файл содержит
  поврежденные данные.\\\", \\\"File contains corrupted data.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"Plik zawiera uszkodzone dane.\\\", \\\"File
  contains corrupted data.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"Die Datei enthält
  beschädigte Daten.\\\", \\\"File contains corrupted data.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"Le fichier contient des données
  endommagées.\\\", \\\"File contains corrupted data.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"O arquivo contém dados corrompidos.\\\",
  \\\"File contains corrupted data.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"El producto se modificó
  fuera del instalador. Reintente la operación.\\\", \\\"The product was
  modified outside of this installer. Please retry the operation.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"该产品在此安装程序之外进行了修改。请重试操作。\\\", \\\"The product
  was modified outside of this installer. Please retry the operation.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"Продукт был изменен вне этой программы
  установки. Повторите операцию.\\\", \\\"The product was modified outside of
  this installer. Please retry the operation.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"Das Produkt wurde außerhalb dieses Installers
  geändert. Wiederholen Sie den Vorgang.\\\", \\\"The product was modified
  outside of this installer. Please retry the operation.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"Le produit a été modifié en dehors de ce
  programme d'installation. Réessayez l'opération.\\\", \\\"The product was
  modified outside of this installer. Please retry the operation.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"O produto foi modificado fora desse
  instalador. Tente a operação novamente.\\\", \\\"The product was modified
  outside of this installer. Please retry the operation.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"Produkt został zmodyfikowany poza tym
  instalatorem. Spróbuj ponownie wykonać operację.\\\", \\\"The product was
  modified outside of this installer. Please retry the operation.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"Jest już uruchomiona inna instalacja programu
  Visual Studio. Musisz ją zamknąć przed kontynuowaniem.\\\", \\\"Another Visual
  Studio installation is running. You'll need to close it before you
  continue.\\\", ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"Il prodotto non è stato modificato in questo
  programma di installazione. Ripetere l'operazione.\\\", \\\"The product was
  modified outside of this installer. Please retry the operation.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"製品は、このインストーラーの外部で変更されました。操作を再試行してください。\\\",
  \\\"The product was modified outside of this installer. Please retry the
  operation.\\\", ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"算术运算导致溢出。\\\", \\\"Arithmetic operation
  resulted in an overflow.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"磁盘空间不足。\\\", \\\"There
  is not enough space on the disk.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"Espacio en disco
  insuficiente.\\\", \\\"There is not enough space on the disk.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"Недостаточно места на диске.\\\", \\\"There is
  not enough space on the disk.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"Espace insuffisant sur
  le disque.\\\", \\\"There is not enough space on the disk.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"Es steht nicht genug Speicherplatz auf dem
  Datenträger zur Verfügung.\\\", \\\"There is not enough space on the
  disk.\\\", ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"另一项 Visual Studio 安装正在进行中。你需要先关闭它，然后才能继续。\\\",
  \\\"Another Visual Studio installation is running. You'll need to close it
  before you continue.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"Eine andere Visual
  Studio-Installation wird bereits ausgeführt. Schließen Sie sie, bevor Sie
  fortfahren.\\\", \\\"Another Visual Studio installation is running. You'll
  need to close it before you continue.\\\", ExceptionMessageHash)\\r\\n    |
  extend ExceptionMessageHash = iif(ExceptionMessageHash == \\\"Hay otra
  instalación de Visual Studio en ejecución. Tendrá que cerrarla para
  continuar.\\\", \\\"Another Visual Studio installation is running. You'll need
  to close it before you continue.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"Başka bir Visual Studio
  yüklemesi çalışıyor. Devam etmeden önce diğer yüklemeyi kapatmanız
  gerekir.\\\", \\\"Another Visual Studio installation is running. You'll need
  to close it before you continue.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"Outra instalação do
  Visual Studio está em execução. Será necessário fechá-la antes de
  continuar.\\\", \\\"Another Visual Studio installation is running. You'll need
  to close it before you continue.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"Une autre installation
  de Visual Studio est en cours d'exécution. Vous devez fermer cette dernière
  pour pouvoir continuer.\\\", \\\"Another Visual Studio installation is
  running. You'll need to close it before you continue.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"Запущена другая установка Visual Studio.
  Закройте ее перед тем, как продолжить.\\\", \\\"Another Visual Studio
  installation is running. You'll need to close it before you continue.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"別の Visual Studio
  のインストールが実行中であり、それを閉じてからでないと続行できません。\\\", \\\"Another Visual Studio
  installation is running. You'll need to close it before you continue.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"다른 Visual Studio 설치가 실행 중입니다. 계속하려면 설치를 취소해야
  합니다.\\\", \\\"Another Visual Studio installation is running. You'll need to
  close it before you continue.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"È in esecuzione
  un'altra installazione di Visual Studio ed è necessario chiuderla per
  continuare.\\\", \\\"Another Visual Studio installation is running. You'll
  need to close it before you continue.\\\", ExceptionMessageHash)\\r\\n    |
  extend ExceptionMessageHash = iif(ExceptionMessageHash == \\\"Esta extensión
  no se puede instalar en ninguno de los productos instalados actualmente.\\\",
  \\\"This extension cannot be installed on any of the currently installed
  products.\\\", ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"此扩展不能安装在任何当前安装的产品上。\\\", \\\"This extension
  cannot be installed on any of the currently installed products.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"La operación aritmética ha provocado un
  desbordamiento.\\\", \\\"Arithmetic operation resulted in an overflow.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash contains \\\"12029\\\",
  \\\"ERROR_WINHTTP_CANNOT_CONNECT (12029)\\\",ExceptionMessageHash)\\r\\n    |
  parse ExceptionMessageHash with FailurePackage \\\";\\\" *\\r\\n    | where
  ExceptionMessageHash !contains \\\"failed to download\\\" \\r\\n    | parse
  ExceptionStackTraceHash  with \\\"[\\\\\\\"\\\" message \\\"(\\\" *\\r\\n    |
  parse ExceptionStackTraceHash  with * \\\"at \\\" message1 \\\"(\\\"
  *\\r\\n    | parse ExceptionStackTraceHash  with message2 \\\"(\\\"
  *\\r\\n    | extend message = iif(isempty(message), message1,
  message)\\r\\n    | extend message = iif(isempty(message), message2,
  message)\\r\\n    | extend ExceptionMessageHash = iif( ExceptionMessageHash
  ==\\\"File contains corrupted data.\\\",
  message,  ExceptionMessageHash)\\r\\n    | where ExceptionMessageHash
  !contains \\\"12007\\\"\\r\\n    // Ignore the caching error since the actual
  error will be captured in the fault event before this\\r\\n    | where
  ExceptionMessageHash !contains \\\"Unable to cache catalog using
  channel\\\"\\r\\n    | summarize Hits = count(), sHits = dcount(SessionId),
  dHits = dcount(MacAddressHash) by ErrorMessage = ExceptionMessageHash, Type =
  EventName;\\r\\nlet LoadDetailsPageError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/load-detailspage-error\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | summarize Hits = count(), sHits =
  dcount(SessionId), dHits = dcount(MacAddressHash) by ErrorMessage = trim(\\\"
  \\\",FaultDescription ), Type = EventName;\\r\\nlet AppUninstallSelfFailed =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/appuninstallselffailed\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | extend ErrorMessage = ExceptionMessageHash\\r\\n    | extend
  MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage = trim(\\\" \\\",ErrorMessage), Type =
  EventName;\\r\\nlet OpenLogError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/open-log-error\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | extend ErrorMessage = FaultDescription \\r\\n    | extend
  MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage = trim(\\\" \\\",ErrorMessage), Type =
  EventName;\\r\\nlet BackgroundDownloaderUnhandledException =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/setupengine/backgrounddownload/unhandledexceptionthrown\\\"\\r\\n    |
  where IsInternal == false\\r\\n    | extend ErrorMessage =
  tostring(Properties[\\\"reserved.datamodel.fault.description\\\"])\\r\\n    |
  extend ErrorMEssage = trim(\\\" \\\",ErrorMessage)\\r\\n    | extend
  ErrorMessage = iif(ExceptionType == \\\"System.NullReferenceException\\\",
  strcat(\\\"NullReferenceException:\\\",Properties[\\\"reserved.datamodel.faul\
  t.bucketparam6\\\"]), ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage == \\\"BackgrounDownload unexpected error\\\",
  ExceptionMessageHash, ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage startswith \\\"No catalog found at
  'C:\\\\\\\\WINDOWS\\\\\\\\system32\\\\\\\\config\\\\\\\\systemprofile\\\\\\\\\
  AppData\\\\\\\\Local\\\\\\\\Microsoft\\\\\\\\VisualStudio\\\\\\\\Packages\\\\\
  \\\\_Channels\\\", \\\"No catalog found at
  'C:\\\\\\\\WINDOWS\\\\\\\\system32\\\\\\\\config\\\\\\\\systemprofile\\\\\\\\\
  AppData\\\\\\\\Local\\\\\\\\Microsoft\\\\\\\\VisualStudio\\\\\\\\Packages\\\\\
  \\\\_Channels\\\\\\\\[InstanceId]\\\\\\\\catalog.json'\\\",
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage == \\\"Cannot
  get remote settings, use default value instead. Exception: 已取消一个任务。\\\", \\\"A
  task was canceled.\\\",\\r\\n                                iif(ErrorMessage
  == \\\"Cannot get remote settings, use default value instead. Exception: A
  task was canceled.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: Eine
  Aufgabe wurde abgebrochen.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception:
  タスクが取り消されました。\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: Se
  canceló una tarea.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: Отменена
  задача.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: 작업이
  취소되었습니다.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: Uma
  tarefa foi cancelada.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: Une
  tâche a été annulée.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: Zadanie
  zostało anulowane.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception:
  Un'attività è stata annullata.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: Bir
  görev iptal edildi.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception:
  工作已取消。\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: Een taak
  is geannuleerd.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: En
  uppgift har avbrutits.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: Úloha
  byla zrušena.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: Egy
  feladat végrehajtása megszakadt.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: En
  opgave blev annulleret.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: Foi
  cancelada uma tarefa.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: En
  oppgave ble avbrutt.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: تم إلغاء
  مهمة.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception:
  Ακυρώθηκε μια εργασία.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: Tehtävä
  peruutettiin.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: En
  aktivitet har avbrutits.\\\", \\\"A task was canceled.\\\",
  ErrorMessage))))))))))))))))))))))))\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage = trim(\\\" \\\",ErrorMessage), Type =
  EventName;\\r\\nlet VSFeedbackError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/open-vsfeedback-error\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | extend ErrorMessage = ExceptionMessageHash  \\r\\n    |
  extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage = trim(\\\" \\\",ErrorMessage), Type =
  EventName;\\r\\nlet AppFinalizeFailed =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/appfinalizefailed\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | extend ErrorMessage = ExceptionMessageHash\\r\\n    | extend
  MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage = trim(\\\" \\\",ErrorMessage), Type =
  EventName;\\r\\n    let SearchFailedError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/feedbackclient/search-failed\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | extend ErrorMessage =
  tostring(Properties[\\\"vs.willow.error\\\"])\\r\\n    | extend MacAddressHash
  =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage = trim(\\\" \\\",ErrorMessage), Type =
  EventName;\\r\\n    let StartServiceHubError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/start-servicehub-error\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | extend ErrorMessage = FaultDescription\\r\\n    | extend
  MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage = trim(\\\" \\\",ErrorMessage), Type =
  EventName;\\r\\nlet QueryProductError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/query-product-error\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | extend ErrorMessage = ExceptionType\\r\\n    | extend
  ErrorMessage1 = FaultDescription\\r\\n    | extend Stack =
  ExceptionStackTraceHash\\r\\n    | parse ExceptionStackTraceHash with
  ExceptionName2 \\\": \\\" ErrorMessage2 \\\"\\\\n\\\" *\\r\\n    | parse
  ExceptionStackTraceHash with ChannelManifestDownloadExceptionPrefixString
  \\\"Unknown error\\\" ChannelManifestDownloadExceptionErrorCode \\\"\\\\n\\\"
  *\\r\\n    | parse ExceptionStackTraceHash with Garbage \\\"Unknown error\\\"
  ErrorCode1 \\\"\\\\n\\\" *\\r\\n    | parse ExceptionStackTraceHash with
  \\\"Error: \\\" ExceptionName3 \\\": \\\" ErrorMessage3 \\\"\\\\n\\\"
  *\\r\\n    | extend ErrorMessage = iif(isempty(ExceptionName3), ErrorMessage2,
  ErrorMessage3)\\r\\n    | extend ErrorMessage = iif(isempty(ErrorMessage),
  ExceptionType, ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage
  == \\\"Error\\\", FaultDescription, ErrorMessage)\\r\\n    | extend
  ErrorMessage = iif(ErrorMessage contains \\\"underlying stream has closed\\\",
  \\\"The underlying stream has closed\\\", ErrorMessage)\\r\\n    // Object
  reference not set to an instance of an object.\\r\\n    | extend ErrorMessage
  = iif(ErrorMessage contains \\\"未将对象引用设置到对象的实例。\\\", \\\"Object reference not
  set to an instance of an object.\\\", ErrorMessage)\\r\\n    | extend
  ErrorMessage = iif(ErrorMessage contains \\\"Ссылка на объект не указывает на
  экземпляр объекта.\\\", \\\"Object reference not set to an instance of an
  object.\\\", ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage
  startswith \\\"The installer manifest failed signature validation.\\\",
  \\\"The installer manifest failed signature validation.\\\",
  ErrorMessage)\\r\\n    // The installer manifest failed signature
  validation.\\r\\n    | extend ErrorMessage = iif(ErrorMessage startswith
  \\\"安装程序清单签名验证失败\\\", \\\"The installer manifest failed signature
  validation.\\\", ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage startswith \\\"El manifiesto de instalador no pudo realizar
  la validación de signatura.\\\", \\\"The installer manifest failed signature
  validation.\\\", ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage startswith \\\"O manifesto do instalador apresentou falha na
  validação da assinatura.\\\", \\\"The installer manifest failed signature
  validation.\\\", ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage startswith \\\"Манифест установщика не прошел проверку
  подписи.\\\", \\\"The installer manifest failed signature validation.\\\",
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage startswith
  \\\"安裝程式資訊清單未通過特徵標記驗證。\\\", \\\"The installer manifest failed signature
  validation.\\\", ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage startswith \\\"Échec de la validation de la signature du
  manifeste du programme d'installation.\\\", \\\"The installer manifest failed
  signature validation.\\\", ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage startswith \\\"connect ENOENT \\\", \\\"connect ENOENT\\\",
  ErrorMessage)\\r\\n    // The dependent package cannot be found: x\\r\\n    |
  extend ErrorMessage = iif(ErrorMessage startswith \\\"找不到相关程序包:\\\", \\\"The
  dependent package cannot be found: x\\\", ErrorMessage)\\r\\n    | extend
  ErrorMessage = iif(ErrorMessage startswith \\\"Das abhängige Paket wurde nicht
  gefunden\\\", \\\"The dependent package cannot be found: x\\\",
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage contains
  \\\"Не удалось найти зависимый пакет\\\", \\\"The dependent package cannot be
  found: x\\\", ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage
  startswith \\\"The dependent package cannot be found\\\", \\\"The dependent
  package cannot be found: x\\\", ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage startswith \\\"Product \\\" and ErrorMessage contains \\\"is
  not available.\\\", \\\"Product 'x' is not available\\\",
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage startswith
  \\\"Did not find product with ID \\\" and ErrorMessage contains \\\"instead
  found these versions\\\", \\\"Did not find product with ID x, instead found
  these versions [y]\\\", ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage contains \\\"https://aka.ms/vs/cleanup\\\", \\\"An instance
  of the product cannot be loaded. Please visit https://aka.ms/vs/cleanup for
  help with this issue.\\\", ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage startswith \\\"No products are registered for instance \\\",
  \\\"No products are registered for instance 'x'.\\\", ErrorMessage)\\r\\n    |
  extend ErrorMessage = iif(ErrorMessage contains \\\"Hub host 'desktopClr'\\\",
  \\\"Hub Host 'desktopClr' failure\\\", ErrorMessage)    \\r\\n    | extend
  ErrorMessage = iif(Stack contains
  \\\"System.IO.__Error.WinIOError\\\",\\\"There is not enough space on the
  disk\\\", ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ExceptionType ==
  \\\"ChannelManifestDownloadError\\\" and (Stack contains
  \\\"https://aka.ms/vs/15/release/channel\\\" or Stack contains
  \\\"https://aka.ms/vs/15/pre/channel\\\"),
  \\r\\n                                        iif(
  isempty(ChannelManifestDownloadExceptionErrorCode), \\\"Unable to download the
  channel manifest\\\", strcat(\\\"Unable to download the channel
  manifest.  Error: \\\",ChannelManifestDownloadExceptionErrorCode)),
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(Stack contains \\\"Hub
  Controller\\\",\\\"Hub Controller issue.\\\", ErrorMessage)\\r\\n    | extend
  ErrorMessage = iif(Stack contains \\\"There are no handlers for setup service
  update required notifications.\\\",\\\"NoMessageHandlerError\\\",
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage ==
  \\\"InstallerError\\\",FaultDescription,ErrorMessage)\\r\\n    | extend
  ErrorMessage = iif(ErrorMessage  == \\\"ServiceHubUnavailableError\\\",
  FaultDescription, ErrorMessage)\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage = trim(\\\" \\\",ErrorMessage), Type =
  EventName;\\r\\n    let InstallProductError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/install-product-error\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | extend ErrorMessage = ExceptionType\\r\\n    | extend
  ErrorMessage1 = FaultDescription\\r\\n    | extend Stack =
  ExceptionStackTraceHash\\r\\n    | parse ExceptionStackTraceHash with
  ExceptionName \\\";\\\" ErrorMessage \\\"\\\\n\\\" *\\r\\n    | parse
  ExceptionStackTraceHash with \\\"Error: \\\" ExceptionName2 \\\": \\\"
  ErrorMessage2 \\\"\\\\n\\\" *\\r\\n    | extend ErrorMessage =
  iif(isempty(ExceptionName), ErrorMessage2, ErrorMessage)\\r\\n    | extend
  ErrorMessage = iif(isempty(ErrorMessage), ErrorMessage1,
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage contains
  \\\"underlying stream has closed\\\", \\\"The underlying stream has
  closed\\\", ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage1
  == \\\"IOException\\\" and Stack contains
  \\\"System.IO.__Error.WinIOError\\\",\\\"There is not enough space on the
  disk\\\", ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage1 ==
  \\\"InvalidOperationException\\\" and Stack contains
  \\\"VerifyInstallationPath\\\",\\\"The specified instance 'x' cannot be
  installed to the same location or child directory of existing instance
  'y\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage1 ==
  \\\"InvalidOperationException\\\" and Stack contains
  \\\"Engine.CacheCatalogUsingChannelManager\\\",\\\"Unable to cache catalog
  using channel uri
  https://aka.ms/vs/15/release/channel\\\",ErrorMessage)\\r\\n    | extend
  ErrorMessage = iif(ErrorMessage1 == \\\"InvalidOperationException\\\" and
  Stack contains
  \\\"CheckAndSetGlobalMutex\\\",\\\"ERROR_INSTALL_ALREADY_RUNNING
  (1618)\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage1 ==
  \\\"InvalidOperationException\\\" and Stack contains
  \\\".CommonExtensions.GetProduct\\\",\\\"No products are registered for
  instance 'x'.\\\",ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage1 == \\\"InvalidOperationException\\\" and Stack contains
  \\\"ThrowIfRunningInstallationOperation\\\",\\\"An installation operation is
  still processing and must be completed before starting
  another\\\",ErrorMessage)\\r\\n    | where ExceptionType !in
  (\\\"OperationCanceledError\\\",\\\"InstallerError\\\",
  \\\"PackageFailureException\\\")\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage, Type = EventName;\\r\\n    let
  PackageFailure =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/setupengine/packagefailure\\\"\\r\\n    | where IsInternal ==
  false\\r\\n   | extend OperationType =
  tostring(Properties[\\\"vs.setupengine.operationtype\\\"])\\r\\n    | extend
  PackageId = tostring(Properties[\\\"vs.setupengine.packageid\\\"])\\r\\n    |
  extend InstallerId =
  tostring(Properties[\\\"context.default.vs.setupengine.sharedwillowinstallses\
  sionid\\\"])\\r\\n    | extend ResultSummary =
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam8\\\"])\\r\\n    |
  extend Operation_P7 =
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam7\\\"])\\r\\n    |
  extend ReturnCode_P6 = iif(Operation_P7 == \\\"-2146889721\\\", \\\"Install -
  Win10SDK\\\",
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam6\\\"]))\\r\\n    \
  | extend ErrorMessage = strcat(PackageId, \\\"_\\\", Operation_P7, \\\"_\\\",
  ReturnCode_P6)\\r\\n    | extend ErrorMessage = iif(ErrorMessage contains
  \\\"0x80072ee7\\\", \\\"WININET_E_NAME_NOT_RESOLVED (0x80072ee7)\\\",
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage contains
  \\\"2203\\\", \\\"Database: [2]. Cannot open database file. System error [3].
  (2203)\\\", ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage
  contains \\\"1303\\\", \\\"The installer has insufficient privileges to access
  this directory (1303)\\\", ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage contains \\\"1620\\\", \\\"This installation package could
  not be opened. Contact the application vendor to verify that this is a valid
  Windows Installer package. (1620)\\\", ErrorMessage)\\r\\n    | extend
  ErrorMessage = iif(ErrorMessage contains \\\"1601\\\", \\\"The Windows
  Installer Service could not be accessed (1601)\\\", ErrorMessage)\\r\\n    |
  extend ErrorMessage = iif(ErrorMessage contains \\\"-2147024784\\\", \\\"Out
  of diskspace errors performing various setup/willow operations.\\\",
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage contains
  \\\"0x80096004\\\", \\\"Setup fails due to corrupt file in temp cache\\\",
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage contains
  \\\"-2146233033\\\", \\\"GetVsixType throwing System.IO.FileFormatException
  (-2146233033)\\\", ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ReturnCode_P6 == \\\"CachePackage\\\", strcat(\\\"Error in CachePackage:
  \\\",Operation_P7), ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage contains \\\"1618\\\", \\\"ERROR_INSTALL_ALREADY_RUNNING
  (1618)\\\", ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage
  contains \\\"-2147024893_Uninstall\\\", \\\"COR_E_DIRECTORYNOTFOUND during
  Uinstall\\\", ErrorMessage)\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage, Type = EventName;    \\r\\n    // let
  Fault =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    //                        | where AdvancedServerTimestampUtc > now()
  - daysToLookback\\r\\n    //                        | where EventName ==
  \\\"vs/setupengine/fault\\\"\\r\\n    //                        | where
  IsInternal == false\\r\\n    //                        | extend ErrorMessage =
  ExceptionType\\r\\n    //                        | where ErrorMessage !in
  (\\\"OperationCanceledError\\\",\\\"InstallerError\\\")\\r\\n    //                        \
  | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage, Type = EventName;\\r\\n    let
  EvaluateInstallPatametersError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/evaluateinstallparameters-error\\\"\\r\\n    | where IsInternal
  == false\\r\\n    | extend ErrorMessage = ExceptionMessageHash\\r\\n    |
  extend ErrorMessage = iif(ErrorMessage contains @\\\"“:\\\\Program Files
  (x86)\\\\Microsoft Visual Studio\\\\2017\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  \\r\\n                                iif(ErrorMessage contains
  @\\\"':\\\\Program Files (x86)\\\\Microsoft Visual Studio\\\\2017\\\",
  @\\\"The path x is
  invalid.\\\",                                                                  \
  \\r\\n                                iif(ErrorMessage contains
  \\\"\\\\\\\":\\\\\\\\Program Files (x86)\\\\\\\\Microsoft Visual
  Studio\\\\\\\\2017\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  \\r\\n                                iif(ErrorMessage contains @\\\"is
  invalid\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  \\r\\n                                iif(ErrorMessage contains \\\" jest
  nieprawidłowa.\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  \\r\\n                                iif(ErrorMessage contains @\\\"”无效。\\\",
  @\\\"The path x is
  invalid.\\\",                                                                  \
  \\r\\n                                iif(ErrorMessage contains \\\"路徑 '\\\",
  @\\\"The path x is
  invalid.\\\",                                                                  \
  \\r\\n                                iif(ErrorMessage contains \\\"
  недопустим.\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  \\r\\n                                iif(ErrorMessage contains \\\"은(는) 잘못된
  경로입니다.\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  \\r\\n                                iif(ErrorMessage contains \\\"' non è
  valido.\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  \\r\\n                                iif(ErrorMessage contains \\\"is
  inva[USERNAME]id.\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  \\r\\n                                iif(ErrorMessage contains \\\"' n'est
  pas valide.\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  \\r\\n                                iif(ErrorMessage contains \\\" no es
  válida.\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  \\r\\n                                iif(ErrorMessage contains \\\"' é
  inválido.\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  \\r\\n                                iif(ErrorMessage contains \\\" ist
  ungültig.\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  \\r\\n                                iif(ErrorMessage contains \\\" yolu
  geçerli değil.\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  \\r\\n                                iif(ErrorMessage contains \\\" je
  neplatná.\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  \\r\\n                                iif(ErrorMessage contains \\\" jest
  nieprawidłowa.\\\", @\\\"The path x is
  invalid.\\\",                                                                   \
  \\r\\n                                iif(ErrorMessage contains \\\"
  が正しくありません。\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  \\r\\n                                iif(ErrorMessage contains \\\"La ruta de
  acceso de instalación raíz es demasiado larga para este producto.\\\",
  @\\\"The root installation path is too long for this
  product.\\\",                                                                  \
  iif(ErrorMessage contains \\\"O caminho da instalação raiz é longo demais para
  este produto.\\\", @\\\"The root installation path is too long for this
  product.\\\",                                                                  \
  iif(ErrorMessage contains \\\"Le chemin d'installation racine est trop long
  pour ce produit.\\\", @\\\"The root installation path is too long for this
  product.\\\",                                                                  \
  iif(ErrorMessage contains \\\"Główna ścieżka instalacji jest za długa dla tego
  produktu.\\\", @\\\"The root installation path is too long for this
  product.\\\",                                                                  \
  iif(ErrorMessage contains \\\"Il percorso di installazione radice è troppo
  lungo per questo prodotto.\\\", @\\\"The root installation path is too long
  for this
  product.\\\",                                                                  \
  iif(ErrorMessage contains \\\"この製品のルート インストール パスが長すぎます。\\\", @\\\"The root
  installation path is too long for this
  product.\\\",                                                                  \
  iif(ErrorMessage contains \\\"Kořenová cesta instalace je pro tento produkt
  moc dlouhá.\\\", @\\\"The root installation path is too long for this
  product.\\\",                                                                  \
  iif(ErrorMessage contains \\\"Bu ürün için kök yükleme yolu çok uzun.\\\",
  @\\\"The root installation path is too long for this
  product.\\\",                                                                  \
  iif(ErrorMessage contains \\\"根安裝路徑對此產品而言過長。\\\", @\\\"The root installation
  path is too long for this
  product.\\\",                                                                  \
  iif(ErrorMessage contains \\\"이 제품의 루트 설치 경로가 너무 깁니다.\\\", @\\\"The root
  installation path is too long for this
  product.\\\",                                                                  \
  iif(ErrorMessage contains \\\"Корневой путь установки слишком длинный для
  этого продукта.\\\", @\\\"The root installation path is too long for this
  product.\\\",                                                                  \
  iif(ErrorMessage contains \\\"根安装路径长度对于此产品过长。\\\", @\\\"The root installation
  path is too long for this
  product.\\\",                                                                  \
  iif(ErrorMessage contains \\\"Der Stamminstallationspfad ist zu lang für
  dieses Produkt.\\\", @\\\"The root installation path is too long for this
  product.\\\",                                                                  \
  iif(ErrorMessage contains @\\\"Visual Studio nejde nainstalovat do neprázdného
  adresáře\\\", @\\\"Visual Studio cannot be installed to a nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage contains @\\\" dizinine yüklenemez.\\\", @\\\"Visual Studio
  cannot be installed to a nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage contains @\\\"Non è possibile installare Visual Studio in una
  directory non vuota '\\\", @\\\"Visual Studio cannot be installed to a
  nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage contains @\\\"nonempty directory\\\", @\\\"Visual Studio
  cannot be installed to a nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage contains @\\\"Visual Studio cannot be installed to a \\\",
  @\\\"Visual Studio cannot be installed to a nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage contains @\\\"to a nonempty \\\", @\\\"Visual Studio cannot
  be installed to a nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage contains @\\\" をインストールすることはできません。\\\", @\\\"Visual Studio
  cannot be installed to a nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage startswith @\\\"Nie można zainstalować programu Visual Studio
  w katalogu \\\", @\\\"Visual Studio cannot be installed to a nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage startswith @\\\"Visual Studio cannot be installed to a
  nonempty directory\\\", @\\\"Visual Studio cannot be installed to a nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage startswith @\\\"Visual Studio ne peut pas être installé dans
  un répertoire non vide\\\", @\\\"Visual Studio cannot be installed to a
  nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage startswith @\\\"无法在非空目录\\\", @\\\"Visual Studio cannot be
  installed to a nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage startswith @\\\"O Visual Studio não pode ser instalado em um
  diretório não vazio '\\\", @\\\"Visual Studio cannot be installed to a
  nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage startswith @\\\"Visual Studio kann nicht im Verzeichnis \\\",
  @\\\"Visual Studio cannot be installed to a nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage startswith @\\\"Visual Studio를 비어 있지 않은 디렉터리 '\\\",
  @\\\"Visual Studio cannot be installed to a nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage startswith @\\\"Visual Studio невозможно установить в
  непустом каталоге \\\", @\\\"Visual Studio cannot be installed to a nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage startswith @\\\"Visual Studio 無法安裝至非空白目錄 '\\\", @\\\"Visual
  Studio cannot be installed to a nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage startswith @\\\"Visual Studio no se puede instalar en un
  directorio que no esté vacío\\\", @\\\"Visual Studio cannot be installed to a
  nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage contains @\\\" は空でないため、Visual Studio をインストールすることはできません。\\\",
  @\\\"Visual Studio cannot be installed to a nonempty
  directory\\\",                                                                                                                                  \
  ErrorMessage))))))))))))))))))))))))))))))))))))))))))))))))))\\r\\n    |
  extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage, Type = EventName;\\r\\n    let
  EndOperationGetProductError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/endoperationgetproducterror\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | parse ExceptionMessageHash with ExceptionName \\\":\\\"
  ErrorMessage \\\"\\\\n\\\" *\\r\\n    | extend ErrorMessage =
  iif(ExceptionMessageHash contains
  \\\"System.IO.__Error.WinIOError\\\",\\\"There is not enough space on the
  disk\\\", ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ExceptionName ==
  \\\"System.ObjectDisposedException\\\",FaultDescription,
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ExceptionMessageHash
  contains \\\"Hub host 'desktopClr'\\\", \\\"Hub Host 'desktopClr' failure\\\",
  ErrorMessage) \\r\\n    | extend ErrorMessage = iif(ExceptionName ==
  \\\"System.InvalidOperationException\\\" and ExceptionMessageHash contains
  \\\".CommonExtensions.GetProduct\\\",\\\"No products are registered for
  instance 'x'.\\\",ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(isempty(ErrorMessage), ExceptionMessageHash , ErrorMessage)\\r\\n    |
  extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage = trim(\\\" \\\",ErrorMessage), Type =
  EventName;\\r\\n    let CmdLineError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/cmdlineerror\\\"\\r\\n    | where IsInternal == false\\r\\n    |
  extend ErrorMessage = ExceptionType\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage, Type = EventName;\\r\\n    let JsCrash
  =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/jscrash\\\"\\r\\n    | where IsInternal == false\\r\\n    |
  extend JsCrashMessage = ExceptionMessageHash\\r\\n    | parse kind= regex
  JsCrashMessage with ErrorMessage:string \\\",\\\"\\r\\n    | extend
  ErrorMessage = iif(isempty(ErrorMessage), JsCrashMessage,
  ErrorMessage)\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage, Type = EventName;\\r\\n    let Name =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName == \\\"vs/willow/name\\\"\\r\\n    |
  where IsInternal == false\\r\\n    | extend ErrorMessage =
  FaultDescription\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage, Type = EventName;\\r\\n    let
  EvaluateModifyParametersError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/evaluatemodifyparameters-error\\\"\\r\\n    | where IsInternal
  == false\\r\\n    | extend ErrorMessage =
  tostring(Properties[\\\"VS.Willow.errorType\\\"])\\r\\n    | extend
  MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage, Type = EventName;\\r\\n    let
  Exception =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/setupengine/exception\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | extend ErrorMessage = ExceptionType\\r\\n    | extend
  MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage, Type = EventName;\\r\\n    let
  CreateShortcutFailed =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/createshortcutfailed\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | parse ExceptionMessageHash with ExceptionType1 \\\": \\\"
  Message \\\"\\\\n\\\" *\\r\\n    | extend ErrorMessage =
  iif(isempty(ExceptionType1), ExceptionMessageHash, Message)\\r\\n    | extend
  ErrorMessage = iif(ErrorMessage contains \\\"Hub host 'desktopClr'\\\",
  \\\"Hub Host 'desktopClr' failure\\\", ErrorMessage)\\r\\n    | extend
  ErrorMessage = iif(ErrorMessage contains (\\\".log' is denied.\\\"),
  \\\"Access to the path 'xxxxx\\\\\\\\xxxx.log' is denied\\\",
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage contains
  \\\"Hub Controller\\\",\\\"Hub Controller issue.\\\", ErrorMessage)\\r\\n    |
  extend ErrorMessage = iif(ErrorMessage startswith \\\"connect ENOENT\\\",
  \\\"connect ENOENT\\\", ErrorMessage)\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage, Type = EventName;\\r\\n    let
  ConfigError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/configerror\\\"\\r\\n    | where IsInternal == false\\r\\n    |
  extend ErrorMessage = FaultDescription\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage, Type =
  \\\"ConfigError\\\";\\r\\n    let BoostrapperError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/setup/bootstrapper/error\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | extend ErrorMessage = iif( isempty(ExceptionMessageHash),
  tostring(Properties[\\\"vs.setup.bootstrapper.error\\\"]),
  ExceptionMessageHash)\\r\\n    | extend ErrorMessage = iif(FaultDescription ==
  \\\"IOException\\\" and ExceptionMessageHash contains
  \\\"vs_setup_bootstrapper.json\\\", \\\"The process cannot access the file
  'C:\\\\\\\\ProgramData\\\\\\\\Microsoft\\\\\\\\VisualStudio\\\\\\\\Packages\\\
  \\\\\\_bootstrapper\\\\\\\\vs_setup_bootstrapper.json' because it is being
  used by another process.\\\",ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage == \\\"Не удалось установить файлы в целевое расположение.
  Ошибка: Недостаточно места на диске.\\\", \\\"Unable to install the files to
  target location. Error: There is not enough space on the
  disk.\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage ==
  \\\"无法将文件安装到目标位置。错误: 磁盘空间不足。\\\", \\\"Unable to install the files to target
  location. Error: There is not enough space on the
  disk.\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage ==
  \\\"Die Dateien können nicht am Zielspeicherort installiert werden. Fehler: Es
  steht nicht genug Speicherplatz auf dem Datenträger zur Verfügung.\\\",
  \\\"Unable to install the files to target location. Error: There is not enough
  space on the disk.\\\",ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage == \\\"文件包含损坏的数据。\\\", \\\"File contains corrupted
  data.\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage ==
  \\\"В системе отображения конечных точек не осталось доступных конечных
  точек.\\\", \\\"There are no more endpoints available from the endpoint
  mapper.\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage ==
  \\\"终结点映射器中没有更多的终结点可用。\\\", \\\"There are no more endpoints available from the
  endpoint mapper.\\\",ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage == \\\"Yükleme dosyalarının bütünlüğü doğrulanamıyor.
  Sertifika doğrulanamadı.\\\", \\\"Unable to verify the integrity of the
  installation files: the certificate could not be
  verified\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage
  == \\\"Não é possível verificar a integridade dos arquivos de instalação: o
  certificado não pôde ser verificado\\\", \\\"Unable to verify the integrity of
  the installation files: the certificate could not be
  verified\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage
  == \\\"설치 파일의 무결성을 검증할 수 없습니다. 인증서를 확인할 수 없습니다.\\\", \\\"Unable to verify the
  integrity of the installation files: the certificate could not be
  verified\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage
  == \\\"Impossible de vérifier l'intégrité des fichiers d'installation : le
  certificat n'a pas pu être vérifié\\\", \\\"Unable to verify the integrity of
  the installation files: the certificate could not be
  verified\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage
  == \\\"インストール ファイルの整合性を確認できません。証明書を確認できませんでした\\\", \\\"Unable to verify the
  integrity of the installation files: the certificate could not be
  verified\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage
  == \\\"无法验证安装文件的完整性: 无法验证证书\\\", \\\"Unable to verify the integrity of the
  installation files: the certificate could not be
  verified\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage
  == \\\"Die Integrität der Installationsdateien kann nicht überprüft werden:
  Überprüfung des Zertifikats nicht möglich.\\\", \\\"Unable to verify the
  integrity of the installation files: the certificate could not be
  verified\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage
  == \\\"No se puede comprobar la integridad de los archivos de instalación: no
  se pudo comprobar el certificado\\\", \\\"Unable to verify the integrity of
  the installation files: the certificate could not be
  verified\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage
  == \\\"Не удается проверить целостность установочных файлов: не удалось
  проверить сертификат.\\\", \\\"Unable to verify the integrity of the
  installation files: the certificate could not be
  verified\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage
  contains \\\"Could not find a part of the path\\\",\\\"Unable to install the
  files to target location. Error: Could not find a part of the path x.\\\",
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage contains
  \\\"d3dcompiler_47.dll\\\",\\\"Unable to install the files to target location.
  Error: Access to the path 'C:\\\\\\\\Program Files (x86)\\\\\\\\Microsoft
  Visual Studio\\\\\\\\Installer\\\\\\\\d3dcompiler_47.dll' is denied.\\\",
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage contains
  \\\"vs_installer.opc' returned HTTP status code: \\\",\\\"OPC download return
  HTTP status code x\\\", ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage contains \\\"12007\\\",\\\"WININET_E_NAME_NOT_RESOLVED
  (0x80072ee7)\\\", ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage contains \\\" HRESULT: 0x80070422)\\\", \\\"The service
  cannot be started, either because it is disabled or because it has no enabled
  devices associated with it. (Exception from HRESULT: 0x80070422)\\\",
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage contains
  \\\"or a file within it is locked by another
  program.\\\"                                           or ErrorMessage
  contains \\\"Microsoft Visual
  Studio\\\\\\\\Installer’\\\"                                           or
  ErrorMessage contains \\\"Microsoft Visual
  Studio\\\\\\\\Installer\\\\\\\"\\\"                                           \
  or ErrorMessage contains \\\"Microsoft Visual Studio\\\\\\\\Installer
  \\\"                                           or ErrorMessage contains
  \\\"Microsoft Visual
  Studio\\\\\\\\Installer'\\\"                                          or
  ErrorMessage contains \\\"Microsoft Visual
  Studio\\\\\\\\Installer,\\\"                                          or
  ErrorMessage contains \\\"Microsoft Visual
  Studio\\\\\\\\Installer”\\\"                              , \\\"Unable to
  install the files to target location. Error: The folder ‘C:\\\\\\\\Program
  Files (x86)\\\\\\\\Microsoft Visual Studio\\\\\\\\Installer’ or a file within
  it is locked by another program. Close any applications that might be using it
  and try again.\\\",ErrorMessage)\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where ErrorMessage !in (\\\"Exit
  code=1\\\",\\\"Exit code=-1073741510\\\")\\r\\n    | summarize Hits = count(),
  sHits = dcount(SessionId), dHits = dcount(MacAddressHash) by ErrorMessage,
  Type = EventName;\\r\\n    let AppUpdateDownloadFinishedFailed =
  cluster('Ddtelvsraw').database('VS').RawEventsVS\\r\\n    | where
  AdvancedServerTimestampUtc > now() - daysToLookback\\r\\n    | where EventName
  == \\\"vs/willow/appupdatedownloadfinished\\\"\\r\\n    | where IsInternal ==
  false    \\r\\n    | where
  tostring(Properties[\\\"reserved.datamodel.action.result\\\"]) ==
  \\\"Failure\\\"\\r\\n    | summarize Hits = count(), sHits =
  dcount(SessionId), dHits =dcount(MacAddressHash) by ErrorMessage =
  tostring(Properties[\\\"reserved.datamodel.action.resultsummary\\\"]),
  Type=EventName;  \\r\\n    let EngineUnhandledException =
  cluster('Ddtelvsraw').database('VS').RawEventsVS\\r\\n    | where
  AdvancedServerTimestampUtc > now() - daysToLookback\\r\\n    | where EventName
  == \\\"vs/setupengine/unhandledexception\\\"\\r\\n    | extend Error =
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam7\\\"])\\r\\n    |
  extend  Description =
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam6\\\"])
  \\r\\n    | extend Details =
  tostring(Properties[\\\"reserved.datamodel.fault.description\\\"]) \\r\\n    |
  parse Details with * \\\":\\\" * \\\": \\\" ErrorMessage \\\"\\\\n\\\"
  *\\r\\n    | extend ErrorMessage = iif (ErrorMessage contains \\\"Diskte
  yeterli yer yok.\\\", \\\"There is not enough space on the
  disk.\\\",\\r\\n                                iif(ErrorMessage contains
  \\\"There is not enough space on the disk\\\", \\\"There is not enough space
  on the disk.\\\",\\r\\n                                iif(ErrorMessage
  contains \\\"このコマンドを実行するための十分な記憶域がありません\\\", \\\"There is not enough space on
  the disk.\\\",\\r\\n                                iif(ErrorMessage contains
  \\\"Έγινε προσπάθεια εκτέλεσης μη εξουσιοδοτημένης ενέργειας.\\\",
  \\\"Attempted to perform an unauthorized
  operation.\\\",\\r\\n                                iif(ErrorMessage contains
  \\\"Attempted to perform an unauthorized operation.\\\", \\\"Attempted to
  perform an unauthorized
  operation.\\\",\\r\\n                                ErrorMessage)))))\\r\\n     \
  | summarize Hits = count(), sHits = dcount(SessionId), dHits
  =dcount(MacAddressHash) by ErrorMessage,
  Type=EventName;  \\r\\n    QueryProductError\\r\\n    |
  union                       \\r\\n    InstallProductError,                       \
  \\r\\n    PackageFailure,\\r\\n    //Fault,\\r\\n    EvaluateInstallPatameter\
  sError,\\r\\n    EndOperationGetProductError,\\r\\n    CmdLineError,\\r\\n    \
  JsCrash,\\r\\n    Name,\\r\\n    EvaluateModifyParametersError,\\r\\n    Exce\
  ption,\\r\\n    CreateShortcutFailed,\\r\\n    ConfigError,\\r\\n    Boostrap\
  perError,\\r\\n    AppUpdateDownloadFinishedFailed,\\r\\n    EngineUnhandledE\
  xception,\\r\\n    GetSurveyConfigurationError,\\r\\n    DeleteShotcutFailed,\
  \\r\\n    UserDataWriteFailed,\\r\\n    LoadDetailsPageError,\\r\\n    AppUni\
  nstallSelfFailed,\\r\\n    OpenLogError,\\r\\n    VSFeedbackError,\\r\\n    A\
  ppFinalizeFailed,\\r\\n    BackgroundDownloaderUnhandledException,\\r\\n    S\
  etupEngineFault,\\r\\n    GraphConstructionError,\\r\\n    VsixInstallerFault,\
  \\r\\n    StartServiceHubError\\r\\n    |order by dHits
  desc\\r\\n}\",\"inputParameters\":[{\"name\":\"daysToLookback\",\"cslType\":\
  \"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"}]},{\"name\":\"S\
  etup100_Issues_30days\",\"docstring\":\"Return issues from last 7
  days.\",\"body\":\"{\\r\\nSetup100_Issues_stage(totimespan(\\\"30.00:00:00\\\
  \"))\\r\\n}\",\"inputParameters\":[]},{\"name\":\"Setup100_Issues_7days\",\"d\
  ocstring\":\"Return issues from last 7
  days.\",\"body\":\"{\\r\\nSetup100_Issues_stage(totimespan(\\\"7.00:00:00\\\"\
  ))\\r\\n}\",\"inputParameters\":[]},{\"name\":\"Setup100_Issues_Preview\",\"d\
  ocstring\":\"Return issues from last x days for
  preview.\",\"body\":\"{   \\r\\nlet GetSurveyConfigurationError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/get-surveyconfiguration-error\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | where ExeVersion startswith previewVersion\\r\\n    | extend
  ErrorMessage = ExceptionMessageHash\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage contains \\\"The underlying stream has closed\\\", \\\"The
  underlying stream has closed\\\",ErrorMessage) \\r\\n    | extend
  MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage = trim(\\\" \\\",ErrorMessage), Type =
  EventName;\\r\\nlet DeleteShotcutFailed =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/deleteshortcutfailed\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | where ExeVersion startswith previewVersion\\r\\n    | extend
  ErrorMessage = FaultDescription\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage = trim(\\\" \\\",ErrorMessage), Type =
  EventName;\\r\\nlet UserDataWriteFailed =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/userdatawritefailed\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | where ExeVersion startswith previewVersion\\r\\n    | parse
  ExceptionMessageHash with Error \\\", open\\\" *\\r\\n    | extend Error =
  iff(isempty(Error), ExceptionMessageHash, Error)\\r\\n    | extend
  MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | summarize Hits = count(), sHits =
  dcount(SessionId), dHits = dcount(MacAddressHash) by ErrorMessage = trim(\\\"
  \\\",Error), Type = EventName;\\r\\nlet GraphConstructionError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/setupengine/graphconstructionerrors\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | where ExeVersion startswith previewVersion\\r\\n    | extend
  ErrorMessage = Properties[\\\"vs.setupengine.errormessage\\\"]\\r\\n    |
  parse ErrorMessage with Error \\\"found in catalog\\\" *\\r\\n    | extend
  MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | summarize Hits = count(), sHits =
  dcount(SessionId), dHits = dcount(MacAddressHash) by ErrorMessage = trim(\\\"
  \\\",Error), Type = EventName;\\r\\nlet VsixInstallerFault =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where IsInternal == false\\r\\n    | where
  ExeVersion startswith previewVsVersion\\r\\n    | where EventName ==
  \\\"vs/extensionmanager/vsixinstaller/fault\\\"\\r\\n    | where
  ExceptionMessageHash !contains \\\"[UserName]\\\"\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash contains
  \\\"/admin\\\",\\\"You must have administrative privileges to install using
  the /admin switch.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash contains \\\"IncrediBuild
  Build Acceleration\\\" and ExceptionMessageHash contains
  \\\"IncrediBuildMenu\\\",\\\"Uninstall of IncrediBuild Build Acceleration
  failed. To uninstall this extension please uninstall all of the following
  components: IncrediBuildMenu, IncrediBuild - Build
  Acceleration\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash contains
  \\\"VSIXInstaller.UserCancelledException\\\",\\\"Exception of type
  'VSIXInstaller.UserCancelledException' was
  thrown.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash contains \\\"此扩展已安装到所有适用的产品。\\\",\\\"This extension
  is already installed to all applicable
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash contains
  \\\"この拡張機能は、すべての適用可能な製品に既にインストールされています。\\\",\\\"This extension is already
  installed to all applicable products.\\\",ExceptionMessageHash)\\r\\n    |
  extend ExceptionMessageHash  = iif(ExceptionMessageHash contains \\\"Это
  расширение уже установлено для всех возможных продуктов.\\\",\\\"This
  extension is already installed to all applicable
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash contains \\\"Esta extensão já foi instalada em todos
  os produtos aplicáveis.\\\",\\\"This extension is already installed to all
  applicable products.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash contains \\\"Cette extension
  est déjà installée dans tous les produits applicables.\\\",\\\"This extension
  is already installed to all applicable
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash contains \\\"Rozszerzenie zostało już zainstalowane
  do wszystkich dających się zastosować produktów.\\\",\\\"This extension is
  already installed to all applicable
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash contains \\\"이 확장은 적용 가능한 모든 제품에 이미 설치되어
  있습니다.\\\",\\\"This extension is already installed to all applicable
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash contains \\\"Bu uzantı zaten uygun tüm ürünler için
  yüklü.\\\",\\\"This extension is already installed to all applicable
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash contains \\\"Questa estensione è già installata per
  tutti i prodotti utilizzabili.\\\",\\\"This extension is already installed to
  all applicable products.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash contains \\\"Diese
  Erweiterung ist bereits für alle entsprechenden Produkte
  installiert.\\\",\\\"This extension is already installed to all applicable
  products.\\\",ExceptionMessageHash)\\r\\n    // This extension is not
  installable on any currently installed products.\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash contains
  \\\"此扩展不能安装在任何当前安装的产品上。\\\",\\\"This extension is not installable on any
  currently installed products.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash contains \\\"Bu uzantı yüklü
  ürünlerden herhangi birinde yüklenebilir değil.\\\",\\\"This extension is not
  installable on any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash contains \\\"Esta extensión no se puede instalar en
  ninguno de los productos instalados actualmente.\\\",\\\"This extension is not
  installable on any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash contains \\\"Cette extension n'est installée sur
  aucun des produits actuellement installés.\\\",\\\"This extension is not
  installable on any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash contains \\\"Это расширение не может быть установлено
  ни для одного из установленных продуктов.\\\",\\\"This extension is not
  installable on any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash contains
  \\\"この拡張機能は、現在インストール済みの製品にはインストールできません。\\\",\\\"This extension is not
  installable on any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash contains \\\"이 확장은 현재 설치되어 있는 제품에 설치할 수
  없습니다.\\\",\\\"This extension is not installable on any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash contains \\\"Diese Erweiterung kann auf den derzeit
  installierten Produkten nicht installiert werden.\\\",\\\"This extension is
  not installable on any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash contains \\\"Esta extensión está ya instalada en
  todos los productos aplicables.\\\",\\\"This extension is not installable on
  any currently installed products.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash contains \\\"Esta extensão
  não é instalável em nenhum dos produtos atualmente instalados.\\\",\\\"This
  extension is not installable on any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash contains \\\"Esta extensión está ya instalada en
  todos los productos aplicables.\\\",\\\"This extension is not installable on
  any currently installed products.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"The extension
  with ID\\\" and ExceptionMessageHash endswith \\\"is not installed to any
  currently installed products.\\\",\\\"The extension with ID 'x' is not
  installed to any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"ID 为\\\" and ExceptionMessageHash
  endswith \\\"的扩展未安装到任何当前已安装的产品中。\\\",\\\"The extension with ID 'x' is not
  installed to any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"L'extension avec l\\\" and
  ExceptionMessageHash endswith \\\"est installée sur aucun des produits
  actuellement installés.\\\",\\\"The extension with ID 'x' is not installed to
  any currently installed products.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"ID 为\\\" and
  ExceptionMessageHash endswith \\\"的扩展未安装到任何当前已安装的产品中。\\\",\\\"The extension
  with ID 'x' is not installed to any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"현재 설치된 제품에 ID가 \\\" and
  ExceptionMessageHash endswith \\\"인 확장이 설치되어 있지 않습니다.\\\",\\\"The extension
  with ID 'x' is not installed to any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash endswith \\\"kimlikli uzantı yüklü ürünlerden
  herhangi birinde yüklü değil.\\\",\\\"The extension with ID 'x' is not
  installed to any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"ID 为\\\" and ExceptionMessageHash
  endswith \\\"的扩展未安装到任何当前已安装的产品中。\\\",\\\"The extension with ID 'x' is not
  installed to any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Rozszerzenie o identyfikatorze \\\"
  and ExceptionMessageHash endswith \\\"nie jest zainstalowane dla żadnego
  obecnie zainstalowanego rozszerzenia.\\\",\\\"The extension with ID 'x' is not
  installed to any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"ID\\\" and ExceptionMessageHash
  endswith \\\"の拡張機能は、現在インストールされているどの製品にもインストールされていません。\\\",\\\"The extension
  with ID 'x' is not installed to any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"A extensão com a ID\\\" and
  ExceptionMessageHash endswith \\\"não foi instalada em nenhum dos produtos
  atualmente instalados.\\\",\\\"The extension with ID 'x' is not installed to
  any currently installed products.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"L'estensione
  con ID\\\" and ExceptionMessageHash endswith \\\"non è installata in nessuno
  dei prodotti attualmente installati.\\\",\\\"The extension with ID 'x' is not
  installed to any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Расширение с идентификатором \\\" and
  ExceptionMessageHash endswith \\\"не установлено в какой-либо из установленных
  продуктов.\\\",\\\"The extension with ID 'x' is not installed to any currently
  installed products.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"La extensión
  con el identificador \\\" and ExceptionMessageHash endswith \\\"no está
  instalada en ninguno de los productos actualmente instalados.\\\",\\\"The
  extension with ID 'x' is not installed to any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Rozšíření s ID \\\" and
  ExceptionMessageHash endswith \\\"není nainstalováno do žádného z momentálně
  nainstalovaných produktů.\\\",\\\"The extension with ID 'x' is not installed
  to any currently installed products.\\\",ExceptionMessageHash)\\r\\n    |
  extend ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"Die
  Erweiterung mit der ID \\\" and ExceptionMessageHash endswith \\\"ist für
  keines der momentan installierten Produkte installiert.\\\",\\\"The extension
  with ID 'x' is not installed to any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"The extension with ID\\\" and
  ExceptionMessageHash endswith \\\"is not installed to Community.\\\",\\\"The
  extension with ID 'x' is not installed to Community | Pro |
  Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"The extension
  with ID\\\" and ExceptionMessageHash endswith \\\"is not installed to
  Pro.\\\",\\\"The extension with ID 'x' is not installed to Community | Pro |
  Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"The extension
  with ID\\\" and ExceptionMessageHash endswith \\\"is not installed to
  Enterprise.\\\",\\\"The extension with ID 'x' is not installed to Community |
  Pro | Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"Die
  Erweiterung mit der ID \\\" and ExceptionMessageHash endswith \\\"wird nicht
  für Pro installiert.\\\",\\\"The extension with ID 'x' is not installed to
  Community | Pro | Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash endswith \\\"
  Pro.\\\",\\\"The extension with ID 'x' is not installed to Community | Pro |
  Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash endswith
  \\\"Pro'.\\\",\\\"The extension with ID 'x' is not installed to Community |
  Pro | Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash endswith \\\"
  Pro。\\\",\\\"The extension with ID 'x' is not installed to Community | Pro |
  Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash endswith \\\"인 확장이 Pro에 설치되어
  있지 않습니다.\\\",\\\"The extension with ID 'x' is not installed to Community | Pro
  | Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"ID 为\\\" and
  ExceptionMessageHash endswith \\\"的扩展未安装到 Community。\\\",\\\"The extension
  with ID 'x' is not installed to Community | Pro |
  Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"ID '\\\" and
  ExceptionMessageHash endswith \\\"の拡張機能は Community にインストールされません。\\\",\\\"The
  extension with ID 'x' is not installed to Community | Pro |
  Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"Die
  Erweiterung mit der ID \\\" and ExceptionMessageHash endswith \\\"wird nicht
  für Community installiert.\\\",\\\"The extension with ID 'x' is not installed
  to Community | Pro | Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash endswith \\\"
  Community.\\\",\\\"The extension with ID 'x' is not installed to Community |
  Pro | Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash endswith
  \\\"Community'.\\\",\\\"The extension with ID 'x' is not installed to
  Community | Pro | Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash endswith \\\"
  Community。\\\",\\\"The extension with ID 'x' is not installed to Community |
  Pro | Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash endswith \\\"인 확장이 Community에
  설치되어 있지 않습니다.\\\",\\\"The extension with ID 'x' is not installed to Community
  | Pro | Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"ID 为\\\" and
  ExceptionMessageHash endswith \\\"的扩展未安装到 Enterprise。\\\",\\\"The extension
  with ID 'x' is not installed to Community | Pro |
  Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"Die
  Erweiterung mit der ID \\\" and ExceptionMessageHash endswith \\\"wird nicht
  für Enterprise installiert.\\\",\\\"The extension with ID 'x' is not installed
  to Community | Pro | Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"ID '\\\" and
  ExceptionMessageHash endswith \\\"の拡張機能は Enterprise にインストールされません。\\\",\\\"The
  extension with ID 'x' is not installed to Community | Pro |
  Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"ID '\\\" and
  ExceptionMessageHash endswith \\\"の拡張機能は Pro にインストールされません。\\\",\\\"The
  extension with ID 'x' is not installed to Community | Pro |
  Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash endswith \\\"
  Enterprise.\\\",\\\"The extension with ID 'x' is not installed to Community |
  Pro | Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash endswith
  \\\"Enterprise'.\\\",\\\"The extension with ID 'x' is not installed to
  Community | Pro | Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash endswith \\\"
  Enterprise。\\\",\\\"The extension with ID 'x' is not installed to Community |
  Pro | Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash endswith \\\"인 확장이 Enterpise에
  설치되어 있지 않습니다.\\\",\\\"The extension with ID 'x' is not installed to Community
  | Pro | Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"ID 为\\\" and
  ExceptionMessageHash endswith \\\"的扩展未安装到 Pro。\\\",\\\"The extension with ID
  'x' is not installed to Community | Pro |
  Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"Package\\\"
  and ExceptionMessageHash endswith \\\"failed to install\\\",\\\"Package 'x'
  failed to install\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"Package\\\"
  and ExceptionMessageHash endswith \\\"failed to download\\\",\\\"Package 'x'
  failed to download\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"The following
  processes need to be shut down before executing extension
  changes\\\",\\\"Blocking Processes\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"Os processos a
  seguir precisam ser encerrados antes de executar alterações de
  extensão\\\",\\\"Blocking Processes\\\",ExceptionMessageHash)\\r\\n    |
  extend ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"Перед
  тем как совершать изменения расширения, необходимо завершить следующие
  процессы:\\\",\\\"Blocking Processes\\\",ExceptionMessageHash)\\r\\n    |
  extend ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"확장 변경
  내용을 실행하기 전에 다음 프로세스를 종료해야 합니다.\\\",\\\"Blocking
  Processes\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Les processus suivants doivent être
  arrêtés avant l'exécution des modifications d'extension :\\\",\\\"Blocking
  Processes\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith
  \\\"拡張機能の変更を実行する前に、次のプロセスをシャットダウンする必要があります:\\\",\\\"Blocking
  Processes\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Uzantı değişiklikleri yürütülmeden
  önce aşağıdaki işlemlerin kapatılması gerekiyor:\\\",\\\"Blocking
  Processes\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"執行延伸模組變更前，必須先關閉下列處理序:\\\",\\\"Blocking
  Processes\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Než se provedou změny rozšíření, musí
  se vypnout tyto procesy:\\\",\\\"Blocking
  Processes\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Przed wprowadzeniem zmian rozszerzenia
  należy zamknąć następujące procesy:\\\",\\\"Blocking
  Processes\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Prima di apportare le modifiche alle
  estensioni, è necessario arrestare i processi seguenti:\\\",\\\"Blocking
  Processes\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Die folgenden Prozesse müssen
  heruntergefahren werden, bevor die Erweiterungsänderungen ausgeführt
  werden:\\\",\\\"Blocking Processes\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"Es necesario
  apagar los procesos siguientes antes de ejecutar los cambios de
  extensión:\\\",\\\"Blocking Processes\\\",ExceptionMessageHash)\\r\\n    |
  extend ExceptionMessageHash  = iif(ExceptionMessageHash endswith \\\"because
  it is being used by another process.\\\",\\\"The process cannot access the
  file 'x' because it is being used by another
  process.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"执行扩展更改前，需要关闭以下进程:\\\",\\\"Blocking
  Processes\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"No product with instance
  id(s)\\\",\\\"No product with instance id(s) x are
  installed.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Kein Produkt mit
  Instanz-ID(s)\\\",\\\"No product with instance id(s) x are
  installed.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"未安裝執行個體識別碼為 \\\",\\\"No product with
  instance id(s) x are installed.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"Продукты с
  идентификатором экземпляра \\\",\\\"No product with instance id(s) x are
  installed.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Örnek kimliği \\\",\\\"No product with
  instance id(s) x are installed.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"Nenhum produto
  com as IDs \\\",\\\"No product with instance id(s) x are
  installed.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Aucun produit avec le ou les
  ID\\\",\\\"No product with instance id(s) x are
  installed.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"No hay ningún producto instalado con
  este identificador de instancia:\\\",\\\"No product with instance id(s) x are
  installed.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"未安装具有实例\\\",\\\"No product with
  instance id(s) x are installed.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"The dependent
  package of \\\",\\\"The dependent package of 'x' cannot be found:
  y.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"找不到依赖包 \\\",\\\"The dependent package
  of 'x' cannot be found: y.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash contains
  \\\"CancelledException'\\\",\\\"Exception of type
  'VSIXInstaller.UserCancelledException' was
  thrown.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"This extension cannot be installed
  because the following references are missing:\\\",\\\"Missing
  references\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Could not find file \\\",\\\"Could not
  find file 'x'.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith
  \\\"未能找到文件\\\",\\\"Could not find file
  'x'.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Не удалось найти часть
  пути\\\",\\\"Could not find file 'x'.\\\",ExceptionMessageHash)\\r\\n    |
  extend ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"Could
  not find a part of the path\\\",\\\"Could not find a part of the path
  'x'.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"未能找到路径\\\",\\\"Could not find a part
  of the path 'x'.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"Access to the
  path \\\",\\\"Access to the path 'x' is
  denied.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Access to the registry key
  \\\",\\\"Access to the registry key 'x' is
  denied.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"WebClient download
  failed\\\",\\\"Download Failure\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"VSHiveStub.exe
  failed\\\",\\\"VSHiveStub.exe failed\\\",ExceptionMessageHash)\\r\\n    // No
  modifications could be applied.\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"无法应用修改。\\\",\\\"No modifications could
  be applied.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith
  \\\"変更を適用できませんでした。\\\",\\\"No modifications could be
  applied.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"The application\\\" and
  ExceptionMessageHash endswith \\\"is not installed.\\\",\\\"The application
  'Enterprise | Pro | Community', version x, is not
  installed.\\\",ExceptionMessageHash)\\r\\n    | where ExceptionMessageHash
  !startswith \\\"Pre-check verification\\\"\\r\\n    | where
  ExceptionMessageHash !contains (\\\"/admin\\\") \\r\\n    | where
  ExceptionMessageHash !contains (\\\"Blocking Processes\\\")\\r\\n    | where
  ExceptionMessageHash !contains (\\\"Exception of type
  'VSIXInstaller.UserCancelledException' was thrown.\\\")\\r\\n    | extend
  Error = ExceptionMessageHash\\r\\n    // Filter out known issue\\r\\n    |
  where Error != \\\"The extension with ID 'x' is not installed to any currently
  installed products.\\\"\\r\\n    | where Error != \\\"This extension is not
  installable on any currently installed products.\\\"\\r\\n    | where Error !=
  \\\"This extension is already installed to all applicable
  products.\\\"\\r\\n    | where Error != \\\"No modifications could be
  applied.\\\"\\r\\n    | where Error != \\\"No product with instance id(s) x
  are installed.\\\"\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)    \\r\\n    | summarize Hits = count(), sHits =
  dcount(SessionId), dHits = dcount(MacAddressHash) by ErrorMessage = trim(\\\"
  \\\",Error), Type = EventName;\\r\\nlet SetupEngineFault =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/setupengine/fault\\\"\\r\\n    | where IsInternal == false\\r\\n    |
  where ExeVersion startswith previewVersion or ExeVersion startswith
  previewVsVersion \\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | extend ExceptionMessageHash =
  iif(isempty(ExceptionMessageHash), FaultDescription,
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionType == \\\"System.NullReferenceException\\\",
  strcat(\\\"NullReferenceException:\\\",Properties[\\\"reserved.datamodel.faul\
  t.bucketparam6\\\"]), ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash contains
  \\\"https://download.visualstudio.microsoft.com/download\\\" and ExeName ==
  \\\"backgrounddownload\\\", strcat(ExeName,\\\": \\\",ExceptionType),
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"12029\\\", \\\"12029 Download Failure\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"文件包含损坏的数据。\\\", \\\"File contains corrupted
  data.\\\", ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"Dosya bozuk veri içeriyor.\\\", \\\"File
  contains corrupted data.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"ファイルのデータが壊れています。\\\",
  \\\"File contains corrupted data.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"El archivo contiene
  datos dañados.\\\", \\\"File contains corrupted data.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"Il file contiene dati danneggiati.\\\",
  \\\"File contains corrupted data.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"Файл содержит
  поврежденные данные.\\\", \\\"File contains corrupted data.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"Plik zawiera uszkodzone dane.\\\", \\\"File
  contains corrupted data.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"Die Datei enthält
  beschädigte Daten.\\\", \\\"File contains corrupted data.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"Le fichier contient des données
  endommagées.\\\", \\\"File contains corrupted data.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"O arquivo contém dados corrompidos.\\\",
  \\\"File contains corrupted data.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"El producto se modificó
  fuera del instalador. Reintente la operación.\\\", \\\"The product was
  modified outside of this installer. Please retry the operation.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"该产品在此安装程序之外进行了修改。请重试操作。\\\", \\\"The product
  was modified outside of this installer. Please retry the operation.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"Продукт был изменен вне этой программы
  установки. Повторите операцию.\\\", \\\"The product was modified outside of
  this installer. Please retry the operation.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"Das Produkt wurde außerhalb dieses Installers
  geändert. Wiederholen Sie den Vorgang.\\\", \\\"The product was modified
  outside of this installer. Please retry the operation.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"Le produit a été modifié en dehors de ce
  programme d'installation. Réessayez l'opération.\\\", \\\"The product was
  modified outside of this installer. Please retry the operation.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"O produto foi modificado fora desse
  instalador. Tente a operação novamente.\\\", \\\"The product was modified
  outside of this installer. Please retry the operation.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"Produkt został zmodyfikowany poza tym
  instalatorem. Spróbuj ponownie wykonać operację.\\\", \\\"The product was
  modified outside of this installer. Please retry the operation.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"Il prodotto non è stato modificato in questo
  programma di installazione. Ripetere l'operazione.\\\", \\\"The product was
  modified outside of this installer. Please retry the operation.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"製品は、このインストーラーの外部で変更されました。操作を再試行してください。\\\",
  \\\"The product was modified outside of this installer. Please retry the
  operation.\\\", ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"算术运算导致溢出。\\\", \\\"Arithmetic operation
  resulted in an overflow.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"磁盘空间不足。\\\", \\\"There
  is not enough space on the disk.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"Espacio en disco
  insuficiente.\\\", \\\"There is not enough space on the disk.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"Недостаточно места на диске.\\\", \\\"There is
  not enough space on the disk.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"Espace insuffisant sur
  le disque.\\\", \\\"There is not enough space on the disk.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"Es steht nicht genug Speicherplatz auf dem
  Datenträger zur Verfügung.\\\", \\\"There is not enough space on the
  disk.\\\", ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"另一项 Visual Studio 安装正在进行中。你需要先关闭它，然后才能继续。\\\",
  \\\"Another Visual Studio installation is running. You'll need to close it
  before you continue.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"Eine andere Visual
  Studio-Installation wird bereits ausgeführt. Schließen Sie sie, bevor Sie
  fortfahren.\\\", \\\"Another Visual Studio installation is running. You'll
  need to close it before you continue.\\\", ExceptionMessageHash)\\r\\n    |
  extend ExceptionMessageHash = iif(ExceptionMessageHash == \\\"Hay otra
  instalación de Visual Studio en ejecución. Tendrá que cerrarla para
  continuar.\\\", \\\"Another Visual Studio installation is running. You'll need
  to close it before you continue.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"Başka bir Visual Studio
  yüklemesi çalışıyor. Devam etmeden önce diğer yüklemeyi kapatmanız
  gerekir.\\\", \\\"Another Visual Studio installation is running. You'll need
  to close it before you continue.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"Jest już uruchomiona
  inna instalacja programu Visual Studio. Musisz ją zamknąć przed
  kontynuowaniem.\\\", \\\"Another Visual Studio installation is running. You'll
  need to close it before you continue.\\\", ExceptionMessageHash)\\r\\n    |
  extend ExceptionMessageHash = iif(ExceptionMessageHash == \\\"Outra instalação
  do Visual Studio está em execução. Será necessário fechá-la antes de
  continuar.\\\", \\\"Another Visual Studio installation is running. You'll need
  to close it before you continue.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"Une autre installation
  de Visual Studio est en cours d'exécution. Vous devez fermer cette dernière
  pour pouvoir continuer.\\\", \\\"Another Visual Studio installation is
  running. You'll need to close it before you continue.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"Запущена другая установка Visual Studio.
  Закройте ее перед тем, как продолжить.\\\", \\\"Another Visual Studio
  installation is running. You'll need to close it before you continue.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"別の Visual Studio
  のインストールが実行中であり、それを閉じてからでないと続行できません。\\\", \\\"Another Visual Studio
  installation is running. You'll need to close it before you continue.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"다른 Visual Studio 설치가 실행 중입니다. 계속하려면 설치를 취소해야
  합니다.\\\", \\\"Another Visual Studio installation is running. You'll need to
  close it before you continue.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"È in esecuzione
  un'altra installazione di Visual Studio ed è necessario chiuderla per
  continuare.\\\", \\\"Another Visual Studio installation is running. You'll
  need to close it before you continue.\\\", ExceptionMessageHash)\\r\\n    |
  extend ExceptionMessageHash = iif(ExceptionMessageHash == \\\"Esta extensión
  no se puede instalar en ninguno de los productos instalados actualmente.\\\",
  \\\"This extension cannot be installed on any of the currently installed
  products.\\\", ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"此扩展不能安装在任何当前安装的产品上。\\\", \\\"This extension
  cannot be installed on any of the currently installed products.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"La operación aritmética ha provocado un
  desbordamiento.\\\", \\\"Arithmetic operation resulted in an overflow.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash contains \\\"12029\\\",
  \\\"ERROR_WINHTTP_CANNOT_CONNECT (12029)\\\",ExceptionMessageHash) \\r\\n    |
  parse ExceptionMessageHash with FailurePackage \\\";\\\" *\\r\\n    | where
  ExceptionMessageHash !contains \\\"failed to download\\\" \\r\\n    | parse
  ExceptionStackTraceHash  with \\\"[\\\\\\\"\\\" message \\\"(\\\" *\\r\\n    |
  parse ExceptionStackTraceHash  with * \\\"at \\\" message1 \\\"(\\\"
  *\\r\\n    | parse ExceptionStackTraceHash  with message2 \\\"(\\\"
  *\\r\\n    | extend message = iif(isempty(message), message1,
  message)\\r\\n    | extend message = iif(isempty(message), message2,
  message)\\r\\n    | extend ExceptionMessageHash = iif( ExceptionMessageHash
  ==\\\"File contains corrupted data.\\\",
  message,  ExceptionMessageHash)\\r\\n    | where ExceptionMessageHash
  !contains \\\"12007\\\"\\r\\n    // Ignore the caching error since the actual
  error will be captured in the fault event before this\\r\\n    | where
  ExceptionMessageHash !contains \\\"Unable to cache catalog using
  channel\\\"\\r\\n    | summarize Hits = count(), sHits = dcount(SessionId),
  dHits = dcount(MacAddressHash) by ErrorMessage = ExceptionMessageHash, Type =
  EventName;\\r\\nlet LoadDetailsPageError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/load-detailspage-error\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | where ExeVersion startswith previewVersion\\r\\n    | extend
  MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | summarize Hits = count(), sHits =
  dcount(SessionId), dHits = dcount(MacAddressHash) by ErrorMessage = trim(\\\"
  \\\",FaultDescription ), Type = EventName;\\r\\nlet AppUninstallSelfFailed =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/appuninstallselffailed\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | where ExeVersion startswith previewVersion\\r\\n    | extend
  ErrorMessage = ExceptionMessageHash\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage = trim(\\\" \\\",ErrorMessage), Type =
  EventName;\\r\\nlet OpenLogError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/open-log-error\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | where ExeVersion startswith previewVersion\\r\\n    | extend
  ErrorMessage = FaultDescription \\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage = trim(\\\" \\\",ErrorMessage), Type =
  EventName;\\r\\nlet BackgroundDownloaderUnhandledException =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/setupengine/backgrounddownload/unhandledexceptionthrown\\\"\\r\\n    |
  where ExeVersion startswith previewVersion\\r\\n    | where IsInternal ==
  false\\r\\n    | extend ErrorMessage =
  tostring(Properties[\\\"reserved.datamodel.fault.description\\\"])\\r\\n    |
  extend ErrorMessage = iif(ExceptionType ==
  \\\"System.NullReferenceException\\\",
  strcat(\\\"NullReferenceException:\\\",Properties[\\\"reserved.datamodel.faul\
  t.bucketparam6\\\"]), ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage == \\\"BackgrounDownload unexpected error\\\",
  ExceptionMessageHash, ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage startswith \\\"No catalog found at
  'C:\\\\\\\\WINDOWS\\\\\\\\system32\\\\\\\\config\\\\\\\\systemprofile\\\\\\\\\
  AppData\\\\\\\\Local\\\\\\\\Microsoft\\\\\\\\VisualStudio\\\\\\\\Packages\\\\\
  \\\\_Channels\\\", \\\"No catalog found at
  'C:\\\\\\\\WINDOWS\\\\\\\\system32\\\\\\\\config\\\\\\\\systemprofile\\\\\\\\\
  AppData\\\\\\\\Local\\\\\\\\Microsoft\\\\\\\\VisualStudio\\\\\\\\Packages\\\\\
  \\\\_Channels\\\\\\\\[InstanceId]\\\\\\\\catalog.json'\\\",
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage == \\\"Cannot
  get remote settings, use default value instead. Exception: 已取消一个任务。\\\", \\\"A
  task was canceled.\\\",\\r\\n                                iif(ErrorMessage
  == \\\"Cannot get remote settings, use default value instead. Exception: A
  task was canceled.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: Eine
  Aufgabe wurde abgebrochen.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception:
  タスクが取り消されました。\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: Se
  canceló una tarea.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: Отменена
  задача.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: 작업이
  취소되었습니다.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: Uma
  tarefa foi cancelada.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: Une
  tâche a été annulée.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: Zadanie
  zostało anulowane.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception:
  Un'attività è stata annullata.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: Bir
  görev iptal edildi.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception:
  工作已取消。\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: Een taak
  is geannuleerd.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: En
  uppgift har avbrutits.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: Úloha
  byla zrušena.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: Egy
  feladat végrehajtása megszakadt.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: En
  opgave blev annulleret.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: Foi
  cancelada uma tarefa.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: En
  oppgave ble avbrutt.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: تم إلغاء
  مهمة.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception:
  Ακυρώθηκε μια εργασία.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: Tehtävä
  peruutettiin.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: En
  aktivitet har avbrutits.\\\", \\\"A task was canceled.\\\",
  ErrorMessage))))))))))))))))))))))))\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage = trim(\\\" \\\",ErrorMessage), Type =
  EventName;\\r\\nlet VSFeedbackError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/open-vsfeedback-error\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | where ExeVersion startswith previewVersion\\r\\n    | extend
  ErrorMessage = ExceptionMessageHash  \\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage = trim(\\\" \\\",ErrorMessage), Type =
  EventName;\\r\\nlet AppFinalizeFailed =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/appfinalizefailed\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | where ExeVersion startswith previewVersion\\r\\n    | extend
  ErrorMessage = ExceptionMessageHash\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage = trim(\\\" \\\",ErrorMessage), Type =
  EventName;\\r\\nlet SearchFailedError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/feedbackclient/search-failed\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | where ExeVersion startswith previewVersion\\r\\n    | extend
  ErrorMessage = tostring(Properties[\\\"vs.willow.error\\\"])\\r\\n    | extend
  MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage = trim(\\\" \\\",ErrorMessage), Type =
  EventName;\\r\\nlet StartServiceHubError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/start-servicehub-error\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | where ExeVersion startswith previewVersion\\r\\n    | extend
  ErrorMessage = FaultDescription\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage = trim(\\\" \\\",ErrorMessage), Type =
  EventName;\\r\\nlet QueryProductError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/query-product-error\\\"\\r\\n    | where ExeVersion startswith
  previewVersion\\r\\n    | where IsInternal == false\\r\\n    | extend
  ErrorMessage = ExceptionType\\r\\n    | extend ErrorMessage1 =
  FaultDescription\\r\\n    | extend Stack = ExceptionStackTraceHash\\r\\n    |
  parse ExceptionStackTraceHash with ExceptionName2 \\\": \\\" ErrorMessage2
  \\\"\\\\n\\\" *\\r\\n    | parse ExceptionStackTraceHash with
  ChannelManifestDownloadExceptionPrefixString \\\"Unknown error\\\"
  ChannelManifestDownloadExceptionErrorCode \\\"\\\\n\\\" *\\r\\n    | parse
  ExceptionStackTraceHash with Garbage \\\"Unknown error\\\" ErrorCode1
  \\\"\\\\n\\\" *\\r\\n    | parse ExceptionStackTraceHash with \\\"Error: \\\"
  ExceptionName3 \\\": \\\" ErrorMessage3 \\\"\\\\n\\\" *\\r\\n    | extend
  ErrorMessage = iif(isempty(ExceptionName3), ErrorMessage2,
  ErrorMessage3)\\r\\n    | extend ErrorMessage = iif(isempty(ErrorMessage),
  ExceptionType, ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage
  == \\\"Error\\\", FaultDescription, ErrorMessage)\\r\\n    | extend
  ErrorMessage = iif(ErrorMessage contains \\\"underlying stream has closed\\\",
  \\\"The underlying stream has closed\\\", ErrorMessage)\\r\\n    // Object
  reference not set to an instance of an object.\\r\\n    | extend ErrorMessage
  = iif(ErrorMessage contains \\\"未将对象引用设置到对象的实例。\\\", \\\"Object reference not
  set to an instance of an object.\\\", ErrorMessage)\\r\\n    | extend
  ErrorMessage = iif(ErrorMessage contains \\\"Ссылка на объект не указывает на
  экземпляр объекта.\\\", \\\"Object reference not set to an instance of an
  object.\\\", ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage
  startswith \\\"The installer manifest failed signature validation.\\\",
  \\\"The installer manifest failed signature validation.\\\",
  ErrorMessage)\\r\\n    // The installer manifest failed signature
  validation.\\r\\n    | extend ErrorMessage = iif(ErrorMessage startswith
  \\\"安装程序清单签名验证失败\\\", \\\"The installer manifest failed signature
  validation.\\\", ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage startswith \\\"El manifiesto de instalador no pudo realizar
  la validación de signatura.\\\", \\\"The installer manifest failed signature
  validation.\\\", ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage startswith \\\"O manifesto do instalador apresentou falha na
  validação da assinatura.\\\", \\\"The installer manifest failed signature
  validation.\\\", ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage startswith \\\"Манифест установщика не прошел проверку
  подписи.\\\", \\\"The installer manifest failed signature validation.\\\",
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage startswith
  \\\"安裝程式資訊清單未通過特徵標記驗證。\\\", \\\"The installer manifest failed signature
  validation.\\\", ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage startswith \\\"Échec de la validation de la signature du
  manifeste du programme d'installation.\\\", \\\"The installer manifest failed
  signature validation.\\\", ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage startswith \\\"connect ENOENT \\\", \\\"connect ENOENT\\\",
  ErrorMessage)\\r\\n    // The dependent package cannot be found: x\\r\\n    |
  extend ErrorMessage = iif(ErrorMessage startswith \\\"找不到相关程序包:\\\", \\\"The
  dependent package cannot be found: x\\\", ErrorMessage)\\r\\n    | extend
  ErrorMessage = iif(ErrorMessage startswith \\\"Das abhängige Paket wurde nicht
  gefunden\\\", \\\"The dependent package cannot be found: x\\\",
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage contains
  \\\"Не удалось найти зависимый пакет\\\", \\\"The dependent package cannot be
  found: x\\\", ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage
  startswith \\\"The dependent package cannot be found\\\", \\\"The dependent
  package cannot be found: x\\\", ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage startswith \\\"Product \\\" and ErrorMessage contains \\\"is
  not available.\\\", \\\"Product 'x' is not available\\\",
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage startswith
  \\\"Did not find product with ID \\\" and ErrorMessage contains \\\"instead
  found these versions\\\", \\\"Did not find product with ID x, instead found
  these versions [y]\\\", ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage contains \\\"https://aka.ms/vs/cleanup\\\", \\\"An instance
  of the product cannot be loaded. Please visit https://aka.ms/vs/cleanup for
  help with this issue.\\\", ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage startswith \\\"No products are registered for instance \\\",
  \\\"No products are registered for instance 'x'.\\\", ErrorMessage)\\r\\n    |
  extend ErrorMessage = iif(ErrorMessage contains \\\"Hub host 'desktopClr'\\\",
  \\\"Hub Host 'desktopClr' failure\\\", ErrorMessage)    \\r\\n    | extend
  ErrorMessage = iif(Stack contains
  \\\"System.IO.__Error.WinIOError\\\",\\\"There is not enough space on the
  disk\\\", ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ExceptionType ==
  \\\"ChannelManifestDownloadError\\\" and (Stack contains
  \\\"https://aka.ms/vs/15/release/channel\\\" or Stack contains
  \\\"https://aka.ms/vs/15/pre/channel\\\"),
  \\r\\n                                        iif(
  isempty(ChannelManifestDownloadExceptionErrorCode), \\\"Unable to download the
  channel manifest\\\", strcat(\\\"Unable to download the channel
  manifest.  Error: \\\",ChannelManifestDownloadExceptionErrorCode)),
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(Stack contains \\\"Hub
  Controller\\\",\\\"Hub Controller issue.\\\", ErrorMessage)\\r\\n    | extend
  ErrorMessage = iif(Stack contains \\\"There are no handlers for setup service
  update required notifications.\\\",\\\"NoMessageHandlerError\\\",
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage ==
  \\\"InstallerError\\\",FaultDescription,ErrorMessage)\\r\\n    | extend
  ErrorMessage = iif(ErrorMessage  == \\\"ServiceHubUnavailableError\\\",
  FaultDescription, ErrorMessage)\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage = trim(\\\" \\\",ErrorMessage), Type =
  EventName;\\r\\n    let InstallProductError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/install-product-error\\\"\\r\\n    | where ExeVersion startswith
  previewVersion\\r\\n    | where IsInternal == false\\r\\n    | extend
  ErrorMessage = ExceptionType\\r\\n    | extend ErrorMessage1 =
  FaultDescription\\r\\n    | extend Stack = ExceptionStackTraceHash\\r\\n    |
  parse ExceptionStackTraceHash with ExceptionName \\\";\\\" ErrorMessage
  \\\"\\\\n\\\" *\\r\\n    | parse ExceptionStackTraceHash with \\\"Error: \\\"
  ExceptionName2 \\\": \\\" ErrorMessage2 \\\"\\\\n\\\" *\\r\\n    | extend
  ErrorMessage = iif(isempty(ExceptionName), ErrorMessage2,
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(isempty(ErrorMessage),
  ErrorMessage1, ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage
  contains \\\"underlying stream has closed\\\", \\\"The underlying stream has
  closed\\\", ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage1
  == \\\"IOException\\\" and Stack contains
  \\\"System.IO.__Error.WinIOError\\\",\\\"There is not enough space on the
  disk\\\", ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage1 ==
  \\\"InvalidOperationException\\\" and Stack contains
  \\\"VerifyInstallationPath\\\",\\\"The specified instance 'x' cannot be
  installed to the same location or child directory of existing instance
  'y\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage1 ==
  \\\"InvalidOperationException\\\" and Stack contains
  \\\"Engine.CacheCatalogUsingChannelManager\\\",\\\"Unable to cache catalog
  using channel uri
  https://aka.ms/vs/15/release/channel\\\",ErrorMessage)\\r\\n    | extend
  ErrorMessage = iif(ErrorMessage1 == \\\"InvalidOperationException\\\" and
  Stack contains
  \\\"CheckAndSetGlobalMutex\\\",\\\"ERROR_INSTALL_ALREADY_RUNNING
  (1618)\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage1 ==
  \\\"InvalidOperationException\\\" and Stack contains
  \\\".CommonExtensions.GetProduct\\\",\\\"No products are registered for
  instance 'x'.\\\",ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage1 == \\\"InvalidOperationException\\\" and Stack contains
  \\\"ThrowIfRunningInstallationOperation\\\",\\\"An installation operation is
  still processing and must be completed before starting
  another\\\",ErrorMessage)\\r\\n    | where ExceptionType !in
  (\\\"OperationCanceledError\\\",\\\"InstallerError\\\",
  \\\"PackageFailureException\\\")\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage, Type = EventName;\\r\\n    let
  PackageFailure =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/setupengine/packagefailure\\\"\\r\\n    | where
  tostring(Properties[\\\"context.default.vs.setupengine.id\\\"]) contains
  \\\"preview\\\"\\r\\n    | where IsInternal == false\\r\\n    | extend
  OperationType =
  tostring(Properties[\\\"vs.setupengine.operationtype\\\"])\\r\\n    | extend
  PackageId = tostring(Properties[\\\"vs.setupengine.packageid\\\"])\\r\\n    |
  extend InstallerId =
  tostring(Properties[\\\"context.default.vs.setupengine.sharedwillowinstallses\
  sionid\\\"])\\r\\n    | extend ResultSummary =
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam8\\\"])\\r\\n    |
  extend Operation_P7 =
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam7\\\"])\\r\\n    |
  extend ReturnCode_P6 = iif(Operation_P7 == \\\"-2146889721\\\", \\\"Install -
  Win10SDK\\\",
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam6\\\"]))\\r\\n    \
  | extend ErrorMessage = strcat(PackageId, \\\"_\\\", Operation_P7, \\\"_\\\",
  ReturnCode_P6)\\r\\n    | extend ErrorMessage = iif(ErrorMessage contains
  \\\"0x80072ee7\\\", \\\"WININET_E_NAME_NOT_RESOLVED (0x80072ee7)\\\",
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage contains
  \\\"2203\\\", \\\"MSI 2203 - Database: [2]. Cannot open database file. System
  error [3].\\\", ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage contains \\\"1303\\\", \\\"The installer has insufficient
  privileges to access this directory (1303)\\\", ErrorMessage)\\r\\n    |
  extend ErrorMessage = iif(ErrorMessage contains \\\"1620\\\", \\\"MSI 1620 -
  ERROR_INSTALL_PACKAGE_INVALID\\\", ErrorMessage)\\r\\n    | extend
  ErrorMessage = iif(ErrorMessage contains \\\"1601\\\", \\\"The Windows
  Installer Service could not be accessed (1601)\\\", ErrorMessage)\\r\\n    |
  extend ErrorMessage = iif(ErrorMessage contains \\\"-2147024784\\\", \\\"Out
  of diskspace errors performing various setup/willow operations.\\\",
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage contains
  \\\"0x80096004\\\", \\\"Setup fails due to corrupt file in temp cache\\\",
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage contains
  \\\"-2146233033\\\", \\\"GetVsixType throwing System.IO.FileFormatException
  (-2146233033)\\\", ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ReturnCode_P6 == \\\"CachePackage\\\", strcat(\\\"Error in CachePackage:
  \\\",Operation_P7), ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage contains \\\"1618\\\", \\\"ERROR_INSTALL_ALREADY_RUNNING
  (1618)\\\", ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage
  contains \\\"-2147024893_Uninstall\\\", \\\"COR_E_DIRECTORYNOTFOUND during
  Uinstall\\\", ErrorMessage)\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage, Type = EventName;    \\r\\n    // let
  Fault =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    //                        | where AdvancedServerTimestampUtc > now()
  - daysToLookback\\r\\n    //                        | where EventName ==
  \\\"vs/setupengine/fault\\\"\\r\\n    //                        | where
  IsInternal == false\\r\\n    //                        | extend ErrorMessage =
  ExceptionType\\r\\n    //                        | where ErrorMessage !in
  (\\\"OperationCanceledError\\\",\\\"InstallerError\\\")\\r\\n    //                        \
  | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage, Type = EventName;\\r\\n    let
  EvaluateInstallPatametersError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/evaluateinstallparameters-error\\\"\\r\\n    | where ExeVersion
  startswith previewVersion\\r\\n    | where IsInternal == false\\r\\n    |
  extend ErrorMessage = ExceptionMessageHash\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage contains @\\\"“:\\\\Program Files (x86)\\\\Microsoft Visual
  Studio\\\\2017\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  iif(ErrorMessage contains @\\\"':\\\\Program Files (x86)\\\\Microsoft Visual
  Studio\\\\2017\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  iif(ErrorMessage contains \\\"\\\\\\\":\\\\\\\\Program Files
  (x86)\\\\\\\\Microsoft Visual Studio\\\\\\\\2017\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  iif(ErrorMessage contains @\\\"is invalid\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  iif(ErrorMessage contains \\\" jest nieprawidłowa.\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  iif(ErrorMessage contains @\\\"”无效。\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  iif(ErrorMessage contains \\\"路徑 '\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  iif(ErrorMessage contains \\\" недопустим.\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  iif(ErrorMessage contains \\\"은(는) 잘못된 경로입니다.\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  iif(ErrorMessage contains \\\"' non è valido.\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  iif(ErrorMessage contains \\\"is inva[USERNAME]id.\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  iif(ErrorMessage contains \\\"' n'est pas valide.\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  iif(ErrorMessage contains \\\" no es válida.\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  iif(ErrorMessage contains \\\"' é inválido.\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  iif(ErrorMessage contains \\\" ist ungültig.\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  iif(ErrorMessage contains \\\" yolu geçerli değil.\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  iif(ErrorMessage contains \\\" je neplatná.\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  iif(ErrorMessage contains \\\" jest nieprawidłowa.\\\", @\\\"The path x is
  invalid.\\\",                                                                   \
  iif(ErrorMessage contains \\\" が正しくありません。\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  iif(ErrorMessage contains \\\"La ruta de acceso de instalación raíz es
  demasiado larga para este producto.\\\", @\\\"The root installation path is
  too long for this
  product.\\\",                                                                  \
  iif(ErrorMessage contains \\\"O caminho da instalação raiz é longo demais para
  este produto.\\\", @\\\"The root installation path is too long for this
  product.\\\",                                                                  \
  iif(ErrorMessage contains \\\"Le chemin d'installation racine est trop long
  pour ce produit.\\\", @\\\"The root installation path is too long for this
  product.\\\",                                                                  \
  iif(ErrorMessage contains \\\"Główna ścieżka instalacji jest za długa dla tego
  produktu.\\\", @\\\"The root installation path is too long for this
  product.\\\",                                                                  \
  iif(ErrorMessage contains \\\"Il percorso di installazione radice è troppo
  lungo per questo prodotto.\\\", @\\\"The root installation path is too long
  for this
  product.\\\",                                                                  \
  iif(ErrorMessage contains \\\"この製品のルート インストール パスが長すぎます。\\\", @\\\"The root
  installation path is too long for this
  product.\\\",                                                                  \
  iif(ErrorMessage contains \\\"Kořenová cesta instalace je pro tento produkt
  moc dlouhá.\\\", @\\\"The root installation path is too long for this
  product.\\\",                                                                  \
  iif(ErrorMessage contains \\\"Bu ürün için kök yükleme yolu çok uzun.\\\",
  @\\\"The root installation path is too long for this
  product.\\\",                                                                  \
  iif(ErrorMessage contains \\\"根安裝路徑對此產品而言過長。\\\", @\\\"The root installation
  path is too long for this
  product.\\\",                                                                  \
  iif(ErrorMessage contains \\\"이 제품의 루트 설치 경로가 너무 깁니다.\\\", @\\\"The root
  installation path is too long for this
  product.\\\",                                                                  \
  iif(ErrorMessage contains \\\"Корневой путь установки слишком длинный для
  этого продукта.\\\", @\\\"The root installation path is too long for this
  product.\\\",                                                                  \
  iif(ErrorMessage contains \\\"根安装路径长度对于此产品过长。\\\", @\\\"The root installation
  path is too long for this
  product.\\\",                                                                  \
  iif(ErrorMessage contains \\\"Der Stamminstallationspfad ist zu lang für
  dieses Produkt.\\\", @\\\"The root installation path is too long for this
  product.\\\",                                                                  \
  iif(ErrorMessage contains @\\\"Visual Studio nejde nainstalovat do neprázdného
  adresáře\\\", @\\\"Visual Studio cannot be installed to a nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage contains @\\\" dizinine yüklenemez.\\\", @\\\"Visual Studio
  cannot be installed to a nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage contains @\\\"Non è possibile installare Visual Studio in una
  directory non vuota '\\\", @\\\"Visual Studio cannot be installed to a
  nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage contains @\\\"nonempty directory\\\", @\\\"Visual Studio
  cannot be installed to a nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage contains @\\\"Visual Studio cannot be installed to a \\\",
  @\\\"Visual Studio cannot be installed to a nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage contains @\\\"to a nonempty \\\", @\\\"Visual Studio cannot
  be installed to a nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage contains @\\\" をインストールすることはできません。\\\", @\\\"Visual Studio
  cannot be installed to a nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage startswith @\\\"Nie można zainstalować programu Visual Studio
  w katalogu \\\", @\\\"Visual Studio cannot be installed to a nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage startswith @\\\"Visual Studio cannot be installed to a
  nonempty directory\\\", @\\\"Visual Studio cannot be installed to a nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage startswith @\\\"Visual Studio ne peut pas être installé dans
  un répertoire non vide\\\", @\\\"Visual Studio cannot be installed to a
  nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage startswith @\\\"无法在非空目录\\\", @\\\"Visual Studio cannot be
  installed to a nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage startswith @\\\"O Visual Studio não pode ser instalado em um
  diretório não vazio '\\\", @\\\"Visual Studio cannot be installed to a
  nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage startswith @\\\"Visual Studio kann nicht im Verzeichnis \\\",
  @\\\"Visual Studio cannot be installed to a nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage startswith @\\\"Visual Studio를 비어 있지 않은 디렉터리 '\\\",
  @\\\"Visual Studio cannot be installed to a nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage startswith @\\\"Visual Studio невозможно установить в
  непустом каталоге \\\", @\\\"Visual Studio cannot be installed to a nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage startswith @\\\"Visual Studio 無法安裝至非空白目錄 '\\\", @\\\"Visual
  Studio cannot be installed to a nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage startswith @\\\"Visual Studio no se puede instalar en un
  directorio que no esté vacío\\\", @\\\"Visual Studio cannot be installed to a
  nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage contains @\\\" は空でないため、Visual Studio をインストールすることはできません。\\\",
  @\\\"Visual Studio cannot be installed to a nonempty
  directory\\\",                                                                                                                                  \
  ErrorMessage))))))))))))))))))))))))))))))))))))))))))))))))))\\r\\n    |
  extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage, Type = EventName;\\r\\n    let
  EndOperationGetProductError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/endoperationgetproducterror\\\"\\r\\n    | where ExeVersion
  startswith previewVersion\\r\\n    | where IsInternal == false\\r\\n    |
  parse ExceptionMessageHash with ExceptionName \\\":\\\" ErrorMessage
  \\\"\\\\n\\\" *\\r\\n    | extend ErrorMessage = iif(ExceptionMessageHash
  contains \\\"System.IO.__Error.WinIOError\\\",\\\"There is not enough space on
  the disk\\\", ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ExceptionMessageHash contains \\\"Hub host 'desktopClr'\\\", \\\"Hub Host
  'desktopClr' failure\\\", ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ExceptionName == \\\"System.ObjectDisposedException\\\",FaultDescription,
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ExceptionName ==
  \\\"System.InvalidOperationException\\\" and ExceptionMessageHash contains
  \\\".CommonExtensions.GetProduct\\\",\\\"No products are registered for
  instance 'x'.\\\",ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(isempty(ErrorMessage), ExceptionMessageHash , ErrorMessage)\\r\\n    |
  extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage = trim(\\\" \\\",ErrorMessage), Type =
  EventName;\\r\\n    let CmdLineError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/cmdlineerror\\\"\\r\\n    | where ExeVersion startswith
  previewVersion\\r\\n    | where IsInternal == false\\r\\n    | extend
  ErrorMessage = ExceptionType\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage, Type = EventName;\\r\\n    let JsCrash
  =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/jscrash\\\"\\r\\n    | where ExeVersion startswith
  previewVersion\\r\\n    | where IsInternal == false\\r\\n    | extend
  JsCrashMessage = ExceptionMessageHash\\r\\n    | parse kind= regex
  JsCrashMessage with ErrorMessage:string \\\",\\\"\\r\\n    | extend
  ErrorMessage = iif(isempty(ErrorMessage), JsCrashMessage,
  ErrorMessage)\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage, Type = EventName;\\r\\n    let Name =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName == \\\"vs/willow/name\\\"\\r\\n    |
  where ExeVersion startswith previewVersion\\r\\n    | where IsInternal ==
  false\\r\\n    | extend ErrorMessage = FaultDescription\\r\\n    | extend
  MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage, Type = EventName;\\r\\n    let
  EvaluateModifyParametersError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/evaluatemodifyparameters-error\\\"\\r\\n    | where ExeVersion
  startswith previewVersion\\r\\n    | where IsInternal == false\\r\\n    |
  extend ErrorMessage =
  tostring(Properties[\\\"VS.Willow.errorType\\\"])\\r\\n    | extend
  MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage, Type = EventName;\\r\\n    let
  Exception =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/setupengine/exception\\\"\\r\\n    | where ExeVersion startswith
  previewVersion\\r\\n    | where IsInternal == false\\r\\n    | extend
  ErrorMessage = ExceptionType\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage, Type = EventName;\\r\\n    let
  CreateShortcutFailed =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/createshortcutfailed\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | where ExeVersion startswith previewVersion\\r\\n    | parse
  ExceptionMessageHash with ExceptionType1 \\\": \\\" Message \\\"\\\\n\\\"
  *\\r\\n    | extend ErrorMessage = iif(isempty(ExceptionType1),
  ExceptionMessageHash, Message)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage contains \\\"Hub host 'desktopClr'\\\", \\\"Hub Host
  'desktopClr' failure\\\", ErrorMessage) \\r\\n    | extend ErrorMessage =
  iif(ErrorMessage contains (\\\".log' is denied.\\\"), \\\"Access to the path
  'xxxxx\\\\\\\\xxxx.log' is denied\\\", ErrorMessage)\\r\\n    | extend
  ErrorMessage = iif(ErrorMessage contains \\\"Hub Controller\\\",\\\"Hub
  Controller issue.\\\", ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage startswith \\\"connect ENOENT\\\", \\\"connect ENOENT\\\",
  ErrorMessage)\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage, Type = EventName;\\r\\n    let
  ConfigError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/configerror\\\"\\r\\n    | where ExeVersion startswith
  previewVersion\\r\\n    | where IsInternal == false\\r\\n    | extend
  ErrorMessage = FaultDescription\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage, Type =
  \\\"ConfigError\\\";\\r\\n    let BoostrapperError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/setup/bootstrapper/error\\\"\\r\\n    | where
  tostring(Properties[\\\"context.default.vs.setupengine.id\\\"]) contains
  \\\"preview\\\"\\r\\n    | where IsInternal == false\\r\\n    | extend
  ErrorMessage = iif( isempty(ExceptionMessageHash),
  tostring(Properties[\\\"vs.setup.bootstrapper.error\\\"]),
  ExceptionMessageHash)\\r\\n    | extend ErrorMessage = iif(FaultDescription ==
  \\\"IOException\\\" and ExceptionMessageHash contains
  \\\"vs_setup_bootstrapper.json\\\", \\\"The process cannot access the file
  'C:\\\\\\\\ProgramData\\\\\\\\Microsoft\\\\\\\\VisualStudio\\\\\\\\Packages\\\
  \\\\\\_bootstrapper\\\\\\\\vs_setup_bootstrapper.json' because it is being
  used by another process.\\\",ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage == \\\"Не удалось установить файлы в целевое расположение.
  Ошибка: Недостаточно места на диске.\\\", \\\"Unable to install the files to
  target location. Error: There is not enough space on the
  disk.\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage ==
  \\\"无法将文件安装到目标位置。错误: 磁盘空间不足。\\\", \\\"Unable to install the files to target
  location. Error: There is not enough space on the
  disk.\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage ==
  \\\"Die Dateien können nicht am Zielspeicherort installiert werden. Fehler: Es
  steht nicht genug Speicherplatz auf dem Datenträger zur Verfügung.\\\",
  \\\"Unable to install the files to target location. Error: There is not enough
  space on the disk.\\\",ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage == \\\"文件包含损坏的数据。\\\", \\\"File contains corrupted
  data.\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage ==
  \\\"В системе отображения конечных точек не осталось доступных конечных
  точек.\\\", \\\"There are no more endpoints available from the endpoint
  mapper.\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage ==
  \\\"终结点映射器中没有更多的终结点可用。\\\", \\\"There are no more endpoints available from the
  endpoint mapper.\\\",ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage == \\\"Yükleme dosyalarının bütünlüğü doğrulanamıyor.
  Sertifika doğrulanamadı.\\\", \\\"Unable to verify the integrity of the
  installation files: the certificate could not be
  verified\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage
  == \\\"Não é possível verificar a integridade dos arquivos de instalação: o
  certificado não pôde ser verificado\\\", \\\"Unable to verify the integrity of
  the installation files: the certificate could not be
  verified\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage
  == \\\"설치 파일의 무결성을 검증할 수 없습니다. 인증서를 확인할 수 없습니다.\\\", \\\"Unable to verify the
  integrity of the installation files: the certificate could not be
  verified\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage
  == \\\"Impossible de vérifier l'intégrité des fichiers d'installation : le
  certificat n'a pas pu être vérifié\\\", \\\"Unable to verify the integrity of
  the installation files: the certificate could not be
  verified\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage
  == \\\"インストール ファイルの整合性を確認できません。証明書を確認できませんでした\\\", \\\"Unable to verify the
  integrity of the installation files: the certificate could not be
  verified\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage
  == \\\"无法验证安装文件的完整性: 无法验证证书\\\", \\\"Unable to verify the integrity of the
  installation files: the certificate could not be
  verified\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage
  == \\\"Die Integrität der Installationsdateien kann nicht überprüft werden:
  Überprüfung des Zertifikats nicht möglich.\\\", \\\"Unable to verify the
  integrity of the installation files: the certificate could not be
  verified\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage
  == \\\"No se puede comprobar la integridad de los archivos de instalación: no
  se pudo comprobar el certificado\\\", \\\"Unable to verify the integrity of
  the installation files: the certificate could not be
  verified\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage
  == \\\"Не удается проверить целостность установочных файлов: не удалось
  проверить сертификат.\\\", \\\"Unable to verify the integrity of the
  installation files: the certificate could not be
  verified\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage
  contains \\\"Could not find a part of the path\\\",\\\"Unable to install the
  files to target location. Error: Could not find a part of the path x.\\\",
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage contains
  \\\"d3dcompiler_47.dll\\\",\\\"Unable to install the files to target location.
  Error: Access to the path 'C:\\\\\\\\Program Files (x86)\\\\\\\\Microsoft
  Visual Studio\\\\\\\\Installer\\\\\\\\d3dcompiler_47.dll' is denied.\\\",
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage contains
  \\\"vs_installer.opc' returned HTTP status code: \\\",\\\"OPC download return
  HTTP status code x\\\", ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage contains \\\"12007\\\",\\\"WININET_E_NAME_NOT_RESOLVED
  (0x80072ee7)\\\", ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage contains \\\" HRESULT: 0x80070422)\\\", \\\"The service
  cannot be started, either because it is disabled or because it has no enabled
  devices associated with it. (Exception from HRESULT: 0x80070422)\\\",
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage contains
  \\\"or a file within it is locked by another
  program.\\\"                                           or ErrorMessage
  contains \\\"Microsoft Visual
  Studio\\\\\\\\Installer’\\\"                                           or
  ErrorMessage contains \\\"Microsoft Visual
  Studio\\\\\\\\Installer\\\\\\\"\\\"                                           \
  or ErrorMessage contains \\\"Microsoft Visual Studio\\\\\\\\Installer
  \\\"                                           or ErrorMessage contains
  \\\"Microsoft Visual
  Studio\\\\\\\\Installer'\\\"                                          or
  ErrorMessage contains \\\"Microsoft Visual
  Studio\\\\\\\\Installer,\\\"                                          or
  ErrorMessage contains \\\"Microsoft Visual
  Studio\\\\\\\\Installer”\\\"                              , \\\"Unable to
  install the files to target location. Error: The folder ‘C:\\\\\\\\Program
  Files (x86)\\\\\\\\Microsoft Visual Studio\\\\\\\\Installer’ or a file within
  it is locked by another program. Close any applications that might be using it
  and try again.\\\",ErrorMessage)\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | where ErrorMessage !in (\\\"Exit code=1\\\",\\\"Exit
  code=-1073741510\\\")\\r\\n    | summarize Hits = count(), sHits =
  dcount(SessionId), dHits = dcount(MacAddressHash) by ErrorMessage, Type =
  EventName;\\r\\n    let AppUpdateDownloadFinishedFailed =
  cluster('Ddtelvsraw').database('VS').RawEventsVS\\r\\n    | where
  AdvancedServerTimestampUtc > now() - daysToLookback\\r\\n    | where EventName
  == \\\"vs/willow/appupdatedownloadfinished\\\"\\r\\n    | where IsInternal ==
  false  \\r\\n    | where ExeVersion startswith previewVersion\\r\\n    | where
  tostring(Properties[\\\"reserved.datamodel.action.result\\\"]) ==
  \\\"Failure\\\"\\r\\n    | join kind=leftouter (
  cluster(\\\"Ddtelvsraw\\\").database(\\\"LookupTables\\\").VS_Telemetry_Relea\
  ses_Func()\\r\\n                             |  where ChannelId in
  (\\\"VisualStudio.15.Preview\\\",\\\"VisualStudio.15.IntPreview\\\")
  \\r\\n                             | extend found =
  1\\r\\n                             | summarize by WillowInstallerVersion,
  found\\r\\n                          ) on $left.ExeVersion ==
  $right.WillowInstallerVersion\\r\\n    | where found == 1\\r\\n    | summarize
  Hits = count(), sHits = dcount(SessionId), dHits =dcount(MacAddressHash) by
  ErrorMessage =
  tostring(Properties[\\\"reserved.datamodel.action.resultsummary\\\"]),
  Type=EventName;   \\r\\n    let EngineUnhandledException =
  cluster('Ddtelvsraw').database('VS').RawEventsVS\\r\\n    | where
  AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName == \\\"vs/setupengine/unhandledexce\
  ption\\\"\\r\\n    | where
  tostring(Properties[\\\"context.default.vs.setupengine.id\\\"]) contains
  \\\"preview\\\"\\r\\n    | extend Error = tostring(Properties[\\\"reserved.da\
  tamodel.fault.bucketparam7\\\"])\\r\\n    | extend  Description = tostring(Pr\
  operties[\\\"reserved.datamodel.fault.bucketparam6\\\"]) \\r\\n    | extend D\
  etails = tostring(Properties[\\\"reserved.datamodel.fault.description\\\"]) \
  \\r\\n    | parse Details with * \\\":\\\" * \\\": \\\" ErrorMessage
  \\\"\\\\n\\\" *\\r\\n    | extend ErrorMessage = iif (ErrorMessage contains
  \\\"Diskte yeterli yer yok.\\\", \\\"There is not enough space on the
  disk.\\\",\\r\\n                                iif(ErrorMessage contains
  \\\"There is not enough space on the disk\\\", \\\"There is not enough space
  on the disk.\\\",\\r\\n                                iif(ErrorMessage
  contains \\\"このコマンドを実行するための十分な記憶域がありません\\\", \\\"There is not enough space on
  the disk.\\\",\\r\\n                                iif(ErrorMessage contains
  \\\"Έγινε προσπάθεια εκτέλεσης μη εξουσιοδοτημένης ενέργειας.\\\",
  \\\"Attempted to perform an unauthorized
  operation.\\\",\\r\\n                                iif(ErrorMessage contains
  \\\"Attempted to perform an unauthorized operation.\\\", \\\"Attempted to
  perform an unauthorized
  operation.\\\",\\r\\n                                ErrorMessage)))))\\r\\n
      | summarize Hits = count(), sHits = dcount(SessionId), dHits
  =dcount(MacAddressHash) by ErrorMessage,
  Type=EventName;  \\r\\n    QueryProductError\\r\\n    | union
  InstallProductError,\\r\\n            PackageFailure,\\r\\n            //Faul\
  t,\\r\\n            EvaluateInstallPatametersError,\\r\\n            EndOpera\
  tionGetProductError,\\r\\n            CmdLineError,\\r\\n            JsCrash,\
  \\r\\n            Name,\\r\\n            EvaluateModifyParametersError,\\r\\n            \
  Exception,\\r\\n            CreateShortcutFailed,\\r\\n            ConfigErro\
  r,\\r\\n            BoostrapperError,\\r\\n            AppUpdateDownloadFinis\
  hedFailed,\\r\\n            EngineUnhandledException,\\r\\n            GetSur\
  veyConfigurationError,\\r\\n            DeleteShotcutFailed,\\r\\n            \
  UserDataWriteFailed,\\r\\n            GraphConstructionError,\\r\\n            \
  VsixInstallerFault,\\r\\n            SetupEngineFault,\\r\\n            LoadD\
  etailsPageError,\\r\\n            AppUninstallSelfFailed,\\r\\n            Op\
  enLogError,\\r\\n            BackgroundDownloaderUnhandledException,\\r\\n            \
  VSFeedbackError,\\r\\n            AppFinalizeFailed,\\r\\n            SearchF\
  ailedError,\\r\\n            StartServiceHubError\\r\\n    |top 1000 by dHits
  desc;\\r\\n}\",\"inputParameters\":[{\"name\":\"daysToLookback\",\"cslType\":\
  \"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\"name\":\"pre\
  viewVersion\",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\
  \"\"},{\"name\":\"previewVsVersion\",\"cslType\":\"string\",\"type\":\"System\
  .String\",\"docstring\":\"\"}]},{\"name\":\"Setup100_Issues_Preview_7days\",\
  \"docstring\":\"Return preview issues from last 7
  days.\",\"body\":\"{\\r\\n    Setup100_Issues_Preview(totimespan(\\\"7.00:00:\
  00\\\"),\\\"2.1\\\",\\\"16.1\\\")\\r\\n}\",\"inputParameters\":[]},{\"name\":\
  \"Setup100_PackageInstallEvents\",\"docstring\":\"Returns VS package install
  events.\",\"body\":\"{\\r\\n    cluster('Ddtelvsraw').database('VS').RawEvent\
  sVS\\r\\n    | where AdvancedServerTimestampUtc > startTime\\r\\n    | where
  ExeName == \\\"vs_installerservice\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | where EventName ==
  \\\"vs/setupengine/package-operation\\\"    \\r\\n    | where
  Properties[\\\"reserved.datamodel.action.type\\\"] == \\\"End\\\" \\r\\n    |
  where Properties[\\\"context.default.vs.setupengine.channelsid\\\"] ==
  channelId\\r\\n    | where Properties[\\\"vs.setupengine.operationtype\\\"] ==
  \\\"Install-Package\\\"    \\r\\n    | where GeoCountryRegionIso =~
  countryIso\\r\\n    | where
  isnotempty(Properties[\\\"context.default.vs.setupengine.componentid\\\"])\\r\
  \\n    | extend PackageId =
  tostring(Properties[\\\"vs.setupengine.uniquepackageid\\\"])\\r\\n    | extend
  PackageResult =
  tostring(Properties[\\\"vs.setupengine.install.resultdetails\\\"])\\r\\n    |
  extend DataModelActionResultReserved =
  tostring(Properties[\\\"reserved.datamodel.action.result\\\"])\\r\\n    |
  project PackageId, AdvancedServerTimestampUtc, DataModelActionResultReserved,
  GeoCountryRegionIso, OsVersion, PackageResult, MacAddressHash\\r\\n    //
  Ignore webdeploy package in US due to known failure on RS3.\\r\\n    | where
  not (GeoCountryRegionIso =~ \\\"us\\\" and PackageId startswith
  \\\"Microsoft.VisualStudio.WebDeploy.Msi\\\" and OsVersion startswith
  \\\"10.0.162\\\")\\r\\n         // Ignore NetFx 16389 failure.  This is
  tracked by bug 459028.\\r\\n    | where not (GeoCountryRegionIso =~ \\\"us\\\"
  and PackageId startswith \\\"Microsoft.Net.4.6.FullRedist\\\" and
  PackageResult == \\\"Unknown error (0x00004005)\\\")\\r\\n         // Ignore
  Win10SDK 15063 15605 failure since is scheduled to be fixed in 15.3\\r\\n    |
  where not (PackageId startswith \\\"Win10SDK_10.0.15063\\\" and PackageResult
  == \\\"There was a problem downloading your product.\\\")\\r\\n    | where
  DataModelActionResultReserved !=
  \\\"UserCancel\\\"   \\r\\n}\",\"inputParameters\":[{\"name\":\"channelId\",\
  \"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\
  \":\"countryIso\",\"cslType\":\"string\",\"type\":\"System.String\",\"docstri\
  ng\":\"\"},{\"name\":\"startTime\",\"cslType\":\"datetime\",\"type\":\"System\
  .DateTime\",\"docstring\":\"\"}]},{\"name\":\"Setup100_PackageInstallGoal\",\
  \"docstring\":\"Returns number of VS packages not meeting install success
  criteria.\",\"body\":\"{\\r\\n    let periodStart = now() -
  timePeriod;\\r\\n    cluster(\\\"Ddtelvsraw\\\").database(\\\"VS\\\").Setup10\
  0_PackageInstallEvents(channelId, countryIso, periodStart)\\r\\n    | where
  DataModelActionResultReserved != \\\"UserCancel\\\"\\r\\n    | summarize Total
  = dcount(MacAddressHash), Success = dcountif(MacAddressHash,
  DataModelActionResultReserved == \\\"Success\\\") by PackageId\\r\\n    |
  summarize Result = countif(Total > minEventCount and (Success * 100.0) / Total
  <
  minSuccessPercent)\\r\\n}\",\"inputParameters\":[{\"name\":\"channelId\",\"cs\
  lType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\
  \"countryIso\",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\
  \":\"\"},{\"name\":\"timePeriod\",\"cslType\":\"timespan\",\"type\":\"System.\
  TimeSpan\",\"docstring\":\"\"},{\"name\":\"minEventCount\",\"cslType\":\"int\
  \",\"type\":\"System.Int32\",\"docstring\":\"\"},{\"name\":\"minSuccessPercent\
  \",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\"}]},{\"name\
  \":\"Setup100_PackageInstallGoalDetails\",\"docstring\":\"Shows VS packages
  not meeting install success criteria.\",\"body\":\"{\\r\\n    let periodStart
  = now() - timePeriod;\\r\\n    Setup100_PackageInstallEvents(channelId,
  countryIso, periodStart)\\r\\n    | where DataModelActionResultReserved !=
  \\\"UserCancel\\\"\\r\\n    | summarize Total =
  dcount(MacAddressHash),\\r\\n                Success =
  dcountif(MacAddressHash, DataModelActionResultReserved == \\\"Success\\\") by
  PackageId\\r\\n    | extend SuccessPct = round((Success * 100.0) / Total,
  2)\\r\\n    | order by SuccessPct asc\\r\\n    | where          Total >
  minEventCount and          SuccessPct < minSuccessPercent\\r\\n    | join
  kind=leftouter\\r\\n    (\\r\\n        cluster('Ddtelvsraw').database('VS').R\
  awEventsVS\\r\\n        | where IsInternal == false\\r\\n        | where
  AdvancedServerTimestampUtc > periodStart\\r\\n        | where EventName ==
  \\\"vs/setupengine/packagefailure\\\"\\r\\n        | extend ReturnCode =
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam7\\\"])\\r\\n        \
  | extend gPackageId =
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam5\\\"])\\r\\n        \
  | extend ErrorCode =
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam7\\\"])\\r\\n        \
  | extend EngineVersion =
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam2\\\"])\\r\\n        \
  | extend p6 =
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam6\\\"])\\r\\n        \
  | extend InstallSessionId =
  tostring(Properties[\\\"context.default.vs.setupengine.sharedwillowinstallses\
  sionid\\\"])\\r\\n        | where GeoCountryRegionIso =~
  countryIso\\r\\n        | extend UniquePackageId =
  tostring(Properties[\\\"vs.setupengine.uniquepackageid\\\"])\\r\\n        |
  where p6 != \\\"DownloadPackage\\\"\\r\\n        | summarize Hits =
  count(),\\r\\n                    sHits =
  dcount(InstallSessionId),\\r\\n                    dHits =
  dcount(MacAddressHash) by gPackageId, ErrorCode, EngineVersion,
  UniquePackageId\\r\\n        | where sHits > 10\\r\\n    )\\r\\n    on
  $left.PackageId == $right.UniquePackageId\\r\\n    | project UniquePackageId =
  PackageId , Total, Success, SuccessPct, PackageId = gPackageId, ErrorCode,
  EngineVersion , Hits, sHits,
  dHits\\r\\n}\",\"inputParameters\":[{\"name\":\"channelId\",\"cslType\":\"str\
  ing\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\"countryIso\",\
  \"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\
  \":\"timePeriod\",\"cslType\":\"timespan\",\"type\":\"System.TimeSpan\",\"doc\
  string\":\"\"},{\"name\":\"minEventCount\",\"cslType\":\"int\",\"type\":\"Sys\
  tem.Int32\",\"docstring\":\"\"},{\"name\":\"minSuccessPercent\",\"cslType\":\
  \"int\",\"type\":\"System.Int32\",\"docstring\":\"\"}]},{\"name\":\"Setup100_\
  PayloadDownloadEvents\",\"docstring\":\"Returns VS package download
  events.\",\"body\":\"{\\r\\n    cluster('Ddtelvsraw').database('VS').RawEvent\
  sVS\\r\\n    | where AdvancedServerTimestampUtc > startTime\\r\\n    | where
  ExeName == \\\"vs_installerservice\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | where EventName ==
  \\\"vs/setupengine/package-operation\\\"\\r\\n    | where
  Properties[\\\"reserved.datamodel.action.type\\\"] == \\\"End\\\" \\r\\n    |
  where Properties[\\\"context.default.vs.setupengine.channelsid\\\"] ==
  channelId\\r\\n    | where Properties[\\\"vs.setupengine.operationtype\\\"] ==
  \\\"Download-Package\\\"\\r\\n    | where GeoCountryRegionIso =~
  countryIso\\r\\n    | where
  isnotempty(Properties[\\\"context.default.vs.setupengine.componentid\\\"])\\r\
  \\n    | extend PackageId =
  tostring(Properties[\\\"vs.setupengine.uniquepackageid\\\"])\\r\\n    | extend
  PayloadUrl =
  tostring(Properties[\\\"vs.setupengine.download-url\\\"])\\r\\n    | extend
  DataModelActionResultReserved =
  tostring(Properties[\\\"reserved.datamodel.action.result\\\"])\\r\\n    |
  where DataModelActionResultReserved != \\\"UserCancel\\\"\\r\\n    | project
  PackageId, PayloadUrl, AdvancedServerTimestampUtc,
  DataModelActionResultReserved,
  MacAddressHash;\\r\\n}\",\"inputParameters\":[{\"name\":\"channelId\",\"cslTy\
  pe\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\"co\
  untryIso\",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\
  \"},{\"name\":\"startTime\",\"cslType\":\"datetime\",\"type\":\"System.DateTi\
  me\",\"docstring\":\"\"}]},{\"name\":\"Setup100_PayloadDownloadGoal\",\"docst\
  ring\":\"Returns number of VS payloads not meeting download success
  criteria.\",\"body\":\"{\\r\\n    let periodStart = now() -
  timePeriod;\\r\\n    Setup100_PayloadDownloadEvents(channelId, countryIso,
  periodStart)\\r\\n    | summarize Total = dcount(MacAddressHash), Success =
  dcountif(MacAddressHash, DataModelActionResultReserved == \\\"Success\\\") by
  PackageId, PayloadUrl\\r\\n    | summarize Result = countif(Total >=
  minEventCount and (Success * 100.0) / Total <
  minSuccessPercent)\\r\\n}\",\"inputParameters\":[{\"name\":\"channelId\",\"cs\
  lType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\
  \"countryIso\",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\
  \":\"\"},{\"name\":\"timePeriod\",\"cslType\":\"timespan\",\"type\":\"System.\
  TimeSpan\",\"docstring\":\"\"},{\"name\":\"minEventCount\",\"cslType\":\"int\
  \",\"type\":\"System.Int32\",\"docstring\":\"\"},{\"name\":\"minSuccessPercent\
  \",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\"}]},{\"name\
  \":\"Setup100_PayloadDownloadGoalDetails\",\"docstring\":\"Shows VS payloads
  not meeting download success criteria.\",\"body\":\"{\\r\\n    let periodStart
  = now() - timePeriod;\\r\\n    Setup100_PayloadDownloadEvents(channelId,
  countryIso, periodStart)\\r\\n    | summarize Total =
  dcount(MacAddressHash),\\r\\n\\t\\t\\t\\tSuccess = dcountif(MacAddressHash,
  DataModelActionResultReserved == \\\"Success\\\")          \\r\\n\\t\\t\\tby
  PackageId, PayloadUrl\\r\\n    | extend SuccessPct = round((Success * 100.0) /
  Total, 2)\\r\\n    | where\\r\\n        Total > minEventCount
  and\\r\\n        SuccessPct < minSuccessPercent\\r\\n    | join kind=
  leftouter
  (  cluster('Ddtelvsraw').database('VS').RawEventsVS\\r\\n                                \
  | where AdvancedServerTimestampUtc >
  periodStart\\r\\n                                | where EventName ==
  \\\"vs/setupengine/packagefailure\\\" \\r\\n                                |
  where IsInternal ==
  false                                \\r\\n                                |
  extend fPackageId = tostring(Properties[\\\"vs.setupengine.packageid\\\"])
  \\r\\n                                | extend ReturnCode =
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam7\\\"])\\r\\n                                \
  | extend Operation_P6 =
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam6\\\"])                                \
  \\r\\n                                | where Operation_P6 ==
  \\\"DownloadPackage\\\"\\r\\n                                | where
  GeoCountryRegionIso =~ countryIso\\r\\n                                |
  extend Description =
  tostring(Properties[\\\"reserved.datamodel.fault.description\\\"])\\r\\n                                \
  | extend UniquePackageId =
  tostring(Properties[\\\"vs.setupengine.uniquepackageid\\\"])\\r\\n                                \
  | summarize sHits = dcount(SessionId), dHits = dcount(MacAddressHash)  by
  fPackageId, ReturnCode, Description,
  UniquePackageId\\r\\n                           ) on $left.PackageId ==
  $right.UniquePackageId\\r\\n     | project UniquePackageId = PackageId,
  PayloadUrl, Total, Success, SuccessPct, PackageId = fPackageId, Description,
  sHits, dHits\\r\\n     | order by SuccessPct
  asc\\r\\n}\",\"inputParameters\":[{\"name\":\"channelId\",\"cslType\":\"string\
  \",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\"countryIso\",\"\
  cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\
  \"timePeriod\",\"cslType\":\"timespan\",\"type\":\"System.TimeSpan\",\"docstr\
  ing\":\"\"},{\"name\":\"minEventCount\",\"cslType\":\"int\",\"type\":\"System\
  .Int32\",\"docstring\":\"\"},{\"name\":\"minSuccessPercent\",\"cslType\":\"int\
  \",\"type\":\"System.Int32\",\"docstring\":\"\"}]},{\"name\":\"Setup100_Produ\
  ctOperationEvents\",\"docstring\":\"Returns VS product operation
  events.\",\"body\":\"{\\r\\n    cluster('Ddtelvsraw').database('VS').RawEvent\
  sVS\\r\\n    | where AdvancedServerTimestampUtc > startTime\\r\\n    | where
  IsInternal == false\\r\\n    | extend DataModelActionType =
  tostring(Properties[\\\"reserved.datamodel.action.type\\\"])\\r\\n    | extend
  DataModelActionResultReserved =
  tostring(Properties[\\\"reserved.datamodel.action.result\\\"])\\r\\n    |
  where DataModelActionType == \\\"End\\\"\\r\\n    | where EventName ==
  \\\"vs/willow/install-product\\\"\\r\\n    | where GeoCountryRegionIso =~
  countryIso\\r\\n    | where Properties[\\\"vs.willow.channelid\\\"] ==
  channelId\\r\\n    | where Properties[\\\"vs.willow.operationname\\\"] ==
  operationName\\r\\n    | extend ErrorCode =
  tostring(Properties[\\\"vs.willow.errorcode\\\"])\\r\\n    | where ErrorCode
  !in (\\\"OperationCanceledError\\\",
  \\\"ServiceUpdateRequireError\\\")\\r\\n    | extend FailedPackages =
  tostring(Properties[\\\"vs.willow.failedpackageids\\\"])\\r\\n    | project
  AdvancedServerTimestampUtc, DataModelActionResultReserved, ErrorCode,
  FailedPackages, MacAddressHash, OsVersion    \\r\\n    // Ignore webdeploy
  package in US due to known failure on RS3.    \\r\\n    | where not
  (countryIso == \\\"US\\\" and FailedPackages ==
  \\\"Microsoft.VisualStudio.WebDeploy.Msi\\\" and OsVersion startswith
  \\\"10.0.162\\\");\\r\\n}\",\"inputParameters\":[{\"name\":\"channelId\",\"cs\
  lType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\
  \"countryIso\",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\
  \":\"\"},{\"name\":\"operationName\",\"cslType\":\"string\",\"type\":\"System\
  .String\",\"docstring\":\"\"},{\"name\":\"startTime\",\"cslType\":\"datetime\
  \",\"type\":\"System.DateTime\",\"docstring\":\"\"}]},{\"name\":\"Setup100_Pr\
  oductOperationGoal\",\"docstring\":\"Returns VS product operation success
  rate.\",\"body\":\"{\\r\\n    let periodStart = now() -
  lookbackPeriod;\\r\\n    Setup100_ProductOperationEvents(channelId,
  countryIso, operationName, periodStart)\\r\\n    | summarize Total =
  dcount(MacAddressHash), Success = dcountif(MacAddressHash,
  DataModelActionResultReserved == \\\"Success\\\")\\r\\n    | extend Result =
  iff(Total >= minEventCount, Success * 100.0 / Total,
  100.0)\\r\\n}\",\"inputParameters\":[{\"name\":\"channelId\",\"cslType\":\"st\
  ring\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\"countryIso\
  \",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"n\
  ame\":\"operationName\",\"cslType\":\"string\",\"type\":\"System.String\",\"d\
  ocstring\":\"\"},{\"name\":\"minEventCount\",\"cslType\":\"int\",\"type\":\"S\
  ystem.Int32\",\"docstring\":\"\"},{\"name\":\"lookbackPeriod\",\"cslType\":\"\
  timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"}]},{\"name\":\"Set\
  up100_ProductOperationGoalDetails\",\"docstring\":\"Returns VS product
  operation success rate.\",\"body\":\"{\\r\\n    let periodStart = now() -
  lookbackPeriod;    \\r\\n    let Events =
  cluster('Ddtelvsraw').database('VS').RawEventsVS\\r\\n    | where
  AdvancedServerTimestampUtc > periodStart\\r\\n    | extend
  DataModelActionResultReserved =
  tostring(Properties[\\\"reserved.datamodel.action.type\\\"])\\r\\n    | where
  IsInternal == false;\\r\\n    Events\\r\\n    | where EventName ==
  \\\"vs/willow/install-product\\\"\\r\\n    | where
  DataModelActionResultReserved == \\\"End\\\"\\r\\n    | where
  Properties[\\\"vs.willow.channelid\\\"] == channelId    \\r\\n    | where
  Properties[\\\"vs.willow.operationname\\\"] == operationName\\r\\n    | where
  tostring(Properties[\\\"reserved.datamodel.action.result\\\"]) ==
  \\\"Failure\\\"\\r\\n    | extend ErrorMessage =
  tostring(Properties[\\\"vs.willow.errormessage\\\"])\\r\\n    | extend
  FailedPackageIds =
  tostring(Properties[\\\"vs.willow.failedpackageids\\\"])\\r\\n    | parse
  ErrorMessage with GeneralException \\\": \\\" GeneralError \\\"\\\\n\\\"
  *\\r\\n    | parse ErrorMessage with
  \\\"Microsoft.VisualStudio.Setup.PackageFailureException: \\\" PackageError
  \\\"\\\\n\\\" *\\r\\n    | extend ReportErrorMessage =
  iif(isempty(PackageError), GeneralError, PackageError) \\r\\n    | extend
  ReportErrorMessage = iif(isempty(ReportErrorMessage), ErrorMessage,
  ReportErrorMessage) \\r\\n    | extend ReportException =
  iif(isempty(PackageError), GeneralException, \\\"PackageFailureException\\\")
  \\r\\n    | extend ReportException = iif(isempty(ReportException),
  \\\"Unknown\\\", ReportException) \\r\\n    | where GeoCountryRegionIso =~
  countryIso\\r\\n    | parse ReportErrorMessage with MessageToKeep \\\";\\\"
  *  // If there are mutliple package report failures, take the first
  one\\r\\n    | extend ReportErrorMessage = iif(isempty(MessageToKeep),
  ReportErrorMessage, MessageToKeep)\\r\\n    | parse FailedPackageIds with
  mPackageId \\\",\\\" *  // If there are mutliple package report failures, take
  the first one\\r\\n    | extend ReportErrorMessage = iif(ReportErrorMessage
  contains 'Недостаточно места на диске.', \\\"There is not enough space on the
  disk.\\\",\\r\\n                                    iif(ReportErrorMessage
  contains \\\"磁盘空间不足。\\\", \\\"There is not enough space on the
  disk.\\\",\\r\\n                                    iif(ReportErrorMessage
  contains \\\"디스크 공간이 부족합니다.\\\", \\\"There is not enough space on the
  disk.\\\",\\r\\n                                    iif(ReportException ==
  \\\"System.NullReferenceException\\\", \\\"Object reference not set to an
  instance of an
  object.\\\",                                \\r\\n                                    \
  iif(ReportErrorMessage contains \\\"There is not enough space on the
  disk.\\\", \\\"There is not enough space on the disk.\\\",
  ReportErrorMessage)))))\\r\\n    | extend InstallSessionId =
  tostring(Properties[\\\"vs.willow.installsessionid\\\"])\\r\\n    | join
  kind=leftouter
  (\\r\\n                            Events\\r\\n                            |
  where EventName ==
  \\\"vs/setupengine/packagefailure\\\"\\r\\n                            | where
  GeoCountryRegionIso =~ countryIso\\r\\n                            | extend
  PackageId =
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam5\\\"])\\r\\n                            \
  | extend ResultSummary =
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam8\\\"])\\r\\n                            \
  | extend Operation_P7 =
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam7\\\"])\\r\\n                            \
  | extend ReturnCode_P6 =
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam6\\\"])\\r\\n                            \
  | extend PackageFailureMessage = strcat(PackageId, \\\"_\\\", Operation_P7,
  \\\"_\\\",
  ReturnCode_P6)                        \\r\\n                            |
  project PackageId, PackageFailureMessage, SessionId
  \\r\\n                          ) on SessionId\\r\\n    | extend
  ReportErrorMessage = iif(isempty(PackageFailureMessage), ReportErrorMessage,
  PackageFailureMessage)\\r\\n    | summarize dCount = dcount(MacAddressHash) by
  ReportErrorMessage \\r\\n    | order by dCount
  desc\\r\\n}\",\"inputParameters\":[{\"name\":\"channelId\",\"cslType\":\"stri\
  ng\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\"countryIso\",\
  \"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\
  \":\"operationName\",\"cslType\":\"string\",\"type\":\"System.String\",\"docs\
  tring\":\"\"},{\"name\":\"minEventCount\",\"cslType\":\"int\",\"type\":\"Syst\
  em.Int32\",\"docstring\":\"\"},{\"name\":\"lookbackPeriod\",\"cslType\":\"tim\
  espan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"}]},{\"name\":\"Setup1\
  00_Reboot\",\"docstring\":\"Return reboot information per
  release\",\"body\":\"{\\r\\ncluster(\\\"DDTelInsights\\\").database(\\\"DDTel\
  Insights\\\").SetupWillowInstallProductMerged\\r\\n| where ServerTimestampUtc
  > ago(90d)\\r\\n| where IsInternal == false\\r\\n| where FriendlyProductId in
  (\\\"Community\\\",\\\"Professional\\\",\\\"Enterprise\\\")\\r\\n| extend
  OperationName = iif(OperationName == \\\"update\\\",
  iif(substring(AppVersionUpdateTo,0,4) == substring(AppVersionUpdateFrom,0,4),
  \\\"minorUpdate\\\",\\\"majorUpdate\\\"),OperationName)\\r\\n| summarize dHits
  = dcount(MachineId) by AppVersion, ChannelId, RebootType, OperationName\\r\\n|
  join kind=inner (
  cluster(\\\"Ddtelvsraw\\\").database(\\\"LookupTables\\\").VS_Telemetry_Relea\
  ses_Func()\\r\\n                        | where ReleaseScope contains
  \\\"Public\\\"\\r\\n                        | where ChannelId in
  (\\\"VisualStudio.15.Preview\\\",\\\"VisualStudio.15.Release\\\",\\\"VisualSt\
  udio.16.Preview\\\",\\\"VisualStudio.16.Release\\\")\\r\\n                        \
  | distinct ManifestVersion, ReleaseDate, ChannelId, ProductDisplayVersion
  \\r\\n                        | order by ManifestVersion
  desc\\r\\n                  ) on $left.AppVersion == $right.ManifestVersion,
  ChannelId\\r\\n| where ReleaseDate > ago(90d)\\r\\n| summarize Total =
  sum(dHits),\\r\\n            Reboots=sumif(dHits, RebootType contains
  \\\"Reboot\\\"), \\r\\n            Pct_Reboots = round(sumif(dHits, RebootType
  contains \\\"Reboot\\\") * 100.0 / sum(dHits), 2)\\r\\n          by
  AppVersion, ChannelId, ProductDisplayVersion ,
  OperationName\\r\\n}\",\"inputParameters\":[]},{\"name\":\"Setup100_Reliabili\
  ty\",\"docstring\":\"Return failures per release\",\"body\":\"{\\r\\nlet
  publicversions =
  cluster(\\\"Ddtelvsraw\\\").database(\\\"LookupTables\\\").VS_Telemetry_Relea\
  ses_Func() \\r\\n                        | where ReleaseScope contains
  \\\"Public\\\"\\r\\n                        | where ChannelShortName in
  (\\\"Release\\\",\\\"Preview\\\")\\r\\n                        | distinct
  ManifestVersion, ReleaseDate, ChannelId, ProductDisplayVersion
  \\r\\n                        | order by ManifestVersion desc;\\r\\n\\r\\n//
  Public curated data \\r\\nlet publicCuratedReleases =
  cluster(\\\"DDTelInsights\\\").database(\\\"DDTelInsights\\\").SetupWillowIns\
  tallProductMerged\\r\\n| where AppVersion in (publicversions) \\r\\n| where
  IsInternal == 0\\r\\n| extend OperationName = iif(OperationName ==
  \\\"update\\\", iif(substring(AppVersionUpdateTo,0,4) ==
  substring(AppVersionUpdateFrom,0,4),
  \\\"minorUpdate\\\",\\\"majorUpdate\\\"),OperationName)\\r\\n| where
  GeneralReportResult !in (\\\"ServiceUpdateRequireError\\\",
  \\\"Cancel\\\",\\\"Block\\\",\\\"MissingEnd\\\")\\r\\n| project
  InstallSessionId, GeneralReportResult, AppVersion, ChannelId,
  OperationName;\\r\\n\\r\\n// Public realtime data \\r\\nlet
  publicRealTimeReleases =
  cluster(\\\"DDTelvsraw\\\").database(\\\"VS\\\").RawEventsVS\\r\\n| where
  EventName == \\\"vs/willow/install-product\\\"\\r\\n| where
  Properties[\\\"reserved.datamodel.action.type\\\"] == \\\"End\\\"\\r\\n| where
  IsInternal == false\\r\\n| extend AppVersion =
  tostring(Properties[\\\"vs.willow.appversion\\\"])\\r\\n| extend OperationName
  = tostring(Properties [\\\"vs.willow.operationname\\\"])\\r\\n| extend
  GeneralReportResult = tostring(Properties[\\\"vs.willow.operationresult\\\"])
  \\r\\n| extend InstallSessionId =
  tostring(Properties[\\\"context.default.vs.willow.installsessionid\\\"])\\r\\\
  n| extend AppVersionUpdateTo =
  tostring(Properties[\\\"vs.willow.appversionupdateto\\\"])\\r\\n| extend
  AppVersionUpdateFrom =
  tostring(Properties[\\\"vs.willow.appversionupdatefrom\\\"])\\r\\n| extend
  HasCoreFailure =
  tostring(Properties[\\\"vs.willow.hascorepackagefailures\\\"])\\r\\n| extend
  HasFailedPackageIds =
  isnotempty(Properties[\\\"vs.willow.failedpackageids\\\"]) \\r\\n| where
  AppVersion in (publicversions) \\r\\n| extend OperationName =
  iif(OperationName == \\\"update\\\", iif(substring(AppVersionUpdateTo,0,4) ==
  substring(AppVersionUpdateFrom,0,4),
  \\\"minorUpdate\\\",\\\"majorUpdate\\\"),OperationName)\\r\\n| extend
  GeneralReportResult = iif(GeneralReportResult == \\\"RebootRequired\\\",
  \\r\\n                                    iif(HasCoreFailure == \\\"true\\\",
  \\\"Failure\\\",
  \\r\\n                                    iif(HasFailedPackageIds == true,
  \\\"Warning\\\", \\\"Success\\\")), GeneralReportResult)   \\r\\n| where
  GeneralReportResult in (\\\"Success\\\", \\\"Warning\\\",
  \\\"Failure\\\")\\r\\n| project InstallSessionId, GeneralReportResult,
  AppVersion, ChannelId, OperationName;\\r\\n\\r\\n// Agregate public
  data\\r\\nlet publicReleases = publicCuratedReleases | union
  publicRealTimeReleases\\r\\n| summarize sHits =
  dcount(InstallSessionId),             \\r\\n            sSuccessHits =
  dcountif(InstallSessionId, GeneralReportResult ==
  \\\"Success\\\"),\\r\\n            sSuccessPct =
  round(dcountif(InstallSessionId, GeneralReportResult == \\\"Success\\\") *
  100.0 / dcount(InstallSessionId),2),\\r\\n            sFailureHits =
  dcountif(InstallSessionId, GeneralReportResult ==
  \\\"Failure\\\"),\\r\\n            sFailurePct =
  round(dcountif(InstallSessionId, GeneralReportResult == \\\"Failure\\\") *
  100.0 / dcount(InstallSessionId),2),\\r\\n            sWarningHits =
  dcountif(InstallSessionId, GeneralReportResult ==
  \\\"Warning\\\"),\\r\\n            sWarningPct =
  round(dcountif(InstallSessionId, GeneralReportResult == \\\"Warning\\\") *
  100.0 / dcount(InstallSessionId),2)\\r\\n       by AppVersion,
  OperationName\\r\\n| join kind=leftouter ( publicversions\\r\\n       ) on
  $left.AppVersion == $right.ManifestVersion\\r\\n| project
  ProductDisplayVersion, AppVersion, OperationName, ReleaseDate, ChannelId,
  sHits, sSuccessHits, sSuccessPct, sFailureHits, sFailurePct, sWarningHits,
  sWarningPct;\\r\\n\\r\\n\\r\\nlet dogfoodversionsdetails =
  cluster(\\\"Ddtelvsraw\\\").database(\\\"LookupTables\\\").VS_Telemetry_Relea\
  ses_Func()\\r\\n                        | where ReleaseScope =~
  \\\"dogfood\\\"\\r\\n                        | where ChannelShortName ==
  \\\"IntPreview\\\"\\r\\n                        | parse ProductDisplayVersion
  with ReleaseName \\\"[\\\" *\\r\\n                        | extend
  ProductDisplayVersion = ReleaseName\\r\\n                        | extend
  ReleaseDate = BuildDate\\r\\n                        | distinct
  ManifestVersion, ProductDisplayVersion,
  ChannelId\\r\\n                        | order by ManifestVersion
  desc;\\r\\nlet dogfoodreleasedate =
  cluster(\\\"Ddtelvsraw\\\").database(\\\"LookupTables\\\").VS_Telemetry_Relea\
  ses_Func()\\r\\n                        | where ReleaseScope =~
  \\\"dogfood\\\"\\r\\n                        | where ChannelShortName ==
  \\\"IntPreview\\\"\\r\\n                        | parse ProductDisplayVersion
  with ReleaseName \\\"[\\\" *\\r\\n                        | extend
  ProductDisplayVersion = ReleaseName\\r\\n                        | extend
  ReleaseDate = BuildDate\\r\\n                        | summarize
  argmax(ReleaseDate, *) by ProductDisplayVersion,
  ChannelId   \\r\\n                        | project ProductDisplayVersion,
  ChannelId, ReleaseDate = max_ReleaseDate;\\r\\nlet dogfoodversions =
  dogfoodversionsdetails \\r\\n                        | join kind=leftouter (
  dogfoodreleasedate ) on ProductDisplayVersion \\r\\n                        |
  project ManifestVersion, ProductDisplayVersion, ChannelId,
  ReleaseDate;\\r\\n\\r\\n// Public curated data \\r\\nlet
  dogfoodCuratedReleases =
  cluster(\\\"DDTelInsights\\\").database(\\\"DDTelInsights\\\").SetupWillowIns\
  tallProductMerged\\r\\n| where AppVersion in (dogfoodversions) \\r\\n| where
  ChannelId contains \\\"IntPreview\\\"\\r\\n| extend OperationName =
  iif(OperationName == \\\"update\\\", iif(substring(AppVersionUpdateTo,0,4) ==
  substring(AppVersionUpdateFrom,0,4),
  \\\"minorUpdate\\\",\\\"majorUpdate\\\"),OperationName)\\r\\n| where
  GeneralReportResult !in (\\\"ServiceUpdateRequireError\\\",
  \\\"Cancel\\\",\\\"Block\\\",\\\"MissingEnd\\\")\\r\\n| project
  InstallSessionId, GeneralReportResult, AppVersion, ChannelId,
  OperationName;\\r\\n\\r\\n// Public realtime data\\r\\nlet
  dogfoodRealTimeReleases =
  cluster(\\\"DDTelvsraw\\\").database(\\\"VS\\\").RawEventsVS\\r\\n| where
  EventName == \\\"vs/willow/install-product\\\"\\r\\n| where
  Properties[\\\"reserved.datamodel.action.type\\\"] == \\\"End\\\"\\r\\n| where
  IsInternal == false\\r\\n| extend AppVersion =
  tostring(Properties[\\\"vs.willow.appversion\\\"])\\r\\n| extend OperationName
  = tostring(Properties [\\\"vs.willow.operationname\\\"])\\r\\n| extend
  GeneralReportResult = tostring(Properties[\\\"vs.willow.operationresult\\\"])
  \\r\\n| extend InstallSessionId =
  tostring(Properties[\\\"context.default.vs.willow.installsessionid\\\"])\\r\\\
  n| extend AppVersionUpdateTo =
  tostring(Properties[\\\"vs.willow.appversionupdateto\\\"])\\r\\n| extend
  AppVersionUpdateFrom =
  tostring(Properties[\\\"vs.willow.appversionupdatefrom\\\"])\\r\\n| extend
  ChannelId = tostring(Properties[\\\"vs.willow.channelid\\\"])\\r\\n| extend
  HasCoreFailure =
  tostring(Properties[\\\"vs.willow.hascorepackagefailures\\\"])\\r\\n| extend
  HasFailedPackageIds =
  isnotempty(Properties[\\\"vs.willow.failedpackageids\\\"]) \\r\\n| where
  AppVersion in (dogfoodversions) \\r\\n| where ChannelId contains
  \\\"IntPreview\\\"\\r\\n| extend OperationName = iif(OperationName ==
  \\\"update\\\", iif(substring(AppVersionUpdateTo,0,4) ==
  substring(AppVersionUpdateFrom,0,4),
  \\\"minorUpdate\\\",\\\"majorUpdate\\\"),OperationName)\\r\\n| extend
  GeneralReportResult = iif(GeneralReportResult == \\\"RebootRequired\\\",
  \\r\\n                                    iif(HasCoreFailure == \\\"true\\\",
  \\\"Failure\\\",
  \\r\\n                                    iif(HasFailedPackageIds == true,
  \\\"Warning\\\", \\\"Success\\\")), GeneralReportResult)   \\r\\n| where
  GeneralReportResult in (\\\"Success\\\", \\\"Warning\\\",
  \\\"Failure\\\")\\r\\n| project InstallSessionId, GeneralReportResult,
  AppVersion, ChannelId, OperationName;\\r\\n\\r\\n// Agregate dpgfodd
  data\\r\\nlet dogfoodReleases = dogfoodCuratedReleases | union
  dogfoodRealTimeReleases\\r\\n| join kind=leftouter (
  dogfoodversions\\r\\n       ) on $left.AppVersion ==
  $right.ManifestVersion\\r\\n| summarize sHits =
  dcount(InstallSessionId),\\r\\n            sSuccessHits =
  dcountif(InstallSessionId, GeneralReportResult ==
  \\\"Success\\\"),\\r\\n            sSuccessPct =
  round(dcountif(InstallSessionId, GeneralReportResult == \\\"Success\\\") *
  100.0 / dcount(InstallSessionId),2),\\r\\n            sFailureHits =
  dcountif(InstallSessionId, GeneralReportResult ==
  \\\"Failure\\\"),\\r\\n            sFailurePct =
  round(dcountif(InstallSessionId, GeneralReportResult == \\\"Failure\\\") *
  100.0 / dcount(InstallSessionId),2),\\r\\n            sWarningHits =
  dcountif(InstallSessionId, GeneralReportResult ==
  \\\"Warning\\\"),\\r\\n            sWarningPct =
  round(dcountif(InstallSessionId, GeneralReportResult == \\\"Warning\\\") *
  100.0 / dcount(InstallSessionId),2)\\r\\n       by ProductDisplayVersion,
  ChannelId, OperationName, ReleaseDate;\\r\\n       \\r\\npublicReleases |
  union
  dogfoodReleases\\r\\n}\",\"inputParameters\":[]},{\"name\":\"Setup100_RemapEr\
  ror\",\"docstring\":\"Return a curated failure
  signature\",\"body\":\"{\\r\\n\\r\\ncluster(\\\"DDTelInsights\\\").database(\\\
  \"Playground\\\").SetupErrorRemapper\\r\\n    | extend updatedSignature =
  iif(FilterInSignature =~ signature,
  Title,\\r\\n                                    iif(signature contains
  FilterInSignature, Title ,signature))\\r\\n    | summarize hit = count() by
  updatedSignature\\r\\n    | project updatedSignature, hit\\r\\n    | order by
  hit asc
  \\r\\n}\",\"inputParameters\":[{\"name\":\"signature\",\"cslType\":\"string\",\
  \"type\":\"System.String\",\"docstring\":\"\"}]},{\"name\":\"Willow_CrashCount\
  \",\"docstring\":\"Returns the number of jscrash events by os/exe versions
  during the timespan\",\"body\":\"{\\r\\n    let minUploadTime = now() -
  timePeriod;\\r\\n    cluster('Ddtelvsraw').database('VS').RawEventsVS\\r\\n    \
  | where EventName == \\\"vs/willow/jscrash\\\"\\r\\n    | where
  AdvancedServerTimestampUtc >= minUploadTime\\r\\n    | summarize
  NumberOfCrashSessions = dcount(SessionId), NumberOfCrashMachines =
  dcount(MacAddressHash) by ExeVersion,
  OsVersion\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslType\":\
  \"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"}]},{\"name\":\"W\
  illow_MachineCountByExeVersion\",\"docstring\":\"Returns the number of
  machines per version \",\"body\":\"{\\r\\n    let minTime = now() -
  timePeriod;\\r\\n    cluster('Ddtelvsraw').database('VS').RawEventsVS\\r\\n  \
    | where EventName == \\\"vs/willow/apprun\\\" and tostring(Properties[\\\"r\
  eserved.datamodel.action.type\\\"]) == \\\"Start\\\"\\r\\n    | where Advance\
  dServerTimestampUtc >
  minTime\\r\\n    | summarize NumberOfMachines = dcount(MacAddressHash) by Exe\
  Version\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslType\":\"\
  timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"}]},{\"name\":\"Wil\
  low_CrashPercentagePerMachineByExeVersion\",\"docstring\":\"Returns the
  percent of machines crashing by exe
  version\",\"body\":\"{\\r\\n    let CrashesByExeVersion
  = Willow_CrashCount(timePeriod)\\r\\n    | summarize NumberOfCrashMachines
  = sum(NumberOfCrashMachines) by ExeVersion;\\r\\n    Willow_MachineCountByExe\
  Version(timePeriod)\\r\\n    | join kind = leftouter CrashesByExeVersion on E\
  xeVersion\\r\\n    | where ExeVersion
  != \\\"1.0.0\\\"\\r\\n    | where NumberOfMachines >=
  minMachines\\r\\n    | extend NumberOfCrashMachines = max_of(0, NumberOfCrash\
  Machines)\\r\\n    | extend CrashPercent = NumberOfCrashMachines * 100.0 /
  NumberOfMachines\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"csl\
  Type\":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\"name\
  \":\"minMachines\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\
  \":\"\"}]},{\"name\":\"Willow_SessionCountByExeAndOsVersion\",\"docstring\":\
  \"Returns the number of session starts by Willow and OS version during the
  timespan\",\"body\":\"{\\r\\n    let minUploadTime = now() -
  timePeriod;\\r\\n    cluster('Ddtelvsraw').database('VS').RawEventsVS\\r\\n    \
  | where EventName == \\\"vs/willow/apprun\\\" and
  tostring(Properties[\\\"reserved.datamodel.action.type\\\"]) ==
  \\\"Start\\\"\\r\\n    | where AdvancedServerTimestampUtc  >=
  minUploadTime\\r\\n    | summarize NumberOfSessions = dcount(SessionId),
  NumberOfMachines = dcount(MacAddressHash) by ExeVersion,
  OsVersion\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslType\":\
  \"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"}]},{\"name\":\"W\
  illow_SessionCountByExeVersion\",\"docstring\":\"Returns the number of session
  starts by Willow version during the
  timespan\",\"body\":\"{\\r\\n    Willow_SessionCountByExeAndOsVersion(timePer\
  iod)\\r\\n    | summarize NumberOfSessions = sum(NumberOfSessions),
  NumberOfMachines = sum(NumberOfMachines) by
  ExeVersion\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslType\":\
  \"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"}]},{\"name\":\"W\
  illow_CrashSessionPercentagesByWillowVersion\",\"docstring\":\"Returns the
  percentage of sessions with crash events by Willow
  version\",\"body\":\"{\\r\\n    let CrashesByExeVersion =
  Willow_CrashCount(timePeriod)\\r\\n    | summarize NumberOfCrashSessions =
  sum(NumberOfCrashSessions) by
  ExeVersion;\\r\\n    Willow_SessionCountByExeVersion(timePeriod)\\r\\n    |
  join kind = leftouter CrashesByExeVersion on ExeVersion\\r\\n    | where
  ExeVersion != \\\"1.0.0\\\"\\r\\n    | where NumberOfSessions >=
  minSessions\\r\\n    | extend NumberOfCrashSessions = max_of(0,
  NumberOfCrashSessions)\\r\\n    | extend CrashPercent = NumberOfCrashSessions
  * 100.0 /
  NumberOfSessions\\r\\n}\",\"inputParameters\":[{\"name\":\"minSessions\",\"cs\
  lType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\"},{\"name\":\"tim\
  ePeriod\",\"cslType\":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\
  \"\"}]},{\"name\":\"Willow_CrashSessionPercentagesByWillowAndOsVersion\",\"do\
  cstring\":\"Returns the percentage of sessions with crash events by Willow/Os
  versions\",\"body\":\"{\\r\\n    Willow_SessionCountByExeAndOsVersion(timePer\
  iod)\\r\\n    | join kind = leftouter Willow_CrashCount(timePeriod) on
  ExeVersion, OsVersion\\r\\n    | where ExeVersion != \\\"1.0.0\\\"\\r\\n    |
  where NumberOfSessions >= minSessions\\r\\n    | extend NumberOfCrashSessions
  = max_of(0, NumberOfCrashSessions)\\r\\n    | extend CrashPercent =
  NumberOfCrashSessions * 100.0 /
  NumberOfSessions\\r\\n}\",\"inputParameters\":[{\"name\":\"minSessions\",\"cs\
  lType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\"},{\"name\":\"tim\
  ePeriod\",\"cslType\":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\
  \"\"}]},{\"name\":\"Willow_CrashSessionsByWillowAndOsVersionGoalDetails\",\"d\
  ocstring\":\"Returns the Willow/Os versions that do not meet the success
  criteria for crashes during the
  timespan\",\"body\":\"{\\r\\n    Willow_CrashSessionPercentagesByWillowAndOsV\
  ersion(minSessions, timePeriod)\\r\\n    | where CrashPercent >
  maxCrashPercent\\r\\n}\",\"inputParameters\":[{\"name\":\"minSessions\",\"csl\
  Type\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\"},{\"name\":\"time\
  Period\",\"cslType\":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\
  \"\"},{\"name\":\"maxCrashPercent\",\"cslType\":\"real\",\"type\":\"System.Do\
  uble\",\"docstring\":\"\"}]},{\"name\":\"Willow_CrashSessionsByWillowAndOsVer\
  sionGoal\",\"docstring\":\"Returns the number Willow/Os versions that do not
  meet the success criteria for crashes during the
  timespan\",\"body\":\"{\\r\\n    Willow_CrashSessionsByWillowAndOsVersionGoal\
  Details(minSessions, timePeriod, maxCrashPercent)\\r\\n    | summarize Result
  =
  count()\\r\\n}\",\"inputParameters\":[{\"name\":\"minSessions\",\"cslType\":\
  \"int\",\"type\":\"System.Int32\",\"docstring\":\"\"},{\"name\":\"timePeriod\
  \",\"cslType\":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\
  \"name\":\"maxCrashPercent\",\"cslType\":\"real\",\"type\":\"System.Double\",\
  \"docstring\":\"\"}]},{\"name\":\"Willow_CrashSessionsByWillowVersionGoalDeta\
  ils\",\"docstring\":\"Returns the Willow versions that do not meet the success
  criteria for crashes during the
  timespan\",\"body\":\"{\\r\\n    Willow_CrashSessionPercentagesByWillowVersio\
  n(minSessions, timePeriod)\\r\\n    | where CrashPercent >
  maxCrashPercent\\r\\n}\",\"inputParameters\":[{\"name\":\"minSessions\",\"csl\
  Type\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\"},{\"name\":\"time\
  Period\",\"cslType\":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\
  \"\"},{\"name\":\"maxCrashPercent\",\"cslType\":\"real\",\"type\":\"System.Do\
  uble\",\"docstring\":\"\"}]},{\"name\":\"Willow_CrashSessionsByWillowVersionG\
  oal\",\"docstring\":\"Returns the number Willow versions that do not meet the
  success criteria for crashes during the
  timespan\",\"body\":\"{\\r\\n    Willow_CrashSessionsByWillowVersionGoalDetai\
  ls(minSessions, timePeriod, maxCrashPercent)\\r\\n    | summarize Result =
  count()\\r\\n}\",\"inputParameters\":[{\"name\":\"minSessions\",\"cslType\":\
  \"int\",\"type\":\"System.Int32\",\"docstring\":\"\"},{\"name\":\"timePeriod\
  \",\"cslType\":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\
  \"name\":\"maxCrashPercent\",\"cslType\":\"real\",\"type\":\"System.Double\",\
  \"docstring\":\"\"}]},{\"name\":\"Willow_InstallSessionCountByExeVersion\",\"\
  docstring\":\"Returns the number of install session starts by Willow version
  during the timespan\",\"body\":\"{\\r\\n    let minUploadTime = now() -
  timePeriod;\\r\\n    cluster('Ddtelvsraw').database('VS').RawEventsVS\\r\\n    \
  | where EventName == \\\"vs/willow/install-product\\\" and
  tostring(Properties[\\\"reserved.datamodel.action.type\\\"]) ==
  \\\"Start\\\"\\r\\n    | where AdvancedServerTimestampUtc >=
  minUploadTime\\r\\n    | summarize NumberOfInstallSessions =
  dcount(SessionId), NumberOfMachinesInstalling = dcount(MacAddressHash) by
  ExeVersion\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslType\":\
  \"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"}]},{\"name\":\"W\
  illow_UnresponsiveWindowCount\",\"docstring\":\"Returns the number of
  unresponsive events by Willow version during the
  timespan\",\"body\":\"{\\r\\n    let minUploadTime = now() -
  timePeriod;\\r\\n    cluster('Ddtelvsraw').database('VS').RawEventsVS\\r\\n    \
  | where EventName == \\\"vs/willow/browserwindow/unresponsive\\\"\\r\\n    |
  where AdvancedServerTimestampUtc >= minUploadTime\\r\\n    | summarize
  NumberOfUnresponsiveSessions = dcount(SessionId), NumberOfUnresponsiveMachines
  = dcount(MacAddressHash) by
  ExeVersion\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslType\":\
  \"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"}]},{\"name\":\"W\
  illow_UnresponsiveInstallPercentages\",\"docstring\":\"Returns the percentage
  of installs with unresponsive events by Willow
  version\",\"body\":\"{\\r\\n    Willow_InstallSessionCountByExeVersion(timePe\
  riod)\\r\\n    | join kind = leftouter Willow_UnresponsiveDuringOperationCoun\
  t(timePeriod) on ExeVersion\\r\\n    | where ExeVersion != \\\"1.0.0\\\"\\r\\\
  n    | where NumberOfInstallSessions >=
  minInstalls\\r\\n    | extend NumberOfUnresponsiveSessions = max_of(0, Number\
  OfUnresponsiveSessions)\\r\\n    | extend UnresponsivePercent = NumberOfUnres\
  ponsiveSessions * 100.0
  / NumberOfInstallSessions\\r\\n}\",\"inputParameters\":[{\"name\":\"minInstal\
  ls\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\"},{\"name\
  \":\"timePeriod\",\"cslType\":\"timespan\",\"type\":\"System.TimeSpan\",\"doc\
  string\":\"\"}]},{\"name\":\"Willow_UnresponsiveSessionPercentages\",\"docstr\
  ing\":\"Returns the percentage of sessions with unresponsive events by Willow
  version\",\"body\":\"{\\r\\n    Willow_SessionCountByExeVersion(timePeriod)\\r\
  \\n    | join kind = leftouter Willow_UnresponsiveWindowCount(timePeriod) on
  ExeVersion\\r\\n    | where ExeVersion != \\\"1.0.0\\\"\\r\\n    | where
  NumberOfSessions >= minSessions\\r\\n    | extend NumberOfUnresponsiveSessions
  = max_of(0, NumberOfUnresponsiveSessions)\\r\\n    | extend
  UnresponsivePercent = NumberOfUnresponsiveSessions * 100.0 /
  NumberOfSessions\\r\\n}\",\"inputParameters\":[{\"name\":\"minSessions\",\"cs\
  lType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\"},{\"name\":\"tim\
  ePeriod\",\"cslType\":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\
  \"\"}]},{\"name\":\"Willow_UnresponsiveSessionsGoalDetails\",\"docstring\":\"\
  Returns the Willow versions not meeting the unresponsive success criteria by
  number of
  sessions\",\"body\":\"{\\r\\n    Willow_UnresponsiveSessionPercentages(minSes\
  sions, timePeriod)\\r\\n    | where UnresponsivePercent >
  maxUnresponsivePercent\\r\\n}\",\"inputParameters\":[{\"name\":\"minSessions\
  \",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\"},{\"name\
  \":\"timePeriod\",\"cslType\":\"timespan\",\"type\":\"System.TimeSpan\",\"doc\
  string\":\"\"},{\"name\":\"maxUnresponsivePercent\",\"cslType\":\"real\",\"ty\
  pe\":\"System.Double\",\"docstring\":\"\"}]},{\"name\":\"Willow_UnresponsiveI\
  nstallsGoalDetails\",\"docstring\":\"Returns the details of the VSTelHealth
  unresponsive installs
  goal\",\"body\":\"{\\r\\n    Willow_UnresponsiveInstallPercentages(minMachine\
  s, timePeriod)\\r\\n    | join ( Willow_NthLatestVersion(n, releaseScope,
  channelId, true) ) on
  ExeVersion\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslType\":\
  \"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\"name\":\"min\
  Machines\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\"},{\
  \"name\":\"n\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\
  \"},{\"name\":\"releaseScope\",\"cslType\":\"string\",\"type\":\"System.String\
  \",\"docstring\":\"\"},{\"name\":\"channelId\",\"cslType\":\"string\",\"type\
  \":\"System.String\",\"docstring\":\"\"}]},{\"name\":\"Willow_UnresponsiveIns\
  tallsGoal\",\"docstring\":\"Returns the result of the VSTelHealth unresponsive
  installs
  goal\",\"body\":\"{\\r\\n    Willow_UnresponsiveInstallsGoalDetails(timePerio\
  d, minMachines, n, releaseScope, channelId)\\r\\n    | summarize Result =
  sum(UnresponsivePercent)\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\
  \",\"cslType\":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\
  \"name\":\"minMachines\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docs\
  tring\":\"\"},{\"name\":\"n\",\"cslType\":\"int\",\"type\":\"System.Int32\",\
  \"docstring\":\"\"},{\"name\":\"releaseScope\",\"cslType\":\"string\",\"type\
  \":\"System.String\",\"docstring\":\"\"},{\"name\":\"channelId\",\"cslType\":\
  \"string\",\"type\":\"System.String\",\"docstring\":\"\"}]},{\"name\":\"Willo\
  w_UnresponsiveSessionsGoal\",\"docstring\":\"Returns number of Willow versions
  not meeting the unresponsive sessions success
  criteria\",\"body\":\"{\\r\\n    Willow_UnresponsiveSessionsGoalDetails(minSe\
  ssions, timePeriod, maxUnresponsivePercent)\\r\\n    | summarize Result =
  countif(UnresponsivePercent >
  maxUnresponsivePercent)\\r\\n}\",\"inputParameters\":[{\"name\":\"minSessions\
  \",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\"},{\"name\
  \":\"timePeriod\",\"cslType\":\"timespan\",\"type\":\"System.TimeSpan\",\"doc\
  string\":\"\"},{\"name\":\"maxUnresponsivePercent\",\"cslType\":\"real\",\"ty\
  pe\":\"System.Double\",\"docstring\":\"\"}]},{\"name\":\"Willow_NthLatestVers\
  ion\",\"docstring\":\"Returns the n-th latest installer version from the
  channelId released with the given
  scope\",\"body\":\"{\\r\\n    cluster(\\\"Ddtelvsraw\\\").database(\\\"Lookup\
  Tables\\\").VS_Telemetry_Releases_Func()\\r\\n    | where ReleaseScope
  contains releaseScope and ChannelId =~ channelId\\r\\n    | extend IsRTW =
  ManifestVersion startswith \\\"15.0\\\"\\r\\n    | where IsRTW == false or
  IsRTW != excludeRTW\\r\\n    | summarize BuildDate = max(BuildDate) by
  WillowInstallerVersion\\r\\n    | top n by WillowInstallerVersion desc nulls
  last\\r\\n    | top 1 by WillowInstallerVersion asc nulls last \\r\\n    |
  project ExeVersion = tostring(WillowInstallerVersion)
  \\r\\n}\",\"inputParameters\":[{\"name\":\"n\",\"cslType\":\"int\",\"type\":\
  \"System.Int32\",\"docstring\":\"\"},{\"name\":\"releaseScope\",\"cslType\":\
  \"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\"channel\
  Id\",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\
  \"name\":\"excludeRTW\",\"cslType\":\"bool\",\"type\":\"System.SByte\",\"docs\
  tring\":\"\"}]},{\"name\":\"Setup100_MissingEnd\",\"docstring\":\"Return
  missing
  data\",\"body\":\"{\\r\\ncluster('Ddtelinsights').database('DDTelInsights').S\
  etupWillowInstallProductMerged \\r\\n| where ServerTimestampUtc > now(-90d)
  \\r\\n| where IsInternal == 0 \\r\\n| where ChannelId == channel\\r\\n| where
  ReleaseScope contains \\\"public\\\" \\r\\n| where OperationName ==
  \\\"install\\\" \\r\\n| where GeneralReportResult !in
  (\\\"Cancel\\\",\\\"Block\\\") \\r\\n| summarize totalHits =
  dcount(InstallSessionId)\\r\\n            , missingEndHits =
  dcountif(InstallSessionId\\r\\n            , GeneralReportResult =~
  \\\"Missingend\\\") \\r\\n    by bin(ServerTimestampUtc, 1d),
  EngineProductDisplayVersion \\r\\n| where totalHits >
  minHit\\r\\n}\",\"inputParameters\":[{\"name\":\"channel\",\"cslType\":\"stri\
  ng\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\"minHit\",\"cs\
  lType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\"}]},{\"name\":\"S\
  etup100_MissingEnd_Breakdown\",\"docstring\":\"Return failures per
  release\",\"body\":\"{\\r\\ncluster(\\\"DDTelInsights\\\").database(\\\"DDTel\
  Insights\\\").SetupWillowInstallProductMerged\\r\\n| where GeneralReportResult
  == \\\"MissingEnd\\\" \\r\\n| where OperationName == \\\"install\\\" \\r\\n|
  where IsInternal == false \\r\\n| summarize dHits =
  dcount(MacAddressHash)\\r\\n            , EngineNotStartedPct =
  round(dcountif(MacAddressHash, IsAbnormalShutdown == false and
  HasEngineOperationStart == 0 and HasEngineOperationEnd == 0) * 100.0 /
  dcount(MacAddressHash))\\r\\n            , EngineNotStarted =
  dcountif(MacAddressHash, IsAbnormalShutdown == false and
  HasEngineOperationStart == 0 and HasEngineOperationEnd ==
  0)\\r\\n            , EngineStartedPct = round(dcountif(MacAddressHash,
  IsAbnormalShutdown == false and HasEngineOperationStart == 1 and
  HasEngineOperationEnd == 0) * 100.0 /
  dcount(MacAddressHash))\\r\\n            , EngineStarted =
  dcountif(MacAddressHash, IsAbnormalShutdown == false and
  HasEngineOperationStart == 1 and HasEngineOperationEnd ==
  0)\\r\\n            , EngineEndedPct = round(dcountif(MacAddressHash,
  IsAbnormalShutdown == false and HasEngineOperationStart == 1 and
  HasEngineOperationEnd == 1) * 100.0 /
  dcount(MacAddressHash))\\r\\n            , EngineEnded =
  dcountif(MacAddressHash, IsAbnormalShutdown == false and
  HasEngineOperationStart == 1 and HasEngineOperationEnd ==
  1)\\r\\n            , ErrorStatePct = round(dcountif(MacAddressHash,
  HasEngineOperationStart == 0 and HasEngineOperationEnd == 1) * 100.0 /
  dcount(MacAddressHash))\\r\\n            , ErrorState =
  dcountif(MacAddressHash, HasEngineOperationStart == 0 and
  HasEngineOperationEnd == 1)\\r\\n            ,
  IsAbnormalShutdownBeforeEngineStartedPct = round(dcountif(MacAddressHash,
  IsAbnormalShutdown == true and HasEngineOperationStart == 0 and
  HasEngineOperationEnd == 0) * 100.0 /
  dcount(MacAddressHash))\\r\\n            ,
  IsAbnormalShutdownBeforeEngineStarted = dcountif(MacAddressHash,
  IsAbnormalShutdown == true and HasEngineOperationStart == 0 and
  HasEngineOperationEnd == 0)\\r\\n            ,
  IsAbnormalShutdownDuringInstallPct = round(dcountif(MacAddressHash,
  IsAbnormalShutdown == true and HasEngineOperationStart == 1 and
  HasEngineOperationEnd == 0) * 100.0 /
  dcount(MacAddressHash))\\r\\n            , IsAbnormalShutdownDuringInstall =
  dcountif(MacAddressHash, IsAbnormalShutdown == true and
  HasEngineOperationStart == 1 and HasEngineOperationEnd ==
  0)\\r\\n            , IsAbnormalShutdownAfterInstallPct =
  round(dcountif(MacAddressHash, IsAbnormalShutdown == true and
  HasEngineOperationStart == 1 and HasEngineOperationEnd == 1) * 100.0 /
  dcount(MacAddressHash))\\r\\n            , IsAbnormalShutdownAfterInstall =
  dcountif(MacAddressHash, IsAbnormalShutdown == true and
  HasEngineOperationStart == 1 and HasEngineOperationEnd == 1)\\r\\n      by
  AppVersion, ChannelId \\r\\n| join kind=leftouter (
  cluster(\\\"Ddtelvsraw\\\").database(\\\"LookupTables\\\").VS_Telemetry_Relea\
  ses_Func()                     \\r\\n                        | where
  ReleaseScope contains
  \\\"public\\\"                         \\r\\n                        | where
  ReleaseDate >
  datetime(\\\"12-12-2017\\\")                         \\r\\n                        \
  | project ManifestVersion, ChannelId, ProductDisplayVersion,
  WillowInstallerVersion                        \\r\\n                      ) on
  ChannelId, $left.AppVersion == $right.ManifestVersion \\r\\n| where
  isnotempty(ProductDisplayVersion) \\r\\n| project
  ProductDisplayVersion             \\r\\n            ,
  ChannelId             \\r\\n            ,
  AppVersion              \\r\\n            ,
  WillowInstallerVersion              \\r\\n            ,
  dHits              \\r\\n            , EngineNotStartedPct\\r\\n            ,
  EngineNotStarted\\r\\n            , EngineStartedPct\\r\\n            ,
  EngineStarted\\r\\n            , EngineEndedPct\\r\\n            ,
  EngineEnded\\r\\n            , ErrorStatePct\\r\\n            ,
  ErrorState\\r\\n            ,
  IsAbnormalShutdownBeforeEngineStartedPct\\r\\n            ,
  IsAbnormalShutdownBeforeEngineStarted\\r\\n            ,
  IsAbnormalShutdownDuringInstallPct\\r\\n            ,
  IsAbnormalShutdownDuringInstall\\r\\n            ,
  IsAbnormalShutdownAfterInstallPct\\r\\n            ,
  IsAbnormalShutdownAfterInstall\\r\\n}\",\"inputParameters\":[]},{\"name\":\"S\
  etup100_MissingEnd_Package\",\"docstring\":\"Return failures per
  release\",\"body\":\"{\\r\\ncluster(\\\"DDTelInsights\\\").database(\\\"DDTel\
  Insights\\\").SetupWillowInstallProductMerged  \\r\\n| where
  GeneralReportResult == \\\"MissingEnd\\\" \\r\\n| where
  HasEngineOperationStart == 1 and HasEngineOperationEnd == 0 \\r\\n| where
  isnotempty(LastPackageId)  \\r\\n| join kind=leftouter (
  cluster(\\\"Ddtelvsraw\\\").database(\\\"LookupTables\\\").VS_Telemetry_Relea\
  ses_Func()                     \\r\\n                        | where
  ReleaseScope contains
  \\\"public\\\"                         \\r\\n                        | where
  ReleaseDate > datetime(\\\"12-12-2017\\\") and ReleaseDate >
  now(-90d)                         \\r\\n                        | project
  ManifestVersion, ChannelId, ProductDisplayVersion,
  WillowInstallerVersion\\r\\n                      ) on ChannelId,
  $left.AppVersion == $right.ManifestVersion \\r\\n| where
  isnotempty(ProductDisplayVersion) \\r\\n| summarize dhits =
  dcount(MacAddressHash) by symbols = strcat(LastPackageId, \\\":\\\",
  LastPackageOperation), ProductDisplayVersion, ChannelId \\r\\n| order by dhits
  desc  \\r\\n| extend symbols_Hits = strcat(symbols, \\\" - \\\", dhits)
  \\r\\n| summarize top5List = makelist(symbols_Hits, 5) by
  ProductDisplayVersion,
  ChannelId\\r\\n}\",\"inputParameters\":[]},{\"name\":\"SetupEngine_Verificati\
  onFailure\",\"docstring\":\"Returns verification failure
  events.\",\"body\":\"{\\r\\n    let minUploadTime = now() -
  timePeriod;\\r\\n    cluster('Ddtelvsraw').database('VS').RawEventsVS\\r\\n    \
  | where AdvancedServerTimestampUtc >= minUploadTime\\r\\n    | where
  IsInternal == false\\r\\n    | where EventName ==
  \\\"vs/setupengine/package-operation\\\"\\r\\n    | where Properties contains
  message\\r\\n    | where
  tostring(Properties[\\\"vs.setupengine.operationtype\\\"]) ==
  \\\"Verify-Package\\\"\\r\\n    | where
  tostring(Properties[\\\"reserved.datamodel.action.result\\\"]) ==
  \\\"Failure\\\"\\r\\n}\",\"inputParameters\":[{\"name\":\"message\",\"cslType\
  \":\"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\"time\
  Period\",\"cslType\":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\
  \"\"}]},{\"name\":\"SetupEngine_VerificationFailure_Count\",\"docstring\":\"R\
  eturns the number of verification failure
  events.\",\"body\":\"{\\r\\n    SetupEngine_VerificationFailure(message,
  1h)\\r\\n    | summarize Result = count()
  \\r\\n}\",\"inputParameters\":[{\"name\":\"message\",\"cslType\":\"string\",\
  \"type\":\"System.String\",\"docstring\":\"\"}]},{\"name\":\"SetupEngine_Veri\
  ficationFailure_Diagnostic1\",\"docstring\":\"Returns distribution of
  verification failure
  events.\",\"body\":\"{\\r\\n    SetupEngine_VerificationFailure(message,
  1h)\\r\\n    | extend AffectedPackage =
  tostring(Properties[\\\"vs.setupengine.uniquepackageid\\\"])\\r\\n    | extend
  ProductVersion =
  tostring(Properties[\\\"context.default.vs.setupengine.productversion\\\"])\\r\
  \\n    | parse
  tostring(Properties[\\\"reserved.datamodel.action.resultsummary\\\"]) with *
  \\\"actual signer: \\\" ActualSigner\\r\\n    | summarize Count = count() by
  GeoCountryRegionIso, ActualSigner, AffectedPackage,
  ProductVersion\\r\\n}\",\"inputParameters\":[{\"name\":\"message\",\"cslType\
  \":\"string\",\"type\":\"System.String\",\"docstring\":\"\"}]},{\"name\":\"Se\
  tupEngine_VerificationFailure_Diagnostic2\",\"docstring\":\"Returns details of
  verification failure
  events.\",\"body\":\"{\\r\\n    SetupEngine_VerificationFailure(message,
  1h)\\r\\n    | extend AffectedPackage =
  tostring(Properties[\\\"vs.setupengine.uniquepackageid\\\"])\\r\\n    | parse
  tostring(Properties[\\\"reserved.datamodel.action.resultsummary\\\"]) with *
  \\\"actual signer: \\\" ActualSigner\\r\\n    | extend Result =
  tostring(Properties[\\\"reserved.datamodel.action.resultsummary\\\"])\\r\\n    \
  | project GeoCountryRegionIso, AffectedPackage, ActualSigner, OsVersion,
  Result\\r\\n}\",\"inputParameters\":[{\"name\":\"message\",\"cslType\":\"stri\
  ng\",\"type\":\"System.String\",\"docstring\":\"\"}]},{\"name\":\"Willow_Unre\
  sponsiveDuringOperationCount\",\"docstring\":\"Returns the count of
  unresponsive events occurring during an operation\",\"body\":\"{\\r\\n    let
  minUploadTime = now() -
  timePeriod;\\r\\n    cluster(\\\"Ddtelvsraw\\\").database(\\\"VS\\\").RawEven\
  tsVS\\r\\n    | where AdvancedServerTimestampUtc >= minUploadTime\\r\\n    |
  where EventName == \\\"vs/willow/browserwindow/unresponsive\\\"\\r\\n    |
  project UnresponsiveTime = ClientTimestampUtc, SessionId, MacAddressHash,
  UnresponsiveId = EventId, ExeVersion\\r\\n    | join
  (\\r\\n        RawEventsVS\\r\\n        | where AdvancedServerTimestampUtc >=
  minUploadTime\\r\\n        | where EventName ==
  \\\"vs/willow/install-product\\\"\\r\\n        | where
  tostring(Properties[\\\"reserved.datamodel.action.type\\\"]) ==
  \\\"Start\\\"\\r\\n        | project StartTime = ClientTimestampUtc,
  SessionId, MacAddressHash\\r\\n        | join
  (\\r\\n            RawEventsVS\\r\\n            | where
  AdvancedServerTimestampUtc >= minUploadTime\\r\\n            | where EventName
  == \\\"vs/willow/install-product\\\"\\r\\n            | where
  tostring(Properties[\\\"reserved.datamodel.action.type\\\"]) ==
  \\\"End\\\"\\r\\n            | project EndTime = ClientTimestampUtc,
  SessionId, MacAddressHash\\r\\n        ) on SessionId,
  MacAddressHash\\r\\n    ) on SessionId, MacAddressHash\\r\\n    | extend
  DuringOperation = iff(UnresponsiveTime > StartTime and UnresponsiveTime <
  EndTime, 1, 0)\\r\\n    | summarize DuringOperation = sum(DuringOperation) by
  SessionId, UnresponsiveId, ExeVersion\\r\\n    | extend DuringOperation =
  iff(DuringOperation > 0, true, false)\\r\\n    | where DuringOperation ==
  true\\r\\n    | summarize NumberOfUnresponsiveSessions = count() by
  ExeVersion\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslType\":\
  \"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"}]},{\"name\":\"W\
  illow_Crashes\",\"docstring\":\"Returns JSCrash events with common
  properties\",\"body\":\"{\\r\\n    let minUploadTime = now() -
  timeperiod;\\r\\n    cluster(\\\"Ddtelvsraw\\\").database(\\\"VS\\\").RawEven\
  tsVS\\r\\n    | where EventName == \\\"vs/willow/jscrash\\\"\\r\\n    | where
  AdvancedServerTimestampUtc >= minUploadTime\\r\\n    |
  project\\r\\n        SessionId,\\r\\n        MacAddressHash,\\r\\n        Exe\
  Version,\\r\\n        OsVersion,\\r\\n        Message =
  tostring(Properties[\\\"reserved.datamodel.fault.exception.message\\\"]),\\r\
  \\n        Stack =
  tostring(Properties[\\\"reserved.datamodel.fault.exception.stacktrace\\\"]),\
  \\r\\n        Param1 =
  tostring(Properties[\\\"datamodel.fault.bucketparam1\\\"]),\\r\\n        Para\
  m2 =
  tostring(Properties[\\\"datamodel.fault.bucketparam2\\\"]),\\r\\n        Para\
  m3 =
  tostring(Properties[\\\"datamodel.fault.bucketparam3\\\"]),\\r\\n        Para\
  m4 =
  tostring(Properties[\\\"datamodel.fault.bucketparam4\\\"]),\\r\\n        Para\
  m5 =
  tostring(Properties[\\\"datamodel.fault.bucketparam5\\\"]),\\r\\n        Para\
  m6 =
  tostring(Properties[\\\"datamodel.fault.bucketparam6\\\"])\\r\\n}\",\"inputPa\
  rameters\":[{\"name\":\"timeperiod\",\"cslType\":\"timespan\",\"type\":\"Syst\
  em.TimeSpan\",\"docstring\":\"\"}]},{\"name\":\"Willow_CrashesByStack\",\"doc\
  string\":\"Returns the number of jscrash events by os/exe versions during the
  timespan, bucketed by
  stack\",\"body\":\"{\\r\\n    Willow_Crashes(timeperiod)\\r\\n    | summarize
  SessionCount = dcount(SessionId), MachineCount = dcount(MacAddressHash) by
  Stack, ExeVersion,
  OsVersion\\r\\n}\",\"inputParameters\":[{\"name\":\"timeperiod\",\"cslType\":\
  \"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"}]},{\"name\":\"W\
  illow_ServicehubStartErrors\",\"docstring\":\"Returns servicehub start failure
  events with common properties\",\"body\":\"{\\r\\n    let minUploadTime =
  now() -
  timeperiod;\\r\\n    cluster(\\\"Ddtelvsraw\\\").database(\\\"VS\\\").RawEven\
  tsVS\\r\\n    | where AdvancedServerTimestampUtc >= minUploadTime\\r\\n    |
  where EventName == \\\"vs/willow/start-servicehub-error\\\"\\r\\n    |
  project\\r\\n        SessionId,\\r\\n        MacAddressHash,\\r\\n        Exe\
  Version,\\r\\n        OsVersion,\\r\\n        Message =
  tostring(Properties[\\\"reserved.datamodel.fault.exception.message\\\"]),\\r\
  \\n        Stack =
  tostring(Properties[\\\"reserved.datamodel.fault.exception.stacktrace\\\"]),\
  \\r\\n        Param1 =
  tostring(Properties[\\\"datamodel.fault.bucketparam1\\\"]),\\r\\n        Para\
  m2 =
  tostring(Properties[\\\"datamodel.fault.bucketparam2\\\"]),\\r\\n        Para\
  m3 =
  tostring(Properties[\\\"datamodel.fault.bucketparam3\\\"]),\\r\\n        Para\
  m4 =
  tostring(Properties[\\\"datamodel.fault.bucketparam4\\\"]),\\r\\n        Para\
  m5 =
  tostring(Properties[\\\"datamodel.fault.bucketparam5\\\"]),\\r\\n        Para\
  m6 =
  tostring(Properties[\\\"datamodel.fault.bucketparam6\\\"])\\r\\n}\",\"inputPa\
  rameters\":[{\"name\":\"timeperiod\",\"cslType\":\"timespan\",\"type\":\"Syst\
  em.TimeSpan\",\"docstring\":\"\"}]},{\"name\":\"Setup100_Failures_RealTime\",\
  \"docstring\":\"Return failures per release\",\"body\":\"{\\r\\nlet
  latestManifestVersion =
  cluster(\\\"Ddtelvsraw\\\").database(\\\"LookupTables\\\").VS_Telemetry_Relea\
  ses_Func() \\r\\n                        | where ChannelId ==
  channelId\\r\\n                        | where ReleaseScope contains
  \\\"public\\\"\\r\\n                        | summarize by ManifestVersion,
  ProductDisplayVersion \\r\\n                        | top 1 by
  ProductDisplayVersion desc\\r\\n                        | project
  ManifestVersion;\\r\\nlet bugs =
  cluster(\\\"DDTelInsights\\\").database(\\\"Playground\\\").SetupErrorToBugMa\
  pping\\r\\n    | where isempty(Ignore) and isnotempty(IssueId)\\r\\n    |
  extend IssueId = toint(IssueId)\\r\\n    | summarize bugId = any(IssueId) by
  errorMessage = tolower(replace(\\\"\\\\\\\\s*\\\", \\\"\\\",
  ErrorMessage));\\r\\nlet events = RawEventsVS \\r\\n| where EventName ==
  \\\"vs/willow/install-product\\\"\\r\\n| where
  tostring(Properties[\\\"reserved.datamodel.action.type\\\"]) ==
  \\\"End\\\"\\r\\n| where IsInternal == false\\r\\n| where
  tostring(Properties[\\\"vs.willow.appversion\\\"]) ==
  iif(isempty(manifestVersion), toscalar(latestManifestVersion),
  manifestVersion)\\r\\n| extend GeneralResult =
  tostring(Properties[\\\"reserved.datamodel.action.result\\\"])\\r\\n| extend
  FailedPackageIds =
  tostring(Properties[\\\"vs.willow.failedpackageids\\\"])\\r\\n| extend
  ErrorMessage = tostring(Properties[\\\"vs.willow.errormessage\\\"])\\r\\n|
  extend FailedPackageDetails =
  tostring(Properties[\\\"vs.willow.failedpackagedetails.1\\\"])\\r\\n| parse
  FailedPackageDetails with WillowReportError1 \\\",\\\" *\\r\\n| extend
  FailedPackageDetails  = iif(isempty(WillowReportError1), FailedPackageDetails
  , WillowReportError1)\\r\\n| parse ErrorMessage with ErrorMessage1 \\\";\\\"
  *\\r\\n| extend ErrorMessage = iif(isempty(ErrorMessage1), ErrorMessage,
  ErrorMessage1) \\r\\n| extend InstallSessionId =
  tostring(Properties[\\\"context.default.vs.willow.installsessionid\\\"])\\r\\\
  n| extend ErrorMessage = iif(ErrorMessage contains 'Недостаточно места на
  диске.', 'There is not enough space on the
  disk.',\\r\\n                                iif(ErrorMessage contains
  '磁盘空间不足。', 'There is not enough space on the
  disk.',\\r\\n                                iif(ErrorMessage contains
  '磁碟的空間不足。', 'There is not enough space on the
  disk.',\\r\\n                                iif(ErrorMessage contains
  'Espacio en disco insuficiente.', 'There is not enough space on the
  disk.',\\r\\n                                iif(ErrorMessage contains '디스크
  공간이 부족합니다.', 'There is not enough space on the
  disk.',\\r\\n                                iif(ErrorMessage contains
  '所指定的可執行檔不是這個作業系統平台的有效應用程式。', 'The specified executable is not a valid
  application for this OS
  platform.',\\r\\n                                iif(ErrorMessage contains 'تم
  إنهاء العملية، ولذلك فإن المعلومات المطلوبة غير متوفرة.', 'Process has exited,
  so the requested information is not
  available.',\\r\\n                                iif(ErrorMessage contains
  'Process has exited, so the requested information is not available.', 'Process
  has exited, so the requested information is not
  available.',\\r\\n                                iif(ErrorMessage contains
  'Microsoft.VisualStudio.Setup.ChannelsLockedException', 'Exception of type
  \\\\'Microsoft.VisualStudio.Setup.ChannelsLockedException\\\\' was
  thrown.',\\r\\n                                iif(ErrorMessage =~
  'System.NullReferenceException', 'Object reference not set to an instance of
  an object.',\\r\\n                                iif(ErrorMessage =~ 'لم يتم
  تعيين مرجع كائن لمثيل كائن.', 'Object reference not set to an instance of an
  object.',\\r\\n                                iif(ErrorMessage contains
  'There is not enough space on the disk.', 'There is not enough space on the
  disk.', ErrorMessage))))))))))))\\r\\n| parse ErrorMessage with \\\"Package
  '\\\" PackageId \\\"'\\\" *\\r\\n| project   InstallSessionId,
  \\r\\n                GeneralResult,
  \\r\\n                FailedPackageDetails,\\r\\n                PackageId,                \
  \\r\\n                ErrorMessage,
  \\r\\n                MacAddressHash;\\r\\nlet errors = events\\r\\n    |
  where GeneralResult in (\\\"Warning\\\", \\\"Failure\\\")\\r\\n;\\r\\nlet
  total = errors \\r\\n    | summarize totalMachines = dcount(MacAddressHash, 2)
  \\r\\n    | project key = 1, totalMachines;\\r\\nerrors\\r\\n    | join
  kind=leftouter \\r\\n     (
  cluster('Ddtelvsraw').database('VS').RawEventsVS\\r\\n        | where
  EventName == \\\"vs/setupengine/packagefailure\\\"\\r\\n        | where
  IsInternal == false\\r\\n        | extend PackageId =
  tostring(Properties[\\\"vs.setupengine.packageid\\\"])\\r\\n        | extend
  SharedWillowInstallSessionId =
  tostring(Properties[\\\"context.default.vs.setupengine.sharedwillowinstallses\
  sionid\\\"])\\r\\n        | extend ResultSummary =
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam8\\\"])\\r\\n        \
  | extend ErrorCode_P7 =
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam7\\\"])\\r\\n        \
  | extend Operation_P6 = iif(ErrorCode_P7 == \\\"-2146889721\\\", \\\"Install -
  Win10SDK\\\",
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam6\\\"]))\\r\\n        \
  | extend PackageFailureMessage = strcat(PackageId, \\\"_\\\", ErrorCode_P7,
  \\\"_\\\", Operation_P6)\\r\\n        | join kind=leftouter (
  \\r\\n                                cluster(\\\"DDTelInsights\\\").database(\
  \\\"Playground\\\").SetupErrorRemapper \\r\\n                              )
  \\r\\n                              on $left.ErrorCode_P7 ==
  $right.FilterInSignature\\r\\n        | extend PackageFailureMessage =
  iif(isempty(Title), PackageFailureMessage, Title)\\r\\n        |
  project   rPackageId = PackageId,
  \\r\\n                    rSharedWillowInstallSessionId =
  SharedWillowInstallSessionId, \\r\\n                    rPackageFailureMessage
  = PackageFailureMessage,\\r\\n                    rPackageErrorCode =
  ErrorCode_P7\\r\\n     ) on $left.PackageId == $right.rPackageId,
  $left.InstallSessionId == $right.rSharedWillowInstallSessionId\\r\\n| extend
  ReportErrorMessage = iif(isnotempty(FailedPackageDetails),
  FailedPackageDetails,
  \\r\\n                                iif(isnotempty(rPackageFailureMessage),
  rPackageFailureMessage, ErrorMessage))\\r\\n| parse FailedPackageDetails with
  * \\\"_\\\"  FailingErrorCode \\\"_\\\" *\\r\\n| parse FailedPackageDetails
  with * \\\"_\\\" * \\\"_\\\"  FailingErrorCode1 \\\"_\\\" *\\r\\n| parse
  FailedPackageDetails with * \\\"_\\\" * \\\"_\\\" * \\\"_\\\"
  FailingErrorCode2 \\\"_\\\" *\\r\\n| extend FailingErrorCode =
  iif(isempty(FailingErrorCode2),
  \\r\\n                                iif(isempty(FailingErrorCode1),
  FailingErrorCode, FailingErrorCode1)\\r\\n                                ,
  FailingErrorCode2)\\r\\n| join
  kind=leftouter\\r\\n                cluster(\\\"DDTelInsights\\\").database(\\\
  \"Playground\\\").SetupErrorRemapper\\r\\n    on $left.FailingErrorCode ==
  $right.FilterInSignature\\r\\n| extend ReportErrorMessage =
  iif(isnotempty(Title), Title,ReportErrorMessage) \\r\\n| extend
  ReportErrorCode = iif(isnotempty(FailingErrorCode), FailingErrorCode,
  iif(isnotempty(rPackageErrorCode), rPackageErrorCode, ErrorMessage))\\r\\n|
  summarize machineCount = dcount(MacAddressHash, 2) by errorMessage =
  ReportErrorMessage, operationResult = GeneralResult, errorCode =
  ReportErrorCode\\r\\n| extend errorMessageForJoin =
  tolower(replace(\\\"\\\\\\\\s*\\\", \\\"\\\", errorMessage))\\r\\n| where
  errorMessage != \\\"\\\"\\r\\n| extend key=1\\r\\n| join kind=inner total on
  key\\r\\n| extend percentageMachines = todouble(machineCount) / totalMachines
  * 100\\r\\n| join kind=leftouter bugs on $left.errorMessageForJoin ==
  $right.errorMessage\\r\\n| extend errorMessage = iif(errorMessage contains
  \\\"Underlying stream has closed\\\", \\\"The underlying stream has
  closed\\\", errorMessage)\\r\\n| extend errorCode = iif(errorCode contains
  \\\"Underlying stream has closed\\\", \\\"The underlying stream has
  closed\\\", errorCode)\\r\\n| project errorMessage, operationResult,
  machineCount, round(percentageMachines,2), bugId, errorCode\\r\\n| order by
  percentageMachines
  desc\\r\\n}\",\"inputParameters\":[{\"name\":\"manifestVersion\",\"cslType\":\
  \"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\"channel\
  Id\",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"}]},{\
  \"name\":\"Setup100_Reliability_Bootstrapper\",\"docstring\":\"Return
  bootstrapper reliability over
  time\",\"body\":\"{\\r\\n\\r\\ncluster(\\\"Ddtelinsights\\\").database(\\\"DD\
  TelInsights\\\").SetupBootStrapperApprunEvent \\r\\n| where ServerUpLoadTime >
  ago(30d)\\r\\n| where IsInternal == 0\\r\\n| where DataModelActionType ==
  \\\"End\\\"\\r\\n| where StartupType == \\\"Install\\\"\\r\\n| where ChannelId
  contains \\\"Release\\\"\\r\\n| where ExeVersion !startswith
  \\\"15.\\\"\\r\\n| summarize successHits = dcountif(MacAddressHash,
  GeneralReportResult == \\\"Success\\\"),\\r\\n            successPct =
  round(dcountif(MacAddressHash, GeneralReportResult == \\\"Success\\\") * 100.0
  / dcountif(MacAddressHash, GeneralReportResult in
  (\\\"Success\\\",\\\"Failure\\\")),2) \\r\\n      by bin(ServerUpLoadTime,
  1d)\\r\\n| project ServerUpLoadTime ,
  successPct\\r\\n\\r\\n}\",\"inputParameters\":[]},{\"name\":\"Willow_OptedOut\
  GoalDetails\",\"docstring\":\"Returns the count/percentage of users that opted
  out of sending telemetry\",\"body\":\"{\\r\\n    let minUploadTime = now() -
  timePeriod;\\r\\n    let OptInTable
  =\\r\\n        cluster('Ddtelvsraw').database('VS').RawEventsVS\\r\\n        |
  where EventName == \\\"vs/willow/app-start-opted-out\\\"\\r\\n        | where
  AdvancedServerTimestampUtc >= minUploadTime\\r\\n        | where ExeVersion !=
  \\\"1.0.0\\\"\\r\\n        | project OptedIn =
  iff(tostring(Properties[\\\"context.default.vs.core.user.isoptedin\\\"]) =~
  \\\"true\\\", true, false), MacAddressHash,
  ExeVersion;\\r\\n    OptInTable\\r\\n    | where OptedIn == false\\r\\n    |
  summarize OptedOutCount = dcount(MacAddressHash) by ExeVersion\\r\\n    | join
  (\\r\\n       OptInTable\\r\\n       | where OptedIn == true\\r\\n       |
  summarize OptedInCount = dcount(MacAddressHash) by ExeVersion\\r\\n    ) on
  ExeVersion\\r\\n    | extend TotalUsers = OptedInCount + OptedOutCount
  \\r\\n    | extend OptInPercent = round(OptedInCount * 100.00 / TotalUsers,
  2)\\r\\n    | sort by OptInPercent desc nulls
  last\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslType\":\"tim\
  espan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"}]},{\"name\":\"Willow\
  _OptedOutGoal\",\"docstring\":\"Returns the number of versions that have a
  percent of opted in users less than the
  goal\",\"body\":\"{\\r\\n    Willow_OptedOutGoalResultDetails(goal,
  timePeriod, minUsers)\\r\\n    | summarize Result =
  count()\\r\\n}\",\"inputParameters\":[{\"name\":\"goal\",\"cslType\":\"real\",\
  \"type\":\"System.Double\",\"docstring\":\"\"},{\"name\":\"timePeriod\",\"csl\
  Type\":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\"name\
  \":\"minUsers\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\
  \"}]},{\"name\":\"Willow_OptedOutGoalResultDetails\",\"docstring\":\"Returns
  the count/percentage of users that opted out of sending telemetry not meeting
  the
  goal\",\"body\":\"{\\r\\n    Willow_OptedOutGoalDetails(timePeriod)\\r\\n    |
  where OptInPercent < goal\\r\\n    | where TotalUsers >=
  minUsers\\r\\n}\",\"inputParameters\":[{\"name\":\"goal\",\"cslType\":\"real\
  \",\"type\":\"System.Double\",\"docstring\":\"\"},{\"name\":\"timePeriod\",\"\
  cslType\":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\"na\
  me\":\"minUsers\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\
  \"\"}]},{\"name\":\"VSTelemetryDashboards_DashboardReleases_VS\",\"docstring\
  \":\"Gets the recommended set of releases for VS dashboards, including:\\n1.
  The most recent preview version (ex. 16.7 Preview 4.0)\\n2. All (other) minor
  versions next most recent preview (ex. 16.7 Preview 3.x)\\n3. The most recent
  release version (ex. 16.6.2)\\n4. All older versions from the current release
  group (ex. 16.6.0, 16.6.1)\\n5. All versions from the previous release group
  (ex. 16.5.*)\\nFor each release the following columns are provided:\\no
  DashboardLabel -- for grouping results into the categories described above\\no
  BranchName\\no ExeVersion\\no ManifestId\\no DisplayVersion\\no
  ReleaseGroupLabel\",\"body\":\"{\\nlet allVersions =
  VS_Telemetry_Releases_Func();\\nlet releaseVersions = allVersions\\n| where
  ChannelShortName == \\\"Release\\\";\\nlet latestReleaseGroupLabel =
  releaseVersions\\n| top 1 by parse_version(ReleaseGroupLabel)\\n| project
  ReleaseGroupLabel;\\nlet previousReleaseGroupLabel = releaseVersions\\n| where
  ReleaseGroupLabel != toscalar(latestReleaseGroupLabel)\\n| top 1 by
  parse_version(ReleaseGroupLabel)\\n| project ReleaseGroupLabel;\\nlet
  latestReleaseVersion = releaseVersions \\n| where ReleaseGroupLabel ==
  toscalar(latestReleaseGroupLabel)\\n| top 1 by parse_version(VsVersion)\\n|
  project ProductDisplayVersion; \\nlet previousRelease = releaseVersions \\n|
  where ReleaseGroupLabel == toscalar(previousReleaseGroupLabel)\\n| project
  DashboardLabel = strcat(ReleaseGroupLabel, \\\".*\\\"), VsBranch, VsVersion,
  ProductManifestId, ProductDisplayVersion, ReleaseGroupLabel;\\nlet
  currentReleaseOlder = releaseVersions \\n| where ReleaseGroupLabel ==
  toscalar(latestReleaseGroupLabel)\\n| where ProductDisplayVersion !=
  toscalar(latestReleaseVersion)\\n| project DashboardLabel =
  strcat(ReleaseGroupLabel, \\\" (Older)\\\"), VsBranch, VsVersion,
  ProductManifestId, ProductDisplayVersion, ReleaseGroupLabel;\\nlet
  latestRelease = releaseVersions \\n| top 1 by parse_version(VsVersion)\\n|
  project DashboardLabel = ProductDisplayVersion, VsBranch, VsVersion,
  ProductManifestId, ProductDisplayVersion, ReleaseGroupLabel;\\nlet
  previewVersions = allVersions\\n| where ChannelShortName == \\\"Preview\\\"
  \\n| where ReleaseDate > ago(180d)\\n| extend PreviewMajorVersion =
  substring(ProductDisplayVersion, 0, strlen(ProductDisplayVersion) - 2);\\nlet
  latestTwoPreviews = previewVersions\\n| top 2 by
  parse_version(VsVersion);\\nlet latestPreview = latestTwoPreviews\\n| top 1 by
  parse_version(VsVersion)\\n| project DashboardLabel = ProductDisplayVersion,
  VsBranch, VsVersion, ProductManifestId, ProductDisplayVersion,
  ReleaseGroupLabel, PreviewMajorVersion;\\nlet
  latestPreviewProductDisplayVersion = latestPreview\\n| project
  ProductDisplayVersion;\\nlet latestPreviewMajorVersion = latestPreview\\n|
  project PreviewMajorVersion;\\nlet previousPreviewMajorVersion =
  latestTwoPreviews\\n| where ProductDisplayVersion !=
  toscalar(latestPreviewProductDisplayVersion)\\n| project
  PreviewMajorVersion;\\nlet previousPreviewWithoutDashboardLabel =
  previewVersions\\n| where PreviewMajorVersion ==
  toscalar(previousPreviewMajorVersion)\\n| where ProductDisplayVersion !=
  toscalar(latestPreviewProductDisplayVersion)\\n| project PreviewMajorVersion,
  VsBranch, VsVersion, ProductManifestId, ProductDisplayVersion,
  ReleaseGroupLabel;\\nlet previousPreviewCount =
  previousPreviewWithoutDashboardLabel\\n| summarize count();\\nlet
  previousPreview = previousPreviewWithoutDashboardLabel\\n| extend
  DashboardLabel = iif(toscalar(previousPreviewCount) ==
  1,\\n                              ProductDisplayVersion,\\n                              \
  strcat(PreviewMajorVersion, iif(toscalar(latestPreviewMajorVersion) ==
  toscalar(previousPreviewMajorVersion),\\n                                                              \
  \\\"
  (Older)\\\",\\n                                                              \
  \\\".*\\\")))\\n| project-away PreviewMajorVersion;\\nunion previousRelease,
  currentReleaseOlder, latestRelease, previousPreview, latestPreview\\n| project
  DashboardLabel, BranchName=toupper(VsBranch), ExeVersion=VsVersion,
  ManifestId=ProductManifestId, DisplayVersion=ProductDisplayVersion,
  ReleaseGroupLabel;\\n}\",\"inputParameters\":[]},{\"name\":\"VSTelemetryDashb\
  oards_LatestPreviewVersion_VS\",\"docstring\":\"Gets the most recent VS
  preview version (ex. 15.8.0 Preview 1.1)\\nThe following columns are
  provided:\\no DashboardLabel -- for grouping results into the categories
  described above\\no BranchName\\no ExeVersion\\no ManifestId\\no
  DisplayVersion\\no
  ReleaseGroupLabel\",\"body\":\"{\\r\\nVS_Telemetry_Releases_Func()\\r\\n|
  where ChannelShortName == \\\"Preview\\\"\\r\\n| top 1 by
  ProductDisplayVersion\\r\\n| project DashboardLabel = ProductDisplayVersion,
  BranchName=toupper(VsBranch), ExeVersion=VsVersion,
  ManifestId=ProductManifestId, DisplayVersion=ProductDisplayVersion,
  ReleaseGroupLabel;\\r\\n}\",\"inputParameters\":[]},{\"name\":\"VSTelemetryDa\
  shboards_LatestReleaseVersion_VS\",\"docstring\":\"Gets the most recent VS
  release version (ex. 15.7.4)\\nThe following columns are provided:\\no
  DashboardLabel -- for grouping results into the categories described above\\no
  BranchName\\no ExeVersion\\no ManifestId\\no DisplayVersion\\no
  ReleaseGroupLabel\",\"body\":\"{\\r\\nVS_Telemetry_Releases_Func()\\r\\n|
  where ChannelShortName == \\\"Release\\\"\\r\\n| top 1 by
  ProductDisplayVersion\\r\\n| project DashboardLabel = ProductDisplayVersion,
  BranchName=toupper(VsBranch), ExeVersion=VsVersion,
  ManifestId=ProductManifestId, DisplayVersion=ProductDisplayVersion,
  ReleaseGroupLabel;\\r\\n}\",\"inputParameters\":[]},{\"name\":\"Willow_CrashG\
  oalDetails\",\"docstring\":\"Returns the details for the VSTelHealth crash
  goal
  metric\",\"body\":\"{\\r\\n    Willow_CrashPercentagePerMachineByExeVersion(t\
  imePeriod, minMachines)\\r\\n    | join ( Willow_NthLatestVersion(n,
  releaseScope, channelId, true) ) on
  ExeVersion\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslType\":\
  \"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\"name\":\"min\
  Machines\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\"},{\
  \"name\":\"n\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\
  \"},{\"name\":\"releaseScope\",\"cslType\":\"string\",\"type\":\"System.String\
  \",\"docstring\":\"\"},{\"name\":\"channelId\",\"cslType\":\"string\",\"type\
  \":\"System.String\",\"docstring\":\"\"}]},{\"name\":\"Willow_CrashGoal\",\"d\
  ocstring\":\"Returns the result for the VSTelHealth crash goal
  metric\",\"body\":\"{\\r\\n    Willow_CrashGoalDetails(timePeriod,
  minMachines, n, releaseScope, channelId)\\r\\n    | summarize Result =
  sum(CrashPercent)\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cs\
  lType\":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\"name\
  \":\"minMachines\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\
  \":\"\"},{\"name\":\"n\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docs\
  tring\":\"\"},{\"name\":\"releaseScope\",\"cslType\":\"string\",\"type\":\"Sy\
  stem.String\",\"docstring\":\"\"},{\"name\":\"channelId\",\"cslType\":\"string\
  \",\"type\":\"System.String\",\"docstring\":\"\"}]},{\"name\":\"Willow_CrashG\
  oalDiagQuery2\",\"docstring\":\"Returns the results for the crash goal
  diagnostic query two\",\"body\":\"{\\r\\n    Willow_NthLatestVersion(n,
  releaseScope, channelId, true)\\r\\n    | join ( RawEventsVS | where EventName
  == 'vs/willow/jscrash' and AdvancedServerTimestampUtc >= now() - timePeriod )
  on ExeVersion\\r\\n    | project CrashType =
  tostring(Properties['vs.willow.resultdetails']), Stack =
  tostring(Properties['vs.willow.stack']), SessionId, MacAddressHash,
  ExeVersion\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslType\":\
  \"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\"name\":\"n\",\
  \"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\"},{\"name\":\
  \"releaseScope\",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\
  \":\"\"},{\"name\":\"channelId\",\"cslType\":\"string\",\"type\":\"System.Str\
  ing\",\"docstring\":\"\"}]},{\"name\":\"Willow_UnresponsiveGoalDetails\",\"do\
  cstring\":\"Returns the details of the VSTelHealth unresponsive sessions
  goal\",\"body\":\"{\\r\\n    Willow_UnresponsiveSessionPercentages(minMachine\
  s, timePeriod)\\r\\n    | join ( Willow_NthLatestVersion(n, releaseScope,
  channelId, true) ) on
  ExeVersion\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslType\":\
  \"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\"name\":\"min\
  Machines\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\"},{\
  \"name\":\"n\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\
  \"},{\"name\":\"releaseScope\",\"cslType\":\"string\",\"type\":\"System.String\
  \",\"docstring\":\"\"},{\"name\":\"channelId\",\"cslType\":\"string\",\"type\
  \":\"System.String\",\"docstring\":\"\"}]},{\"name\":\"Willow_UnresponsiveGoal\
  \",\"docstring\":\"Returns the result of the VSTelHealth unresponsive sessions
  goal\",\"body\":\"{\\r\\n    Willow_UnresponsiveGoalDetails(timePeriod,
  minMachines, n, releaseScope, channelId)\\r\\n    | summarize Result =
  sum(UnresponsivePercent)\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\
  \",\"cslType\":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\
  \"name\":\"minMachines\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docs\
  tring\":\"\"},{\"name\":\"n\",\"cslType\":\"int\",\"type\":\"System.Int32\",\
  \"docstring\":\"\"},{\"name\":\"releaseScope\",\"cslType\":\"string\",\"type\
  \":\"System.String\",\"docstring\":\"\"},{\"name\":\"channelId\",\"cslType\":\
  \"string\",\"type\":\"System.String\",\"docstring\":\"\"}]},{\"name\":\"Willo\
  w_CrashesByStackGoalDetails\",\"docstring\":\"Returns the details of the
  VSTelHealth crashes by stack
  goal\",\"body\":\"{\\r\\n    Willow_NthLatestVersion(n, releaseScope,
  channelId, true)\\r\\n    | join kind = leftouter
  (\\r\\n        Willow_CrashesByStack(timePeriod)\\r\\n        | where Stack
  !contains \\\"ENOSPC\\\" // don't alert on out of diskspace
  errors\\r\\n        | summarize SessionCount = sum(SessionCount), MachineCount
  = sum(MachineCount) by Stack, ExeVersion\\r\\n        | join kind=leftouter
  Willow_SessionCountByExeVersion(timePeriod) on ExeVersion \\r\\n        |
  where NumberOfMachines >= minMachines\\r\\n        | extend SessionPercent =
  round(SessionCount * 100.00 / NumberOfSessions, 2), MachinePercent =
  round(MachineCount * 100.00 / NumberOfMachines, 2)\\r\\n        | extend
  IsOverThreshold = (SessionPercent >= maxSessionPercent or MachinePercent >=
  maxMachinePercent)\\r\\n    ) on
  ExeVersion\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslType\":\
  \"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\"name\":\"min\
  Machines\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\"},{\
  \"name\":\"maxSessionPercent\",\"cslType\":\"real\",\"type\":\"System.Double\
  \",\"docstring\":\"\"},{\"name\":\"maxMachinePercent\",\"cslType\":\"real\",\
  \"type\":\"System.Double\",\"docstring\":\"\"},{\"name\":\"n\",\"cslType\":\"\
  int\",\"type\":\"System.Int32\",\"docstring\":\"\"},{\"name\":\"releaseScope\
  \",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"n\
  ame\":\"channelId\",\"cslType\":\"string\",\"type\":\"System.String\",\"docst\
  ring\":\"\"}]},{\"name\":\"Willow_CrashesByStackGoal\",\"docstring\":\"Returns
  the result of the VSTelHealth crashes by stack
  goal\",\"body\":\"{\\r\\n    Willow_CrashesByStackGoalDetails(timePeriod,
  minMachines, maxSessionPercent, maxMachinePercent, n, releaseScope,
  channelId)\\r\\n    | where IsOverThreshold == true\\r\\n    | summarize
  Result = count()\\r\\n    | project Result = max_of(0,
  Result)\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslType\":\"\
  timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\"name\":\"minMa\
  chines\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\"},{\
  \"name\":\"maxSessionPercent\",\"cslType\":\"real\",\"type\":\"System.Double\
  \",\"docstring\":\"\"},{\"name\":\"maxMachinePercent\",\"cslType\":\"real\",\
  \"type\":\"System.Double\",\"docstring\":\"\"},{\"name\":\"n\",\"cslType\":\"\
  int\",\"type\":\"System.Int32\",\"docstring\":\"\"},{\"name\":\"releaseScope\
  \",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"n\
  ame\":\"channelId\",\"cslType\":\"string\",\"type\":\"System.String\",\"docst\
  ring\":\"\"}]},{\"name\":\"Willow_ServicehubFailuresGoalDetails\",\"docstring\
  \":\"Returns the details of VSTelHealth Servicehub failures
  goal\",\"body\":\"{\\r\\n    Willow_NthLatestVersion(n, releaseScope,
  channelId, true)\\r\\n    | join kind = leftouter
  (\\r\\n        Willow_ServicehubStartErrors(timePeriod)\\r\\n        |
  summarize SessionCount = dcount(SessionId), MachineCount =
  dcount(MacAddressHash) by ExeVersion\\r\\n        | join
  Willow_SessionCountByExeVersion(timePeriod) on ExeVersion\\r\\n        |
  extend MachineFailurePercentage = round(MachineCount * 100.0 /
  NumberOfMachines, 2)\\r\\n        | where NumberOfMachines >
  minMachines\\r\\n    ) on
  ExeVersion\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslType\":\
  \"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\"name\":\"min\
  Machines\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\"},{\
  \"name\":\"n\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\
  \"},{\"name\":\"releaseScope\",\"cslType\":\"string\",\"type\":\"System.String\
  \",\"docstring\":\"\"},{\"name\":\"channelId\",\"cslType\":\"string\",\"type\
  \":\"System.String\",\"docstring\":\"\"}]},{\"name\":\"Willow_ServicehubFailu\
  resGoal\",\"docstring\":\"Returns the result of VSTelHealth Servicehub
  failures
  goal\",\"body\":\"{\\r\\n    Willow_ServicehubFailuresGoalDetails(timePeriod,
  minMachines, n, releaseScope, channelId)\\r\\n    | project Result =
  max_of(0.0,
  MachineFailurePercentage)\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\
  \",\"cslType\":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\
  \"name\":\"minMachines\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docs\
  tring\":\"\"},{\"name\":\"n\",\"cslType\":\"int\",\"type\":\"System.Int32\",\
  \"docstring\":\"\"},{\"name\":\"releaseScope\",\"cslType\":\"string\",\"type\
  \":\"System.String\",\"docstring\":\"\"},{\"name\":\"channelId\",\"cslType\":\
  \"string\",\"type\":\"System.String\",\"docstring\":\"\"}]},{\"name\":\"Failu\
  reAnalysis_AntiVirus\",\"docstring\":\"Breakdown by
  AntiVirus\",\"body\":\"{\\r\\nlet rawResult =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").SetupWillowIns\
  tallProductMerged \\r\\n| where ServerTimestampUtc > ago(4d)\\r\\n| where
  FailedPackageDetails contains failureSignature\\r\\n| distinct MacAddressHash,
  MachineId\\r\\n| join kind=leftouter (
  cluster(\\\"Ddtelvsraw\\\").database(\\\"VS\\\").RawEventsVS  \\r\\n                        \
  | where AdvancedServerTimestampUtc > ago(4d)\\r\\n                        |
  where EventName == \\\"vs/core/antivirus\\\"\\r\\n                        |
  extend v1 =
  Properties[\\\"vs.core.antivirus.antivirus0\\\"]\\r\\n                        \
  | extend v2 =
  Properties[\\\"vs.core.antivirus.antivirus1\\\"]\\r\\n                        \
  | extend v3 =
  Properties[\\\"vs.core.antivirus.antivirus2\\\"]\\r\\n                        \
  | distinct MacAddressHash, tostring(v1), tostring(v2), tostring(v3),
  MachineId\\r\\n                      ) on MacAddressHash, MachineId\\r\\n|
  summarize dcount(MacAddressHash) by v1, v2, v3;\\r\\nlet virus1 = rawResult
  \\r\\n             | summarize x = make_list(v1)\\r\\n             | mv-expand
  with_itemindex=Index  x \\r\\n             | summarize hits = count(x) by
  tostring(x)\\r\\n             | where isnotempty(x);\\r\\nlet virus2 =
  rawResult \\r\\n             | summarize x = make_list(v2)\\r\\n             |
  mv-expand with_itemindex=Index  x \\r\\n             | summarize hits =
  count(x) by tostring(x)\\r\\n             | where isnotempty(x);\\r\\nlet
  virus3 = rawResult \\r\\n             | summarize x =
  make_list(v3)\\r\\n             | mv-expand with_itemindex=Index  x
  \\r\\n             | summarize hits = count(x) by
  tostring(x)\\r\\n             | where isnotempty(x);\\r\\nvirus1 \\r\\n| union
  virus2\\r\\n| union virus3\\r\\n| summarize sum(hits) by
  x\\r\\n}\",\"inputParameters\":[{\"name\":\"failureSignature\",\"cslType\":\"\
  string\",\"type\":\"System.String\",\"docstring\":\"\"}]},{\"name\":\"Failure\
  Analysis_Country\",\"docstring\":\"Breakdown by
  Country\",\"body\":\"{\\r\\ncluster(\\\"Ddtelinsights\\\").database(\\\"DDTel\
  Insights\\\").SetupWillowInstallProductMerged \\r\\n| where ServerTimestampUtc
  > ago(4d)\\r\\n| where FailedPackageDetails contains failureSignature\\r\\n|
  summarize dcount(MacAddressHash) by
  GeoCountryRegion\\r\\n}\",\"inputParameters\":[{\"name\":\"failureSignature\",\
  \"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"}]},{\"na\
  me\":\"Willow_DeveloperNews_CertErrorPercentage\",\"docstring\":\"Returns the
  percentage of errors by ExeVersion that are certificate
  errors.\",\"body\":\"{\\r\\n    let minUploadTime = now() -
  timePeriod;\\r\\n    cluster('Ddtelvsraw').database('VS').RawEventsVS\\r\\n    \
  | where EventName ==
  \\\"vs/willow/developernews/update-feed-error\\\"\\r\\n    | where
  AdvancedServerTimestampUtc >= minUploadTime\\r\\n    | extend isCertError =
  tostring(Properties[\\\"vs.willow.iscerterror\\\"])\\r\\n    | summarize
  certErrorCount = countif(isCertError == \\\"true\\\"), TotalErrors = count()
  by ExeVersion\\r\\n    | summarize total = sum(TotalErrors), certCount =
  sum(certErrorCount) by ExeVersion\\r\\n    | project ExeVersion, certCount,
  total, certErrorPercent = (certCount * 100.0 / iff(total == 0, 1, total))
  \\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslType\":\"timespan\
  \",\"type\":\"System.TimeSpan\",\"docstring\":\"\"}]},{\"name\":\"Willow_Deve\
  loperNews_CertErrorGoal\",\"docstring\":\"Returns the  developer news cert
  error percentage for given
  version\",\"body\":\"{\\r\\n    Willow_DeveloperNews_CertErrorPercentage(time\
  Period) \\r\\n    | join Willow_NthLatestVersion(n, releaseScope, channelId,
  true) on ExeVersion\\r\\n    | join
  Willow_MachineCountByExeVersion(timePeriod) on ExeVersion\\r\\n    | project
  Result = iff(NumberOfMachines > minMachines, certErrorPercent,
  0.00)\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslType\":\"ti\
  mespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\"name\":\"minMach\
  ines\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\"},{\"n\
  ame\":\"n\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\"}\
  ,{\"name\":\"releaseScope\",\"cslType\":\"string\",\"type\":\"System.String\",\
  \"docstring\":\"\"},{\"name\":\"channelId\",\"cslType\":\"string\",\"type\":\
  \"System.String\",\"docstring\":\"\"}]},{\"name\":\"Willow_DeveloperNews_Succ\
  essDetails\",\"docstring\":\"Returns the developer news success and failure
  details as per Exe version and OSVersion.\",\"body\":\"{\\r\\n    let
  minUploadTime = now() - timePeriod;\\r\\n    let dataTable =
  cluster('Ddtelvsraw').database('VS').RawEventsVS\\r\\n        | where
  EventName == \\\"vs/willow/developernews/update-feed\\\"\\r\\n        | where
  AdvancedServerTimestampUtc >= minUploadTime\\r\\n        | extend result =
  iff(tostring(Properties[\\\"reserved.datamodel.action.result\\\"]) ==
  \\\"Success\\\", \\\"success\\\" , \\\"failure\\\")\\r\\n        | summarize
  counts = count() by result, ExeVersion,
  OsVersion;  \\r\\n    dataTable\\r\\n    | summarize success = sumif(counts,
  result == \\\"success\\\"), total = sum(counts) by ExeVersion,
  OsVersion\\r\\n    | project ExeVersion, OsVersion, success, failure = (total
  - success),
  total\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslType\":\"ti\
  mespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"}]},{\"name\":\"Willo\
  w_DeveloperNews_SuccessPercentage\",\"docstring\":\"Returns the developer news
  success
  percentage.\",\"body\":\"{\\r\\n    Willow_DeveloperNews_SuccessDetails(timeP\
  eriod) \\r\\n    | summarize success = sum(success), failure = sum(failure),
  total = sum(total) by ExeVersion\\r\\n    | project ExeVersion, success,
  failure, total, SuccessPercent = (success * 100.0 / iff(total == 0, 1,
  total));\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslType\":\
  \"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"}]},{\"name\":\"W\
  illow_DeveloperNews_SuccessGoal\",\"docstring\":\"Returns the  developer news
  success percentage for given
  version\",\"body\":\"{\\r\\n    Willow_DeveloperNews_SuccessPercentage(timePe\
  riod) \\r\\n    | join Willow_NthLatestVersion(n, releaseScope, channelId,
  true) on ExeVersion\\r\\n    | join
  Willow_MachineCountByExeVersion(timePeriod) on ExeVersion\\r\\n    | project
  Result = iff(NumberOfMachines > minMachines, SuccessPercent,
  100.00)\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslType\":\"\
  timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\"name\":\"minMa\
  chines\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\"},{\
  \"name\":\"n\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\
  \"},{\"name\":\"releaseScope\",\"cslType\":\"string\",\"type\":\"System.String\
  \",\"docstring\":\"\"},{\"name\":\"channelId\",\"cslType\":\"string\",\"type\
  \":\"System.String\",\"docstring\":\"\"}]},{\"name\":\"Setup100_Test\",\"docs\
  tring\":\"Return issues from last x days for
  preview.\",\"body\":\"{cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsig\
  hts\\\").DataModelFault| take
  1}\",\"inputParameters\":[{\"name\":\"daysToLookback\",\"cslType\":\"timespan\
  \",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\"name\":\"previewVersion\
  \",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"n\
  ame\":\"previewVsVersion\",\"cslType\":\"string\",\"type\":\"System.String\",\
  \"docstring\":\"\"}]},{\"name\":\"VS_ConfigExportFromVSErrorPercentage\",\"do\
  cstring\":\"Returns the percentage of failed .vsconfig
  exports.\",\"body\":\"{\\r\\n    let minUploadTime = now() -
  timePeriod;\\r\\n    cluster('ddtelvsraw').database('VS').RawEventsVS\\r\\n    \
  | where EventName startswith
  \\\"vs/setup/inproductacquisition/export-configuration\\\"\\r\\n    | where
  AdvancedServerTimestampUtc >= minUploadTime\\r\\n    | summarize
  SuccessfulExports = countif(EventName ==
  \\\"vs/setup/inproductacquisition/export-configuration\\\" and
  tostring(Properties[\\\"reserved.datamodel.action.type\\\"]) ==
  \\\"End\\\"),\\r\\n                FailedExports = countif(EventName ==
  \\\"vs/setup/inproductacquisition/export-configuration-error\\\")\\r\\n    |
  project Result = 100.0 * FailedExports / SuccessfulExports +
  FailedExports;\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslTy\
  pe\":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"}]},{\"name\
  \":\"VS_ConfigExportFromVSErrorStackDetails\",\"docstring\":\"Returns the
  stack details of failed .vsconfig exports.\",\"body\":\"{\\r\\n    let
  minUploadTime = now() -
  timePeriod;\\r\\n    cluster('ddtelvsraw').database('VS').RawEventsVS\\r\\n    \
  | where AdvancedServerTimestampUtc >= minUploadTime\\r\\n    | where EventName
  == \\\"vs/setup/inproductacquisition/export-configuration-error\\\"\\r\\n    |
  where
  isnotempty(tostring(Properties['reserved.datamodel.fault.exception.stacktrace\
  ']))\\r\\n    | project ExeVersion, Stack =
  tostring(Properties['reserved.datamodel.fault.exception.stacktrace'])\\r\\n}\
  \",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslType\":\"timespan\",\"t\
  ype\":\"System.TimeSpan\",\"docstring\":\"\"}]},{\"name\":\"VS_IDEUpdateCheck\
  ErrorDetail\",\"docstring\":\"Base function for returning update related error
  detail.\",\"body\":\"{\\r\\n    let minUploadTime = now() -
  timePeriod;\\r\\n    let updateEventName =
  strcat(\\\"vs/setup/inproductacquisition/updatedialog/\\\",
  updateOperationEventName);\\r\\n    cluster('ddtelvsraw').database('VS').RawE\
  ventsVS\\r\\n    | where ChannelId == channelId\\r\\n    | where
  AdvancedServerTimestampUtc >= minUploadTime\\r\\n    | where EventName ==
  updateEventName\\r\\n    | where
  tostring(Properties[\\\"reserved.datamodel.action.type\\\"]) ==
  \\\"End\\\"\\r\\n    | where
  tostring(Properties[\\\"reserved.datamodel.action.result\\\"]) ==
  \\\"Failure\\\"\\r\\n    | summarize by ExeVersion, ResultSummary =
  tostring(Properties[\\\"reserved.datamodel.action.resultsummary\\\"]),
  MacAddressHash;\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslT\
  ype\":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\"name\":\
  \"channelId\",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\
  \"\"},{\"name\":\"updateOperationEventName\",\"cslType\":\"string\",\"type\":\
  \"System.String\",\"docstring\":\"\"}]},{\"name\":\"VS_IDEUpdateCheckErrorPer\
  centage\",\"docstring\":\"Base function for returning percentage faliure of
  update check related operation.\",\"body\":\"{\\r\\n    let minUploadTime =
  now() - timePeriod;\\r\\n    let updateEventName =
  strcat(\\\"vs/setup/inproductacquisition/updatedialog/\\\",
  updateOperationEventName);\\r\\n    cluster('ddtelvsraw').database('VS').RawE\
  ventsVS\\r\\n    | where ChannelId == channelId\\r\\n    | where EventName ==
  updateEventName\\r\\n    | where AdvancedServerTimestampUtc >=
  minUploadTime\\r\\n    | summarize TotalOperations = dcountif(MacAddressHash,
  tostring(Properties[\\\"reserved.datamodel.action.type\\\"]) ==
  \\\"End\\\"),\\r\\n                FailedOperations = dcountif(MacAddressHash,
  tostring(Properties[\\\"reserved.datamodel.action.type\\\"]) == \\\"End\\\"
  and tostring(Properties[\\\"reserved.datamodel.action.result\\\"]) ==
  \\\"Failure\\\")\\r\\n    | project Result = max_of(0.0, 100.0 *
  FailedOperations /
  TotalOperations);\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cs\
  lType\":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\"name\
  \":\"channelId\",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\
  \":\"\"},{\"name\":\"updateOperationEventName\",\"cslType\":\"string\",\"type\
  \":\"System.String\",\"docstring\":\"\"}]},{\"name\":\"VS_IDEExternalUpdateCh\
  eckErrorDetail\",\"docstring\":\"Function for returning external update check
  related error detail.\",\"body\":\"{\\r\\n    let minUploadTime = now() -
  timePeriod;\\r\\n    cluster('ddtelvsraw').database('VS').RawEventsVS\\r\\n    \
  | where EventName ==
  \\\"vs/setup/inproductacquisition/manifestrefresh\\\"\\r\\n    | where
  ChannelId == channelId\\r\\n    | where parse_version(ExeVersion) >=
  parse_version(exeMinVersion)\\r\\n    | where AdvancedServerTimestampUtc >=
  minUploadTime\\r\\n    | where
  tostring(Properties[\\\"reserved.datamodel.action.type\\\"]) ==
  \\\"End\\\"\\r\\n    | where
  tobool(Properties[\\\"vs.setup.inproductacquisition.manifestupdate.isexternal\
  updatechecksuccessful\\\"]) == false\\r\\n    | extend ExceptionType =
  tostring(Properties[\\\"vs.setup.inproductacquisition.manifestupdate.external\
  checkexceptiontype\\\"])\\r\\n    | extend ExternalCheckExitCode =
  toint(Measures[\\\"vs.setup.inproductacquisition.manifestupdate.externalcheck\
  exitcode\\\"])\\r\\n    | where isnotempty(ExceptionType) or
  isnotempty(ExternalCheckExitCode)\\r\\n    | summarize by ExeVersion,
  ExternalCheckExitCode, ExceptionType, ExceptionMessage =
  tostring(Properties[\\\"vs.setup.inproductacquisition.manifestupdate.external\
  checkexceptionmessage\\\"]),
  MacAddressHash;\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslT\
  ype\":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\"name\":\
  \"channelId\",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\
  \"\"},{\"name\":\"exeMinVersion\",\"cslType\":\"string\",\"type\":\"System.St\
  ring\",\"docstring\":\"\"}]},{\"name\":\"VS_IDEExternalUpdateCheckErrorPercen\
  tage\",\"docstring\":\"Function for returning percentage failure of external
  update check operation.\",\"body\":\"{\\r\\n    let minUploadTime = now() -
  timePeriod;\\r\\n    cluster('ddtelvsraw').database('VS').RawEventsVS\\r\\n    \
  | where AdvancedServerTimestampUtc >= minUploadTime\\r\\n        and
  DataModelActionType == \\\"End\\\"\\r\\n        and EventName ==
  \\\"vs/setup/inproductacquisition/manifestrefresh\\\"\\r\\n        and
  ChannelId == channelId\\r\\n        and parse_version(ExeVersion) >=
  parse_version(exeMinVersion)\\r\\n    | extend IsExternalUpdateCheckSuccessful
  =
  tobool(Properties[\\\"vs.setup.inproductacquisition.manifestupdate.isexternal\
  updatechecksuccessful\\\"])\\r\\n    | extend ExternalCheckExceptionType =
  tostring(Properties[\\\"vs.setup.inproductacquisition.manifestupdate.external\
  checkexceptiontype\\\"])\\r\\n    | extend ExternalCheckExitCode =
  toint(Measures[\\\"vs.setup.inproductacquisition.manifestupdate.externalcheck\
  exitcode\\\"])\\r\\n    | summarize TotalOperations = dcountif(MacAddressHash,
  isnotempty(IsExternalUpdateCheckSuccessful)),\\r\\n                FailedOper\
  ations = dcountif(MacAddressHash, IsExternalUpdateCheckSuccessful == false and
  (isnotempty(ExternalCheckExceptionType) or
  isnotempty(ExternalCheckExitCode)))\\r\\n    | project Result = max_of(0.0,
  100.0 * FailedOperations /
  TotalOperations);\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cs\
  lType\":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\"name\
  \":\"channelId\",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\
  \":\"\"},{\"name\":\"exeMinVersion\",\"cslType\":\"string\",\"type\":\"System\
  .String\",\"docstring\":\"\"}]},{\"name\":\"VS_IDEInfiniteUpdateDetectDetail\
  \",\"docstring\":\"Function for returning infinite update detection
  detail.\",\"body\":\"{\\r\\n    cluster('ddtelvsraw').database('VS').RawEvent\
  sVS\\r\\n    | where AdvancedServerTimestampUtc > ago(timeAgo)\\r\\n    |
  where toint(split(ExeVersion, '.')[0]) != 15 // filter out dev 15 RTW
  bootstrapper.\\r\\n    | where parse_version(ExeVersion) >=
  parse_version(exeMinVersion)\\r\\n    | extend ChannelIdUsed =
  tostring(Properties[\\\"context.default.vs.setup.bootstrapper.commandline.res\
  ponsefile.channelid\\\"])\\r\\n    | where ChannelIdUsed ==
  channelId\\r\\n    | where EventName ==
  \\\"vs/setup/bootstrapper/app-run\\\"\\r\\n    | where
  tostring(Properties[\\\"reserved.datamodel.action.type\\\"]) ==
  \\\"End\\\"\\r\\n    | where
  tostring(Properties[\\\"reserved.datamodel.action.result\\\"]) ==
  \\\"Success\\\"\\r\\n    | where
  tostring(Properties[\\\"context.default.vs.setup.bootstrapper.commandline.sta\
  rtuptype\\\"]) == \\\"ClientUpdate\\\"\\r\\n    | project ClientTimestampUtc,
  MacAddressHash, UserId, SessionId, IsInternal, ExeVersion, UserAlias,
  ExeName\\r\\n    | join kind=inner (
  cluster('ddtelvsraw').database('VS').RawEventsVS\\r\\n                            \
  | where AdvancedServerTimestampUtc >
  ago(timeAgo)\\r\\n                            | where toint(split(ExeVersion,
  '.')[0]) != 15 // filter out dev 15 RTW
  bootstrapper.\\r\\n                            | where
  parse_version(ExeVersion) >=
  parse_version(exeMinVersion)\\r\\n                            | extend
  ChannelIdUsed =
  tostring(Properties[\\\"context.default.vs.setup.bootstrapper.commandline.res\
  ponsefile.channelid\\\"])\\r\\n                            | where
  ChannelIdUsed == channelId\\r\\n                            | where EventName
  == \\\"vs/setup/bootstrapper/app-run\\\"\\r\\n                            |
  where tostring(Properties[\\\"reserved.datamodel.action.type\\\"]) ==
  \\\"End\\\"\\r\\n                            | where
  tostring(Properties[\\\"reserved.datamodel.action.result\\\"]) ==
  \\\"Success\\\"\\r\\n                            | where
  tostring(Properties[\\\"context.default.vs.setup.bootstrapper.commandline.sta\
  rtuptype\\\"]) == \\\"ClientUpdate\\\"\\r\\n                            |
  project ClientTimestampUtc, MacAddressHash, UserId, SessionId,
  ExeName\\r\\n                        ) on MacAddressHash, UserId\\r\\n    |
  where SessionId != SessionId1\\r\\n    | extend diff = (ClientTimestampUtc1 -
  ClientTimestampUtc) / 1m\\r\\n    | where diff < 20 and diff > 0\\r\\n    |
  summarize by ExeVersion, IsInternal, MacAddressHash,
  ExeName;\\r\\n}\",\"inputParameters\":[{\"name\":\"timeAgo\",\"cslType\":\"ti\
  mespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\"name\":\"exeMinV\
  ersion\",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"\
  },{\"name\":\"channelId\",\"cslType\":\"string\",\"type\":\"System.String\",\
  \"docstring\":\"\"}]},{\"name\":\"VS_IDEInfiniteUpdateDetectCount\",\"docstri\
  ng\":\"Function for returning infinite update detection
  count.\",\"body\":\"{\\r\\n    VS_IDEInfiniteUpdateDetectDetail(timeAgo,
  exeMinVersion, channelId)\\r\\n    | summarize Result =
  count();\\r\\n}\",\"inputParameters\":[{\"name\":\"timeAgo\",\"cslType\":\"ti\
  mespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\"name\":\"exeMinV\
  ersion\",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"\
  },{\"name\":\"channelId\",\"cslType\":\"string\",\"type\":\"System.String\",\
  \"docstring\":\"\"}]},{\"name\":\"VSSetup_Dashboard_Features_VSConfigInfoBar\
  \",\"docstring\":\"Returns a view into the users seeing the .vsconfig info
  bar\",\"body\":\"{\\r\\n    cluster(\\\"DDtelvsraw\\\").database(\\\"VS\\\").\
  RawEventsVS\\r\\n    | where ExeVersion startswith majorVersion \\r\\n    |
  where EventName ==
  \\\"vs/setup/inproductacquisition/missingcomponentsinfobar/show-infobar\\\"\\r\
  \\n    |
  project\\r\\n        MacAddressHash,\\r\\n        UserId,\\r\\n        Advanc\
  edServerTimestampUtc,\\r\\n        ExeVersion,\\r\\n        UserAction =
  tostring(Properties[\\\"vs.setup.inproductacquisition.infobar.actionexecuted\\\
  \"]),\\r\\n        EventType =
  tostring(Properties[\\\"reserved.datamodel.action.type\\\"])\\r\\n    | where
  EventType == \\\"End\\\"\\r\\n    | extend UserAction =
  iff(isempty(UserAction), \\\"None\\\", UserAction)\\r\\n    | join kind =
  inner
  (\\r\\n        cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\")\
  .VS_Telemetry_Releases\\r\\n        | where ReleaseScope contains
  \\\"Public\\\"\\r\\n        | where VsVersion startswith
  majorVersion\\r\\n        | where ProductDisplayVersion !contains
  \\\"Preview\\\"\\r\\n        | where ProductDisplayVersion !contains
  \\\"RC\\\"\\r\\n        | project VsVersion, ProductDisplayVersion\\r\\n    )
  on $left.ExeVersion ==
  $right.VsVersion\\r\\n}\",\"inputParameters\":[{\"name\":\"majorVersion\",\"c\
  slType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"}]},{\"name\
  \":\"VSSetup_Dashboard_Features_VSConfigLoad\",\"docstring\":\"Returns a view
  into the users detecting if a .vsconfig is next to the
  solution\",\"body\":\"{\\r\\n    cluster(\\\"Ddtelvsraw\\\").database(\\\"VS\\\
  \").RawEventsVS\\r\\n    | where ExeVersion startswith majorVersion\\r\\n    |
  where EventName ==
  \\\"vs/setup/inproductacquisition/missingcomponenttracker/refresh-missingcomp\
  onents\\\"\\r\\n    |
  project\\r\\n        MacAddressHash,\\r\\n        UserId,\\r\\n        ExeVer\
  sion,\\r\\n        IsEnabled =
  Properties[\\\"vs.setup.inproductacquisition.missingcomponentstracker.ismissi\
  ngcomponentsenabled\\\"],\\r\\n        IsSlnOpen =
  Properties[\\\"vs.setup.inproductacquisition.missingcomponentstracker.issolut\
  ionopen\\\"],\\r\\n        HasVsConfig =
  Properties[\\\"vs.setup.inproductacquisition.missingcomponentstracker.solutio\
  nhasvsconfig\\\"],\\r\\n        HasMissingApplicableComps =
  Properties[\\\"vs.setup.inproductacquisition.missingcomponentstracker.hasmiss\
  ingapplicablecomponents\\\"],\\r\\n        HasMissingNonApplicableComps =
  Properties[\\\"vs.setup.inproductacquisition.missingcomponentstracker.hasmiss\
  ingnonapplicablecomponents\\\"],\\r\\n        HasUnkownComps =
  Properties[\\\"vs.setup.inproductacquisition.missingcomponentstracker.hasmiss\
  ingunknowncomponents\\\"]\\r\\n    | where IsEnabled =~ \\\"True\\\" and
  IsSlnOpen =~ \\\"True\\\" and HasVsConfig =~ \\\"True\\\"\\r\\n    | join kind
  = inner
  (\\r\\n        cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\")\
  .VS_Telemetry_Releases\\r\\n        | where ReleaseScope contains
  \\\"Public\\\"\\r\\n        | where VsVersion startswith majorVersion
  \\r\\n        | where ProductDisplayVersion !contains
  \\\"Preview\\\"\\r\\n        | where ProductDisplayVersion !contains
  \\\"RC\\\"\\r\\n        | project VsVersion, ProductDisplayVersion\\r\\n    )
  on $left.ExeVersion ==
  $right.VsVersion\\r\\n}\",\"inputParameters\":[{\"name\":\"majorVersion\",\"c\
  slType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"}]},{\"name\
  \":\"KoTest\",\"docstring\":\"Sample Kusto Orchestrator
  function\",\"body\":\"{ print RunTime = now(), StartTimeParamValue =
  startTime, EndTimeParamValue = endTime, 'test test
  test'}\",\"inputParameters\":[{\"name\":\"startTime\",\"cslType\":\"datetime\
  \",\"type\":\"System.DateTime\",\"docstring\":\"\"},{\"name\":\"endTime\",\"c\
  slType\":\"datetime\",\"type\":\"System.DateTime\",\"docstring\":\"\"}]},{\"n\
  ame\":\"FreshnessByShard\",\"docstring\":\"Get the \\\"Overall Latency\\\" KPI
  metric per
  shard\",\"body\":\"{\\r\\ncluster('Ddtelvsraw').database('VS').RawEventsVS\\r\
  \\n| where ingestion_time() > ago(36h)\\r\\n| extend shard=
  tostring(split(NovaProperties['Partition'], '-', 0)[0])\\r\\n| summarize
  (max(ingestion_time())-max(AdvancedServerTimestampUtc))/60/60 by
  bin(ingestion_time()-7h, 15m),
  shard\\r\\n}\",\"inputParameters\":[]},{\"name\":\"DailyCompletenessByDay7Day\
  VS\",\"docstring\":\"Get 7d \\\"Overall Completeness\\\" KPI
  metric\",\"body\":\"{\\r\\nlet partitionQuery = (_start:datetime,
  _product:string)\\r\\n{\\r\\nlet start=_start;\\r\\nlet end=start + 1d;
  \\r\\nlet NMSTABLE = (start:datetime, _product:string)
  {cluster('Novametrics').database('NovaMetricsProd').NovaMetricsBlob};
  \\r\\nlet nms_fr_input = NMSTABLE (start, _product)\\r\\n| where Pipe ==
  'Vortex' and JobType == 'Regular' and Component == 'InputBlob/NMSBeat' and
  Product == _product \\r\\n| summarize maxTime=max(ServerUtcDate) | project
  nms_fr_input=(now()-maxTime)/1m, dummy='dummy';\\r\\nlet a=NMSTABLE (start,
  _product)\\r\\n| where BlobCreatedTime>_start-10m and
  BlobCreatedTime<_start+1d | where Component == 'KustoData/NMSBeat' | order by
  BlobCreatedTime \\r\\n| serialize | extend id = row_number(); \\r\\nlet b
  =NMSTABLE(start, _product) | where BlobCreatedTime>_start-10m and
  BlobCreatedTime<_start+1d \\r\\n| where Component == 'KustoData/NMSBeat' |
  order by BlobCreatedTime | serialize | extend id = row_number() -1; \\r\\nlet
  nms_fr_kusto = a \\r\\n| join ( b ) on id | extend diff =
  datetime_diff('Second', BlobCreatedTime, BlobCreatedTime1)/60.0 | summarize
  max(diff) \\r\\n| project dummy='dummy', nms_fr_kusto = iff(isnull(max_diff),
  toreal(6), max_diff); NMSTABLE (start, _product)\\r\\n| where ServerUtcDate >=
  _start and ServerUtcDate <=_start+1d and Pipe == 'Vortex' and JobType ==
  'Regular' and Component == 'InputBlob' and Product == _product \\r\\n|
  summarize App = any(App) by BlobId | join kind = leftouter ( NMSTABLE (start,
  _product)\\r\\n| where ServerUtcDate >= _start-2h and Pipe == 'Vortex' and
  JobType == 'Regular' and Component == 'KustoData' and Product == _product
  \\r\\n| summarize App = any(App) by BlobId ) on BlobId \\r\\n| summarize
  InputBlobCount = count(BlobId), KustoBlobCount = countif(isnotempty(BlobId1)
  and isnotnull(BlobId1)) by Shard = App \\r\\n| summarize pct =
  min(iff(InputBlobCount == 0, toreal(100), toreal(KustoBlobCount) * 100.0 /
  toreal(InputBlobCount))) \\r\\n| extend dummy='dummy' | join kind= rightouter
  ( nms_fr_input ) on dummy | join kind= rightouter ( nms_fr_kusto ) on dummy
  \\r\\n| project CompletenessPercent = iff(nms_fr_input>20 or nms_fr_kusto>=6,
  'NaN', tostring(pct)), _start // if either nms value is unfresh, report
  unknown (nan). otherwise, report healthy (100) if no input blobs. otherwise,
  calculate the actual value.\\\",\\r\\n};\\r\\nunion hint.spread=100\\r\\n
  (partitionQuery(ago(6d), 'VisualStudio')),\\r\\n (partitionQuery(ago(5d),
  'VisualStudio')),\\r\\n (partitionQuery(ago(4d), 'VisualStudio')),\\r\\n
  (partitionQuery(ago(3d), 'VisualStudio')),\\r\\n (partitionQuery(ago(2d),
  'VisualStudio')),\\r\\n (partitionQuery(ago(1d),
  'VisualStudio'))\\r\\n}\",\"inputParameters\":[]},{\"name\":\"DailyCompletene\
  ssByDay7DayVSMetric\",\"docstring\":\"Get 7d \\\"Overall Completeness\\\" KPI
  metric\",\"body\":\"{\\r\\n    DailyCompletenessByDay7Day('VisualStudio')   \
  \\r\\n    | where todouble(CompletenessPercent) < 99\\r\\n    | extend
  today=startofday( now())\\r\\n    | where today != _start//current day will
  always be in progress and tracked in other
  metrics\\r\\n}\",\"inputParameters\":[]},{\"name\":\"GetDupePercent\",\"body\
  \":\"{\\n    RawEventsVS\\r\\n    | where AdvancedServerTimestampUtc >=
  datetime(2020-06-24 18:00:00.0000000) and AdvancedServerTimestampUtc <=
  datetime(2020-06-24 19:00:00.0000000)\\r\\n    | summarize count(),
  dcount(EventId)\\r\\n    | project NonDupePercent = dcount_EventId *
  100.0/count_\\r\\n}\",\"inputParameters\":[{\"name\":\"start\",\"cslType\":\"\
  datetime\",\"type\":\"System.DateTime\",\"docstring\":\"\"},{\"name\":\"end\",\
  \"cslType\":\"datetime\",\"type\":\"System.DateTime\",\"docstring\":\"\"}]},{\
  \"name\":\"KO_SRDY_RealTimeSetup\",\"docstring\":\"Realtime Setup Query
  Table\",\"body\":\"{\\r\\ncluster(\\\"Ddtelvsraw\\\").database('VS').RawEvent\
  sVS\\r\\n| where AdvancedServerTimestampUtc >= startTime and
  AdvancedServerTimestampUtc < endTime\\r\\n| where EventName ==
  'vs/willow/install-product'\\r\\n| extend UseMinnowWorkarounds = ExeName =~
  'setup' and parse_version(ExeVersion) < parse_version('2.8.1000.0')\\r\\n|
  extend ChannelId = tostring(Properties['vs.willow.channelid'])\\r\\n| extend
  ChannelId = iff(UseMinnowWorkarounds and isempty(ChannelId),
  tostring(Properties['context.default.vs.willow.channelid']), ChannelId)\\r\\n|
  extend InstallSessionId =
  tostring(Properties['vs.willow.installsessionid'])\\r\\n| extend
  InstallSessionId = iff(UseMinnowWorkarounds,
  tostring(Properties['context.default.vs.willow.activityid']),
  InstallSessionId)\\r\\n| extend DataModelActionTypeReserved =
  tostring(Properties['reserved.datamodel.action.type'])\\r\\n| extend
  OperationName = tostring(Properties['vs.willow.operationname'])\\r\\n| extend
  UpdateTo = tostring(Properties['vs.willow.appversionupdateto'])\\r\\n| extend
  UpdateFrom = tostring(Properties['vs.willow.appversionupdatefrom'])\\r\\n|
  extend VsVersion = iif(OperationName == 'update' and isnotempty(UpdateTo),
  UpdateTo, tostring(Properties['vs.willow.appversion']))\\r\\n| extend
  RebootType = tostring(Properties['vs.willow.reboottype'])\\r\\n| extend
  FailedWorkloads =
  tostring(Properties['vs.willow.failedworkloadids'])\\r\\n                            \
  | extend FailedWorkloads =
  iff(\\r\\n                                UseMinnowWorkarounds,\\r\\n                                \
  strcat(\\r\\n                                    tostring(Properties['vs.will\
  ow.failedcomponentids.0']),\\r\\n                                    tostring\
  (Properties['vs.willow.failedcomponentids.1']),\\r\\n                                    \
  tostring(Properties['vs.willow.failedcomponentids.2']),\\r\\n                                    \
  tostring(Properties['vs.willow.failedcomponentids.3']),\\r\\n                                    \
  tostring(Properties['vs.willow.failedcomponentids.4']),\\r\\n                                    \
  tostring(Properties['vs.willow.failedcomponentids.5']),\\r\\n                                    \
  tostring(Properties['vs.willow.failedcomponentids.6']),\\r\\n                                    \
  tostring(Properties['vs.willow.failedcomponentids.7']),\\r\\n                                    \
  tostring(Properties['vs.willow.failedcomponentids.8']),\\r\\n                                    \
  tostring(Properties['vs.willow.failedcomponentids.9'])),\\r\\n                                \
  FailedWorkloads)\\r\\n| extend VsInstallState =
  tostring(Properties['vs.willow.installstate'])\\r\\n                            \
  | extend InstanceState = VsInstallState\\r\\n                            |
  extend VsInstallState = iff(UseMinnowWorkarounds and InstanceState
  =~'Complete', 'Installed', InstanceState)\\r\\n                            |
  extend VsInstallState = iff(UseMinnowWorkarounds and InstanceState ==
  VsInstallState and (InstanceState contains 'Registered' and InstanceState
  contains 'Local' and InstanceState contains 'NoReboot'), 'Installed',
  VsInstallState)\\r\\n                            | extend VsInstallState =
  iff(UseMinnowWorkarounds and InstanceState == VsInstallState, 'Partial',
  VsInstallState)\\r\\n| extend DataModelExceptionTypeReserved =
  tostring(Properties['vs.willow.errorcode'])\\r\\n| extend ErrorMessage =
  tostring(Properties['vs.willow.errormessage'])\\r\\n                                \
  | extend ErrorMessage = iff(UseMinnowWorkarounds,
  tostring(Properties['reserved.datamodel.action.resultsummary']),
  ErrorMessage)\\r\\n| extend FailedPackageIds =
  iif(isempty(Properties['vs.willow.failedpackageids']),
  tostring(Properties['vs.willow.failedpackageidsv2']),
  tostring(Properties['vs.willow.failedpackageids']))\\r\\n                            \
  // Workaround: convert failedPackageDetails to
  failedPackageIds\\r\\n                            | extend FailedPackageIds =
  iff(UseMinnowWorkarounds,
  extract_all(\\r\\n                                '([^_]+)_[^_]+_[^_,]+,?',\\r\
  \\n                                strcat(\\r\\n                                    \
  Properties['vs.willow.failedpackagedetails.0'],\\r\\n                                    \
  Properties['vs.willow.failedpackagedetails.1'],\\r\\n                                    \
  Properties['vs.willow.failedpackagedetails.2'],\\r\\n                                    \
  Properties['vs.willow.failedpackagedetails.3'],\\r\\n                                    \
  Properties['vs.willow.failedpackagedetails.4'],\\r\\n                                    \
  Properties['vs.willow.failedpackagedetails.5'],\\r\\n                                    \
  Properties['vs.willow.failedpackagedetails.6'],\\r\\n                                    \
  Properties['vs.willow.failedpackagedetails.7'],\\r\\n                                    \
  Properties['vs.willow.failedpackagedetails.8'],\\r\\n                                    \
  Properties['vs.willow.failedpackagedetails.9'])),\\r\\n                                \
  FailedPackageIds)\\r\\n                            | extend FailedPackageIds =
  iff(UseMinnowWorkarounds, strcat_array(todynamic(FailedPackageIds), ','),
  FailedPackageIds)\\r\\n| extend DataModelActionResultReserved =
  iff(tostring(Properties['vs.willow.operationresult']) == 'Warning' and
  tostring(Properties['reserved.datamodel.action.result']) == 'Success',
  tostring(Properties['vs.willow.operationresult']),
  tostring(Properties['reserved.datamodel.action.result']))\\r\\n| extend Result
  = Properties['vs.willow.operationresult']\\r\\n| extend Result = iff(Result !=
  'RebootRequired', Result,
  iif(isnotempty(Properties['vs.willow.errormessage']), 'Warning',
  'Success'))\\r\\n| extend Result = iff(OperationName == 'uninstall',
  Properties['reserved.datamodel.action.result'], Result)\\r\\n| extend Result =
  iff(Result == 'UserCancel' or OperationName == 'UserCancel', 'Cancel',
  Result)\\r\\n| extend Result = iif(Result == 'Unknown' and
  isnotempty(Properties['vs.willow.errormessage']), 'Failure', Result)\\r\\n|
  extend Result = iff(UseMinnowWorkarounds and ErrorMessage startswith
  'Pre-check', 'Block', Result)\\r\\n                            | extend Result
  = iff(UseMinnowWorkarounds and ErrorMessage contains 'cancel', 'Cancel',
  Result)\\r\\n                            | extend Result =
  iff(UseMinnowWorkarounds and ErrorMessage contains 'Pipe Connection timed
  out', 'Block', Result)\\r\\n                            | extend Result =
  iff(UseMinnowWorkarounds and ErrorMessage has 'PackageFailureException',
  iff(VsInstallState =~'Partial', 'Failure', 'Warning'), Result)\\r\\n| extend
  ElapsedTimeMins =
  todouble(Measures['reserved.datamodel.action.durationinmilliseconds' ]) / 1000
  / 60\\r\\n| extend RebootType =
  tostring(Properties['vs.willow.reboottype'])\\r\\n| project
  DataModelActionTypeReserved, ServerDateUTC = bin(AdvancedServerTimestampUtc,
  1d), Date = bin(AdvancedServerTimestampUtc, 1d), InstallId = InstallSessionId,
  OperationName, \\r\\n   ExeVersion, UpdateTo, UpdateFrom, ChannelId,
  VsVersion, MacAddressHash, RebootType, DataModelActionResultReserved,
  ElapsedTimeMins, Result,\\r\\n   DataModelExceptionTypeReserved,
  VsInstallState, FailedWorkloads, FailedPackageIds, ErrorMessage,
  AdvancedServerTimestampUtc, IsInternal, UserAlias, BatchStartTime = startTime,
  BatchEndTime =
  endTime;\\r\\n}\",\"inputParameters\":[{\"name\":\"startTime\",\"cslType\":\"\
  datetime\",\"type\":\"System.DateTime\",\"docstring\":\"\"},{\"name\":\"endTi\
  me\",\"cslType\":\"datetime\",\"type\":\"System.DateTime\",\"docstring\":\"\"\
  }]},{\"name\":\"KO_SRDY_RealTimeSetupInternal\",\"docstring\":\"Realtime Setup
  Query Internal
  Table\",\"body\":\"{\\r\\ncluster(\\\"Ddtelvsraw\\\").database('VS').RawEvent\
  sVSInternal\\r\\n| where AdvancedServerTimestampUtc >= startTime and
  AdvancedServerTimestampUtc < endTime\\r\\n| where EventName ==
  'vs/willow/install-product'\\r\\n| extend UseMinnowWorkarounds = ExeName =~
  'setup' and parse_version(ExeVersion) < parse_version('2.8.1000.0')\\r\\n|
  extend ChannelId = tostring(Properties['vs.willow.channelid'])\\r\\n| extend
  ChannelId = iff(UseMinnowWorkarounds and isempty(ChannelId),
  tostring(Properties['context.default.vs.willow.channelid']), ChannelId)\\r\\n|
  extend InstallSessionId =
  tostring(Properties['vs.willow.installsessionid'])\\r\\n| extend
  InstallSessionId = iff(UseMinnowWorkarounds,
  tostring(Properties['context.default.vs.willow.activityid']),
  InstallSessionId)\\r\\n| extend DataModelActionTypeReserved =
  tostring(Properties['reserved.datamodel.action.type'])\\r\\n| extend
  OperationName = tostring(Properties['vs.willow.operationname'])\\r\\n| extend
  UpdateTo = tostring(Properties['vs.willow.appversionupdateto'])\\r\\n| extend
  UpdateFrom = tostring(Properties['vs.willow.appversionupdatefrom'])\\r\\n|
  extend VsVersion = iif(OperationName == 'update' and isnotempty(UpdateTo),
  UpdateTo, tostring(Properties['vs.willow.appversion']))\\r\\n| extend
  RebootType = tostring(Properties['vs.willow.reboottype'])\\r\\n| extend
  FailedWorkloads =
  tostring(Properties['vs.willow.failedworkloadids'])\\r\\n                            \
  | extend FailedWorkloads =
  iff(\\r\\n                                UseMinnowWorkarounds,\\r\\n                                \
  strcat(\\r\\n                                    tostring(Properties['vs.will\
  ow.failedcomponentids.0']),\\r\\n                                    tostring\
  (Properties['vs.willow.failedcomponentids.1']),\\r\\n                                    \
  tostring(Properties['vs.willow.failedcomponentids.2']),\\r\\n                                    \
  tostring(Properties['vs.willow.failedcomponentids.3']),\\r\\n                                    \
  tostring(Properties['vs.willow.failedcomponentids.4']),\\r\\n                                    \
  tostring(Properties['vs.willow.failedcomponentids.5']),\\r\\n                                    \
  tostring(Properties['vs.willow.failedcomponentids.6']),\\r\\n                                    \
  tostring(Properties['vs.willow.failedcomponentids.7']),\\r\\n                                    \
  tostring(Properties['vs.willow.failedcomponentids.8']),\\r\\n                                    \
  tostring(Properties['vs.willow.failedcomponentids.9'])),\\r\\n                                \
  FailedWorkloads)\\r\\n| extend VsInstallState =
  tostring(Properties['vs.willow.installstate'])\\r\\n                            \
  | extend InstanceState = VsInstallState\\r\\n                            |
  extend VsInstallState = iff(UseMinnowWorkarounds and InstanceState
  =~'Complete', 'Installed', InstanceState)\\r\\n                            |
  extend VsInstallState = iff(UseMinnowWorkarounds and InstanceState ==
  VsInstallState and (InstanceState contains 'Registered' and InstanceState
  contains 'Local' and InstanceState contains 'NoReboot'), 'Installed',
  VsInstallState)\\r\\n                            | extend VsInstallState =
  iff(UseMinnowWorkarounds and InstanceState == VsInstallState, 'Partial',
  VsInstallState)\\r\\n| extend DataModelExceptionTypeReserved =
  tostring(Properties['vs.willow.errorcode'])\\r\\n| extend ErrorMessage =
  tostring(Properties['vs.willow.errormessage'])\\r\\n                                \
  | extend ErrorMessage = iff(UseMinnowWorkarounds,
  tostring(Properties['reserved.datamodel.action.resultsummary']),
  ErrorMessage)\\r\\n| extend FailedPackageIds =
  iif(isempty(Properties['vs.willow.failedpackageids']),
  tostring(Properties['vs.willow.failedpackageidsv2']),
  tostring(Properties['vs.willow.failedpackageids']))\\r\\n                            \
  // Workaround: convert failedPackageDetails to
  failedPackageIds\\r\\n                            | extend FailedPackageIds =
  iff(UseMinnowWorkarounds,
  extract_all(\\r\\n                                '([^_]+)_[^_]+_[^_,]+,?',\\r\
  \\n                                strcat(\\r\\n                                    \
  Properties['vs.willow.failedpackagedetails.0'],\\r\\n                                    \
  Properties['vs.willow.failedpackagedetails.1'],\\r\\n                                    \
  Properties['vs.willow.failedpackagedetails.2'],\\r\\n                                    \
  Properties['vs.willow.failedpackagedetails.3'],\\r\\n                                    \
  Properties['vs.willow.failedpackagedetails.4'],\\r\\n                                    \
  Properties['vs.willow.failedpackagedetails.5'],\\r\\n                                    \
  Properties['vs.willow.failedpackagedetails.6'],\\r\\n                                    \
  Properties['vs.willow.failedpackagedetails.7'],\\r\\n                                    \
  Properties['vs.willow.failedpackagedetails.8'],\\r\\n                                    \
  Properties['vs.willow.failedpackagedetails.9'])),\\r\\n                                \
  FailedPackageIds)\\r\\n                            | extend FailedPackageIds =
  iff(UseMinnowWorkarounds, strcat_array(todynamic(FailedPackageIds), ','),
  FailedPackageIds)\\r\\n| extend DataModelActionResultReserved =
  iff(tostring(Properties['vs.willow.operationresult']) == 'Warning' and
  tostring(Properties['reserved.datamodel.action.result']) == 'Success',
  tostring(Properties['vs.willow.operationresult']),
  tostring(Properties['reserved.datamodel.action.result']))\\r\\n| extend Result
  = Properties['vs.willow.operationresult']\\r\\n| extend Result = iff(Result !=
  'RebootRequired', Result,
  iif(isnotempty(Properties['vs.willow.errormessage']), 'Warning',
  'Success'))\\r\\n| extend Result = iff(OperationName == 'uninstall',
  Properties['reserved.datamodel.action.result'], Result)\\r\\n| extend Result =
  iff(Result == 'UserCancel' or OperationName == 'UserCancel', 'Cancel',
  Result)\\r\\n| extend Result = iif(Result == 'Unknown' and
  isnotempty(Properties['vs.willow.errormessage']), 'Failure', Result)\\r\\n|
  extend Result = iff(UseMinnowWorkarounds and ErrorMessage startswith
  'Pre-check', 'Block', Result)\\r\\n                            | extend Result
  = iff(UseMinnowWorkarounds and ErrorMessage contains 'cancel', 'Cancel',
  Result)\\r\\n                            | extend Result =
  iff(UseMinnowWorkarounds and ErrorMessage contains 'Pipe Connection timed
  out', 'Block', Result)\\r\\n                            | extend Result =
  iff(UseMinnowWorkarounds and ErrorMessage has 'PackageFailureException',
  iff(VsInstallState =~'Partial', 'Failure', 'Warning'), Result)\\r\\n| extend
  ElapsedTimeMins =
  todouble(Measures['reserved.datamodel.action.durationinmilliseconds' ]) / 1000
  / 60\\r\\n| extend RebootType =
  tostring(Properties['vs.willow.reboottype'])\\r\\n| project
  DataModelActionTypeReserved, ServerDateUTC = bin(AdvancedServerTimestampUtc,
  1d), Date = bin(AdvancedServerTimestampUtc, 1d), InstallId = InstallSessionId,
  OperationName, \\r\\n   ExeVersion, UpdateTo, UpdateFrom, ChannelId,
  VsVersion, MacAddressHash, RebootType, DataModelActionResultReserved,
  ElapsedTimeMins, Result,\\r\\n   DataModelExceptionTypeReserved,
  VsInstallState, FailedWorkloads, FailedPackageIds, ErrorMessage,
  AdvancedServerTimestampUtc, IsInternal, UserAlias, BatchStartTime = startTime,
  BatchEndTime =
  endTime;\\r\\n}\",\"inputParameters\":[{\"name\":\"startTime\",\"cslType\":\"\
  datetime\",\"type\":\"System.DateTime\",\"docstring\":\"\"},{\"name\":\"endTi\
  me\",\"cslType\":\"datetime\",\"type\":\"System.DateTime\",\"docstring\":\"\"\
  }]},{\"name\":\"Willow_VersionToMinnow\",\"docstring\":\"Converts a Willow
  version to a Minnow
  version\",\"body\":\"{\\r\\n    cluster('Ddtelvsraw').database('VS').RawEvent\
  sVS\\r\\n    | where EventName == \\\"vs/willow/apprun\\\"\\r\\n    | where
  ExeName == \\\"setup\\\"\\r\\n    | project ExeVersion, WillowVersion =
  tostring(Properties[\\\"context.default.vs.willow.installerversion\\\"])\\r\\\
  n    | where WillowVersion == version\\r\\n    | take 1\\r\\n    | project
  ExeVersion;\\r\\n}\",\"inputParameters\":[{\"name\":\"version\",\"cslType\":\
  \"string\",\"type\":\"System.String\",\"docstring\":\"\"}]},{\"name\":\"Willo\
  w_Minnow_VersionPairs\",\"docstring\":\"Gets a table of all Minnow/Willow
  version
  pairs\",\"body\":\"{\\r\\n    cluster('Ddtelvsraw').database('VS').RawEventsVS\
  \\r\\n    | where EventName == \\\"vs/willow/apprun\\\"\\r\\n    | where
  ExeName == \\\"setup\\\"\\r\\n//     | where UserAlias !in (\\\"tydunkel\\\",
  \\\"menwang\\\", \\\"sknam\\\", \\\"dalimapa\\\", \\\"rpreece\\\")\\r\\n    |
  where Properties !has \\\"context.default.vs.setupengine.debug\\\"\\r\\n    |
  project MinnowVersion = ExeVersion, WillowVersion =
  tostring(Properties[\\\"context.default.vs.willow.installerversion\\\"])\\r\\\
  n    | where split(MinnowVersion, \\\".\\\")[0] == split(WillowVersion,
  \\\".\\\")[0] and split(MinnowVersion, \\\".\\\")[1] == split(WillowVersion,
  \\\".\\\")[1]\\r\\n    | summarize count() by MinnowVersion,
  WillowVersion\\r\\n    | summarize arg_max(count_, MinnowVersion) by
  WillowVersion\\r\\n    | project MinnowVersion,
  WillowVersion;\\r\\n}\",\"inputParameters\":[]},{\"name\":\"Minnow_Crashes\",\
  \"docstring\":\"Returns crash events with common
  properties\",\"body\":\"{\\r\\n    let minUploadTime = now() -
  timeperiod;\\r\\n    cluster(\\\"Ddtelvsraw\\\").database(\\\"VS\\\").RawEven\
  tsVS\\r\\n    | where EventName in (\\\"vs/setupengine/unhandledexception\\\",
  \\\"vs/setupengine/apprun-error\\\")\\r\\n    | where
  AdvancedServerTimestampUtc >= minUploadTime\\r\\n    | where ExeName ==
  \\\"setup\\\"\\r\\n    | where
  Properties[\\\"context.default.vs.willow.source\\\"] =~ \\\"WPF\\\"\\r\\n    |
  project\\r\\n        SessionId,\\r\\n        MacAddressHash,\\r\\n        Exe\
  Version,\\r\\n        WillowVersion =
  tostring(Properties[\\\"context.default.vs.willow.installerversion\\\"]),\\r\
  \\n        OsVersion,\\r\\n        Message =
  tostring(Properties[\\\"reserved.datamodel.fault.exception.message\\\"]),\\r\
  \\n        Stack =
  tostring(Properties[\\\"reserved.datamodel.fault.exception.stacktrace\\\"]),\
  \\r\\n        Param1 =
  tostring(Properties[\\\"datamodel.fault.bucketparam1\\\"]),\\r\\n        Para\
  m2 =
  tostring(Properties[\\\"datamodel.fault.bucketparam2\\\"]),\\r\\n        Para\
  m3 =
  tostring(Properties[\\\"datamodel.fault.bucketparam3\\\"]),\\r\\n        Para\
  m4 =
  tostring(Properties[\\\"datamodel.fault.bucketparam4\\\"]),\\r\\n        Para\
  m5 =
  tostring(Properties[\\\"datamodel.fault.bucketparam5\\\"]),\\r\\n        Para\
  m6 =
  tostring(Properties[\\\"datamodel.fault.bucketparam6\\\"])\\r\\n}\",\"inputPa\
  rameters\":[{\"name\":\"timeperiod\",\"cslType\":\"timespan\",\"type\":\"Syst\
  em.TimeSpan\",\"docstring\":\"\"}]},{\"name\":\"Minnow_CrashesByStack\",\"doc\
  string\":\"Returns the number of crash events by os/exe versions during the
  timespan, bucketed by
  stack\",\"body\":\"{\\r\\n    Minnow_Crashes(timeperiod)\\r\\n    | summarize
  SessionCount = dcount(SessionId), MachineCount = dcount(MacAddressHash) by
  Message, Stack, ExeVersion, WillowVersion,
  OsVersion\\r\\n}\",\"inputParameters\":[{\"name\":\"timeperiod\",\"cslType\":\
  \"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"}]},{\"name\":\"M\
  innow_SessionCountByExeVersion\",\"docstring\":\"Returns the number of session
  starts by exe version during the timespan\",\"body\":\"{\\r\\n    let
  minUploadTime = now() -
  timePeriod;\\r\\n    cluster('Ddtelvsraw').database('VS').RawEventsVS\\r\\n    \
  | where EventName == \\\"vs/willow/apprun\\\" and
  tostring(Properties[\\\"reserved.datamodel.action.type\\\"]) ==
  \\\"Start\\\"\\r\\n    | where AdvancedServerTimestampUtc  >=
  minUploadTime\\r\\n    | extend WillowVersion =
  tostring(Properties[\\\"context.default.vs.willow.installerversion\\\"])\\r\\\
  n    | summarize NumberOfSessions = dcount(SessionId), NumberOfMachines =
  dcount(MacAddressHash) by ExeVersion,
  WillowVersion\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslType\
  \":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"}]},{\"name\":\
  \"Minnow_CrashesByStackGoalDetails\",\"docstring\":\"Returns the details of
  the VSTelHealth crashes by stack
  goal\",\"body\":\"{\\r\\n    Willow_NthLatestVersion(n, releaseScope,
  channelId, true)\\r\\n    | join kind = leftouter
  (\\r\\n        Minnow_CrashesByStack(timePeriod)\\r\\n        | where Message
  !has \\\"There is not enough space on the disk.\\\"\\r\\n        | summarize
  SessionCount = sum(SessionCount), MachineCount = sum(MachineCount) by Stack,
  ExeVersion\\r\\n        | join kind=leftouter
  Minnow_SessionCountByExeVersion(timePeriod) on ExeVersion\\r\\n        | where
  NumberOfMachines >= minMachines\\r\\n        | extend SessionPercent =
  round(SessionCount * 100.00 / NumberOfSessions, 2), MachinePercent =
  round(MachineCount * 100.00 / NumberOfMachines, 2)\\r\\n        | extend
  IsOverThreshold = (SessionPercent >= maxSessionPercent or MachinePercent >=
  maxMachinePercent)\\r\\n    ) on ExeVersion\\r\\n    | project
  IsOverThreshold, Stack, ExeVersion = ExeVersion1, SessionCount, MachineCount,
  NumberOfSessions, NumberOfMachines, SessionPercent,
  MachinePercent\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslTy\
  pe\":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\"name\":\
  \"minMachines\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\
  \"},{\"name\":\"maxSessionPercent\",\"cslType\":\"real\",\"type\":\"System.Do\
  uble\",\"docstring\":\"\"},{\"name\":\"maxMachinePercent\",\"cslType\":\"real\
  \",\"type\":\"System.Double\",\"docstring\":\"\"},{\"name\":\"n\",\"cslType\":\
  \"int\",\"type\":\"System.Int32\",\"docstring\":\"\"},{\"name\":\"releaseScope\
  \",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"n\
  ame\":\"channelId\",\"cslType\":\"string\",\"type\":\"System.String\",\"docst\
  ring\":\"\"}]},{\"name\":\"Minnow_CrashesByStackGoal\",\"docstring\":\"Returns
  the result of the VSTelHealth crashes by stack
  goal\",\"body\":\"{\\r\\n    Willow_CrashesByStackGoalDetails(timePeriod,
  minMachines, maxSessionPercent, maxMachinePercent, n, releaseScope,
  channelId)\\r\\n    | where IsOverThreshold == true\\r\\n    | summarize
  Result = count()\\r\\n    | project Result = max_of(0,
  Result)\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslType\":\"\
  timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\"name\":\"minMa\
  chines\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\"},{\
  \"name\":\"maxSessionPercent\",\"cslType\":\"real\",\"type\":\"System.Double\
  \",\"docstring\":\"\"},{\"name\":\"maxMachinePercent\",\"cslType\":\"real\",\
  \"type\":\"System.Double\",\"docstring\":\"\"},{\"name\":\"n\",\"cslType\":\"\
  int\",\"type\":\"System.Int32\",\"docstring\":\"\"},{\"name\":\"releaseScope\
  \",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"n\
  ame\":\"channelId\",\"cslType\":\"string\",\"type\":\"System.String\",\"docst\
  ring\":\"\"}]},{\"name\":\"Minnow_CrashGoalDiagQuery2\",\"docstring\":\"Retur\
  ns the results for the crash goal diagnostic query
  two\",\"body\":\"{\\r\\n    Willow_NthLatestVersionV2(n, releaseScope,
  channelId, true)\\r\\n    | join kind=inner ( RawEventsVS | where EventName ==
  'vs/setupengine/unhandledexception' and AdvancedServerTimestampUtc >= now() -
  timePeriod | extend WillowVersion =
  tostring(Properties[\\\"context.default.vs.willow.installerversion\\\"])) on
  $left.ExeVersion == $right.WillowVersion\\r\\n    | project CrashType =
  tostring(Properties['vs.willow.resultdetails']), Stack =
  tostring(Properties['vs.willow.stack']), SessionId, MacAddressHash,
  ExeVersion,
  WillowVersion\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslType\
  \":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\"name\":\"n\
  \",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\"},{\"name\
  \":\"releaseScope\",\"cslType\":\"string\",\"type\":\"System.String\",\"docst\
  ring\":\"\"},{\"name\":\"channelId\",\"cslType\":\"string\",\"type\":\"System\
  .String\",\"docstring\":\"\"}]},{\"name\":\"Minnow_CrashGoal\",\"docstring\":\
  \"Returns the result for the VSTelHealth crash goal
  metric\",\"body\":\"{\\r\\n    Minnow_CrashGoalDetails(timePeriod,
  minMachines, n, releaseScope, channelId)\\r\\n    | summarize Result =
  sum(CrashPercent)\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cs\
  lType\":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\"name\
  \":\"minMachines\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\
  \":\"\"},{\"name\":\"n\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docs\
  tring\":\"\"},{\"name\":\"releaseScope\",\"cslType\":\"string\",\"type\":\"Sy\
  stem.String\",\"docstring\":\"\"},{\"name\":\"channelId\",\"cslType\":\"string\
  \",\"type\":\"System.String\",\"docstring\":\"\"}]},{\"name\":\"Minnow_CrashG\
  oalDetails\",\"docstring\":\"Returns the details for the VSTelHealth crash
  goal
  metric\",\"body\":\"{\\r\\n    Minnow_CrashPercentagePerMachineByExeVersion(t\
  imePeriod, minMachines)\\r\\n    | join ( Willow_NthLatestVersionV2(n,
  releaseScope, channelId, true) ) on $left.WillowVersion ==
  $right.ExeVersion\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cs\
  lType\":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\"name\
  \":\"minMachines\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\
  \":\"\"},{\"name\":\"n\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docs\
  tring\":\"\"},{\"name\":\"releaseScope\",\"cslType\":\"string\",\"type\":\"Sy\
  stem.String\",\"docstring\":\"\"},{\"name\":\"channelId\",\"cslType\":\"string\
  \",\"type\":\"System.String\",\"docstring\":\"\"}]},{\"name\":\"Minnow_CrashP\
  ercentagePerMachineByExeVersion\",\"docstring\":\"Returns the percent of
  machines crashing by exe version\",\"body\":\"{\\r\\n    let
  CrashesByExeVersion = Minnow_CrashCount(timePeriod)\\r\\n    | summarize
  NumberOfCrashMachines = sum(NumberOfCrashMachines) by ExeVersion,
  WillowVersion;\\r\\n    Minnow_MachineCountByExeVersion(timePeriod)\\r\\n    |
  join kind = leftouter CrashesByExeVersion on ExeVersion,
  WillowVersion\\r\\n    | where NumberOfMachines >= minMachines\\r\\n    |
  extend NumberOfCrashMachines = max_of(0, NumberOfCrashMachines)\\r\\n    |
  extend CrashPercent = NumberOfCrashMachines * 100.0 /
  NumberOfMachines\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"csl\
  Type\":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\"name\
  \":\"minMachines\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\
  \":\"\"}]},{\"name\":\"Minnow_CrashCount\",\"docstring\":\"Returns the number
  of unhandled exception events by os/exe versions during the
  timespan\",\"body\":\"{\\r\\n    Minnow_Crashes(timePeriod)\\r\\n    |
  summarize NumberOfCrashSessions = dcount(SessionId), NumberOfCrashMachines =
  dcount(MacAddressHash) by ExeVersion, WillowVersion,
  OsVersion\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslType\":\
  \"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"}]},{\"name\":\"M\
  innow_MachineCountByExeVersion\",\"docstring\":\"Returns the number of
  machines per version \",\"body\":\"{\\r\\n    let minTime = now() -
  timePeriod;\\r\\n    cluster('Ddtelvsraw').database('VS').RawEventsVS\\r\\n    \
  | where EventName == \\\"vs/willow/apprun\\\" and
  tostring(Properties[\\\"reserved.datamodel.action.type\\\"]) ==
  \\\"Start\\\"\\r\\n    | where ExeName  == \\\"setup\\\"\\r\\n    | where
  AdvancedServerTimestampUtc > minTime\\r\\n    | extend WillowVersion =
  tostring(Properties[\\\"context.default.vs.willow.installerversion\\\"])\\r\\\
  n    | summarize NumberOfMachines = dcount(MacAddressHash) by ExeVersion,
  WillowVersion\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslType\
  \":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"}]},{\"name\":\
  \"Willow_NthLatestVersionV2\",\"docstring\":\"Returns the n-th latest
  installer version from the channelId released with the given
  scope\",\"body\":\"{\\r\\n    cluster(\\\"Ddtelvsraw\\\").database(\\\"Lookup\
  Tables\\\").VS_Telemetry_Releases_Func()\\r\\n    | where ReleaseScope
  contains releaseScope and ChannelId =~ channelId\\r\\n    | extend IsRTW =
  ManifestVersion startswith \\\"15.0\\\"\\r\\n    | where IsRTW == false or
  IsRTW != excludeRTW\\r\\n    | extend WillowInstallerVersionParsed =
  parse_version(WillowInstallerVersion)\\r\\n    | summarize BuildDate =
  max(BuildDate) by WillowInstallerVersionParsed,
  WillowInstallerVersion\\r\\n    | top n by WillowInstallerVersionParsed desc
  nulls last\\r\\n    | top 1 by WillowInstallerVersionParsed asc nulls last
  \\r\\n    | project ExeVersion = tostring(WillowInstallerVersion)
  \\r\\n}\",\"inputParameters\":[{\"name\":\"n\",\"cslType\":\"int\",\"type\":\
  \"System.Int32\",\"docstring\":\"\"},{\"name\":\"releaseScope\",\"cslType\":\
  \"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\"channel\
  Id\",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\
  \"name\":\"excludeRTW\",\"cslType\":\"bool\",\"type\":\"System.SByte\",\"docs\
  tring\":\"\"}]},{\"name\":\"Minnow_NthLatestVersionV2\",\"docstring\":\"Retur\
  ns the n-th latest installer version from the channelId released with the
  given
  scope\",\"body\":\"{\\r\\n    cluster(\\\"Ddtelvsraw\\\").database(\\\"Lookup\
  Tables\\\").VS_Telemetry_Releases_Func()\\r\\n    | where ReleaseScope
  contains releaseScope and ChannelId =~ channelId\\r\\n    | extend IsRTW =
  ManifestVersion startswith \\\"15.0\\\"\\r\\n    | where IsRTW == false or
  IsRTW != excludeRTW\\r\\n    | extend WillowInstallerVersionParsed =
  parse_version(WillowInstallerVersion)\\r\\n    | summarize BuildDate =
  max(BuildDate) by WillowInstallerVersionParsed,
  WillowInstallerVersion\\r\\n    | top n by WillowInstallerVersionParsed desc
  nulls last\\r\\n    | top 1 by WillowInstallerVersionParsed asc nulls last
  \\r\\n    | project ExeVersion = tostring(WillowInstallerVersion)\\r\\n    |
  join kind = inner
  (\\r\\n        cluster(\\\"Ddtelvsraw\\\").database(\\\"VS\\\").RawEventsVS\\r\
  \\n        | where ExeName == \\\"setup\\\"\\r\\n        | where EventName ==
  \\\"vs/willow/apprun\\\"\\r\\n        | project MinnowVersion = ExeVersion,
  WillowVersion =
  tostring(Properties[\\\"context.default.vs.willow.installerversion\\\"])\\r\\\
  n        | summarize count() by MinnowVersion, WillowVersion\\r\\n    ) on
  $left.ExeVersion == $right.WillowVersion\\r\\n    | top 1 by count_ desc nulls
  last\\r\\n    | project WillowVersion,
  MinnowVersion\\r\\n}\",\"inputParameters\":[{\"name\":\"n\",\"cslType\":\"int\
  \",\"type\":\"System.Int32\",\"docstring\":\"\"},{\"name\":\"releaseScope\",\
  \"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\
  \":\"channelId\",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\
  \":\"\"},{\"name\":\"excludeRTW\",\"cslType\":\"bool\",\"type\":\"System.SByte\
  \",\"docstring\":\"\"}]},{\"name\":\"Minnow_PrismCrashes\",\"docstring\":\"Re\
  turns the number of crashes for the installer over the
  timeperiod\",\"body\":\"{\\r\\n    cluster('ddtelvsraw.kusto.windows.net').da\
  tabase('VS').RawEventsVS\\r\\n    | where EventName in
  (\\\"vs/setupengine/unhandledexception\\\",
  \\\"vs/setupengine/apprun-error\\\")\\r\\n    | where
  AdvancedServerTimestampUtc > ago(timePeriod)\\r\\n    | where ExeName ==
  \\\"setup\\\"\\r\\n    | project ExeVersion, EventName, Properties,
  MacAddressHash, Measures\\r\\n    | join kind=inner
  (cluster('ddtelvsraw.kusto.windows.net').database('VS').Willow_NthLatestVersi\
  onV2(n, releaseType, channelId, true)) on ExeVersion\\r\\n    | extend
  FailureId = strcat(replace(\\\"/\\\", \\\".\\\", EventName), \\\"_\\\",
  Properties[\\\"reserved.datamodel.fault.bucketparam4\\\"], \\\"_\\\",
  Properties[\\\"reserved.datamodel.fault.bucketparam5\\\"], \\\"_\\\",
  Properties[\\\"reserved.datamodel.fault.bucketparam6\\\"], \\\"_\\\",
  \\\"0x\\\",
  tohex(toint(Measures[\\\"reserved.datamodel.fault.exception.errorcode\\\"])))\
  \\r\\n    | summarize Hits = dcount(MacAddressHash) by FailureId,
  ExeVersion\\r\\n    | extend EventTypeName =
  \\\"paramaterizeddatamodel\\\"\\r\\n    | extend FailureHash =
  toguid(hash_sha256(tolower(FailureId)))\\r\\n}\",\"inputParameters\":[{\"name\
  \":\"n\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\"},{\
  \"name\":\"releaseType\",\"cslType\":\"string\",\"type\":\"System.String\",\"\
  docstring\":\"\"},{\"name\":\"channelId\",\"cslType\":\"string\",\"type\":\"S\
  ystem.String\",\"docstring\":\"\"},{\"name\":\"timePeriod\",\"cslType\":\"tim\
  espan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"}]},{\"name\":\"Comput\
  eSetupFailureId\",\"docstring\":\"Computes the failure hash of a fault
  event\",\"body\":\"{\\r\\n    strcat(replace(\\\"/\\\", \\\".\\\", eventName),
  \\\"_\\\", properties[\\\"reserved.datamodel.fault.bucketparam4\\\"],
  \\\"_\\\", properties[\\\"reserved.datamodel.fault.bucketparam5\\\"],
  \\\"_\\\", properties[\\\"reserved.datamodel.fault.bucketparam6\\\"],
  \\\"_\\\", \\\"0x\\\",
  tohex(toint(measures[\\\"reserved.datamodel.fault.exception.errorcode\\\"])))\
  \\r\\n}\",\"inputParameters\":[{\"name\":\"eventName\",\"cslType\":\"string\",\
  \"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\"properties\",\"csl\
  Type\":\"dynamic\",\"type\":\"System.Object\",\"docstring\":\"\"},{\"name\":\
  \"measures\",\"cslType\":\"dynamic\",\"type\":\"System.Object\",\"docstring\":\
  \"\"}]},{\"name\":\"GetvstelScraperDiff\",\"docstring\":\"Get catalog
  scraper\",\"body\":\"{\\r\\n//let start =
  make_datetime(\\\"2022-07-19T05:00:00.000Z\\\"); \\r\\nlet start =
  make_datetime(startTime);\\r\\nlet end = start + 15min;\\r\\nlet
  MeasuresProperty = RawEventsVSUnclassified  \\r\\n| where
  AdvancedServerTimestampUtc >= start  \\r\\n| where AdvancedServerTimestampUtc
  < end  \\r\\n| extend DataHandling = parse_json(DataHandling)\\r\\n| extend
  ingestTime = ingestion_time()\\r\\n| where tostring(DataHandling) contains
  \\\"unknown\\\"  \\r\\n| extend  MeasuresDataHandling =
  DataHandling[\\\"data\\\"][\\\"baseData\\\"][\\\"measurements\\\"]  \\r\\n|
  mv-expand MeasuresDataHandling  \\r\\n| extend property =
  tostring(MeasuresDataHandling)    \\r\\n| extend trimedPropertyStart =
  trim_start(\\\"{\\\", property)    \\r\\n| extend trimedPropertyEnd =
  trim_end(\\\"}\\\", trimedPropertyStart)    \\r\\n| extend result =
  split(trimedPropertyEnd, \\\":\\\")    \\r\\n| extend entityname = EventName,
  propertypath = \\\"$.Measures\\\", propertyname = tostring(result[0]), value =
  tostring(result[1])  \\r\\n| where value contains \\\"unknown\\\"\\r\\n|
  project entityname, propertypath, propertyname, EventId, ingestTime;\\r\\nlet
  MeasuresValues = RawEventsVSUnclassified  \\r\\n| where
  AdvancedServerTimestampUtc >= start  \\r\\n| where AdvancedServerTimestampUtc
  < end  \\r\\n|extend ingestTime = ingestion_time()\\r\\n| extend Measures =
  parse_json(Measures)  \\r\\n| mv-expand Measures  \\r\\n| extend property =
  tostring(Measures)    \\r\\n| extend trimedPropertyStart =
  trim_start(\\\"{\\\", property)    \\r\\n| extend trimedPropertyEnd =
  trim_end(\\\"}\\\", trimedPropertyStart)    \\r\\n| extend result =
  split(trimedPropertyEnd, \\\":\\\")    \\r\\n| extend entityname = EventName,
  propertypath = \\\"$.Measures\\\", propertyname = tostring(result[0]), Value =
  tostring(result[1])  \\r\\n| project entityname, propertypath, propertyname,
  EventId, ingestTime = ingestion_time(), Value;\\r\\nlet MeasuresRes =
  MeasuresProperty | join MeasuresValues on entityname, propertypath,
  propertyname, EventId\\r\\n| project  entityname, propertypath, propertyname,
  Value;\\r\\nlet PropertiesProperty = RawEventsVSUnclassified  \\r\\n| where
  AdvancedServerTimestampUtc >= start  \\r\\n| where AdvancedServerTimestampUtc
  < end  \\r\\n| extend DataHandling = parse_json(DataHandling)\\r\\n| extend
  ingestTime = ingestion_time()\\r\\n| where tostring(DataHandling) contains
  \\\"unknown\\\"  \\r\\n| extend  MeasuresDataHandling =
  DataHandling[\\\"data\\\"][\\\"baseData\\\"][\\\"properties\\\"]  \\r\\n|
  mv-expand MeasuresDataHandling  \\r\\n| extend property =
  tostring(MeasuresDataHandling)    \\r\\n| extend trimedPropertyStart =
  trim_start(\\\"{\\\", property)    \\r\\n| extend trimedPropertyEnd =
  trim_end(\\\"}\\\", trimedPropertyStart)    \\r\\n| extend result =
  split(trimedPropertyEnd, \\\":\\\")    \\r\\n| extend entityname = EventName,
  propertypath = \\\"$.Properties\\\", propertyname = tostring(result[0]), value
  = tostring(result[1])  \\r\\n| where value contains \\\"unknown\\\"\\r\\n|
  project entityname, propertypath, propertyname, EventId, ingestTime;\\r\\nlet
  PropertiesValues = RawEventsVSUnclassified  \\r\\n| where
  AdvancedServerTimestampUtc >= start  \\r\\n| where AdvancedServerTimestampUtc
  < end  \\r\\n|extend ingestTime = ingestion_time()\\r\\n| extend Properties =
  parse_json(Properties)  \\r\\n| mv-expand Properties  \\r\\n| extend property
  = tostring(Properties)    \\r\\n| extend trimedPropertyStart =
  trim_start(\\\"{\\\", property)    \\r\\n| extend trimedPropertyEnd =
  trim_end(\\\"}\\\", trimedPropertyStart)    \\r\\n| extend result =
  split(trimedPropertyEnd, \\\":\\\")    \\r\\n| extend entityname = EventName,
  propertypath = \\\"$.Properties\\\", propertyname = tostring(result[0]), Value
  = tostring(result[1])  \\r\\n| project entityname, propertypath, propertyname,
  EventId, ingestTime = ingestion_time(), Value;\\r\\nlet PropertiesRes =
  PropertiesProperty | join PropertiesValues on entityname, propertypath,
  propertyname, EventId\\r\\n| project  entityname, propertypath, propertyname,
  Value;\\r\\nlet blankRes = RawEventsVSUnclassified  \\r\\n| where
  AdvancedServerTimestampUtc >= start  \\r\\n| where AdvancedServerTimestampUtc
  < end\\r\\n| extend DataHandling = parse_json(DataHandling)\\r\\n| extend
  ingestTime = ingestion_time()\\r\\n| where tostring(DataHandling) contains
  \\\"unknown\\\"  \\r\\n| extend  MeasuresDataHandling =
  tostring(DataHandling[\\\"data\\\"][\\\"baseData\\\"][\\\"measurements\\\"]),
  PropertiesDataHandling =
  tostring(DataHandling[\\\"data\\\"][\\\"baseData\\\"][\\\"properties\\\"])   \
  \\r\\n| where MeasuresDataHandling != \\\"\\\" or PropertiesDataHandling !=
  \\\"\\\"\\r\\n| project entityname = EventName, propertypath = \\\"\\\",
  propertyname = \\\"(blank)\\\", Value = \\\"\\\";\\r\\nlet res = PropertiesRes
  | union MeasuresRes | union blankRes | project entityname, propertypath,
  propertyname =iff(propertyname == \\\"(blank)\\\",
  propertyname,  trim(\\\"\\\\\\\"\\\", propertyname)), Value =
  trim(\\\"\\\\\\\"\\\", Value);\\r\\nlet entityNameCounts = res | summarize
  count() by entityname; \\r\\nlet combinedData = res | summarize
  PropertyCountPerEntityName = count(), SampleValue = take_any(Value)  by
  entityname, propertypath, propertyname    \\r\\n| project entityname,
  propertypath, propertyname,PropertyCountPerEntityName,
  SampleValue;   \\r\\nlet comBinedData2 = combinedData | join kind=leftouter
  entityNameCounts on $left.entityname == $right.entityname  \\r\\n| project
  entityname, propertypath, propertyname, SampleValue,
  PropertyCountPerEntityName, EntityCount = count_; \\r\\nlet formatName =
  (name: string)  {    \\r\\n    let formatUUID = replace_regex(name,
  @\\\"[{(]?[0-9A-Fa-f]{8}[-]?([0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?\\\",
  \\\"    <UUID>\\\");    \\r\\n    let formatHEX = replace_regex(formatUUID,
  @\\\"0x([0-9a-fA-f]){8}\\\", \\\"<HEX>\\\");    \\r\\n     let formatHEX2 =
  replace_regex(formatHEX, @\\\"0x([0-9a-fA-f]){4}\\\",
  \\\"<HEX>\\\");    \\r\\n     replace_regex(formatHEX2,
  @\\\"([0-9])+(\\\\.*[0-9+])*\\\", \\\"<NUMBER>\\\");    \\r\\n };\\r\\nlet
  trimQuotation = (str: string)\\r\\n{\\r\\n   let trimedStart =
  trim_start(\\\"\\\\\\\"\\\", str);   \\r\\n   trim_end(\\\"\\\\\\\"\\\",
  trimedStart)   \\r\\n};\\r\\n let comBinedData3 = comBinedData2    \\r\\n |
  extend  entityname = formatName(entityname), propertyname =
  formatName(propertyname), SampleEntityName = entityname, SamplePropertyName =
  propertyname    \\r\\n | project entityname=trimQuotation(entityname),
  propertyname = trimQuotation(propertyname), SampleValue =
  trimQuotation(SampleValue), propertypath, SampleEntityName =
  trimQuotation(SampleEntityName), SamplePropertyName =
  trimQuotation(SamplePropertyName), EntityCount,
  PropertyCountPerEntityName;    \\r\\nlet generalizedData = comBinedData3 |
  summarize SampleValue = any(SampleValue), PropertyCount =
  sum(PropertyCountPerEntityName), EntityCount= sum(EntityCount) by
  entityname,propertyname, propertypath    \\r\\n| project entityname,
  propertyname, propertypath, SampleValue, PropertyCount, EntityCount;\\r\\nlet
  totalEntityCounts = toscalar(generalizedData | summarize TotalPropertyCount =
  sum(EntityCount) | take 1);    \\r\\nlet totalPropertyCounts = generalizedData
  | summarize TotalPropertyCount = sum(PropertyCount) by propertyname,
  propertypath    \\r\\n| project propertyname, propertypath,
  TotalPropertyCount;    \\r\\nlet totalPropertyCountsPerEntity =
  generalizedData | summarize TotalPropertyCountPerEntity = sum(PropertyCount)
  by entityname, propertyname, propertypath    \\r\\n| project entityname,
  propertyname, propertypath, TotalPropertyCountPerEntity;    \\r\\nlet
  generalizedData2 = generalizedData | extend TotalEntityCount =
  totalEntityCounts;\\r\\nlet generalizedData3 =generalizedData2| join
  kind=leftouter totalPropertyCounts  on $left.propertyname ==
  $right.propertyname and $left.propertypath == $right.propertypath    \\r\\n|
  join kind=leftouter totalPropertyCountsPerEntity on $left.propertyname ==
  $right.propertyname and $left.propertypath == $right.propertypath and
  $left.entityname == $right.entityname    \\r\\n| project entityname,
  propertyname, SampleValue, propertypath, EntityCount, PropertyCount,
  EntityPercentage = EntityCount*1.0 / totalEntityCounts, PropertyPercentage =
  PropertyCount*1.0/TotalPropertyCountPerEntity*100,  AbsolutePropertyPercentage
  = PropertyCount*1.0/TotalPropertyCount*100, AbsolutePropertyCount =
  TotalPropertyCount;    \\r\\nlet snapshot =
  cluster(\\\"https://ddtelinsights.kusto.windows.net\\\").database(\\\"DDTelIn\
  sights\\\").table(\\\"TelemetryCatalogViewSnapshot\\\")    \\r\\n| extend
  productcode = ProductCode, entityname = EntityName,  propertyname =
  PropertyName, owneralias = OwnerAlias, ishidden = IsHidden, commonproperty =
  CommonProperty, complete = Complete,  lastchangedby = LastChangedBy,
  propertypath = PropertyPath    \\r\\n| where productcode ==
  \\\"asimov.VisualStudio\\\"\\r\\n| project  productcode, propertyname,
  entityname, owneralias, ishidden, commonproperty, complete,
  lastchangedby,  propertypath;   \\r\\nlet productCode =
  \\\"asimov.VisualStudio\\\";    \\r\\nlet existingNonCommonProps = snapshot|
  where entityname != \\\"(blank)\\\" | distinct entityname, propertyname,
  propertypath;  \\r\\nlet existingCommonProps = snapshot| where entityname ==
  \\\"(blank)\\\" | distinct propertyname, propertypath; \\r\\nlet
  newFieldsPhase1 = generalizedData3 | join kind=leftouter
  existingNonCommonProps on $left.entityname == $right.entityname and
  $left.propertyname == $right.propertyname and $left.propertypath ==
  $right.propertypath   \\r\\n| join kind=leftouter existingCommonProps on
  $left.propertyname == $right.propertyname and $left.propertypath ==
  $right.propertypath   \\r\\n| extend  ExistingPropertyName = iff(propertyname1
  != \\\"(blank)\\\", propertyname1, propertyname2), ExistingPropertyPath =
  iff(propertypath1 !=\\\"\\\", propertypath1, propertypath2),entityname,
  propertyname, SampleValue, propertypath, EntityCount, PropertyCount,
  EntityPercentage, PropertyPercentage, AbsolutePropertyCount,
  AbsolutePropertyPercentage\\r\\n| project entityname, propertyname,
  SampleValue, propertypath, EntityCount, PropertyCount, EntityPercentage,
  PropertyPercentage, AbsolutePropertyCount, AbsolutePropertyPercentage,
  ExistingPropertyName, ExistingPropertyPath;\\r\\nlet newFieldsPhase2
  =newFieldsPhase1 | where ExistingPropertyName  == \\\"\\\" and
  ExistingPropertyPath == \\\"\\\"   \\r\\n| project entityname, propertyname,
  propertypath, SampleValue, EntityCount,PropertyCount, EntityPercentage,
  PropertyPercentage, AbsolutePropertyCount,
  AbsolutePropertyPercentage;   \\r\\nlet comBinedData4 =
  comBinedData3   \\r\\n| join kind=inner newFieldsPhase2 on $left.entityname ==
  $right.entityname and $left.propertyname == $right.propertyname and
  $left.propertypath == $right.propertypath   \\r\\n| project entityname,
  propertyname, propertypath, SampleEntityName, SamplePropertyName;   \\r\\nlet
  sampleNamesRanked1 = comBinedData4 |    \\r\\n    order by
  SampleEntityName   \\r\\n    | extend SampleEntityNameRank =
  row_rank(SampleEntityName)   \\r\\n    | project entityname, propertyname,
  propertypath, SampleEntityName, SamplePropertyName,
  SampleEntityNameRank;   \\r\\nlet sampleNamesRanked2 = comBinedData4
  |    \\r\\n    order by SampleEntityName   \\r\\n    | extend
  SamplePropertyRank = row_rank(SamplePropertyName)   \\r\\n    | project
  entityname, propertyname, propertypath, SampleEntityName, SamplePropertyName,
  SamplePropertyRank;   \\r\\nlet sampleNamesRanked = sampleNamesRanked1 | join
  kind=inner sampleNamesRanked2 on $left.entityname == $right.entityname
  and   \\r\\n$left.propertyname == $right.propertyname and $left.propertypath
  == $right.propertypath and $left.SampleEntityName == $right.SampleEntityName
  and $left.SamplePropertyName == $right.SamplePropertyName   \\r\\n| project
  entityname, propertyname, propertypath, SampleEntityName,
  SamplePropertyName,SampleEntityNameRank, SamplePropertyRank;   \\r\\nlet
  sampleEntityNames = sampleNamesRanked | project entityname, propertyname,
  propertypath, IsEntityNameRandom = false, SampleEntityNames =
  SampleEntityName;  \\r\\nlet samplePropertyNames = sampleNamesRanked | project
  entityname, propertyname, propertypath, IsPropertyNameRandom = false,
  SamplePropertyNames = SamplePropertyName;  \\r\\nlet finalData =
  newFieldsPhase2 | join kind=leftouter sampleEntityNames on $left.entityname ==
  $right.entityname and $left.propertyname == $right.propertyname and
  $left.propertypath == $right.propertypath  \\r\\n| join kind=leftouter
  samplePropertyNames on $left.entityname == $right.entityname and
  $left.propertyname == $right.propertyname and $left.propertypath ==
  $right.propertypath  \\r\\n| project ProductCode = productCode, EntityName =
  strcat(\\\"\\\\\\\"\\\", entityname, \\\"\\\\\\\"\\\"), PropertyName =
  propertyname, SampleValue,PropertyPath = propertypath, OwnerAlias =
  \\\"DEFAULTOWNERALIAS\\\", IsEntityNameRandom = FALSE, IsPropertyNameRandom =
  false, SampleEntityNames,SamplePropertyNames, EntityCount, PropertyCount,
  EntityPercentage,
  PropertyPercentage,AbsolutePropertyCount,AbsolutePropertyPercentage,
  CatalogHashId = hash_sha256(strcat(productCode, entityname, propertyname,
  propertypath));  \\r\\nfinalData\\r\\n}\",\"inputParameters\":[{\"name\":\"st\
  artTime\",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\
  \"}]},{\"name\":\"GetClassifiedFreshness\",\"docstring\":\"Freshness\",\"body\
  \":\"{\\r\\nRawEventsVS\\r\\n| extend gap = ingestion_time() -
  AdvancedServerTimestampUtc, binTime = bin(AdvancedServerTimestampUtc,
  1h)\\r\\n| where AdvancedServerTimestampUtc >= ago(7d)\\r\\n| summarize
  percentiles(gap, 50, 90, 95, 99) by binTime\\r\\n| project binTime,
  percentile_gap_50 = toint(percentile_gap_50/1min), percentile_gap_90 =
  toint(percentile_gap_90/1min), percentile_gap_95 =
  toint(percentile_gap_95/1min), percentile_gap_99 =
  toint(percentile_gap_99/1min\\r\\n)\\r\\n| where binTime != \\\"\\\"\\r\\n|
  order by binTime
  asc\\r\\n}\",\"inputParameters\":[]},{\"name\":\"GetUnclassifiedFreshness\",\
  \"docstring\":\"Freshness\",\"body\":\"{\\r\\nRawEventsVSUnclassified\\r\\n|
  extend gap = ingestion_time() - AdvancedServerTimestampUtc, binTime =
  bin(AdvancedServerTimestampUtc, 1h)\\r\\n| where AdvancedServerTimestampUtc >=
  ago(7d)\\r\\n| summarize percentiles(gap, 50, 90, 95, 99) by binTime\\r\\n|
  project binTime, percentile_gap_50 = toint(percentile_gap_50/1min),
  percentile_gap_90 = toint(percentile_gap_90/1min), percentile_gap_95 =
  toint(percentile_gap_95/1min), percentile_gap_99 =
  toint(percentile_gap_99/1min\\r\\n)\\r\\n| where binTime != \\\"\\\"\\r\\n|
  order by binTime
  asc\\r\\n}\",\"inputParameters\":[]},{\"name\":\"GetRawEventsVSFreshness\",\"\
  docstring\":\"GetFreshNess\",\"body\":\"{\\r\\n RawEventsVS\\r\\n | summarize
  ingestionTimeDiff = (now() - max(ingestion_time()))/1min, serverTimeDiff =
  (now() - max(AdvancedServerTimestampUtc))/1min\\r\\n
  }\",\"inputParameters\":[]},{\"name\":\"GetRawEventsVSUnclassifiedFreshness\",\
  \"docstring\":\"GetFreshNess\",\"body\":\"{\\r\\n
  RawEventsVSUnclassified\\r\\n | summarize ingestionTimeDiff = (now() -
  max(ingestion_time()))/1min, serverTimeDiff = (now() -
  max(AdvancedServerTimestampUtc))/1min\\r\\n
  }\",\"inputParameters\":[]},{\"name\":\"formatName\",\"docstring\":\"Format
  string for scraper\",\"body\":\"{\\r\\n    replace_regex(name,
  @\\\"[{(]?[0-9A-Fa-f]{8}[-]?([0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?\\\",
  \\\"<UUID>\\\");\\r\\n
  }\",\"inputParameters\":[{\"name\":\"name\",\"cslType\":\"string\",\"type\":\
  \"System.String\",\"docstring\":\"\"}]},{\"name\":\"GetCatalogEntities\",\"do\
  cstring\":\"Get entities from unclassified table\",\"body\":\"{\\nlet start =
  make_datetime(startTime);\\nlet end = start + interval;\\nlet rawInput =
  materialize(cluster(clusterName).database(databaseName).table(tableName)\\n|
  where column_ifexists(timeColumnName, ingestion_time())  >= start and
  column_ifexists(timeColumnName, ingestion_time()) < end\\n| project name =
  column_ifexists(entityName, \\\"blankName\\\"), GdprQuarantined);\\nlet
  performanceCounter = materialize(rawInput\\n| extend  performanceCounter =
  GdprQuarantined[\\\"performanceCounter\\\"]\\n| mv-expand
  performanceCounter\\n| extend performanceCounterName =
  bag_keys(performanceCounter)\\n| mv-expand performanceCounterName);\\nlet
  firstLevelPerformanceCounter = materialize(performanceCounter\\n| extend value
  = performanceCounter[tostring(performanceCounterName)]\\n| project  entityname
  = name, propertypath = \\\"(blank)\\\", propertyname =
  strcat(\\\"performanceCounter[<NUMBER>].\\\",
  tostring(performanceCounterName)), Value = tostring(value)\\n| where
  propertyname !endswith \\\"[<NUMBER>].\\\");\\nlet
  secondLevelPerformanceCounter = materialize(firstLevelPerformanceCounter\\n|
  extend jsonValue = parse_json(Value)\\n| extend type = gettype(jsonValue)\\n|
  where type == \\\"dictionary\\\"\\n| extend key = bag_keys(jsonValue)\\n|
  mv-expand key\\n| extend secondLevelValue = jsonValue[tostring(key)]\\n|
  project entityname, propertypath, propertyname = strcat(propertyname,
  \\\".\\\", tostring(key)), Value = tostring(secondLevelValue));\\nlet request
  = materialize(rawInput\\n| extend  requestBag =
  GdprQuarantined[\\\"request\\\"]\\n| project name, requestBag\\n| mv-expand
  requestBag\\n| extend requestName = bag_keys(requestBag)\\n| mv-expand
  requestName);\\nlet firstLevelRequest = materialize(request\\n| extend value =
  requestBag[tostring(requestName)]\\n| project  entityname = name, propertypath
  = \\\"(blank)\\\", propertyname = strcat(\\\"request[<NUMBER>].\\\",
  tostring(requestName)), Value = tostring(value)\\n| where propertyname
  !endswith \\\"[<NUMBER>].\\\");\\nlet secondLevelRequest =
  firstLevelRequest\\n| extend jsonValue = parse_json(Value)\\n| extend type =
  gettype(jsonValue)\\n| where type == \\\"dictionary\\\"\\n| extend key =
  bag_keys(jsonValue)\\n| mv-expand key\\n| extend secondLevelValue =
  jsonValue[tostring(key)]\\n| project entityname, propertypath, propertyname =
  strcat(propertyname, \\\".\\\", tostring(key)), Value =
  tostring(secondLevelValue);\\nlet device = rawInput\\n| extend deviceValue =
  GdprQuarantined[\\\"context\\\"][\\\"device\\\"]\\n| extend key =
  bag_keys(deviceValue)\\n| mv-expand key\\n| project entityname = name,
  propertypath=\\\"(blank)\\\", propertyname = strcat(\\\"context.device.\\\",
  tostring(key)), Value = tostring(deviceValue[tostring(key)])\\n| where
  propertyname != \\\"context.device.\\\";\\nlet Properties = rawInput\\n|
  project name, Properties= iff(dataSource ==
  '1',GdprQuarantined['data']['baseData']['properties'],
  GdprQuarantined['context']['custom']['dimensions'])\\n| mv-expand
  Properties\\n| extend key = bag_keys(Properties)\\n| mv-expand key\\n| extend
  entityname = name, propertypath = \\\"$.Properties\\\", propertyname =
  tostring(key), Value = tostring(Properties[tostring(key)]);\\nlet Measures =
  rawInput\\n| project name, Properties= iff(dataSource == '1',
  GdprQuarantined['data']['baseData']['measurements'],
  GdprQuarantined['context']['custom']['metrics'])\\n| mv-expand Properties\\n|
  extend key = bag_keys(Properties)\\n| mv-expand key\\n| extend entityname =
  name, propertypath = \\\"$.Measures\\\", propertyname = tostring(key), Value =
  tostring(Properties[tostring(key)]);\\nlet blankRule = rawInput\\n| project
  entityname = name, propertypath = \\\"\\\", propertyname = \\\"(blank)\\\",
  Value = \\\"\\\";\\nlet entities = firstLevelPerformanceCounter| union
  secondLevelPerformanceCounter| union device| union Properties | union
  Measures|union  blankRule | union Properties |union
  Measures;\\nentities\\n}\",\"inputParameters\":[{\"name\":\"productCode\",\"c\
  slType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\
  \"clusterName\",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\
  \":\"\"},{\"name\":\"databaseName\",\"cslType\":\"string\",\"type\":\"System.\
  String\",\"docstring\":\"\"},{\"name\":\"tableName\",\"cslType\":\"string\",\
  \"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\"startTime\",\"cslT\
  ype\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\"i\
  nterval\",\"cslType\":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\
  \"\"},{\"name\":\"timeColumnName\",\"cslType\":\"string\",\"type\":\"System.S\
  tring\",\"docstring\":\"\"},{\"name\":\"entityName\",\"cslType\":\"string\",\
  \"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\"dataSource\",\"csl\
  Type\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"}]},{\"name\":\
  \"GetCatalogEntitiesFromUnclassifiedTable\",\"docstring\":\"Get entities from
  unclassified table\",\"body\":\"{\\nlet start =
  make_datetime(startTime);\\nlet end = start + totimespan(interval);\\nlet
  rawInput =
  materialize(cluster(clusterName).database(databaseName).table(tableName)\\n|
  where column_ifexists(timeColumnName, ingestion_time())  >= start and
  column_ifexists(timeColumnName, ingestion_time()) < end\\n| project name =
  column_ifexists(entityName, \\\"blankName\\\"), GdprQuarantined\\n| where name
  != \\\"blankName\\\");\\nlet performanceCounter = rawInput\\n|
  extend  performanceCounter = GdprQuarantined[\\\"performanceCounter\\\"]\\n|
  mv-expand performanceCounter\\n| extend performanceCounterName =
  bag_keys(performanceCounter)\\n| mv-expand performanceCounterName;\\nlet
  firstLevelPerformanceCounter = performanceCounter\\n| extend value =
  performanceCounter[tostring(performanceCounterName)]\\n| project  entityname =
  name, propertypath = \\\"(blank)\\\", propertyname =
  strcat(\\\"performanceCounter[<NUMBER>].\\\",
  tostring(performanceCounterName)), Value = tostring(value)\\n| where
  propertyname !endswith \\\"[<NUMBER>].\\\";\\nlet
  secondLevelPerformanceCounter = firstLevelPerformanceCounter\\n| extend
  jsonValue = parse_json(Value)\\n| extend type = gettype(jsonValue)\\n| where
  type == \\\"dictionary\\\"\\n| extend key = bag_keys(jsonValue)\\n| mv-expand
  key\\n| extend secondLevelValue = jsonValue[tostring(key)]\\n| project
  entityname, propertypath, propertyname = strcat(propertyname, \\\".\\\",
  tostring(key)), Value = tostring(secondLevelValue);\\nlet request =
  rawInput\\n| extend  requestBag = GdprQuarantined[\\\"request\\\"]\\n| project
  name, requestBag\\n| mv-expand requestBag\\n| extend requestName =
  bag_keys(requestBag)\\n| mv-expand requestName;\\nlet firstLevelRequest =
  request\\n| extend value = requestBag[tostring(requestName)]\\n|
  project  entityname = name, propertypath = \\\"(blank)\\\", propertyname =
  strcat(\\\"request[<NUMBER>].\\\", tostring(requestName)), Value =
  tostring(value)\\n| where propertyname !endswith \\\"[<NUMBER>].\\\";\\nlet
  secondLevelRequest = firstLevelRequest\\n| extend jsonValue =
  parse_json(Value)\\n| extend type = gettype(jsonValue)\\n| where type ==
  \\\"dictionary\\\"\\n| extend key = bag_keys(jsonValue)\\n| mv-expand key\\n|
  extend secondLevelValue = jsonValue[tostring(key)]\\n| project entityname,
  propertypath, propertyname = strcat(propertyname, \\\".\\\", tostring(key)),
  Value = tostring(secondLevelValue);\\nlet Properties = rawInput\\n| project
  name, Properties= iff(dataSource ==
  '1',GdprQuarantined['data']['baseData']['properties'],
  GdprQuarantined['context']['custom']['dimensions'])\\n| mv-expand
  Properties\\n| extend key = bag_keys(Properties)\\n| where Properties !=
  \\\"\\\"\\n| mv-expand key\\n| extend entityname = name, propertypath =
  \\\"$.Properties\\\", propertyname = tostring(key), Value =
  tostring(Properties[tostring(key)]);\\nlet Measures = rawInput\\n| project
  name, Properties= iff(dataSource == '1',
  GdprQuarantined['data']['baseData']['measurements'],
  GdprQuarantined['context']['custom']['metrics'])\\n| mv-expand Properties\\n|
  extend key = bag_keys(Properties)\\n| mv-expand key\\n| where Properties !=
  \\\"\\\"\\n| extend entityname = name, propertypath = \\\"$.Measures\\\",
  propertyname = tostring(key), Value =
  tostring(Properties[tostring(key)]);\\nlet AIDSProperties = rawInput | project
  name, Properties = GdprQuarantined['Properties']\\n| extend key =
  bag_keys(Properties)\\n| mv-expand key\\n| where Properties != \\\"\\\"\\n|
  extend entityname = name, propertypath = \\\"$.Properties\\\", propertyname =
  tostring(key), Value = tostring(Properties[tostring(key)]);\\nlet
  AIDSMeasurements = rawInput | project name, Measurements =
  GdprQuarantined['Measurements']\\n| extend key = bag_keys(Measurements)\\n|
  mv-expand key\\n| where Measurements != \\\"\\\"\\n| extend entityname = name,
  propertypath = \\\"$.Measurements\\\", propertyname = tostring(key), Value =
  tostring(Measurements[tostring(key)]);\\nlet blankRule = rawInput\\n| project
  entityname = name, propertypath = \\\"\\\", propertyname = \\\"(blank)\\\",
  Value = \\\"\\\";\\nlet entities = firstLevelPerformanceCounter| union
  secondLevelPerformanceCounter| union Properties | union
  Measures|union  blankRule | union AIDSMeasurements | union
  AIDSProperties;\\nentities
  \\n}\",\"inputParameters\":[{\"name\":\"productCode\",\"cslType\":\"string\",\
  \"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\"clusterName\",\"cs\
  lType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\
  \"databaseName\",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\
  \":\"\"},{\"name\":\"tableName\",\"cslType\":\"string\",\"type\":\"System.Str\
  ing\",\"docstring\":\"\"},{\"name\":\"startTime\",\"cslType\":\"string\",\"ty\
  pe\":\"System.String\",\"docstring\":\"\"},{\"name\":\"interval\",\"cslType\":\
  \"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\"timeCol\
  umnName\",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\
  \"},{\"name\":\"entityName\",\"cslType\":\"string\",\"type\":\"System.String\
  \",\"docstring\":\"\"},{\"name\":\"dataSource\",\"cslType\":\"string\",\"type\
  \":\"System.String\",\"docstring\":\"\"}]},{\"name\":\"GetCatalogScraperDiff\
  \",\"docstring\":\"Get catalog scraper diff\",\"body\":\"{\\n   let entities =
  GetCatalogEntitiesFromUnclassifiedTable(productCode, clusterName,
  databaseName, tableName,startTime, interval, timeColumnName, entityName,
  dataSource);\\n   let combinedData = GetComBinedDataFromEntities(entities,
  productCode);\\n   GetCatalogScraperForEntities(combinedData,
  productCode)\\n}\",\"inputParameters\":[{\"name\":\"productCode\",\"cslType\":\
  \"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\"cluster\
  Name\",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\
  \"name\":\"databaseName\",\"cslType\":\"string\",\"type\":\"System.String\",\
  \"docstring\":\"\"},{\"name\":\"tableName\",\"cslType\":\"string\",\"type\":\
  \"System.String\",\"docstring\":\"\"},{\"name\":\"startTime\",\"cslType\":\"s\
  tring\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\"interval\",\
  \"cslType\":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\"\
  name\":\"timeColumnName\",\"cslType\":\"string\",\"type\":\"System.String\",\
  \"docstring\":\"\"},{\"name\":\"entityName\",\"cslType\":\"string\",\"type\":\
  \"System.String\",\"docstring\":\"\"},{\"name\":\"dataSource\",\"cslType\":\"\
  string\",\"type\":\"System.String\",\"docstring\":\"\"}]},{\"name\":\"GetCata\
  logScraperForEntities\",\"docstring\":\"Get catalog diff for specific
  entities\",\"body\":\"{\\nlet generalizedData = materialize(comBinedData |
  summarize SampleValue = any(SampleValue), PropertyCount =
  sum(PropertyCountPerEntityName), EntityCount= sum(EntityCount) by
  entityname,propertyname, propertypath    \\n| project entityname,
  propertyname, propertypath, SampleValue, PropertyCount, EntityCount);\\nlet
  totalEntityCounts = toscalar(generalizedData | summarize TotalPropertyCount =
  sum(EntityCount) | take 1);    \\nlet totalPropertyCounts = generalizedData |
  summarize TotalPropertyCount = sum(PropertyCount) by propertyname,
  propertypath    \\n| project propertyname, propertypath,
  TotalPropertyCount;    \\nlet totalPropertyCountsPerEntity = generalizedData |
  summarize TotalPropertyCountPerEntity = sum(PropertyCount) by entityname,
  propertyname, propertypath    \\n| project entityname, propertyname,
  propertypath, TotalPropertyCountPerEntity;    \\nlet generalizedData2 =
  generalizedData | extend TotalEntityCount = totalEntityCounts;\\nlet
  generalizedData3 =generalizedData2| join kind=leftouter
  totalPropertyCounts  on $left.propertyname == $right.propertyname and
  $left.propertypath == $right.propertypath    \\n| join kind=leftouter
  totalPropertyCountsPerEntity on $left.propertyname == $right.propertyname and
  $left.propertypath == $right.propertypath and $left.entityname ==
  $right.entityname    \\n| project entityname, propertyname, SampleValue,
  propertypath, EntityCount, PropertyCount, EntityPercentage = EntityCount*1.0 /
  totalEntityCounts, PropertyPercentage =
  PropertyCount*1.0/TotalPropertyCountPerEntity*100,  AbsolutePropertyPercentage
  = PropertyCount*1.0/TotalPropertyCount*100, AbsolutePropertyCount =
  TotalPropertyCount;    \\nlet snapshot =
  materialize(cluster(\\\"https://ddtelinsights.kusto.windows.net\\\").database(\
  \\\"DDTelInsights\\\").table(\\\"TelemetryCatalogViewSnapshot\\\")  \\n|
  extend productcode = ProductCode, entityname = EntityName,  propertyname =
  PropertyName, owneralias = OwnerAlias, ishidden = IsHidden, commonproperty =
  CommonProperty, complete = Complete,  lastchangedby = LastChangedBy,
  propertypath = PropertyPath    \\n| where productcode == productCode\\n|
  project  productcode, propertyname, entityname, owneralias, ishidden,
  commonproperty, complete, lastchangedby,  propertypath);\\nlet
  existingNonCommonProps = snapshot| where entityname != \\\"(blank)\\\" |
  distinct entityname, propertyname, propertypath;  \\nlet existingCommonProps =
  snapshot| where entityname == \\\"(blank)\\\" | distinct propertyname,
  propertypath; \\nlet newFieldsPhase1 = generalizedData3 | join kind=leftouter
  existingNonCommonProps on $left.entityname == $right.entityname and
  $left.propertyname == $right.propertyname and $left.propertypath ==
  $right.propertypath   \\n| join kind=leftouter existingCommonProps on
  $left.propertyname == $right.propertyname and $left.propertypath ==
  $right.propertypath   \\n| extend  ExistingPropertyName = iff(propertyname1 !=
  \\\"(blank)\\\", propertyname1, propertyname2), ExistingPropertyPath =
  iff(propertypath1 !=\\\"\\\", propertypath1, propertypath2),entityname,
  propertyname, SampleValue, propertypath, EntityCount, PropertyCount,
  EntityPercentage, PropertyPercentage, AbsolutePropertyCount,
  AbsolutePropertyPercentage\\n| project entityname, propertyname, SampleValue,
  propertypath, EntityCount, PropertyCount, EntityPercentage,
  PropertyPercentage, AbsolutePropertyCount, AbsolutePropertyPercentage,
  ExistingPropertyName, ExistingPropertyPath;\\nlet newFieldsPhase2
  =newFieldsPhase1 | where ExistingPropertyName  == \\\"\\\" or
  ExistingPropertyPath == \\\"\\\"   \\n| project entityname, propertyname,
  propertypath, SampleValue, EntityCount,PropertyCount, EntityPercentage,
  PropertyPercentage, AbsolutePropertyCount,
  AbsolutePropertyPercentage;   \\nlet comBinedData4 =
  materialize(comBinedData   \\n| join kind=inner newFieldsPhase2 on
  $left.entityname == $right.entityname and $left.propertyname ==
  $right.propertyname and $left.propertypath == $right.propertypath   \\n|
  project entityname, propertyname, propertypath, SampleEntityName,
  SamplePropertyName);   \\nlet sampleNamesRanked1 = comBinedData4
  |    \\n    order by SampleEntityName   \\n    | extend SampleEntityNameRank =
  row_rank(SampleEntityName)   \\n    | project entityname, propertyname,
  propertypath, SampleEntityName, SamplePropertyName,
  SampleEntityNameRank;   \\nlet sampleNamesRanked2 = comBinedData4
  |    \\n    order by SampleEntityName   \\n    | extend SamplePropertyRank =
  row_rank(SamplePropertyName)   \\n    | project entityname, propertyname,
  propertypath, SampleEntityName, SamplePropertyName,
  SamplePropertyRank;   \\nlet sampleNamesRanked =
  materialize(sampleNamesRanked1 | join kind=inner sampleNamesRanked2 on
  $left.entityname == $right.entityname and   \\n$left.propertyname ==
  $right.propertyname and $left.propertypath == $right.propertypath and
  $left.SampleEntityName == $right.SampleEntityName and $left.SamplePropertyName
  == $right.SamplePropertyName   \\n| project entityname, propertyname,
  propertypath, SampleEntityName, SamplePropertyName,SampleEntityNameRank,
  SamplePropertyRank);   \\nlet sampleEntityNames =
  materialize(sampleNamesRanked | project entityname, propertyname,
  propertypath, IsEntityNameRandom = false, SampleEntityNames =
  SampleEntityName);  \\nlet samplePropertyNames = materialize(sampleNamesRanked
  | project entityname, propertyname, propertypath, IsPropertyNameRandom =
  false, SamplePropertyNames = SamplePropertyName);  \\nlet finalData1
  =materialize(newFieldsPhase2 | join kind=leftouter sampleEntityNames on
  $left.entityname == $right.entityname and $left.propertyname ==
  $right.propertyname and $left.propertypath ==
  $right.propertypath);\\nfinalData1 | join kind=leftouter samplePropertyNames
  on $left.entityname == $right.entityname and $left.propertyname ==
  $right.propertyname and $left.propertypath == $right.propertypath\\n| project
  ProductCode = productCode, EntityName = entityname, PropertyName =
  propertyname, SampleValue,PropertyPath = propertypath, OwnerAlias =
  \\\"DEFAULTOWNERALIAS\\\", IsEntityNameRandom = FALSE, IsPropertyNameRandom =
  false, SampleEntityNames,SamplePropertyNames, EntityCount, PropertyCount,
  EntityPercentage,
  PropertyPercentage,AbsolutePropertyCount,AbsolutePropertyPercentage,
  CatalogHashId = hash_sha256(strcat(productCode, entityname, propertyname,
  propertypath));
  \\n}\",\"inputParameters\":[{\"name\":\"comBinedData\",\"columns\":[{\"name\":\
  \"entityname\",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\
  \":\"\"},{\"name\":\"propertyname\",\"cslType\":\"string\",\"type\":\"System.\
  String\",\"docstring\":\"\"},{\"name\":\"SampleValue\",\"cslType\":\"string\",\
  \"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\"propertypath\",\"c\
  slType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\
  \"SampleEntityName\",\"cslType\":\"string\",\"type\":\"System.String\",\"docs\
  tring\":\"\"},{\"name\":\"SamplePropertyName\",\"cslType\":\"string\",\"type\
  \":\"System.String\",\"docstring\":\"\"},{\"name\":\"EntityCount\",\"cslType\
  \":\"long\",\"type\":\"System.Int64\",\"docstring\":\"\"},{\"name\":\"Propert\
  yCountPerEntityName\",\"cslType\":\"long\",\"type\":\"System.Int64\",\"docstr\
  ing\":\"\"}]},{\"name\":\"productCode\",\"cslType\":\"string\",\"type\":\"Sys\
  tem.String\",\"docstring\":\"\"}]},{\"name\":\"GetScraperDiff\",\"docstring\":\
  \"Get catalog scraper\",\"body\":\"{\\r\\n//let start =
  make_datetime(\\\"2022-07-19T05:00:00.000Z\\\"); \\r\\nlet start =
  make_datetime(startTime);\\r\\nlet end = start + 60min;\\r\\nlet
  MeasuresProperty = RawEventsVSUnclassified  \\r\\n| where
  AdvancedServerTimestampUtc >= start  \\r\\n| where AdvancedServerTimestampUtc
  < end  \\r\\n| extend DataHandling = parse_json(DataHandling)\\r\\n| extend
  ingestTime = ingestion_time()\\r\\n| where tostring(DataHandling) contains
  \\\"unknown\\\"  \\r\\n| extend  MeasuresDataHandling =
  DataHandling[\\\"data\\\"][\\\"baseData\\\"][\\\"measurements\\\"]  \\r\\n|
  mv-expand MeasuresDataHandling  \\r\\n| extend property =
  tostring(MeasuresDataHandling)    \\r\\n| extend trimedPropertyStart =
  trim_start(\\\"{\\\", property)    \\r\\n| extend trimedPropertyEnd =
  trim_end(\\\"}\\\", trimedPropertyStart)    \\r\\n| extend result =
  split(trimedPropertyEnd, \\\":\\\")    \\r\\n| extend entityname = EventName,
  propertypath = \\\"$.Measures\\\", propertyname = tostring(result[0]), value =
  tostring(result[1])  \\r\\n| where value contains \\\"unknown\\\"\\r\\n|
  project entityname, propertypath, propertyname, EventId, ingestTime;\\r\\nlet
  MeasuresValues = RawEventsVSUnclassified  \\r\\n| where
  AdvancedServerTimestampUtc >= start  \\r\\n| where AdvancedServerTimestampUtc
  < end  \\r\\n|extend ingestTime = ingestion_time()\\r\\n| extend Measures =
  parse_json(Measures)  \\r\\n| mv-expand Measures  \\r\\n| extend property =
  tostring(Measures)    \\r\\n| extend trimedPropertyStart =
  trim_start(\\\"{\\\", property)    \\r\\n| extend trimedPropertyEnd =
  trim_end(\\\"}\\\", trimedPropertyStart)    \\r\\n| extend result =
  split(trimedPropertyEnd, \\\":\\\")    \\r\\n| extend entityname = EventName,
  propertypath = \\\"$.Measures\\\", propertyname = tostring(result[0]), Value =
  tostring(result[1])  \\r\\n| project entityname, propertypath, propertyname,
  EventId, ingestTime = ingestion_time(), Value;\\r\\nlet MeasuresRes =
  MeasuresProperty | join MeasuresValues on entityname, propertypath,
  propertyname, EventId\\r\\n| project  entityname, propertypath, propertyname,
  Value;\\r\\nlet PropertiesProperty = RawEventsVSUnclassified  \\r\\n| where
  AdvancedServerTimestampUtc >= start  \\r\\n| where AdvancedServerTimestampUtc
  < end  \\r\\n| extend DataHandling = parse_json(DataHandling)\\r\\n| extend
  ingestTime = ingestion_time()\\r\\n| where tostring(DataHandling) contains
  \\\"unknown\\\"  \\r\\n| extend  MeasuresDataHandling =
  DataHandling[\\\"data\\\"][\\\"baseData\\\"][\\\"properties\\\"]  \\r\\n|
  mv-expand MeasuresDataHandling  \\r\\n| extend property =
  tostring(MeasuresDataHandling)    \\r\\n| extend trimedPropertyStart =
  trim_start(\\\"{\\\", property)    \\r\\n| extend trimedPropertyEnd =
  trim_end(\\\"}\\\", trimedPropertyStart)    \\r\\n| extend result =
  split(trimedPropertyEnd, \\\":\\\")    \\r\\n| extend entityname = EventName,
  propertypath = \\\"$.Properties\\\", propertyname = tostring(result[0]), value
  = tostring(result[1])  \\r\\n| where value contains \\\"unknown\\\"\\r\\n|
  project entityname, propertypath, propertyname, EventId, ingestTime;\\r\\nlet
  PropertiesValues = RawEventsVSUnclassified  \\r\\n| where
  AdvancedServerTimestampUtc >= start  \\r\\n| where AdvancedServerTimestampUtc
  < end  \\r\\n|extend ingestTime = ingestion_time()\\r\\n| extend Properties =
  parse_json(Properties)  \\r\\n| mv-expand Properties  \\r\\n| extend property
  = tostring(Properties)    \\r\\n| extend trimedPropertyStart =
  trim_start(\\\"{\\\", property)    \\r\\n| extend trimedPropertyEnd =
  trim_end(\\\"}\\\", trimedPropertyStart)    \\r\\n| extend result =
  split(trimedPropertyEnd, \\\":\\\")    \\r\\n| extend entityname = EventName,
  propertypath = \\\"$.Properties\\\", propertyname = tostring(result[0]), Value
  = tostring(result[1])  \\r\\n| project entityname, propertypath, propertyname,
  EventId, ingestTime = ingestion_time(), Value;\\r\\nlet PropertiesRes =
  PropertiesProperty | join PropertiesValues on entityname, propertypath,
  propertyname, EventId\\r\\n| project  entityname, propertypath, propertyname,
  Value;\\r\\nlet blankRes = RawEventsVSUnclassified  \\r\\n| where
  AdvancedServerTimestampUtc >= start  \\r\\n| where AdvancedServerTimestampUtc
  < end\\r\\n| extend DataHandling = parse_json(DataHandling)\\r\\n| extend
  ingestTime = ingestion_time()\\r\\n| where tostring(DataHandling) contains
  \\\"unknown\\\"  \\r\\n| extend  MeasuresDataHandling =
  tostring(DataHandling[\\\"data\\\"][\\\"baseData\\\"][\\\"measurements\\\"]),
  PropertiesDataHandling =
  tostring(DataHandling[\\\"data\\\"][\\\"baseData\\\"][\\\"properties\\\"])   \
  \\r\\n| where MeasuresDataHandling != \\\"\\\" or PropertiesDataHandling !=
  \\\"\\\"\\r\\n| project entityname = EventName, propertypath = \\\"\\\",
  propertyname = \\\"(blank)\\\", Value = \\\"\\\";\\r\\nlet res = PropertiesRes
  | union MeasuresRes | union blankRes | project entityname, propertypath,
  propertyname =iff(propertyname == \\\"(blank)\\\",
  propertyname,  trim(\\\"\\\\\\\"\\\", propertyname)), Value =
  trim(\\\"\\\\\\\"\\\", Value);\\r\\nlet entityNameCounts = res | summarize
  count() by entityname; \\r\\nlet combinedData = res | summarize
  PropertyCountPerEntityName = count(), SampleValue = take_any(Value)  by
  entityname, propertypath, propertyname    \\r\\n| project entityname,
  propertypath, propertyname,PropertyCountPerEntityName,
  SampleValue;   \\r\\nlet comBinedData2 = combinedData | join kind=leftouter
  entityNameCounts on $left.entityname == $right.entityname  \\r\\n| project
  entityname, propertypath, propertyname, SampleValue,
  PropertyCountPerEntityName, EntityCount = count_; \\r\\nlet formatName =
  (name: string)  {    \\r\\n    let formatUUID = replace_regex(name,
  @\\\"[{(]?[0-9A-Fa-f]{8}[-]?([0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?\\\",
  \\\"    <UUID>\\\");    \\r\\n    let formatHEX = replace_regex(formatUUID,
  @\\\"0x([0-9a-fA-f]){8}\\\", \\\"<HEX>\\\");    \\r\\n     let formatHEX2 =
  replace_regex(formatHEX, @\\\"0x([0-9a-fA-f]){4}\\\",
  \\\"<HEX>\\\");    \\r\\n     replace_regex(formatHEX2,
  @\\\"([0-9])+(\\\\.*[0-9+])*\\\", \\\"<NUMBER>\\\");    \\r\\n };\\r\\nlet
  trimQuotation = (str: string)\\r\\n{\\r\\n   let trimedStart =
  trim_start(\\\"\\\\\\\"\\\", str);   \\r\\n   trim_end(\\\"\\\\\\\"\\\",
  trimedStart)   \\r\\n};\\r\\n let comBinedData3 = comBinedData2    \\r\\n |
  extend  entityname = formatName(entityname), propertyname =
  formatName(propertyname), SampleEntityName = entityname, SamplePropertyName =
  propertyname    \\r\\n | project entityname=trimQuotation(entityname),
  propertyname = trimQuotation(propertyname), SampleValue =
  trimQuotation(SampleValue), propertypath, SampleEntityName =
  trimQuotation(SampleEntityName), SamplePropertyName =
  trimQuotation(SamplePropertyName), EntityCount,
  PropertyCountPerEntityName;    \\r\\nlet generalizedData = comBinedData3 |
  summarize SampleValue = any(SampleValue), PropertyCount =
  sum(PropertyCountPerEntityName), EntityCount= sum(EntityCount) by
  entityname,propertyname, propertypath    \\r\\n| project entityname,
  propertyname, propertypath, SampleValue, PropertyCount, EntityCount;\\r\\nlet
  totalEntityCounts = toscalar(generalizedData | summarize TotalPropertyCount =
  sum(EntityCount) | take 1);    \\r\\nlet totalPropertyCounts = generalizedData
  | summarize TotalPropertyCount = sum(PropertyCount) by propertyname,
  propertypath    \\r\\n| project propertyname, propertypath,
  TotalPropertyCount;    \\r\\nlet totalPropertyCountsPerEntity =
  generalizedData | summarize TotalPropertyCountPerEntity = sum(PropertyCount)
  by entityname, propertyname, propertypath    \\r\\n| project entityname,
  propertyname, propertypath, TotalPropertyCountPerEntity;    \\r\\nlet
  generalizedData2 = generalizedData | extend TotalEntityCount =
  totalEntityCounts;\\r\\nlet generalizedData3 =generalizedData2| join
  kind=leftouter totalPropertyCounts  on $left.propertyname ==
  $right.propertyname and $left.propertypath == $right.propertypath    \\r\\n|
  join kind=leftouter totalPropertyCountsPerEntity on $left.propertyname ==
  $right.propertyname and $left.propertypath == $right.propertypath and
  $left.entityname == $right.entityname    \\r\\n| project entityname,
  propertyname, SampleValue, propertypath, EntityCount, PropertyCount,
  EntityPercentage = EntityCount*1.0 / totalEntityCounts, PropertyPercentage =
  PropertyCount*1.0/TotalPropertyCountPerEntity*100,  AbsolutePropertyPercentage
  = PropertyCount*1.0/TotalPropertyCount*100, AbsolutePropertyCount =
  TotalPropertyCount;    \\r\\nlet snapshot =
  cluster(\\\"https://ddtelinsights.kusto.windows.net\\\").database(\\\"DDTelIn\
  sights\\\").table(\\\"TelemetryCatalogViewSnapshot\\\")    \\r\\n| extend
  productcode = ProductCode, entityname = EntityName,  propertyname =
  PropertyName, owneralias = OwnerAlias, ishidden = IsHidden, commonproperty =
  CommonProperty, complete = Complete,  lastchangedby = LastChangedBy,
  propertypath = PropertyPath    \\r\\n| where productcode ==
  \\\"asimov.VisualStudio\\\"\\r\\n| project  productcode, propertyname,
  entityname, owneralias, ishidden, commonproperty, complete,
  lastchangedby,  propertypath;   \\r\\nlet productCode =
  \\\"asimov.VisualStudio\\\";    \\r\\nlet existingNonCommonProps = snapshot|
  where entityname != \\\"(blank)\\\" | distinct entityname, propertyname,
  propertypath;  \\r\\nlet existingCommonProps = snapshot| where entityname ==
  \\\"(blank)\\\" | distinct propertyname, propertypath; \\r\\nlet
  newFieldsPhase1 = generalizedData3 | join kind=leftouter
  existingNonCommonProps on $left.entityname == $right.entityname and
  $left.propertyname == $right.propertyname and $left.propertypath ==
  $right.propertypath   \\r\\n| join kind=leftouter existingCommonProps on
  $left.propertyname == $right.propertyname and $left.propertypath ==
  $right.propertypath   \\r\\n| extend  ExistingPropertyName = iff(propertyname1
  != \\\"(blank)\\\", propertyname1, propertyname2), ExistingPropertyPath =
  iff(propertypath1 !=\\\"\\\", propertypath1, propertypath2),entityname,
  propertyname, SampleValue, propertypath, EntityCount, PropertyCount,
  EntityPercentage, PropertyPercentage, AbsolutePropertyCount,
  AbsolutePropertyPercentage\\r\\n| project entityname, propertyname,
  SampleValue, propertypath, EntityCount, PropertyCount, EntityPercentage,
  PropertyPercentage, AbsolutePropertyCount, AbsolutePropertyPercentage,
  ExistingPropertyName, ExistingPropertyPath;\\r\\nlet newFieldsPhase2
  =newFieldsPhase1 | where ExistingPropertyName  == \\\"\\\" and
  ExistingPropertyPath == \\\"\\\"   \\r\\n| project entityname, propertyname,
  propertypath, SampleValue, EntityCount,PropertyCount, EntityPercentage,
  PropertyPercentage, AbsolutePropertyCount,
  AbsolutePropertyPercentage;   \\r\\nlet comBinedData4 =
  comBinedData3   \\r\\n| join kind=inner newFieldsPhase2 on $left.entityname ==
  $right.entityname and $left.propertyname == $right.propertyname and
  $left.propertypath == $right.propertypath   \\r\\n| project entityname,
  propertyname, propertypath, SampleEntityName, SamplePropertyName;   \\r\\nlet
  sampleNamesRanked1 = comBinedData4 |    \\r\\n    order by
  SampleEntityName   \\r\\n    | extend SampleEntityNameRank =
  row_rank(SampleEntityName)   \\r\\n    | project entityname, propertyname,
  propertypath, SampleEntityName, SamplePropertyName,
  SampleEntityNameRank;   \\r\\nlet sampleNamesRanked2 = comBinedData4
  |    \\r\\n    order by SampleEntityName   \\r\\n    | extend
  SamplePropertyRank = row_rank(SamplePropertyName)   \\r\\n    | project
  entityname, propertyname, propertypath, SampleEntityName, SamplePropertyName,
  SamplePropertyRank;   \\r\\nlet sampleNamesRanked = sampleNamesRanked1 | join
  kind=inner sampleNamesRanked2 on $left.entityname == $right.entityname
  and   \\r\\n$left.propertyname == $right.propertyname and $left.propertypath
  == $right.propertypath and $left.SampleEntityName == $right.SampleEntityName
  and $left.SamplePropertyName == $right.SamplePropertyName   \\r\\n| project
  entityname, propertyname, propertypath, SampleEntityName,
  SamplePropertyName,SampleEntityNameRank, SamplePropertyRank;   \\r\\nlet
  sampleEntityNames = sampleNamesRanked | project entityname, propertyname,
  propertypath, IsEntityNameRandom = false, SampleEntityNames =
  SampleEntityName;  \\r\\nlet samplePropertyNames = sampleNamesRanked | project
  entityname, propertyname, propertypath, IsPropertyNameRandom = false,
  SamplePropertyNames = SamplePropertyName;  \\r\\nlet finalData =
  newFieldsPhase2 | join kind=leftouter sampleEntityNames on $left.entityname ==
  $right.entityname and $left.propertyname == $right.propertyname and
  $left.propertypath == $right.propertypath  \\r\\n| join kind=leftouter
  samplePropertyNames on $left.entityname == $right.entityname and
  $left.propertyname == $right.propertyname and $left.propertypath ==
  $right.propertypath  \\r\\n| project ProductCode = productCode, EntityName =
  strcat(\\\"\\\\\\\"\\\", entityname, \\\"\\\\\\\"\\\"), PropertyName =
  propertyname, SampleValue,PropertyPath = propertypath, OwnerAlias =
  \\\"DEFAULTOWNERALIAS\\\", IsEntityNameRandom = FALSE, IsPropertyNameRandom =
  false, SampleEntityNames,SamplePropertyNames, EntityCount, PropertyCount,
  EntityPercentage,
  PropertyPercentage,AbsolutePropertyCount,AbsolutePropertyPercentage,
  CatalogHashId = hash_sha256(strcat(productCode, entityname, propertyname,
  propertypath));  \\r\\nfinalData\\r\\n}\",\"inputParameters\":[{\"name\":\"st\
  artTime\",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\
  \"}]},{\"name\":\"GettestvstelScraperDiff\",\"docstring\":\"Get catalog
  scraper\",\"body\":\"{\\r\\n//let start =
  make_datetime(\\\"2022-07-19T05:00:00.000Z\\\"); \\r\\nlet start =
  make_datetime(startTime);\\r\\nlet end = start + 15min;\\r\\nlet
  MeasuresProperty =
  cluster(\\\"https://ddtelvsrawedpprd.centralus.kusto.windows.net/\\\").databa\
  se(\\\"VS\\\").RawEventsVSUnclassified  \\r\\n| where
  AdvancedServerTimestampUtc >= start  \\r\\n| where AdvancedServerTimestampUtc
  < end  \\r\\n| extend DataHandling = parse_json(DataHandling)\\r\\n| extend
  ingestTime = ingestion_time()\\r\\n| where tostring(DataHandling) contains
  \\\"unknown\\\"  \\r\\n| extend  MeasuresDataHandling =
  DataHandling[\\\"data\\\"][\\\"baseData\\\"][\\\"measurements\\\"]  \\r\\n|
  mv-expand MeasuresDataHandling  \\r\\n| extend property =
  tostring(MeasuresDataHandling)    \\r\\n| extend trimedPropertyStart =
  trim_start(\\\"{\\\", property)    \\r\\n| extend trimedPropertyEnd =
  trim_end(\\\"}\\\", trimedPropertyStart)    \\r\\n| extend result =
  split(trimedPropertyEnd, \\\":\\\")    \\r\\n| extend entityname = EventName,
  propertypath = \\\"$.Measures\\\", propertyname = tostring(result[0]), value =
  tostring(result[1])  \\r\\n| where value contains \\\"unknown\\\"\\r\\n|
  project entityname, propertypath, propertyname, EventId, ingestTime;\\r\\nlet
  MeasuresValues =
  cluster(\\\"https://ddtelvsrawedpprd.centralus.kusto.windows.net/\\\").databa\
  se(\\\"VS\\\").RawEventsVSUnclassified  \\r\\n| where
  AdvancedServerTimestampUtc >= start  \\r\\n| where AdvancedServerTimestampUtc
  < end  \\r\\n|extend ingestTime = ingestion_time()\\r\\n| extend Measures =
  parse_json(Measures)  \\r\\n| mv-expand Measures  \\r\\n| extend property =
  tostring(Measures)    \\r\\n| extend trimedPropertyStart =
  trim_start(\\\"{\\\", property)    \\r\\n| extend trimedPropertyEnd =
  trim_end(\\\"}\\\", trimedPropertyStart)    \\r\\n| extend result =
  split(trimedPropertyEnd, \\\":\\\")    \\r\\n| extend entityname = EventName,
  propertypath = \\\"$.Measures\\\", propertyname = tostring(result[0]), Value =
  tostring(result[1])  \\r\\n| project entityname, propertypath, propertyname,
  EventId, ingestTime = ingestion_time(), Value;\\r\\nlet MeasuresRes =
  MeasuresProperty | join MeasuresValues on entityname, propertypath,
  propertyname, EventId\\r\\n| project  entityname, propertypath, propertyname,
  Value;\\r\\nlet PropertiesProperty =
  cluster(\\\"https://ddtelvsrawedpprd.centralus.kusto.windows.net/\\\").databa\
  se(\\\"VS\\\").RawEventsVSUnclassified  \\r\\n| where
  AdvancedServerTimestampUtc >= start  \\r\\n| where AdvancedServerTimestampUtc
  < end  \\r\\n| extend DataHandling = parse_json(DataHandling)\\r\\n| extend
  ingestTime = ingestion_time()\\r\\n| where tostring(DataHandling) contains
  \\\"unknown\\\"  \\r\\n| extend  MeasuresDataHandling =
  DataHandling[\\\"data\\\"][\\\"baseData\\\"][\\\"properties\\\"]  \\r\\n|
  mv-expand MeasuresDataHandling  \\r\\n| extend property =
  tostring(MeasuresDataHandling)    \\r\\n| extend trimedPropertyStart =
  trim_start(\\\"{\\\", property)    \\r\\n| extend trimedPropertyEnd =
  trim_end(\\\"}\\\", trimedPropertyStart)    \\r\\n| extend result =
  split(trimedPropertyEnd, \\\":\\\")    \\r\\n| extend entityname = EventName,
  propertypath = \\\"$.Properties\\\", propertyname = tostring(result[0]), value
  = tostring(result[1])  \\r\\n| where value contains \\\"unknown\\\"\\r\\n|
  project entityname, propertypath, propertyname, EventId, ingestTime;\\r\\nlet
  PropertiesValues =
  cluster(\\\"https://ddtelvsrawedpprd.centralus.kusto.windows.net/\\\").databa\
  se(\\\"VS\\\").RawEventsVSUnclassified  \\r\\n| where
  AdvancedServerTimestampUtc >= start  \\r\\n| where AdvancedServerTimestampUtc
  < end  \\r\\n|extend ingestTime = ingestion_time()\\r\\n| extend Properties =
  parse_json(Properties)  \\r\\n| mv-expand Properties  \\r\\n| extend property
  = tostring(Properties)    \\r\\n| extend trimedPropertyStart =
  trim_start(\\\"{\\\", property)    \\r\\n| extend trimedPropertyEnd =
  trim_end(\\\"}\\\", trimedPropertyStart)    \\r\\n| extend result =
  split(trimedPropertyEnd, \\\":\\\")    \\r\\n| extend entityname = EventName,
  propertypath = \\\"$.Properties\\\", propertyname = tostring(result[0]), Value
  = tostring(result[1])  \\r\\n| project entityname, propertypath, propertyname,
  EventId, ingestTime = ingestion_time(), Value;\\r\\nlet PropertiesRes =
  PropertiesProperty | join PropertiesValues on entityname, propertypath,
  propertyname, EventId\\r\\n| project  entityname, propertypath, propertyname,
  Value;\\r\\nlet blankRes =
  cluster(\\\"https://ddtelvsrawedpprd.centralus.kusto.windows.net/\\\").databa\
  se(\\\"VS\\\").RawEventsVSUnclassified  \\r\\n| where
  AdvancedServerTimestampUtc >= start  \\r\\n| where AdvancedServerTimestampUtc
  < end\\r\\n| extend DataHandling = parse_json(DataHandling)\\r\\n| extend
  ingestTime = ingestion_time()\\r\\n| where tostring(DataHandling) contains
  \\\"unknown\\\"  \\r\\n| extend  MeasuresDataHandling =
  tostring(DataHandling[\\\"data\\\"][\\\"baseData\\\"][\\\"measurements\\\"]),
  PropertiesDataHandling =
  tostring(DataHandling[\\\"data\\\"][\\\"baseData\\\"][\\\"properties\\\"])   \
  \\r\\n| where MeasuresDataHandling != \\\"\\\" or PropertiesDataHandling !=
  \\\"\\\"\\r\\n| project entityname = EventName, propertypath = \\\"\\\",
  propertyname = \\\"(blank)\\\", Value = \\\"\\\";\\r\\nlet res = PropertiesRes
  | union MeasuresRes | union blankRes | project entityname, propertypath,
  propertyname =iff(propertyname == \\\"(blank)\\\",
  propertyname,  trim(\\\"\\\\\\\"\\\", propertyname)), Value =
  trim(\\\"\\\\\\\"\\\", Value);\\r\\nlet entityNameCounts = res | summarize
  count() by entityname; \\r\\nlet combinedData = res | summarize
  PropertyCountPerEntityName = count(), SampleValue = take_any(Value)  by
  entityname, propertypath, propertyname    \\r\\n| project entityname,
  propertypath, propertyname,PropertyCountPerEntityName,
  SampleValue;   \\r\\nlet comBinedData2 = combinedData | join kind=leftouter
  entityNameCounts on $left.entityname == $right.entityname  \\r\\n| project
  entityname, propertypath, propertyname, SampleValue,
  PropertyCountPerEntityName, EntityCount = count_; \\r\\nlet formatName =
  (name: string)  {    \\r\\n    let formatUUID = replace_regex(name,
  @\\\"[{(]?[0-9A-Fa-f]{8}[-]?([0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?\\\",
  \\\"    <UUID>\\\");    \\r\\n    let formatHEX = replace_regex(formatUUID,
  @\\\"0x([0-9a-fA-f]){8}\\\", \\\"<HEX>\\\");    \\r\\n     let formatHEX2 =
  replace_regex(formatHEX, @\\\"0x([0-9a-fA-f]){4}\\\",
  \\\"<HEX>\\\");    \\r\\n     replace_regex(formatHEX2,
  @\\\"([0-9])+(\\\\.*[0-9+])*\\\", \\\"<NUMBER>\\\");    \\r\\n };\\r\\nlet
  trimQuotation = (str: string)\\r\\n{\\r\\n   let trimedStart =
  trim_start(\\\"\\\\\\\"\\\", str);   \\r\\n   trim_end(\\\"\\\\\\\"\\\",
  trimedStart)   \\r\\n};\\r\\n let comBinedData3 = comBinedData2    \\r\\n |
  extend  entityname = formatName(entityname), propertyname =
  formatName(propertyname), SampleEntityName = entityname, SamplePropertyName =
  propertyname    \\r\\n | project entityname=trimQuotation(entityname),
  propertyname = trimQuotation(propertyname), SampleValue =
  trimQuotation(SampleValue), propertypath, SampleEntityName =
  trimQuotation(SampleEntityName), SamplePropertyName =
  trimQuotation(SamplePropertyName), EntityCount,
  PropertyCountPerEntityName;    \\r\\nlet generalizedData = comBinedData3 |
  summarize SampleValue = any(SampleValue), PropertyCount =
  sum(PropertyCountPerEntityName), EntityCount= sum(EntityCount) by
  entityname,propertyname, propertypath    \\r\\n| project entityname,
  propertyname, propertypath, SampleValue, PropertyCount, EntityCount;\\r\\nlet
  totalEntityCounts = toscalar(generalizedData | summarize TotalPropertyCount =
  sum(EntityCount) | take 1);    \\r\\nlet totalPropertyCounts = generalizedData
  | summarize TotalPropertyCount = sum(PropertyCount) by propertyname,
  propertypath    \\r\\n| project propertyname, propertypath,
  TotalPropertyCount;    \\r\\nlet totalPropertyCountsPerEntity =
  generalizedData | summarize TotalPropertyCountPerEntity = sum(PropertyCount)
  by entityname, propertyname, propertypath    \\r\\n| project entityname,
  propertyname, propertypath, TotalPropertyCountPerEntity;    \\r\\nlet
  generalizedData2 = generalizedData | extend TotalEntityCount =
  totalEntityCounts;\\r\\nlet generalizedData3 =generalizedData2| join
  kind=leftouter totalPropertyCounts  on $left.propertyname ==
  $right.propertyname and $left.propertypath == $right.propertypath    \\r\\n|
  join kind=leftouter totalPropertyCountsPerEntity on $left.propertyname ==
  $right.propertyname and $left.propertypath == $right.propertypath and
  $left.entityname == $right.entityname    \\r\\n| project entityname,
  propertyname, SampleValue, propertypath, EntityCount, PropertyCount,
  EntityPercentage = EntityCount*1.0 / totalEntityCounts, PropertyPercentage =
  PropertyCount*1.0/TotalPropertyCountPerEntity*100,  AbsolutePropertyPercentage
  = PropertyCount*1.0/TotalPropertyCount*100, AbsolutePropertyCount =
  TotalPropertyCount;    \\r\\nlet snapshot =
  cluster(\\\"https://ddtelinsights.kusto.windows.net\\\").database(\\\"DDTelIn\
  sights\\\").table(\\\"TelemetryCatalogViewSnapshot\\\")    \\r\\n| extend
  productcode = ProductCode, entityname = EntityName,  propertyname =
  PropertyName, owneralias = OwnerAlias, ishidden = IsHidden, commonproperty =
  CommonProperty, complete = Complete,  lastchangedby = LastChangedBy,
  propertypath = PropertyPath    \\r\\n| where productcode ==
  \\\"asimov.VisualStudio\\\"\\r\\n| project  productcode, propertyname,
  entityname, owneralias, ishidden, commonproperty, complete,
  lastchangedby,  propertypath;   \\r\\nlet productCode =
  \\\"asimov.VisualStudio\\\";    \\r\\nlet existingNonCommonProps = snapshot|
  where entityname != \\\"(blank)\\\" | distinct entityname, propertyname,
  propertypath;  \\r\\nlet existingCommonProps = snapshot| where entityname ==
  \\\"(blank)\\\" | distinct propertyname, propertypath; \\r\\nlet
  newFieldsPhase1 = generalizedData3 | join kind=leftouter
  existingNonCommonProps on $left.entityname == $right.entityname and
  $left.propertyname == $right.propertyname and $left.propertypath ==
  $right.propertypath   \\r\\n| join kind=leftouter existingCommonProps on
  $left.propertyname == $right.propertyname and $left.propertypath ==
  $right.propertypath   \\r\\n| extend  ExistingPropertyName = iff(propertyname1
  != \\\"(blank)\\\", propertyname1, propertyname2), ExistingPropertyPath =
  iff(propertypath1 !=\\\"\\\", propertypath1, propertypath2),entityname,
  propertyname, SampleValue, propertypath, EntityCount, PropertyCount,
  EntityPercentage, PropertyPercentage, AbsolutePropertyCount,
  AbsolutePropertyPercentage\\r\\n| project entityname, propertyname,
  SampleValue, propertypath, EntityCount, PropertyCount, EntityPercentage,
  PropertyPercentage, AbsolutePropertyCount, AbsolutePropertyPercentage,
  ExistingPropertyName, ExistingPropertyPath;\\r\\nlet newFieldsPhase2
  =newFieldsPhase1 | where ExistingPropertyName  == \\\"\\\" and
  ExistingPropertyPath == \\\"\\\"   \\r\\n| project entityname, propertyname,
  propertypath, SampleValue, EntityCount,PropertyCount, EntityPercentage,
  PropertyPercentage, AbsolutePropertyCount,
  AbsolutePropertyPercentage;   \\r\\nlet comBinedData4 =
  comBinedData3   \\r\\n| join kind=inner newFieldsPhase2 on $left.entityname ==
  $right.entityname and $left.propertyname == $right.propertyname and
  $left.propertypath == $right.propertypath   \\r\\n| project entityname,
  propertyname, propertypath, SampleEntityName, SamplePropertyName;   \\r\\nlet
  sampleNamesRanked1 = comBinedData4 |    \\r\\n    order by
  SampleEntityName   \\r\\n    | extend SampleEntityNameRank =
  row_rank(SampleEntityName)   \\r\\n    | project entityname, propertyname,
  propertypath, SampleEntityName, SamplePropertyName,
  SampleEntityNameRank;   \\r\\nlet sampleNamesRanked2 = comBinedData4
  |    \\r\\n    order by SampleEntityName   \\r\\n    | extend
  SamplePropertyRank = row_rank(SamplePropertyName)   \\r\\n    | project
  entityname, propertyname, propertypath, SampleEntityName, SamplePropertyName,
  SamplePropertyRank;   \\r\\nlet sampleNamesRanked = sampleNamesRanked1 | join
  kind=inner sampleNamesRanked2 on $left.entityname == $right.entityname
  and   \\r\\n$left.propertyname == $right.propertyname and $left.propertypath
  == $right.propertypath and $left.SampleEntityName == $right.SampleEntityName
  and $left.SamplePropertyName == $right.SamplePropertyName   \\r\\n| project
  entityname, propertyname, propertypath, SampleEntityName,
  SamplePropertyName,SampleEntityNameRank, SamplePropertyRank;   \\r\\nlet
  sampleEntityNames = sampleNamesRanked | project entityname, propertyname,
  propertypath, IsEntityNameRandom = false, SampleEntityNames =
  SampleEntityName;  \\r\\nlet samplePropertyNames = sampleNamesRanked | project
  entityname, propertyname, propertypath, IsPropertyNameRandom = false,
  SamplePropertyNames = SamplePropertyName;  \\r\\nlet finalData =
  newFieldsPhase2 | join kind=leftouter sampleEntityNames on $left.entityname ==
  $right.entityname and $left.propertyname == $right.propertyname and
  $left.propertypath == $right.propertypath  \\r\\n| join kind=leftouter
  samplePropertyNames on $left.entityname == $right.entityname and
  $left.propertyname == $right.propertyname and $left.propertypath ==
  $right.propertypath  \\r\\n| project ProductCode = productCode, EntityName =
  strcat(\\\"\\\\\\\"\\\", entityname, \\\"\\\\\\\"\\\"), PropertyName =
  propertyname, SampleValue,PropertyPath = propertypath, OwnerAlias =
  \\\"DEFAULTOWNERALIAS\\\", IsEntityNameRandom = FALSE, IsPropertyNameRandom =
  false, SampleEntityNames,SamplePropertyNames, EntityCount, PropertyCount,
  EntityPercentage,
  PropertyPercentage,AbsolutePropertyCount,AbsolutePropertyPercentage,
  CatalogHashId = hash_sha256(strcat(productCode, entityname, propertyname,
  propertypath));  \\r\\nfinalData\\r\\n}\",\"inputParameters\":[{\"name\":\"st\
  artTime\",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\
  \"}]},{\"name\":\"GetComBinedDataFromEntities\",\"docstring\":\"Get catalog
  diff for specific entities\",\"body\":\"{\\r\\nlet entityNameCounts = res |
  summarize count() by entityname; \\r\\nlet combinedData = materialize(res |
  summarize PropertyCountPerEntityName = count(), SampleValue =
  take_any(Value)  by entityname, propertypath, propertyname    \\r\\n| project
  entityname, propertypath, propertyname,PropertyCountPerEntityName,
  SampleValue);   \\r\\nlet comBinedData2 = materialize(combinedData | join
  kind=leftouter entityNameCounts on $left.entityname ==
  $right.entityname  \\r\\n| project entityname, propertypath, propertyname,
  SampleValue, PropertyCountPerEntityName, EntityCount = count_); \\r\\nlet
  formatName = (name: string)  {    \\r\\n    let formatUUID =
  replace_regex(name,
  @\\\"[{(]?[0-9A-Fa-f]{8}[-]?([0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?\\\",
  \\\"    <UUID>\\\");    \\r\\n    let formatHEX = replace_regex(formatUUID,
  @\\\"0x([0-9a-fA-f]){8}\\\", \\\"<HEX>\\\");    \\r\\n     let formatHEX2 =
  replace_regex(formatHEX, @\\\"0x([0-9a-fA-f]){4}\\\",
  \\\"<HEX>\\\");    \\r\\n     replace_regex(formatHEX2,
  @\\\"([0-9])+(\\\\.*[0-9+])*\\\", \\\"<NUMBER>\\\");    \\r\\n };\\r\\nlet
  trimQuotation = (str: string)\\r\\n{\\r\\n   let trimedStart =
  trim_start(\\\"\\\\\\\"\\\", str);   \\r\\n   trim_end(\\\"\\\\\\\"\\\",
  trimedStart)   \\r\\n};\\r\\n comBinedData2    \\r\\n | extend  entityname =
  formatName(entityname), propertyname = formatName(propertyname),
  SampleEntityName = entityname, SamplePropertyName = propertyname    \\r\\n |
  project entityname=trimQuotation(entityname), propertyname =
  trimQuotation(propertyname), SampleValue = trimQuotation(SampleValue),
  propertypath, SampleEntityName = trimQuotation(SampleEntityName),
  SamplePropertyName = trimQuotation(SamplePropertyName), EntityCount,
  PropertyCountPerEntityName\\r\\n | summarize
  any(entityname,propertyname,SampleValue,propertypath,SampleEntityName,
  SamplePropertyName,EntityCount,PropertyCountPerEntityName) by entityname,
  propertyname, EntityCount, PropertyCountPerEntityName\\r\\n | project
  entityname,propertyname,SampleValue = any_SampleValue,propertypath=
  any_propertypath,SampleEntityName= any_SampleEntityName, SamplePropertyName =
  any_propertyname,EntityCount,PropertyCountPerEntityName\\r\\n}\",\"inputParam\
  eters\":[{\"name\":\"res\",\"columns\":[{\"name\":\"entityname\",\"cslType\":\
  \"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\"propert\
  ypath\",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"}\
  ,{\"name\":\"propertyname\",\"cslType\":\"string\",\"type\":\"System.String\",\
  \"docstring\":\"\"},{\"name\":\"Value\",\"cslType\":\"string\",\"type\":\"Sys\
  tem.String\",\"docstring\":\"\"}]},{\"name\":\"productCode\",\"cslType\":\"st\
  ring\",\"type\":\"System.String\",\"docstring\":\"\"}]},{\"name\":\"GetComple\
  tenessDev\",\"docstring\":\"Compleness\",\"body\":\"{\\n let start
  =  bin(now(), 1h) - startTime;\\n let end = bin(now(), 1h) - startTime +
  1h;\\n cluster('ddtelvsraw').database('VS').RawEventsVS\\n| where
  AdvancedServerTimestampUtc >= start and AdvancedServerTimestampUtc < end\\n|
  where IsInternal == 1\\n| where TelemetryApiVersion startswith
  '16.4.56+3a6'\\nor TelemetryApiVersion startswith '16.4.60'\\nor
  TelemetryApiVersion startswith '16.4.55'\\n| where TelemetryApiVersion
  !startswith '16.4.50' and TelemetryApiVersion !startswith '16.4.52'\\n|
  summarize by EventId\\n| summarize cProd=count(), dummy=1\\n| join
  hint.strategy = shuffle
  kind=leftouter\\n(\\ncluster('ddtelvsrawedpdev.southcentralus').database(\\\"\
  VSDev\\\").RawEventsVS\\n| where AdvancedServerTimestampUtc >= start and
  AdvancedServerTimestampUtc < end\\n| where IsInternal == 1\\n| where
  TelemetryApiVersion startswith '16.4.56+3a6'\\nor TelemetryApiVersion
  startswith '16.4.60'\\nor TelemetryApiVersion startswith '16.4.55'\\n| where
  TelemetryApiVersion !startswith '16.4.50' and TelemetryApiVersion !startswith
  '16.4.52'\\n| summarize by EventId\\n| summarize cEDP=count() ,
  dummy=1\\n)\\non dummy\\n| project env=\\\"VSDev\\\", start, end, cEDP,
  cProd,  classifiedCompletenesspercent=cEDP/todouble(cProd)}\",\"inputParamete\
  rs\":[{\"name\":\"startTime\",\"cslType\":\"timespan\",\"type\":\"System.Time\
  Span\",\"docstring\":\"\"}]},{\"name\":\"GetCompletenessPPE\",\"docstring\":\
  \"Compleness\",\"body\":\"{\\n let start =  bin(now(), 1h) - startTime;\\n let
  end = bin(now(), 1h) - startTime + 1h;\\n
  cluster('ddtelvsraw').database('VS').RawEventsVS\\n| where
  AdvancedServerTimestampUtc >= start and AdvancedServerTimestampUtc < end\\n|
  where IsInternal == 1\\n| where TelemetryApiVersion startswith
  '16.4.56+3a6'\\nor TelemetryApiVersion startswith '16.4.60'\\nor
  TelemetryApiVersion startswith '16.4.55'\\n| where TelemetryApiVersion
  !startswith '16.4.50' and TelemetryApiVersion !startswith '16.4.52'\\n|
  summarize by EventId\\n| summarize cProd=count(), dummy=1\\n| join
  hint.strategy = shuffle
  kind=leftouter\\n(\\ncluster('ddtelvsrawedpppe.southcentralus').database(\\\"\
  VSPPE\\\").RawEventsVS\\n| where AdvancedServerTimestampUtc >= start and
  AdvancedServerTimestampUtc < end\\n| where IsInternal == 1\\n| where
  TelemetryApiVersion startswith '16.4.56+3a6'\\nor TelemetryApiVersion
  startswith '16.4.60'\\nor TelemetryApiVersion startswith '16.4.55'\\n| where
  TelemetryApiVersion !startswith '16.4.50' and TelemetryApiVersion !startswith
  '16.4.52'\\n| summarize by EventId\\n| summarize cEDP=count() ,
  dummy=1\\n)\\non dummy\\n| project env=\\\"VSPPE\\\", start, end, cEDP,
  cProd,  classifiedCompletenesspercent=cEDP/todouble(cProd)}\",\"inputParamete\
  rs\":[{\"name\":\"startTime\",\"cslType\":\"timespan\",\"type\":\"System.Time\
  Span\",\"docstring\":\"\"}]},{\"name\":\"GetCompletenessUncDev\",\"docstring\
  \":\"Compleness\",\"body\":\"{\\n let start =  bin(now(), 1h) - startTime;\\n
  let end = start + 1h;\\n
  cluster('ddtelvsraw').database('VS').RawEventsVSUnclassified\\n| where
  AdvancedServerTimestampUtc >= start and AdvancedServerTimestampUtc < end\\n|
  where IsInternal == 1\\n| where TelemetryApiVersion startswith
  '16.4.56+3a6'\\nor TelemetryApiVersion startswith '16.4.60'\\nor
  TelemetryApiVersion startswith '16.4.55'\\n| where TelemetryApiVersion
  !startswith '16.4.50' and TelemetryApiVersion !startswith '16.4.52'\\n|
  summarize by EventId\\n| summarize cProd=count(), dummy=1\\n| join
  kind=leftouter\\n(\\ncluster('ddtelvsrawedpdev.southcentralus').database(\\\"\
  VSDev\\\").RawEventsVSUnclassified\\n| where AdvancedServerTimestampUtc >=
  start and AdvancedServerTimestampUtc < end\\n| where IsInternal == 1\\n| where
  TelemetryApiVersion startswith '16.4.56+3a6'\\nor TelemetryApiVersion
  startswith '16.4.60'\\nor TelemetryApiVersion startswith '16.4.55'\\n| where
  TelemetryApiVersion !startswith '16.4.50' and TelemetryApiVersion !startswith
  '16.4.52'\\n| summarize by EventId\\n| summarize cEDP=count() ,
  dummy=1\\n)\\non dummy\\n| project env=\\\"VSDev\\\", start, end, cEDP,
  cProd,  unclassifiedCompletenesspercent=cEDP/todouble(cProd)\\n}\",\"inputPar\
  ameters\":[{\"name\":\"startTime\",\"cslType\":\"timespan\",\"type\":\"System\
  .TimeSpan\",\"docstring\":\"\"}]},{\"name\":\"GetCompletenessUncPPE\",\"docst\
  ring\":\"Compleness\",\"body\":\"{\\n let start =  bin(now(), 1h) -
  startTime;\\n let end = start + 1h;\\n
  cluster('ddtelvsraw').database('VS').RawEventsVSUnclassified\\n| where
  AdvancedServerTimestampUtc > start and AdvancedServerTimestampUtc < end\\n|
  where IsInternal == 1\\n| where TelemetryApiVersion startswith
  '16.4.56+3a6'\\nor TelemetryApiVersion startswith '16.4.60'\\nor
  TelemetryApiVersion startswith '16.4.55'\\n| where TelemetryApiVersion
  !startswith '16.4.50' and TelemetryApiVersion !startswith '16.4.52'\\n|
  summarize by EventId\\n| summarize cProd=count(), dummy=1\\n| join
  kind=leftouter\\n(\\ncluster('ddtelvsrawedpppe.southcentralus').database(\\\"\
  VSPPE\\\").RawEventsVSUnclassified\\n| where AdvancedServerTimestampUtc >
  start and AdvancedServerTimestampUtc < end\\n| where IsInternal == 1\\n| where
  TelemetryApiVersion startswith '16.4.56+3a6'\\nor TelemetryApiVersion
  startswith '16.4.60'\\nor TelemetryApiVersion startswith '16.4.55'\\n| where
  TelemetryApiVersion !startswith '16.4.50' and TelemetryApiVersion !startswith
  '16.4.52'\\n| summarize by EventId\\n| summarize cEDP=count() ,
  dummy=1\\n)\\non dummy\\n| project env=\\\"VSPPE\\\", start, end, cEDP,
  cProd,  unclassifiedCompletenesspercent=cEDP/todouble(cProd)}\",\"inputParame\
  ters\":[{\"name\":\"startTime\",\"cslType\":\"timespan\",\"type\":\"System.Ti\
  meSpan\",\"docstring\":\"\"}]},{\"name\":\"GetLatestCompleteness\",\"docstring\
  \":\"Compleness\",\"body\":\"{\\nGetCompletenessDev(0h)\\n|
  union\\nGetCompletenessDev(1h)\\n| union \\nGetCompletenessDev(2h)\\n| union
  \\nGetCompletenessDev(3h)\\n| union \\nGetCompletenessDev(4h)\\n| union
  \\nGetCompletenessDev(5h)\\n| union \\nGetCompletenessDev(6h)\\n| union
  \\nGetCompletenessDev(7h)\\n| union \\nGetCompletenessDev(8h)\\n| union
  \\nGetCompletenessDev(9h)\\n| union \\nGetCompletenessDev(10h)\\n| union
  \\nGetCompletenessDev(11h)\\n| union \\nGetCompletenessDev(12h)\\n| union
  \\nGetCompletenessDev(13h)\\n| union\\nGetCompletenessDev(14h)\\n| union
  \\nGetCompletenessDev(15h)\\n| union \\nGetCompletenessDev(16h)\\n| union
  \\nGetCompletenessDev(17h)\\n| union \\nGetCompletenessDev(18h)\\n| union
  \\nGetCompletenessDev(19h)\\n| union \\nGetCompletenessDev(20h)\\n| union
  \\nGetCompletenessDev(21h)\\n| union \\nGetCompletenessDev(22h)\\n| union
  \\nGetCompletenessDev(23h)\\n| union \\nGetCompletenessDev(24h)\\n| union
  \\nGetCompletenessPPE(0h)\\n| union\\nGetCompletenessPPE(1h)\\n| union
  \\nGetCompletenessPPE(2h)\\n| union \\nGetCompletenessPPE(3h)\\n| union
  \\nGetCompletenessPPE(4h)\\n| union \\nGetCompletenessPPE(5h)\\n| union
  \\nGetCompletenessPPE(6h)\\n| union \\nGetCompletenessPPE(7h)\\n| union
  \\nGetCompletenessPPE(8h)\\n| union \\nGetCompletenessPPE(9h)\\n| union
  \\nGetCompletenessPPE(10h)\\n| union \\nGetCompletenessPPE(11h)\\n| union
  \\nGetCompletenessPPE(12h)\\n| union \\nGetCompletenessPPE(13h)\\n|
  union\\nGetCompletenessPPE(14h)\\n| union \\nGetCompletenessPPE(15h)\\n| union
  \\nGetCompletenessPPE(16h)\\n| union \\nGetCompletenessPPE(17h)\\n| union
  \\nGetCompletenessPPE(18h)\\n| union \\nGetCompletenessPPE(19h)\\n| union
  \\nGetCompletenessPPE(20h)\\n| union \\nGetCompletenessPPE(21h)\\n| union
  \\nGetCompletenessPPE(22h)\\n| union \\nGetCompletenessPPE(23h)\\n| union
  \\nGetCompletenessPPE(24h)\\n|\\norder by start desc, env
  asc\\n}\",\"inputParameters\":[]},{\"name\":\"GetLatestUncCompleteness\",\"do\
  cstring\":\"Compleness\",\"body\":\"{\\nGetCompletenessUncDev(0h)\\n|
  union\\nGetCompletenessUncDev(1h)\\n| union \\nGetCompletenessUncDev(2h)\\n|
  union \\nGetCompletenessUncDev(3h)\\n| union \\nGetCompletenessUncDev(4h)\\n|
  union \\nGetCompletenessUncDev(5h)\\n| union \\nGetCompletenessUncDev(6h)\\n|
  union \\nGetCompletenessUncDev(7h)\\n| union \\nGetCompletenessUncDev(8h)\\n|
  union \\nGetCompletenessUncDev(9h)\\n| union \\nGetCompletenessUncDev(10h)\\n|
  union \\nGetCompletenessUncDev(11h)\\n| union
  \\nGetCompletenessUncDev(12h)\\n| union \\nGetCompletenessUncDev(13h)\\n|
  union\\nGetCompletenessUncDev(14h)\\n| union \\nGetCompletenessUncDev(15h)\\n|
  union \\nGetCompletenessUncDev(16h)\\n| union
  \\nGetCompletenessUncDev(17h)\\n| union \\nGetCompletenessUncDev(18h)\\n|
  union \\nGetCompletenessUncDev(19h)\\n| union
  \\nGetCompletenessUncDev(20h)\\n| union \\nGetCompletenessUncDev(21h)\\n|
  union \\nGetCompletenessUncDev(22h)\\n| union
  \\nGetCompletenessUncDev(23h)\\n| union \\nGetCompletenessUncDev(24h)\\n|
  union \\nGetCompletenessUncPPE(0h)\\n| union\\nGetCompletenessUncPPE(1h)\\n|
  union \\nGetCompletenessUncPPE(2h)\\n| union \\nGetCompletenessUncPPE(3h)\\n|
  union \\nGetCompletenessUncPPE(4h)\\n| union \\nGetCompletenessUncPPE(5h)\\n|
  union \\nGetCompletenessUncPPE(6h)\\n| union \\nGetCompletenessUncPPE(7h)\\n|
  union \\nGetCompletenessUncPPE(8h)\\n| union \\nGetCompletenessUncPPE(9h)\\n|
  union \\nGetCompletenessUncPPE(10h)\\n| union
  \\nGetCompletenessUncPPE(11h)\\n| union \\nGetCompletenessUncPPE(12h)\\n|union
  \\nGetCompletenessUncPPE(13h)\\n| union\\nGetCompletenessUncPPE(14h)\\n| union
  \\nGetCompletenessUncPPE(15h)\\n| union \\nGetCompletenessUncPPE(16h)\\n|
  union \\nGetCompletenessUncPPE(17h)\\n| union
  \\nGetCompletenessUncPPE(18h)\\n| union \\nGetCompletenessUncPPE(19h)\\n|
  union \\nGetCompletenessUncPPE(20h)\\n| union
  \\nGetCompletenessUncPPE(21h)\\n| union \\nGetCompletenessUncPPE(22h)\\n|
  union \\nGetCompletenessUncPPE(23h)\\n| union
  \\nGetCompletenessUncPPE(24h)\\n| order by start desc, env asc
  \\n}\",\"inputParameters\":[]},{\"name\":\"Automation_test_Steps\",\"docstring\
  \":\"test\",\"body\":\"{\\r\\ndatatable(Step:string, Description:string,
  Parameters:dynamic)\\r\\n[\\r\\n    \\\"NewAction\\\", \\\"Action
  description\\\",
  dynamic(null),\\r\\n]\\r\\n}\",\"inputParameters\":[]},{\"name\":\"Automation\
  _test_Transitions\",\"docstring\":\"test\",\"body\":\"{\\r\\ndatatable(Step:s\
  tring, NextStep:string)\\r\\n[\\r\\n    \\\"NewAction\\\",
  \\\"NewAction2\\\",\\r\\n]\\r\\n}\",\"inputParameters\":[]},{\"name\":\"DbgHR\
  esultToError\",\"docstring\":\"Converts an HResult value into the
  corresponding error text\",\"body\":\"{\\r\\n    let HResult = tohex(hr,
  8);\\r\\n    strcat(\\r\\n        case (\\r\\n            HResult ==
  \\\"00000000\\\", \\\"Success!\\\",\\r\\n            HResult ==
  \\\"80004003\\\", \\\"Null ref\\\",\\r\\n            HResult ==
  \\\"80040d42\\\", \\\"EnC not supported\\\",\\r\\n            HResult ==
  \\\"80040d43\\\", \\\"SuppressIldasmAttribute
  found\\\",\\r\\n            HResult == \\\"8007000b\\\", \\\"Bad image
  format\\\",\\r\\n            HResult == \\\"8007000e\\\", \\\"Out of
  memory\\\",\\r\\n            HResult == \\\"80070057\\\", \\\"Invalid
  argument\\\",\\r\\n            HResult == \\\"80131040\\\", \\\"Assembly
  manifest does not match reference\\\",\\r\\n            HResult ==
  \\\"80131047\\\", \\\"Invalid assembly name or
  codebase\\\",\\r\\n            HResult == \\\"80131500\\\", \\\"Generic
  exception\\\",\\r\\n            HResult == \\\"80131502\\\", \\\"Argument out
  of range\\\",\\r\\n            HResult == \\\"80131509\\\", \\\"Invalid
  operation\\\",\\r\\n            HResult == \\\"8013153b\\\", \\\"Operation
  cancelled\\\",\\r\\n            HResult == \\\"80131622\\\", \\\"Object
  disposed\\\",\\r\\n            HResult == \\\"80131c35\\\", \\\"Assembly
  missing metadata\\\",\\r\\n            HResult == \\\"8ede0009\\\", \\\"XAPI
  creator required\\\",\\r\\n            HResult == \\\"8ede0012\\\", \\\"XAPI
  remote closed\\\",\\r\\n            HResult == \\\"8ede0015\\\", \\\"XAPI
  object already exists\\\",\\r\\n            HResult == \\\"8ede0018\\\",
  \\\"XAPI data item not found\\\",\\r\\n            HResult ==
  \\\"92330010\\\", \\\"Invalid memory address\\\",\\r\\n            HResult ==
  \\\"92330093\\\", \\\"No debug
  info\\\",\\r\\n            \\\"Unknown\\\"\\r\\n        ),\\r\\n        \\\"
  (0x\\\", HResult,
  \\\")\\\")\\r\\n}\",\"inputParameters\":[{\"name\":\"hr\",\"cslType\":\"int\",\
  \"type\":\"System.Int32\",\"docstring\":\"\"}]}]},\"prefixForClusterSchema:ht\
  tps://ddtelvsraw.kusto.windows.net\":{\"cluster\":{\"connectionString\":\"htt\
  ps://ddtelvsraw.kusto.windows.net\",\"databases\":[{\"name\":\"VS\",\"majorVe\
  rsion\":4657,\"minorVersion\":84034,\"tables\":[{\"entityType\":\"Table\",\"n\
  ame\":\"RawEventsVS\",\"columns\":[{\"name\":\"EventId\",\"type\":\"string\",\
  \"docstring\":\"\"},{\"name\":\"EventName\",\"type\":\"string\",\"docstring\":\
  \"\"},{\"name\":\"ABExpFlights\",\"type\":\"string\",\"docstring\":\"\"},{\"n\
  ame\":\"ActiveProjectId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"ActivityCorrelationId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"ActivityDurationInMilliseconds\",\"type\":\"long\",\"docstring\":\"\"},{\"n\
  ame\":\"ActivityEndInTicks\",\"type\":\"long\",\"docstring\":\"\"},{\"name\":\
  \"ActivityStartInTicks\",\"type\":\"long\",\"docstring\":\"\"},{\"name\":\"Ad\
  vancedServerTimestampUtc\",\"type\":\"datetime\",\"docstring\":\"\"},{\"name\
  \":\"AltSecId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Attributes\
  \",\"type\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"BranchName\",\"type\":\
  \"string\",\"docstring\":\"\"},{\"name\":\"BuildManifestId\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"BuildNumber\",\"type\":\"real\",\"docstring\
  \":\"\"},{\"name\":\"BuildNumberFull\",\"type\":\"real\",\"docstring\":\"\"},{\
  \"name\":\"BuildNumberMajorVersion\",\"type\":\"real\",\"docstring\":\"\"},{\
  \"name\":\"BuildNumberMicroUpdate\",\"type\":\"string\",\"docstring\":\"\"},{\
  \"name\":\"BuildNumberMinorVersion\",\"type\":\"real\",\"docstring\":\"\"},{\
  \"name\":\"BuildWorkloads\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"ChannelId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ChannelMani\
  festId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ClientTimestampU\
  tc\",\"type\":\"datetime\",\"docstring\":\"\"},{\"name\":\"ClrVersion\",\"type\
  \":\"string\",\"docstring\":\"\"},{\"name\":\"CommandGuid\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"CommandName\",\"type\":\"string\",\"docstr\
  ing\":\"\"},{\"name\":\"CommandSource\",\"type\":\"string\",\"docstring\":\"\
  \"},{\"name\":\"ComputerName\",\"type\":\"string\",\"docstring\":\"\"},{\"name\
  \":\"CpuArchitecture\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Cp\
  uCount\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"CpuDataWidth\",\"t\
  ype\":\"real\",\"docstring\":\"\"},{\"name\":\"CpuDescription\",\"type\":\"st\
  ring\",\"docstring\":\"\"},{\"name\":\"CpuFamily\",\"type\":\"real\",\"docstr\
  ing\":\"\"},{\"name\":\"CpuFrequency\",\"type\":\"real\",\"docstring\":\"\"},{\
  \"name\":\"CpuModel\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"CpuSt\
  epping\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"DataHandlingTags\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"DisplayColorDepth\",\"type\
  \":\"real\",\"docstring\":\"\"},{\"name\":\"DisplayCount\",\"type\":\"real\",\
  \"docstring\":\"\"},{\"name\":\"DisplayDpi\",\"type\":\"real\",\"docstring\":\
  \"\"},{\"name\":\"DisplayHighContrastEnabled\",\"type\":\"bool\",\"docstring\
  \":\"\"},{\"name\":\"DisplayHighContrastName\",\"type\":\"string\",\"docstring\
  \":\"\"},{\"name\":\"DisplayResolution\",\"type\":\"real\",\"docstring\":\"\"\
  },{\"name\":\"DisplayScalingFactor\",\"type\":\"real\",\"docstring\":\"\"},{\
  \"name\":\"DisplayVirtualXY\",\"type\":\"string\",\"docstring\":\"\"},{\"name\
  \":\"DisplayXY\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ExeName\
  \",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ExeVersion\",\"type\":\
  \"string\",\"docstring\":\"\"},{\"name\":\"ExtensionName\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"Extensions\",\"type\":\"dynamic\",\"docstr\
  ing\":\"\"},{\"name\":\"ExtensionTypeName\",\"type\":\"string\",\"docstring\":\
  \"\"},{\"name\":\"ExtensionVersion\",\"type\":\"string\",\"docstring\":\"\"},{\
  \"name\":\"FeedbackSessionId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\
  \":\"Flags\",\"type\":\"long\",\"docstring\":\"\"},{\"name\":\"GeoCity\",\"ty\
  pe\":\"string\",\"docstring\":\"\"},{\"name\":\"GeoCountryRegionIso\",\"type\
  \":\"string\",\"docstring\":\"\"},{\"name\":\"HardDriveFreeVolumeSize\",\"type\
  \":\"real\",\"docstring\":\"\"},{\"name\":\"HardDriveOsMediaType\",\"type\":\
  \"string\",\"docstring\":\"\"},{\"name\":\"HardDriveProductFileSystemType\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"HardDriveProductMediaType\
  \",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"HardDriveTotalSize\",\
  \"type\":\"real\",\"docstring\":\"\"},{\"name\":\"HardDriveTotalVolumeSize\",\
  \"type\":\"real\",\"docstring\":\"\"},{\"name\":\"IdentityProvider\",\"type\":\
  \"string\",\"docstring\":\"\"},{\"name\":\"IdSubject\",\"type\":\"string\",\"\
  docstring\":\"\"},{\"name\":\"InLowImpactMode\",\"type\":\"string\",\"docstri\
  ng\":\"\"},{\"name\":\"IsInternal\",\"type\":\"bool\",\"docstring\":\"\"},{\"\
  name\":\"IsOptedIn\",\"type\":\"bool\",\"docstring\":\"\"},{\"name\":\"LastSo\
  lutionBuildId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Locale\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"LocaleCode\",\"type\":\"s\
  tring\",\"docstring\":\"\"},{\"name\":\"MacAddressHash\",\"type\":\"string\",\
  \"docstring\":\"\"},{\"name\":\"MachineId\",\"type\":\"string\",\"docstring\":\
  \"\"},{\"name\":\"ManifestId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\
  \":\"Measures\",\"type\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"MicroUpd\
  ateVersion\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"NovaProperti\
  es\",\"type\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"OID\",\"type\":\"st\
  ring\",\"docstring\":\"\"},{\"name\":\"Os\",\"type\":\"string\",\"docstring\":\
  \"\"},{\"name\":\"OsLocale\",\"type\":\"string\",\"docstring\":\"\"},{\"name\
  \":\"OsLocaleUser\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"OsLoc\
  aleUserUi\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"OsMajorVersion\
  \",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"OsMinorVersion\",\"type\
  \":\"real\",\"docstring\":\"\"},{\"name\":\"OsServicePack\",\"type\":\"real\",\
  \"docstring\":\"\"},{\"name\":\"OsVersion\",\"type\":\"string\",\"docstring\":\
  \"\"},{\"name\":\"PackageGuid\",\"type\":\"string\",\"docstring\":\"\"},{\"na\
  me\":\"PackageLoadType\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"\
  PersonalizationVsId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Pro\
  duct\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ProjectId\",\"type\
  \":\"string\",\"docstring\":\"\"},{\"name\":\"Properties\",\"type\":\"dynamic\
  \",\"docstring\":\"\"},{\"name\":\"PUID\",\"type\":\"string\",\"docstring\":\"\
  \"},{\"name\":\"RamTotal\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"\
  SequenceNumber\",\"type\":\"int\",\"docstring\":\"\"},{\"name\":\"SessionId\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Sku\",\"type\":\"string\",\
  \"docstring\":\"\"},{\"name\":\"SkuId\",\"type\":\"real\",\"docstring\":\"\"}\
  ,{\"name\":\"SolutionId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"SolutionSessionId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Tags\
  \",\"type\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"TelemetryApiVersion\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"TelemetryChannelUsed\",\"\
  type\":\"string\",\"docstring\":\"\"},{\"name\":\"TimeSinceSessionStart\",\"t\
  ype\":\"long\",\"docstring\":\"\"},{\"name\":\"UserAlias\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"UserDomainName\",\"type\":\"string\",\"doc\
  string\":\"\"},{\"name\":\"UserId\",\"type\":\"string\",\"docstring\":\"\"},{\
  \"name\":\"UtcDeviceClass\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"UtcDeviceLocalId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"UtcF\
  lags\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"UtcGlobalDeviceId\
  \",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"VirtualMachineAzureIma\
  ge\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"VsId\",\"type\":\"st\
  ring\",\"docstring\":\"\"},{\"name\":\"VsInstanceId\",\"type\":\"string\",\"d\
  ocstring\":\"\"},{\"name\":\"VsLocale\",\"type\":\"string\",\"docstring\":\"\
  \"},{\"name\":\"WorkloadTags\",\"type\":\"string\",\"docstring\":\"\"},{\"name\
  \":\"SessionRole\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Connec\
  tedSessionId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"RemoteSess\
  ionIds\",\"type\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"CloudEnvironmen\
  tId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"IsAzureCloudEnviron\
  ment\",\"type\":\"bool\",\"docstring\":\"\"},{\"name\":\"RemoteRepoURLInternal\
  \",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"DataModelActionType\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"DataModelCorrelationId\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"DataModelActionResult\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"VsCoreIs64BitProcess\",\"\
  type\":\"bool\",\"docstring\":\"\"},{\"name\":\"ProcessArchitecture\",\"type\
  \":\"string\",\"docstring\":\"\"},{\"name\":\"SchemaVersion\",\"type\":\"stri\
  ng\",\"docstring\":\"\"}]},{\"entityType\":\"Table\",\"name\":\"RawEventsVSBl\
  essed\",\"columns\":[{\"name\":\"EventId\",\"type\":\"string\",\"docstring\":\
  \"\"},{\"name\":\"EventName\",\"type\":\"string\",\"docstring\":\"\"},{\"name\
  \":\"ABExpFlights\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Activ\
  eProjectId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ActivityCorr\
  elationId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ActivityDurat\
  ionInMilliseconds\",\"type\":\"long\",\"docstring\":\"\"},{\"name\":\"Activit\
  yEndInTicks\",\"type\":\"long\",\"docstring\":\"\"},{\"name\":\"ActivityStart\
  InTicks\",\"type\":\"long\",\"docstring\":\"\"},{\"name\":\"AdvancedServerTim\
  estampUtc\",\"type\":\"datetime\",\"docstring\":\"\"},{\"name\":\"AltSecId\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Attributes\",\"type\":\"d\
  ynamic\",\"docstring\":\"\"},{\"name\":\"BranchName\",\"type\":\"string\",\"d\
  ocstring\":\"\"},{\"name\":\"BuildManifestId\",\"type\":\"string\",\"docstring\
  \":\"\"},{\"name\":\"BuildNumber\",\"type\":\"real\",\"docstring\":\"\"},{\"n\
  ame\":\"BuildNumberFull\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"B\
  uildNumberMajorVersion\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"Bu\
  ildNumberMicroUpdate\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Bu\
  ildNumberMinorVersion\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"Bui\
  ldWorkloads\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ChannelId\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ChannelManifestId\",\"type\
  \":\"string\",\"docstring\":\"\"},{\"name\":\"ClientTimestampUtc\",\"type\":\
  \"datetime\",\"docstring\":\"\"},{\"name\":\"ClrVersion\",\"type\":\"string\",\
  \"docstring\":\"\"},{\"name\":\"CommandGuid\",\"type\":\"string\",\"docstring\
  \":\"\"},{\"name\":\"CommandName\",\"type\":\"string\",\"docstring\":\"\"},{\
  \"name\":\"CommandSource\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"ComputerName\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"CpuArchi\
  tecture\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"CpuCount\",\"ty\
  pe\":\"real\",\"docstring\":\"\"},{\"name\":\"CpuDataWidth\",\"type\":\"real\
  \",\"docstring\":\"\"},{\"name\":\"CpuDescription\",\"type\":\"string\",\"doc\
  string\":\"\"},{\"name\":\"CpuFamily\",\"type\":\"real\",\"docstring\":\"\"},{\
  \"name\":\"CpuFrequency\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"C\
  puModel\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"CpuStepping\",\"t\
  ype\":\"real\",\"docstring\":\"\"},{\"name\":\"DataHandlingTags\",\"type\":\"\
  string\",\"docstring\":\"\"},{\"name\":\"DisplayColorDepth\",\"type\":\"real\
  \",\"docstring\":\"\"},{\"name\":\"DisplayCount\",\"type\":\"real\",\"docstri\
  ng\":\"\"},{\"name\":\"DisplayDpi\",\"type\":\"real\",\"docstring\":\"\"},{\"\
  name\":\"DisplayHighContrastEnabled\",\"type\":\"bool\",\"docstring\":\"\"},{\
  \"name\":\"DisplayHighContrastName\",\"type\":\"string\",\"docstring\":\"\"},{\
  \"name\":\"DisplayResolution\",\"type\":\"real\",\"docstring\":\"\"},{\"name\
  \":\"DisplayScalingFactor\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\
  \"DisplayVirtualXY\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Disp\
  layXY\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ExeName\",\"type\
  \":\"string\",\"docstring\":\"\"},{\"name\":\"ExeVersion\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"ExtensionName\",\"type\":\"string\",\"docs\
  tring\":\"\"},{\"name\":\"Extensions\",\"type\":\"dynamic\",\"docstring\":\"\
  \"},{\"name\":\"ExtensionTypeName\",\"type\":\"string\",\"docstring\":\"\"},{\
  \"name\":\"ExtensionVersion\",\"type\":\"string\",\"docstring\":\"\"},{\"name\
  \":\"FeedbackSessionId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"\
  Flags\",\"type\":\"long\",\"docstring\":\"\"},{\"name\":\"GeoCity\",\"type\":\
  \"string\",\"docstring\":\"\"},{\"name\":\"GeoCountryRegionIso\",\"type\":\"s\
  tring\",\"docstring\":\"\"},{\"name\":\"HardDriveFreeVolumeSize\",\"type\":\"\
  real\",\"docstring\":\"\"},{\"name\":\"HardDriveOsMediaType\",\"type\":\"stri\
  ng\",\"docstring\":\"\"},{\"name\":\"HardDriveProductFileSystemType\",\"type\
  \":\"string\",\"docstring\":\"\"},{\"name\":\"HardDriveProductMediaType\",\"t\
  ype\":\"string\",\"docstring\":\"\"},{\"name\":\"HardDriveTotalSize\",\"type\
  \":\"real\",\"docstring\":\"\"},{\"name\":\"HardDriveTotalVolumeSize\",\"type\
  \":\"real\",\"docstring\":\"\"},{\"name\":\"IdentityProvider\",\"type\":\"str\
  ing\",\"docstring\":\"\"},{\"name\":\"IdSubject\",\"type\":\"string\",\"docst\
  ring\":\"\"},{\"name\":\"InLowImpactMode\",\"type\":\"string\",\"docstring\":\
  \"\"},{\"name\":\"IsInternal\",\"type\":\"bool\",\"docstring\":\"\"},{\"name\
  \":\"IsOptedIn\",\"type\":\"bool\",\"docstring\":\"\"},{\"name\":\"LastSoluti\
  onBuildId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Locale\",\"ty\
  pe\":\"string\",\"docstring\":\"\"},{\"name\":\"LocaleCode\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"MacAddressHash\",\"type\":\"string\",\"doc\
  string\":\"\"},{\"name\":\"MachineId\",\"type\":\"string\",\"docstring\":\"\"\
  },{\"name\":\"ManifestId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"Measures\",\"type\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"MicroUpdate\
  Version\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"NovaProperties\
  \",\"type\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"OID\",\"type\":\"stri\
  ng\",\"docstring\":\"\"},{\"name\":\"Os\",\"type\":\"string\",\"docstring\":\"\
  \"},{\"name\":\"OsLocale\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"OsLocaleUser\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"OsLocale\
  UserUi\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"OsMajorVersion\",\
  \"type\":\"real\",\"docstring\":\"\"},{\"name\":\"OsMinorVersion\",\"type\":\
  \"real\",\"docstring\":\"\"},{\"name\":\"OsServicePack\",\"type\":\"real\",\"\
  docstring\":\"\"},{\"name\":\"OsVersion\",\"type\":\"string\",\"docstring\":\"\
  \"},{\"name\":\"PackageGuid\",\"type\":\"string\",\"docstring\":\"\"},{\"name\
  \":\"PackageLoadType\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Pe\
  rsonalizationVsId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Produ\
  ct\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ProjectId\",\"type\":\
  \"string\",\"docstring\":\"\"},{\"name\":\"Properties\",\"type\":\"dynamic\",\
  \"docstring\":\"\"},{\"name\":\"PUID\",\"type\":\"string\",\"docstring\":\"\"\
  },{\"name\":\"RamTotal\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"Se\
  quenceNumber\",\"type\":\"int\",\"docstring\":\"\"},{\"name\":\"SessionId\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Sku\",\"type\":\"string\",\
  \"docstring\":\"\"},{\"name\":\"SkuId\",\"type\":\"real\",\"docstring\":\"\"}\
  ,{\"name\":\"SolutionId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"SolutionSessionId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Tags\
  \",\"type\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"TelemetryApiVersion\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"TelemetryChannelUsed\",\"\
  type\":\"string\",\"docstring\":\"\"},{\"name\":\"TimeSinceSessionStart\",\"t\
  ype\":\"long\",\"docstring\":\"\"},{\"name\":\"UserAlias\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"UserDomainName\",\"type\":\"string\",\"doc\
  string\":\"\"},{\"name\":\"UserId\",\"type\":\"string\",\"docstring\":\"\"},{\
  \"name\":\"UtcDeviceClass\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"UtcDeviceLocalId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"UtcF\
  lags\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"UtcGlobalDeviceId\
  \",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"VirtualMachineAzureIma\
  ge\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"VsId\",\"type\":\"st\
  ring\",\"docstring\":\"\"},{\"name\":\"VsInstanceId\",\"type\":\"string\",\"d\
  ocstring\":\"\"},{\"name\":\"VsLocale\",\"type\":\"string\",\"docstring\":\"\
  \"},{\"name\":\"WorkloadTags\",\"type\":\"string\",\"docstring\":\"\"},{\"name\
  \":\"SessionRole\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Connec\
  tedSessionId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"RemoteSess\
  ionIds\",\"type\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"CloudEnvironmen\
  tId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"IsAzureCloudEnviron\
  ment\",\"type\":\"bool\",\"docstring\":\"\"},{\"name\":\"RemoteRepoURLInternal\
  \",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"DataModelActionType\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"DataModelCorrelationId\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"DataModelActionResult\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"VsCoreIs64BitProcess\",\"\
  type\":\"bool\",\"docstring\":\"\"},{\"name\":\"ProcessArchitecture\",\"type\
  \":\"string\",\"docstring\":\"\"},{\"name\":\"SchemaVersion\",\"type\":\"stri\
  ng\",\"docstring\":\"\"}]},{\"entityType\":\"Table\",\"name\":\"RawEventsVSIn\
  ternal\",\"columns\":[{\"name\":\"EventId\",\"type\":\"string\",\"docstring\":\
  \"\"},{\"name\":\"EventName\",\"type\":\"string\",\"docstring\":\"\"},{\"name\
  \":\"ABExpFlights\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Activ\
  eProjectId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ActivityCorr\
  elationId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ActivityDurat\
  ionInMilliseconds\",\"type\":\"long\",\"docstring\":\"\"},{\"name\":\"Activit\
  yEndInTicks\",\"type\":\"long\",\"docstring\":\"\"},{\"name\":\"ActivityStart\
  InTicks\",\"type\":\"long\",\"docstring\":\"\"},{\"name\":\"AdvancedServerTim\
  estampUtc\",\"type\":\"datetime\",\"docstring\":\"\"},{\"name\":\"AltSecId\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Attributes\",\"type\":\"d\
  ynamic\",\"docstring\":\"\"},{\"name\":\"BranchName\",\"type\":\"string\",\"d\
  ocstring\":\"\"},{\"name\":\"BuildManifestId\",\"type\":\"string\",\"docstring\
  \":\"\"},{\"name\":\"BuildNumber\",\"type\":\"real\",\"docstring\":\"\"},{\"n\
  ame\":\"BuildNumberFull\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"B\
  uildNumberMajorVersion\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"Bu\
  ildNumberMicroUpdate\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Bu\
  ildNumberMinorVersion\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"Bui\
  ldWorkloads\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ChannelId\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ChannelManifestId\",\"type\
  \":\"string\",\"docstring\":\"\"},{\"name\":\"ClientTimestampUtc\",\"type\":\
  \"datetime\",\"docstring\":\"\"},{\"name\":\"ClrVersion\",\"type\":\"string\",\
  \"docstring\":\"\"},{\"name\":\"CommandGuid\",\"type\":\"string\",\"docstring\
  \":\"\"},{\"name\":\"CommandName\",\"type\":\"string\",\"docstring\":\"\"},{\
  \"name\":\"CommandSource\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"ComputerName\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"CpuArchi\
  tecture\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"CpuCount\",\"ty\
  pe\":\"real\",\"docstring\":\"\"},{\"name\":\"CpuDataWidth\",\"type\":\"real\
  \",\"docstring\":\"\"},{\"name\":\"CpuDescription\",\"type\":\"string\",\"doc\
  string\":\"\"},{\"name\":\"CpuFamily\",\"type\":\"real\",\"docstring\":\"\"},{\
  \"name\":\"CpuFrequency\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"C\
  puModel\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"CpuStepping\",\"t\
  ype\":\"real\",\"docstring\":\"\"},{\"name\":\"DataHandlingTags\",\"type\":\"\
  string\",\"docstring\":\"\"},{\"name\":\"DisplayColorDepth\",\"type\":\"real\
  \",\"docstring\":\"\"},{\"name\":\"DisplayCount\",\"type\":\"real\",\"docstri\
  ng\":\"\"},{\"name\":\"DisplayDpi\",\"type\":\"real\",\"docstring\":\"\"},{\"\
  name\":\"DisplayHighContrastEnabled\",\"type\":\"bool\",\"docstring\":\"\"},{\
  \"name\":\"DisplayHighContrastName\",\"type\":\"string\",\"docstring\":\"\"},{\
  \"name\":\"DisplayResolution\",\"type\":\"real\",\"docstring\":\"\"},{\"name\
  \":\"DisplayScalingFactor\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\
  \"DisplayVirtualXY\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Disp\
  layXY\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ExeName\",\"type\
  \":\"string\",\"docstring\":\"\"},{\"name\":\"ExeVersion\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"ExtensionName\",\"type\":\"string\",\"docs\
  tring\":\"\"},{\"name\":\"Extensions\",\"type\":\"dynamic\",\"docstring\":\"\
  \"},{\"name\":\"ExtensionTypeName\",\"type\":\"string\",\"docstring\":\"\"},{\
  \"name\":\"ExtensionVersion\",\"type\":\"string\",\"docstring\":\"\"},{\"name\
  \":\"FeedbackSessionId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"\
  Flags\",\"type\":\"long\",\"docstring\":\"\"},{\"name\":\"GeoCity\",\"type\":\
  \"string\",\"docstring\":\"\"},{\"name\":\"GeoCountryRegionIso\",\"type\":\"s\
  tring\",\"docstring\":\"\"},{\"name\":\"HardDriveFreeVolumeSize\",\"type\":\"\
  real\",\"docstring\":\"\"},{\"name\":\"HardDriveOsMediaType\",\"type\":\"stri\
  ng\",\"docstring\":\"\"},{\"name\":\"HardDriveProductFileSystemType\",\"type\
  \":\"string\",\"docstring\":\"\"},{\"name\":\"HardDriveProductMediaType\",\"t\
  ype\":\"string\",\"docstring\":\"\"},{\"name\":\"HardDriveTotalSize\",\"type\
  \":\"real\",\"docstring\":\"\"},{\"name\":\"HardDriveTotalVolumeSize\",\"type\
  \":\"real\",\"docstring\":\"\"},{\"name\":\"IdentityProvider\",\"type\":\"str\
  ing\",\"docstring\":\"\"},{\"name\":\"IdSubject\",\"type\":\"string\",\"docst\
  ring\":\"\"},{\"name\":\"InLowImpactMode\",\"type\":\"string\",\"docstring\":\
  \"\"},{\"name\":\"IsInternal\",\"type\":\"bool\",\"docstring\":\"\"},{\"name\
  \":\"IsOptedIn\",\"type\":\"bool\",\"docstring\":\"\"},{\"name\":\"LastSoluti\
  onBuildId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Locale\",\"ty\
  pe\":\"string\",\"docstring\":\"\"},{\"name\":\"LocaleCode\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"MacAddressHash\",\"type\":\"string\",\"doc\
  string\":\"\"},{\"name\":\"MachineId\",\"type\":\"string\",\"docstring\":\"\"\
  },{\"name\":\"ManifestId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"Measures\",\"type\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"MicroUpdate\
  Version\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"NovaProperties\
  \",\"type\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"OID\",\"type\":\"stri\
  ng\",\"docstring\":\"\"},{\"name\":\"Os\",\"type\":\"string\",\"docstring\":\"\
  \"},{\"name\":\"OsLocale\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"OsLocaleUser\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"OsLocale\
  UserUi\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"OsMajorVersion\",\
  \"type\":\"real\",\"docstring\":\"\"},{\"name\":\"OsMinorVersion\",\"type\":\
  \"real\",\"docstring\":\"\"},{\"name\":\"OsServicePack\",\"type\":\"real\",\"\
  docstring\":\"\"},{\"name\":\"OsVersion\",\"type\":\"string\",\"docstring\":\"\
  \"},{\"name\":\"PackageGuid\",\"type\":\"string\",\"docstring\":\"\"},{\"name\
  \":\"PackageLoadType\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Pe\
  rsonalizationVsId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Produ\
  ct\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ProjectId\",\"type\":\
  \"string\",\"docstring\":\"\"},{\"name\":\"Properties\",\"type\":\"dynamic\",\
  \"docstring\":\"\"},{\"name\":\"PUID\",\"type\":\"string\",\"docstring\":\"\"\
  },{\"name\":\"RamTotal\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"Se\
  quenceNumber\",\"type\":\"int\",\"docstring\":\"\"},{\"name\":\"SessionId\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Sku\",\"type\":\"string\",\
  \"docstring\":\"\"},{\"name\":\"SkuId\",\"type\":\"real\",\"docstring\":\"\"}\
  ,{\"name\":\"SolutionId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"SolutionSessionId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Tags\
  \",\"type\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"TelemetryApiVersion\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"TelemetryChannelUsed\",\"\
  type\":\"string\",\"docstring\":\"\"},{\"name\":\"TimeSinceSessionStart\",\"t\
  ype\":\"long\",\"docstring\":\"\"},{\"name\":\"UserAlias\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"UserDomainName\",\"type\":\"string\",\"doc\
  string\":\"\"},{\"name\":\"UserId\",\"type\":\"string\",\"docstring\":\"\"},{\
  \"name\":\"UtcDeviceClass\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"UtcDeviceLocalId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"UtcF\
  lags\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"UtcGlobalDeviceId\
  \",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"VirtualMachineAzureIma\
  ge\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"VsId\",\"type\":\"st\
  ring\",\"docstring\":\"\"},{\"name\":\"VsInstanceId\",\"type\":\"string\",\"d\
  ocstring\":\"\"},{\"name\":\"VsLocale\",\"type\":\"string\",\"docstring\":\"\
  \"},{\"name\":\"WorkloadTags\",\"type\":\"string\",\"docstring\":\"\"},{\"name\
  \":\"SessionRole\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Connec\
  tedSessionId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"RemoteSess\
  ionIds\",\"type\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"CloudEnvironmen\
  tId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"IsAzureCloudEnviron\
  ment\",\"type\":\"bool\",\"docstring\":\"\"},{\"name\":\"RemoteRepoURLInternal\
  \",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"DataModelActionType\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"DataModelCorrelationId\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"DataModelActionResult\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"VsCoreIs64BitProcess\",\"\
  type\":\"bool\",\"docstring\":\"\"},{\"name\":\"ProcessArchitecture\",\"type\
  \":\"string\",\"docstring\":\"\"},{\"name\":\"SchemaVersion\",\"type\":\"stri\
  ng\",\"docstring\":\"\"}]},{\"entityType\":\"Table\",\"name\":\"RawEventsVSUn\
  classified\",\"columns\":[{\"name\":\"EventId\",\"type\":\"string\",\"docstri\
  ng\":\"\"},{\"name\":\"EventName\",\"type\":\"string\",\"docstring\":\"\"},{\
  \"name\":\"ABExpFlights\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"ActiveProjectId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Activ\
  ityCorrelationId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Activi\
  tyDurationInMilliseconds\",\"type\":\"long\",\"docstring\":\"\"},{\"name\":\"\
  ActivityEndInTicks\",\"type\":\"long\",\"docstring\":\"\"},{\"name\":\"Activi\
  tyStartInTicks\",\"type\":\"long\",\"docstring\":\"\"},{\"name\":\"AdvancedSe\
  rverTimestampUtc\",\"type\":\"datetime\",\"docstring\":\"\"},{\"name\":\"AltS\
  ecId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Attributes\",\"type\
  \":\"dynamic\",\"docstring\":\"\"},{\"name\":\"BranchName\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"BuildManifestId\",\"type\":\"string\",\"do\
  cstring\":\"\"},{\"name\":\"BuildNumber\",\"type\":\"real\",\"docstring\":\"\
  \"},{\"name\":\"BuildNumberFull\",\"type\":\"real\",\"docstring\":\"\"},{\"na\
  me\":\"BuildNumberMajorVersion\",\"type\":\"real\",\"docstring\":\"\"},{\"name\
  \":\"BuildNumberMicroUpdate\",\"type\":\"string\",\"docstring\":\"\"},{\"name\
  \":\"BuildNumberMinorVersion\",\"type\":\"real\",\"docstring\":\"\"},{\"name\
  \":\"BuildWorkloads\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Cha\
  nnelId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ChannelManifestId\
  \",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ClientTimestampUtc\",\
  \"type\":\"datetime\",\"docstring\":\"\"},{\"name\":\"ClrVersion\",\"type\":\
  \"string\",\"docstring\":\"\"},{\"name\":\"CommandGuid\",\"type\":\"string\",\
  \"docstring\":\"\"},{\"name\":\"CommandName\",\"type\":\"string\",\"docstring\
  \":\"\"},{\"name\":\"CommandSource\",\"type\":\"string\",\"docstring\":\"\"},{\
  \"name\":\"ComputerName\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"CpuArchitecture\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"CpuCo\
  unt\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"CpuDataWidth\",\"type\
  \":\"real\",\"docstring\":\"\"},{\"name\":\"CpuDescription\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"CpuFamily\",\"type\":\"real\",\"docstring\
  \":\"\"},{\"name\":\"CpuFrequency\",\"type\":\"real\",\"docstring\":\"\"},{\"\
  name\":\"CpuModel\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"CpuStep\
  ping\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"DataHandling\",\"type\
  \":\"dynamic\",\"docstring\":\"\"},{\"name\":\"DataHandlingTags\",\"type\":\"\
  string\",\"docstring\":\"\"},{\"name\":\"DisplayColorDepth\",\"type\":\"real\
  \",\"docstring\":\"\"},{\"name\":\"DisplayCount\",\"type\":\"real\",\"docstri\
  ng\":\"\"},{\"name\":\"DisplayDpi\",\"type\":\"real\",\"docstring\":\"\"},{\"\
  name\":\"DisplayHighContrastEnabled\",\"type\":\"bool\",\"docstring\":\"\"},{\
  \"name\":\"DisplayHighContrastName\",\"type\":\"string\",\"docstring\":\"\"},{\
  \"name\":\"DisplayResolution\",\"type\":\"real\",\"docstring\":\"\"},{\"name\
  \":\"DisplayScalingFactor\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\
  \"DisplayVirtualXY\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Disp\
  layXY\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ExeName\",\"type\
  \":\"string\",\"docstring\":\"\"},{\"name\":\"ExeVersion\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"ExtensionName\",\"type\":\"string\",\"docs\
  tring\":\"\"},{\"name\":\"Extensions\",\"type\":\"dynamic\",\"docstring\":\"\
  \"},{\"name\":\"ExtensionTypeName\",\"type\":\"string\",\"docstring\":\"\"},{\
  \"name\":\"ExtensionVersion\",\"type\":\"string\",\"docstring\":\"\"},{\"name\
  \":\"FeedbackSessionId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"\
  Flags\",\"type\":\"long\",\"docstring\":\"\"},{\"name\":\"GeoCity\",\"type\":\
  \"string\",\"docstring\":\"\"},{\"name\":\"GeoCountryRegionIso\",\"type\":\"s\
  tring\",\"docstring\":\"\"},{\"name\":\"HardDriveFreeVolumeSize\",\"type\":\"\
  real\",\"docstring\":\"\"},{\"name\":\"HardDriveOsMediaType\",\"type\":\"stri\
  ng\",\"docstring\":\"\"},{\"name\":\"HardDriveProductFileSystemType\",\"type\
  \":\"string\",\"docstring\":\"\"},{\"name\":\"HardDriveProductMediaType\",\"t\
  ype\":\"string\",\"docstring\":\"\"},{\"name\":\"HardDriveTotalSize\",\"type\
  \":\"real\",\"docstring\":\"\"},{\"name\":\"HardDriveTotalVolumeSize\",\"type\
  \":\"real\",\"docstring\":\"\"},{\"name\":\"IdentityProvider\",\"type\":\"str\
  ing\",\"docstring\":\"\"},{\"name\":\"IdSubject\",\"type\":\"string\",\"docst\
  ring\":\"\"},{\"name\":\"InLowImpactMode\",\"type\":\"string\",\"docstring\":\
  \"\"},{\"name\":\"IsInternal\",\"type\":\"bool\",\"docstring\":\"\"},{\"name\
  \":\"IsOptedIn\",\"type\":\"bool\",\"docstring\":\"\"},{\"name\":\"LastSoluti\
  onBuildId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Locale\",\"ty\
  pe\":\"string\",\"docstring\":\"\"},{\"name\":\"LocaleCode\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"MacAddressHash\",\"type\":\"string\",\"doc\
  string\":\"\"},{\"name\":\"MachineId\",\"type\":\"string\",\"docstring\":\"\"\
  },{\"name\":\"ManifestId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"Measures\",\"type\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"MicroUpdate\
  Version\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"NovaProperties\
  \",\"type\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"OID\",\"type\":\"stri\
  ng\",\"docstring\":\"\"},{\"name\":\"Os\",\"type\":\"string\",\"docstring\":\"\
  \"},{\"name\":\"OsLocale\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"OsLocaleUser\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"OsLocale\
  UserUi\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"OsMajorVersion\",\
  \"type\":\"real\",\"docstring\":\"\"},{\"name\":\"OsMinorVersion\",\"type\":\
  \"real\",\"docstring\":\"\"},{\"name\":\"OsServicePack\",\"type\":\"real\",\"\
  docstring\":\"\"},{\"name\":\"OsVersion\",\"type\":\"string\",\"docstring\":\"\
  \"},{\"name\":\"PackageGuid\",\"type\":\"string\",\"docstring\":\"\"},{\"name\
  \":\"PackageLoadType\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Pe\
  rsonalizationVsId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Produ\
  ct\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ProjectId\",\"type\":\
  \"string\",\"docstring\":\"\"},{\"name\":\"Properties\",\"type\":\"dynamic\",\
  \"docstring\":\"\"},{\"name\":\"PUID\",\"type\":\"string\",\"docstring\":\"\"\
  },{\"name\":\"RamTotal\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"Se\
  quenceNumber\",\"type\":\"int\",\"docstring\":\"\"},{\"name\":\"SessionId\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Sku\",\"type\":\"string\",\
  \"docstring\":\"\"},{\"name\":\"SkuId\",\"type\":\"real\",\"docstring\":\"\"}\
  ,{\"name\":\"SolutionId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"SolutionSessionId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Tags\
  \",\"type\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"TelemetryApiVersion\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"TelemetryChannelUsed\",\"\
  type\":\"string\",\"docstring\":\"\"},{\"name\":\"TimeSinceSessionStart\",\"t\
  ype\":\"long\",\"docstring\":\"\"},{\"name\":\"UserAlias\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"UserDomainName\",\"type\":\"string\",\"doc\
  string\":\"\"},{\"name\":\"UserId\",\"type\":\"string\",\"docstring\":\"\"},{\
  \"name\":\"UtcDeviceClass\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"UtcDeviceLocalId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"UtcF\
  lags\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"UtcGlobalDeviceId\
  \",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"VirtualMachineAzureIma\
  ge\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"VsId\",\"type\":\"st\
  ring\",\"docstring\":\"\"},{\"name\":\"VsInstanceId\",\"type\":\"string\",\"d\
  ocstring\":\"\"},{\"name\":\"VsLocale\",\"type\":\"string\",\"docstring\":\"\
  \"},{\"name\":\"WorkloadTags\",\"type\":\"string\",\"docstring\":\"\"},{\"name\
  \":\"SessionRole\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Connec\
  tedSessionId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"RemoteSess\
  ionIds\",\"type\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"CloudEnvironmen\
  tId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"IsAzureCloudEnviron\
  ment\",\"type\":\"bool\",\"docstring\":\"\"},{\"name\":\"RemoteRepoURLInternal\
  \",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"DataModelActionType\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"DataModelCorrelationId\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"DataModelActionResult\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"VsCoreIs64BitProcess\",\"\
  type\":\"bool\",\"docstring\":\"\"},{\"name\":\"ProcessArchitecture\",\"type\
  \":\"string\",\"docstring\":\"\"},{\"name\":\"SchemaVersion\",\"type\":\"stri\
  ng\",\"docstring\":\"\"},{\"name\":\"GdprQuarantined\",\"type\":\"dynamic\",\
  \"docstring\":\"\"}]},{\"entityType\":\"Table\",\"name\":\"RawEventsVSStaging\
  \",\"columns\":[{\"name\":\"EventId\",\"type\":\"string\",\"docstring\":\"\"}\
  ,{\"name\":\"EventName\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"\
  ABExpFlights\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ActiveProj\
  ectId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ActivityCorrelati\
  onId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ActivityDurationIn\
  Milliseconds\",\"type\":\"long\",\"docstring\":\"\"},{\"name\":\"ActivityEndI\
  nTicks\",\"type\":\"long\",\"docstring\":\"\"},{\"name\":\"ActivityStartInTic\
  ks\",\"type\":\"long\",\"docstring\":\"\"},{\"name\":\"AdvancedServerTimestam\
  pUtc\",\"type\":\"datetime\",\"docstring\":\"\"},{\"name\":\"AltSecId\",\"type\
  \":\"string\",\"docstring\":\"\"},{\"name\":\"Attributes\",\"type\":\"dynamic\
  \",\"docstring\":\"\"},{\"name\":\"BranchName\",\"type\":\"string\",\"docstri\
  ng\":\"\"},{\"name\":\"BuildManifestId\",\"type\":\"string\",\"docstring\":\"\
  \"},{\"name\":\"BuildNumber\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\
  \"BuildNumberFull\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"BuildNu\
  mberMajorVersion\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"BuildNum\
  berMicroUpdate\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"BuildNum\
  berMinorVersion\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"BuildWork\
  loads\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ChannelId\",\"type\
  \":\"string\",\"docstring\":\"\"},{\"name\":\"ChannelManifestId\",\"type\":\"\
  string\",\"docstring\":\"\"},{\"name\":\"ClientTimestampUtc\",\"type\":\"date\
  time\",\"docstring\":\"\"},{\"name\":\"ClrVersion\",\"type\":\"string\",\"doc\
  string\":\"\"},{\"name\":\"CommandGuid\",\"type\":\"string\",\"docstring\":\"\
  \"},{\"name\":\"CommandName\",\"type\":\"string\",\"docstring\":\"\"},{\"name\
  \":\"CommandSource\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Comp\
  uterName\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"CpuArchitecture\
  \",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"CpuCount\",\"type\":\"\
  real\",\"docstring\":\"\"},{\"name\":\"CpuDataWidth\",\"type\":\"real\",\"doc\
  string\":\"\"},{\"name\":\"CpuDescription\",\"type\":\"string\",\"docstring\":\
  \"\"},{\"name\":\"CpuFamily\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\
  \"CpuFrequency\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"CpuModel\",\
  \"type\":\"real\",\"docstring\":\"\"},{\"name\":\"CpuStepping\",\"type\":\"re\
  al\",\"docstring\":\"\"},{\"name\":\"DataHandlingTags\",\"type\":\"string\",\
  \"docstring\":\"\"},{\"name\":\"DisplayColorDepth\",\"type\":\"real\",\"docst\
  ring\":\"\"},{\"name\":\"DisplayCount\",\"type\":\"real\",\"docstring\":\"\"}\
  ,{\"name\":\"DisplayDpi\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"D\
  isplayHighContrastEnabled\",\"type\":\"bool\",\"docstring\":\"\"},{\"name\":\
  \"DisplayHighContrastName\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"DisplayResolution\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"Displ\
  ayScalingFactor\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"DisplayVi\
  rtualXY\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"DisplayXY\",\"t\
  ype\":\"string\",\"docstring\":\"\"},{\"name\":\"ExeName\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"ExeVersion\",\"type\":\"string\",\"docstri\
  ng\":\"\"},{\"name\":\"ExtensionName\",\"type\":\"string\",\"docstring\":\"\"\
  },{\"name\":\"Extensions\",\"type\":\"dynamic\",\"docstring\":\"\"},{\"name\":\
  \"ExtensionTypeName\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Ext\
  ensionVersion\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"FeedbackS\
  essionId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Flags\",\"type\
  \":\"long\",\"docstring\":\"\"},{\"name\":\"GeoCity\",\"type\":\"string\",\"d\
  ocstring\":\"\"},{\"name\":\"GeoCountryRegionIso\",\"type\":\"string\",\"docs\
  tring\":\"\"},{\"name\":\"HardDriveFreeVolumeSize\",\"type\":\"real\",\"docst\
  ring\":\"\"},{\"name\":\"HardDriveOsMediaType\",\"type\":\"string\",\"docstri\
  ng\":\"\"},{\"name\":\"HardDriveProductFileSystemType\",\"type\":\"string\",\
  \"docstring\":\"\"},{\"name\":\"HardDriveProductMediaType\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"HardDriveTotalSize\",\"type\":\"real\",\"d\
  ocstring\":\"\"},{\"name\":\"HardDriveTotalVolumeSize\",\"type\":\"real\",\"d\
  ocstring\":\"\"},{\"name\":\"IdentityProvider\",\"type\":\"string\",\"docstri\
  ng\":\"\"},{\"name\":\"IdSubject\",\"type\":\"string\",\"docstring\":\"\"},{\
  \"name\":\"InLowImpactMode\",\"type\":\"string\",\"docstring\":\"\"},{\"name\
  \":\"IsInternal\",\"type\":\"bool\",\"docstring\":\"\"},{\"name\":\"IsOptedIn\
  \",\"type\":\"bool\",\"docstring\":\"\"},{\"name\":\"LastSolutionBuildId\",\"\
  type\":\"string\",\"docstring\":\"\"},{\"name\":\"Locale\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"LocaleCode\",\"type\":\"string\",\"docstri\
  ng\":\"\"},{\"name\":\"MacAddressHash\",\"type\":\"string\",\"docstring\":\"\
  \"},{\"name\":\"MachineId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"ManifestId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Measures\",\
  \"type\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"MicroUpdateVersion\",\"t\
  ype\":\"string\",\"docstring\":\"\"},{\"name\":\"NovaProperties\",\"type\":\"\
  dynamic\",\"docstring\":\"\"},{\"name\":\"OID\",\"type\":\"string\",\"docstri\
  ng\":\"\"},{\"name\":\"Os\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"OsLocale\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"OsLocaleUser\
  \",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"OsLocaleUserUi\",\"type\
  \":\"string\",\"docstring\":\"\"},{\"name\":\"OsMajorVersion\",\"type\":\"real\
  \",\"docstring\":\"\"},{\"name\":\"OsMinorVersion\",\"type\":\"real\",\"docst\
  ring\":\"\"},{\"name\":\"OsServicePack\",\"type\":\"real\",\"docstring\":\"\"\
  },{\"name\":\"OsVersion\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"PackageGuid\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"PackageLo\
  adType\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"PersonalizationV\
  sId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Product\",\"type\":\
  \"string\",\"docstring\":\"\"},{\"name\":\"ProjectId\",\"type\":\"string\",\"\
  docstring\":\"\"},{\"name\":\"Properties\",\"type\":\"dynamic\",\"docstring\":\
  \"\"},{\"name\":\"PUID\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"\
  RamTotal\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"SequenceNumber\",\
  \"type\":\"int\",\"docstring\":\"\"},{\"name\":\"SessionId\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"Sku\",\"type\":\"string\",\"docstring\":\"\
  \"},{\"name\":\"SkuId\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"Sol\
  utionId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"SolutionSession\
  Id\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Tags\",\"type\":\"dy\
  namic\",\"docstring\":\"\"},{\"name\":\"TelemetryApiVersion\",\"type\":\"stri\
  ng\",\"docstring\":\"\"},{\"name\":\"TelemetryChannelUsed\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"TimeSinceSessionStart\",\"type\":\"long\",\
  \"docstring\":\"\"},{\"name\":\"UserAlias\",\"type\":\"string\",\"docstring\":\
  \"\"},{\"name\":\"UserDomainName\",\"type\":\"string\",\"docstring\":\"\"},{\
  \"name\":\"UserId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"UtcDe\
  viceClass\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"UtcDeviceLoca\
  lId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"UtcFlags\",\"type\":\
  \"string\",\"docstring\":\"\"},{\"name\":\"UtcGlobalDeviceId\",\"type\":\"str\
  ing\",\"docstring\":\"\"},{\"name\":\"VirtualMachineAzureImage\",\"type\":\"s\
  tring\",\"docstring\":\"\"},{\"name\":\"VsId\",\"type\":\"string\",\"docstring\
  \":\"\"},{\"name\":\"VsInstanceId\",\"type\":\"string\",\"docstring\":\"\"},{\
  \"name\":\"VsLocale\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Wor\
  kloadTags\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"CloudEnvironm\
  entId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"IsAzureCloudEnvir\
  onment\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ConnectedSession\
  Id\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"RemoteRepoURLInternal\
  \",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"RemoteSessionIds\",\"t\
  ype\":\"string\",\"docstring\":\"\"},{\"name\":\"SessionRole\",\"type\":\"str\
  ing\",\"docstring\":\"\"},{\"name\":\"DataModelActionType\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"DataModelCorrelationId\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"DataModelActionResult\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"Test1\",\"type\":\"string\",\"docstring\":\
  \"\"},{\"name\":\"Test2\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"Test3\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Test4\",\"type\
  \":\"string\",\"docstring\":\"\"},{\"name\":\"Test5\",\"type\":\"string\",\"d\
  ocstring\":\"\"},{\"name\":\"Test6\",\"type\":\"string\",\"docstring\":\"\"},{\
  \"name\":\"Test7\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Test8\
  \",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Test9\",\"type\":\"str\
  ing\",\"docstring\":\"\"}]},{\"entityType\":\"Table\",\"name\":\"KO_Log\",\"c\
  olumns\":[{\"name\":\"PreciseTimeStamp\",\"type\":\"datetime\",\"docstring\":\
  \"\"},{\"name\":\"AppName\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"AppInstance\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Level\",\
  \"type\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"Message\",\"type\":\"str\
  ing\",\"docstring\":\"\"},{\"name\":\"MachineName\",\"type\":\"string\",\"doc\
  string\":\"\"},{\"name\":\"AppVersion\",\"type\":\"string\",\"docstring\":\"\
  \"}]},{\"entityType\":\"Table\",\"name\":\"KO_StreamingQueryStatistic\",\"col\
  umns\":[{\"name\":\"AppInstance\",\"type\":\"string\",\"docstring\":\"\"},{\"\
  name\":\"ActivityId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Fun\
  ctionName\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"OutputTable\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"RepeatableQueryActorId\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"TimeSliceStartTime\",\"ty\
  pe\":\"datetime\",\"docstring\":\"\"},{\"name\":\"TimeSliceEndTime\",\"type\":\
  \"datetime\",\"docstring\":\"\"},{\"name\":\"StartedOn\",\"type\":\"datetime\
  \",\"docstring\":\"\"},{\"name\":\"ChunkId\",\"type\":\"long\",\"docstring\":\
  \"\"}]},{\"entityType\":\"Table\",\"name\":\"KO_RepeatableQueryStatistic\",\"\
  columns\":[{\"name\":\"AppInstance\",\"type\":\"string\",\"docstring\":\"\"},{\
  \"name\":\"ActorId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Quer\
  yString\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"OutputTable\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"StartedOn\",\"type\":\"da\
  tetime\",\"docstring\":\"\"},{\"name\":\"Duration\",\"type\":\"timespan\",\"d\
  ocstring\":\"\"},{\"name\":\"ExecutionAttempts\",\"type\":\"long\",\"docstring\
  \":\"\"},{\"name\":\"State\",\"type\":\"dynamic\",\"docstring\":\"\"},{\"name\
  \":\"CreatedExtents\",\"type\":\"dynamic\",\"docstring\":\"\"}]},{\"entityType\
  \":\"Table\",\"name\":\"BlessedAudit\",\"columns\":[{\"name\":\"EventName\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Owner\",\"type\":\"string\
  \",\"docstring\":\"\"}]},{\"entityType\":\"Table\",\"name\":\"RawEventsVSUncl\
  assifiedStaging\",\"columns\":[{\"name\":\"EventId\",\"type\":\"string\",\"do\
  cstring\":\"\"},{\"name\":\"EventName\",\"type\":\"string\",\"docstring\":\"\
  \"},{\"name\":\"ABExpFlights\",\"type\":\"string\",\"docstring\":\"\"},{\"name\
  \":\"ActiveProjectId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Ac\
  tivityCorrelationId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Act\
  ivityDurationInMilliseconds\",\"type\":\"long\",\"docstring\":\"\"},{\"name\":\
  \"ActivityEndInTicks\",\"type\":\"long\",\"docstring\":\"\"},{\"name\":\"Acti\
  vityStartInTicks\",\"type\":\"long\",\"docstring\":\"\"},{\"name\":\"Advanced\
  ServerTimestampUtc\",\"type\":\"datetime\",\"docstring\":\"\"},{\"name\":\"Al\
  tSecId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Attributes\",\"t\
  ype\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"BranchName\",\"type\":\"str\
  ing\",\"docstring\":\"\"},{\"name\":\"BuildManifestId\",\"type\":\"string\",\
  \"docstring\":\"\"},{\"name\":\"BuildNumber\",\"type\":\"real\",\"docstring\":\
  \"\"},{\"name\":\"BuildNumberFull\",\"type\":\"real\",\"docstring\":\"\"},{\"\
  name\":\"BuildNumberMajorVersion\",\"type\":\"real\",\"docstring\":\"\"},{\"n\
  ame\":\"BuildNumberMicroUpdate\",\"type\":\"string\",\"docstring\":\"\"},{\"n\
  ame\":\"BuildNumberMinorVersion\",\"type\":\"real\",\"docstring\":\"\"},{\"na\
  me\":\"BuildWorkloads\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"C\
  hannelId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ChannelManifes\
  tId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ClientTimestampUtc\
  \",\"type\":\"datetime\",\"docstring\":\"\"},{\"name\":\"ClrVersion\",\"type\
  \":\"string\",\"docstring\":\"\"},{\"name\":\"CommandGuid\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"CommandName\",\"type\":\"string\",\"docstr\
  ing\":\"\"},{\"name\":\"CommandSource\",\"type\":\"string\",\"docstring\":\"\
  \"},{\"name\":\"ComputerName\",\"type\":\"string\",\"docstring\":\"\"},{\"name\
  \":\"CpuArchitecture\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Cp\
  uCount\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"CpuDataWidth\",\"t\
  ype\":\"real\",\"docstring\":\"\"},{\"name\":\"CpuDescription\",\"type\":\"st\
  ring\",\"docstring\":\"\"},{\"name\":\"CpuFamily\",\"type\":\"real\",\"docstr\
  ing\":\"\"},{\"name\":\"CpuFrequency\",\"type\":\"real\",\"docstring\":\"\"},{\
  \"name\":\"CpuModel\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"CpuSt\
  epping\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"DataHandling\",\"t\
  ype\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"DataHandlingTags\",\"type\":\
  \"string\",\"docstring\":\"\"},{\"name\":\"DisplayColorDepth\",\"type\":\"real\
  \",\"docstring\":\"\"},{\"name\":\"DisplayCount\",\"type\":\"real\",\"docstri\
  ng\":\"\"},{\"name\":\"DisplayDpi\",\"type\":\"real\",\"docstring\":\"\"},{\"\
  name\":\"DisplayHighContrastEnabled\",\"type\":\"bool\",\"docstring\":\"\"},{\
  \"name\":\"DisplayHighContrastName\",\"type\":\"string\",\"docstring\":\"\"},{\
  \"name\":\"DisplayResolution\",\"type\":\"real\",\"docstring\":\"\"},{\"name\
  \":\"DisplayScalingFactor\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\
  \"DisplayVirtualXY\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Disp\
  layXY\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ExeName\",\"type\
  \":\"string\",\"docstring\":\"\"},{\"name\":\"ExeVersion\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"ExtensionName\",\"type\":\"string\",\"docs\
  tring\":\"\"},{\"name\":\"Extensions\",\"type\":\"dynamic\",\"docstring\":\"\
  \"},{\"name\":\"ExtensionTypeName\",\"type\":\"string\",\"docstring\":\"\"},{\
  \"name\":\"ExtensionVersion\",\"type\":\"string\",\"docstring\":\"\"},{\"name\
  \":\"FeedbackSessionId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"\
  Flags\",\"type\":\"long\",\"docstring\":\"\"},{\"name\":\"GeoCity\",\"type\":\
  \"string\",\"docstring\":\"\"},{\"name\":\"GeoCountryRegionIso\",\"type\":\"s\
  tring\",\"docstring\":\"\"},{\"name\":\"HardDriveFreeVolumeSize\",\"type\":\"\
  real\",\"docstring\":\"\"},{\"name\":\"HardDriveOsMediaType\",\"type\":\"stri\
  ng\",\"docstring\":\"\"},{\"name\":\"HardDriveProductFileSystemType\",\"type\
  \":\"string\",\"docstring\":\"\"},{\"name\":\"HardDriveProductMediaType\",\"t\
  ype\":\"string\",\"docstring\":\"\"},{\"name\":\"HardDriveTotalSize\",\"type\
  \":\"real\",\"docstring\":\"\"},{\"name\":\"HardDriveTotalVolumeSize\",\"type\
  \":\"real\",\"docstring\":\"\"},{\"name\":\"IdentityProvider\",\"type\":\"str\
  ing\",\"docstring\":\"\"},{\"name\":\"IdSubject\",\"type\":\"string\",\"docst\
  ring\":\"\"},{\"name\":\"InLowImpactMode\",\"type\":\"string\",\"docstring\":\
  \"\"},{\"name\":\"IsInternal\",\"type\":\"bool\",\"docstring\":\"\"},{\"name\
  \":\"IsOptedIn\",\"type\":\"bool\",\"docstring\":\"\"},{\"name\":\"LastSoluti\
  onBuildId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Locale\",\"ty\
  pe\":\"string\",\"docstring\":\"\"},{\"name\":\"LocaleCode\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"MacAddressHash\",\"type\":\"string\",\"doc\
  string\":\"\"},{\"name\":\"MachineId\",\"type\":\"string\",\"docstring\":\"\"\
  },{\"name\":\"ManifestId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"Measures\",\"type\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"MicroUpdate\
  Version\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"NovaProperties\
  \",\"type\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"OID\",\"type\":\"stri\
  ng\",\"docstring\":\"\"},{\"name\":\"Os\",\"type\":\"string\",\"docstring\":\"\
  \"},{\"name\":\"OsLocale\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"OsLocaleUser\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"OsLocale\
  UserUi\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"OsMajorVersion\",\
  \"type\":\"real\",\"docstring\":\"\"},{\"name\":\"OsMinorVersion\",\"type\":\
  \"real\",\"docstring\":\"\"},{\"name\":\"OsServicePack\",\"type\":\"real\",\"\
  docstring\":\"\"},{\"name\":\"OsVersion\",\"type\":\"string\",\"docstring\":\"\
  \"},{\"name\":\"PackageGuid\",\"type\":\"string\",\"docstring\":\"\"},{\"name\
  \":\"PackageLoadType\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Pe\
  rsonalizationVsId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Produ\
  ct\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ProjectId\",\"type\":\
  \"string\",\"docstring\":\"\"},{\"name\":\"Properties\",\"type\":\"dynamic\",\
  \"docstring\":\"\"},{\"name\":\"PUID\",\"type\":\"string\",\"docstring\":\"\"\
  },{\"name\":\"RamTotal\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"Se\
  quenceNumber\",\"type\":\"int\",\"docstring\":\"\"},{\"name\":\"SessionId\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Sku\",\"type\":\"string\",\
  \"docstring\":\"\"},{\"name\":\"SkuId\",\"type\":\"real\",\"docstring\":\"\"}\
  ,{\"name\":\"SolutionId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"SolutionSessionId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Tags\
  \",\"type\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"TelemetryApiVersion\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"TelemetryChannelUsed\",\"\
  type\":\"string\",\"docstring\":\"\"},{\"name\":\"TimeSinceSessionStart\",\"t\
  ype\":\"long\",\"docstring\":\"\"},{\"name\":\"UserAlias\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"UserDomainName\",\"type\":\"string\",\"doc\
  string\":\"\"},{\"name\":\"UserId\",\"type\":\"string\",\"docstring\":\"\"},{\
  \"name\":\"UtcDeviceClass\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"UtcDeviceLocalId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"UtcF\
  lags\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"UtcGlobalDeviceId\
  \",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"VirtualMachineAzureIma\
  ge\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"VsId\",\"type\":\"st\
  ring\",\"docstring\":\"\"},{\"name\":\"VsInstanceId\",\"type\":\"string\",\"d\
  ocstring\":\"\"},{\"name\":\"VsLocale\",\"type\":\"string\",\"docstring\":\"\
  \"},{\"name\":\"WorkloadTags\",\"type\":\"string\",\"docstring\":\"\"},{\"name\
  \":\"SessionRole\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Connec\
  tedSessionId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"RemoteSess\
  ionIds\",\"type\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"CloudEnvironmen\
  tId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"IsAzureCloudEnviron\
  ment\",\"type\":\"bool\",\"docstring\":\"\"},{\"name\":\"RemoteRepoURLInternal\
  \",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"DataModelActionType\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"DataModelCorrelationId\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"DataModelActionResult\",\
  \"type\":\"string\",\"docstring\":\"\"}]},{\"entityType\":\"Table\",\"name\":\
  \"RawEventsVS_DataModelTest\",\"columns\":[{\"name\":\"EventId\",\"type\":\"s\
  tring\",\"docstring\":\"\"},{\"name\":\"EventName\",\"type\":\"string\",\"doc\
  string\":\"\"},{\"name\":\"ABExpFlights\",\"type\":\"string\",\"docstring\":\"\
  \"},{\"name\":\"ActiveProjectId\",\"type\":\"string\",\"docstring\":\"\"},{\"\
  name\":\"ActivityCorrelationId\",\"type\":\"string\",\"docstring\":\"\"},{\"n\
  ame\":\"ActivityDurationInMilliseconds\",\"type\":\"long\",\"docstring\":\"\"\
  },{\"name\":\"ActivityEndInTicks\",\"type\":\"long\",\"docstring\":\"\"},{\"n\
  ame\":\"ActivityStartInTicks\",\"type\":\"long\",\"docstring\":\"\"},{\"name\
  \":\"AdvancedServerTimestampUtc\",\"type\":\"datetime\",\"docstring\":\"\"},{\
  \"name\":\"AltSecId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Att\
  ributes\",\"type\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"BranchName\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"BuildManifestId\",\"type\
  \":\"string\",\"docstring\":\"\"},{\"name\":\"BuildNumber\",\"type\":\"real\",\
  \"docstring\":\"\"},{\"name\":\"BuildNumberFull\",\"type\":\"real\",\"docstri\
  ng\":\"\"},{\"name\":\"BuildNumberMajorVersion\",\"type\":\"real\",\"docstring\
  \":\"\"},{\"name\":\"BuildNumberMicroUpdate\",\"type\":\"string\",\"docstring\
  \":\"\"},{\"name\":\"BuildNumberMinorVersion\",\"type\":\"real\",\"docstring\
  \":\"\"},{\"name\":\"BuildWorkloads\",\"type\":\"string\",\"docstring\":\"\"}\
  ,{\"name\":\"ChannelId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"\
  ChannelManifestId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Clien\
  tTimestampUtc\",\"type\":\"datetime\",\"docstring\":\"\"},{\"name\":\"ClrVers\
  ion\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"CommandGuid\",\"type\
  \":\"string\",\"docstring\":\"\"},{\"name\":\"CommandName\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"CommandSource\",\"type\":\"string\",\"docs\
  tring\":\"\"},{\"name\":\"ComputerName\",\"type\":\"string\",\"docstring\":\"\
  \"},{\"name\":\"CpuArchitecture\",\"type\":\"string\",\"docstring\":\"\"},{\"\
  name\":\"CpuCount\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"CpuData\
  Width\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"CpuDescription\",\"\
  type\":\"string\",\"docstring\":\"\"},{\"name\":\"CpuFamily\",\"type\":\"real\
  \",\"docstring\":\"\"},{\"name\":\"CpuFrequency\",\"type\":\"real\",\"docstri\
  ng\":\"\"},{\"name\":\"CpuModel\",\"type\":\"real\",\"docstring\":\"\"},{\"na\
  me\":\"CpuStepping\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"DataHa\
  ndlingTags\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"DisplayColor\
  Depth\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"DisplayCount\",\"ty\
  pe\":\"real\",\"docstring\":\"\"},{\"name\":\"DisplayDpi\",\"type\":\"real\",\
  \"docstring\":\"\"},{\"name\":\"DisplayHighContrastEnabled\",\"type\":\"bool\
  \",\"docstring\":\"\"},{\"name\":\"DisplayHighContrastName\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"DisplayResolution\",\"type\":\"real\",\"do\
  cstring\":\"\"},{\"name\":\"DisplayScalingFactor\",\"type\":\"real\",\"docstr\
  ing\":\"\"},{\"name\":\"DisplayVirtualXY\",\"type\":\"string\",\"docstring\":\
  \"\"},{\"name\":\"DisplayXY\",\"type\":\"string\",\"docstring\":\"\"},{\"name\
  \":\"ExeName\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ExeVersion\
  \",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"ExtensionName\",\"type\
  \":\"string\",\"docstring\":\"\"},{\"name\":\"Extensions\",\"type\":\"dynamic\
  \",\"docstring\":\"\"},{\"name\":\"ExtensionTypeName\",\"type\":\"string\",\"\
  docstring\":\"\"},{\"name\":\"ExtensionVersion\",\"type\":\"string\",\"docstr\
  ing\":\"\"},{\"name\":\"FeedbackSessionId\",\"type\":\"string\",\"docstring\":\
  \"\"},{\"name\":\"Flags\",\"type\":\"long\",\"docstring\":\"\"},{\"name\":\"G\
  eoCity\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"GeoCountryRegion\
  Iso\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"HardDriveFreeVolume\
  Size\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"HardDriveOsMediaType\
  \",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"HardDriveProductFileSy\
  stemType\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"HardDriveProdu\
  ctMediaType\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"HardDriveTo\
  talSize\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"HardDriveTotalVol\
  umeSize\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"IdentityProvider\
  \",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"IdSubject\",\"type\":\
  \"string\",\"docstring\":\"\"},{\"name\":\"InLowImpactMode\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"IsInternal\",\"type\":\"bool\",\"docstring\
  \":\"\"},{\"name\":\"IsOptedIn\",\"type\":\"bool\",\"docstring\":\"\"},{\"name\
  \":\"LastSolutionBuildId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"Locale\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"LocaleCode\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"MacAddressHash\",\"type\":\
  \"string\",\"docstring\":\"\"},{\"name\":\"MachineId\",\"type\":\"string\",\"\
  docstring\":\"\"},{\"name\":\"ManifestId\",\"type\":\"string\",\"docstring\":\
  \"\"},{\"name\":\"Measures\",\"type\":\"dynamic\",\"docstring\":\"\"},{\"name\
  \":\"MicroUpdateVersion\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"NovaProperties\",\"type\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"OID\",\
  \"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Os\",\"type\":\"string\",\
  \"docstring\":\"\"},{\"name\":\"OsLocale\",\"type\":\"string\",\"docstring\":\
  \"\"},{\"name\":\"OsLocaleUser\",\"type\":\"string\",\"docstring\":\"\"},{\"n\
  ame\":\"OsLocaleUserUi\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"\
  OsMajorVersion\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"OsMinorVer\
  sion\",\"type\":\"real\",\"docstring\":\"\"},{\"name\":\"OsServicePack\",\"ty\
  pe\":\"real\",\"docstring\":\"\"},{\"name\":\"OsVersion\",\"type\":\"string\",\
  \"docstring\":\"\"},{\"name\":\"PackageGuid\",\"type\":\"string\",\"docstring\
  \":\"\"},{\"name\":\"PackageLoadType\",\"type\":\"string\",\"docstring\":\"\"\
  },{\"name\":\"PersonalizationVsId\",\"type\":\"string\",\"docstring\":\"\"},{\
  \"name\":\"Product\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Proj\
  ectId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Properties\",\"ty\
  pe\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"PUID\",\"type\":\"string\",\
  \"docstring\":\"\"},{\"name\":\"RamTotal\",\"type\":\"real\",\"docstring\":\"\
  \"},{\"name\":\"SequenceNumber\",\"type\":\"int\",\"docstring\":\"\"},{\"name\
  \":\"SessionId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Sku\",\"\
  type\":\"string\",\"docstring\":\"\"},{\"name\":\"SkuId\",\"type\":\"real\",\
  \"docstring\":\"\"},{\"name\":\"SolutionId\",\"type\":\"string\",\"docstring\
  \":\"\"},{\"name\":\"SolutionSessionId\",\"type\":\"string\",\"docstring\":\"\
  \"},{\"name\":\"Tags\",\"type\":\"dynamic\",\"docstring\":\"\"},{\"name\":\"T\
  elemetryApiVersion\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Tele\
  metryChannelUsed\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"TimeSi\
  nceSessionStart\",\"type\":\"long\",\"docstring\":\"\"},{\"name\":\"UserAlias\
  \",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"UserDomainName\",\"type\
  \":\"string\",\"docstring\":\"\"},{\"name\":\"UserId\",\"type\":\"string\",\"\
  docstring\":\"\"},{\"name\":\"UtcDeviceClass\",\"type\":\"string\",\"docstring\
  \":\"\"},{\"name\":\"UtcDeviceLocalId\",\"type\":\"string\",\"docstring\":\"\
  \"},{\"name\":\"UtcFlags\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"UtcGlobalDeviceId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"Vir\
  tualMachineAzureImage\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"V\
  sId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"VsInstanceId\",\"ty\
  pe\":\"string\",\"docstring\":\"\"},{\"name\":\"VsLocale\",\"type\":\"string\
  \",\"docstring\":\"\"},{\"name\":\"WorkloadTags\",\"type\":\"string\",\"docst\
  ring\":\"\"},{\"name\":\"SessionRole\",\"type\":\"string\",\"docstring\":\"\"\
  },{\"name\":\"ConnectedSessionId\",\"type\":\"string\",\"docstring\":\"\"},{\
  \"name\":\"RemoteSessionIds\",\"type\":\"dynamic\",\"docstring\":\"\"},{\"name\
  \":\"CloudEnvironmentId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"IsAzureCloudEnvironment\",\"type\":\"bool\",\"docstring\":\"\"},{\"name\":\
  \"RemoteRepoURLInternal\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\
  \"DataModelActionType\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"D\
  ataModelCorrelationId\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"D\
  ataModelActionResult\",\"type\":\"string\",\"docstring\":\"\"},{\"name\":\"vs\
  _core_is64bitprocess\",\"type\":\"bool\",\"docstring\":\"\"}]}],\"functions\"\
  :[{\"name\":\"RawEventsVSBlessedIngestion\",\"body\":\"{\\r\\n// Alter this
  function via source control:\\r\\n//
  DSI-Curation/EngineeringSystems/KustoFunctions/AdminScripts/RawEventsVSBlesse\
  dIngestion.csl\\r\\n//\\r\\n// this script controls kusto ingestion of
  \\\"Blessed\\\" VS Raw Events to Kusto Blessed Table\\r\\n// wiki:
  https://wiki.vsdata.io/kusto_blessed\\r\\n// execute on
  ddtelvsraw\\r\\n    RawEventsVS\\r\\n    | where EventName in
  (\\r\\n    //manishj\\r\\n      \\\"vs/ide/vbcs/liveunittesting/start-lut\\\"          \
  \\r\\n    , \\\"vs/ide/vbcs/liveunittesting/stop-lut\\\"          \\r\\n    ,
  \\\"vs/ide/vbcs/liveunittesting/pause-lut\\\"          \\r\\n    ,
  \\\"vs/ide/vbcs/liveunittesting/continue-lut\\\"\\r\\n    //bertaygu\\r\\n    \
  , \\\"vs/ide/performancecenter/extensiontagged\\\"          \\r\\n    ,
  \\\"vs/ide/performancecenter/notification/show-notification\\\"          \\r\
  \\n    ,
  \\\"vs/ide/performancecenter/toolwindownotification\\\"          \\r\\n    ,
  \\\"vs/ide/performancecenter/notification/close-notification\\\"          \\r\
  \\n    ,
  \\\"vs/ide/performancecenter/extensionnotification\\\"          \\r\\n    ,
  \\\"vs/ide/performancecenter/notification/handle-notification\\\"          \\r\
  \\n    , \\\"vs/ide/performancecenter/dialog/open\\\"          \\r\\n    ,
  \\\"vs/ide/performancecenter/toolwindow/overridestartup\\\"          \\r\\n    \
  , \\\"vs/ide/performancecenter/extensionaction\\\"          \\r\\n    ,
  \\\"vs/ide/performancecenter/typingextensionnotification\\\"          \\r\\n    \
  , \\\"vs/core/packagecostsummary/startup\\\"          \\r\\n    ,
  \\\"vs/core/packagecostsummary/startuptoolwindows\\\"          \\r\\n    ,
  \\\"vs/core/packagecostsummary/modalsolutionload\\\"          \\r\\n    ,
  \\\"vs/core/packagecostsummary/modalsolutionloadtoolwindows\\\"          \\r\
  \\n    ,
  \\\"vs/core/packagecostsummary/solutionload\\\"\\r\\n    //rsarwar\\r\\n    ,
  \\\"vs/vc/fasterprojectload\\\"\\r\\n    //olgaark\\r\\n    ,\\\"vs/vc/faster\
  projectload\\\"\\r\\n    //wibu,
  lucappa\\r\\n    ,\\\"vs/vc/project/cmake/project/workspace\\\"          \\r\
  \\n    ,\\\"vs/vc/project/cmake/project/scancounts\\\"          \\r\\n    ,\\\
  \"vs/vc/project/cmake/project/remotedebug\\\"          \\r\\n    ,\\\"vs/vc/p\
  roject/cmake/project/parse/target\\\"          \\r\\n    ,\\\"vs/vc/project/c\
  make/project/parse\\\"          \\r\\n    ,\\\"vs/vc/project/cmake/project/de\
  bug\\\"          \\r\\n    ,\\\"vs/vc/project/cmake/project/cancel\\\"          \
  \\r\\n    ,\\\"vs/vc/project/cmake/project/build\\\"\\r\\n    ,\\\"vs/vc/ide/\
  codestore\\\"\\r\\n    //olegkhar\\r\\n    ,\\\"vs/vc/ide/command/parsesln\\\"\
  \\r\\n    ,\\\"vs/vc/ide/command/openfile\\\"\\r\\n    ,\\\"vs/vc/project/cma\
  ke/azuresphere/open\\\"\\r\\n    ,\\\"vs/vc/project/cmake/azuresphere/build\\\
  \"\\r\\n    ,\\\"vs/vc/project/cmake/azuresphere/deploy\\\"\\r\\n    ,\\\"vs/\
  vc/project/cmake/azuresphere/debug\\\"\\r\\n    ,\\\"vs/vc/azuresphere/open\\\
  \"\\r\\n    ,\\\"vs/vc/azuresphere/build\\\"\\r\\n    ,\\\"vs/vc/azuresphere/\
  deploy\\\"\\r\\n    ,\\\"vs/vc/azuresphere/debug\\\"\\r\\n    ,\\\"vs/vc/linu\
  x/project/devcontainers/createcontainer\\\"\\r\\n    ,\\\"vs/vc/linux/project\
  /devcontainers/infobar\\\"\\r\\n    ,\\\"vs/vc/project/linux/devcontainers/op\
  tions\\\"\\r\\n    ,\\\"vs/vc/linux/project/devcontainers/installcli\\\"\\r\\\
  n    //mgoodner\\r\\n    ,\\\"vs/vc/solution/references\\\"\\r\\n    // mike
  morton                            \\r\\n    ,\\\"vs/azuretools/servicefabric/\
  publish\\\"                              \\r\\n    ,\\\"vs/azuretools/service\
  fabric/publishfailure\\\"\\r\\n    ,\\\"vs/azuretools/servicefabric/createsfc\
  luster\\\"\\r\\n    //mikemort, Date: 07/26/2018, Entries made by:
  sumabh\\r\\n    ,'vs/azuretools/sfapptools/createapplicationproject'   \\r\\n\
  \\t//mikemort, Date: 09/25/2018, entries made by:
  sumabh\\r\\n\\t,'vs/azuretools/servicefabric/serviceprojectcreation'\\r\\n\\t\
  // luca cappa 2019/2/22 by
  mattev\\r\\n\\t,'vs/vc/project/cmake/project/cmakesettingseditor'\\t\\r\\n\\t\
  // Sam Freed 2019/3/27 by
  mattev\\r\\n\\t,'vs/vc/project/cmake/project/unsupported'\\r\\n\\t,'vs/vc/pro\
  ject/cmake/project/deployinfobaraction'\\r\\n\\t,'vs/vc/project/cmake/project\
  /deploystatus'\\r\\n    // ersweet
  2019/10/17\\r\\n  ,'vs/vc/project/linux/linuxrsyncfailure'\\r\\n  ,'vs/vc/pro\
  ject/cmake/project/rsyncfailed'\\r\\n  // Andy Sterland
  2020/11/2\\r\\n  ,'vs/diagnostics/debugger/breakpoints/advancedsettings/actio\
  ns/logmessage'\\r\\n  ,'vs/diagnostics/debugger/tracepointexperiment/activate\
  suggestion'\\r\\n  ,'vs/diagnostics/debugger/tracepointexperiment/showlightbu\
  lb'\\r\\n    //bemcmorr\\r\\n    ,'vs/vc/linux/project/sshconnection'\\r\\n    \
  // Mark Downie
  2020/11/25\\r\\n    ,'vs/diagnostics/debugger/coredumpsummarypage/show'\\r\\n    \
  ,'vs/diagnostics/diagnostictools/diagnosticanalysis/close-decompilationwarnin\
  g'\\r\\n    ,'vs/diagnostics/diagnostictools/diagnosticanalysis/run-analysis'\
  \\r\\n    ,'vs/diagnostics/diagnostictools/diagnosticanalysis/finish-analysis'\
  \\r\\n    ,'vs/diagnostics/diagnostictools/diagnosticanalysis/select-analysis\
  result'\\r\\n    ,'vs/diagnostics/diagnostictools/diagnosticanalysis/show-ana\
  lysisresultcallstack'\\r\\n    ,'vs/diagnostics/diagnostictools/diagnosticana\
  lysis/show-analysisresultcallstack-error'\\r\\n    // Christian Gunderman -
  2021/3/18\\r\\n\\t,'vs/ide/search/completed'\\r\\n\\t,'vs/ide/search/extensio\
  n/fault'\\r\\n\\t,'vs/ide/search/command/querystatusoverthreshold'\\r\\n\\t,'\
  vs/ide/search/index/create/fault'\\r\\n\\t,'vs/ide/search/mru/fault'\\r\\n\\t\
  ,'vs/ide/search/index/lookup/fault'\\r\\n\\t,'vs/ide/search/mrq/fault'\\r\\n\
  \\t,'vs/ide/search/telemetryproperties/fault'\\r\\n\\t,'vs/ide/search/solutio\
  noptions/fault'\\r\\n\\t,'vs/ide/search/telemetryprocessing/fault'\\r\\n    ,\
  'vs/ide/search/index/load/fault'\\r\\n    //sinem akinci -
  2022/03/07\\r\\n    ,'vs/vc/project/cmake/project/parse/start'\\r\\n    //
  Mark Downie
  2022/11/16\\r\\n\\t,'vs/diagnostics/diagnostictools/diagnosticanalysis/start-\
  diagnosticanalysis'\\r\\n\\t,'vs/diagnostics/diagnostictools/diagnosticanalys\
  is/stop-diagnosticanalysis'\\r\\n\\t,'vs/diagnostics/diagnostictools/diagnost\
  icanalysis/select-analysisresult'\\r\\n\\t,'vs/diagnostics/diagnostictools/di\
  agnosticanalysis/linkclicked'\\r\\n    )\\r\\n}\",\"inputParameters\":[]},{\"\
  name\":\"RawEventsVSVNextUpdate\",\"body\":\"{\\r\\ncluster(\\\"ddtelinsights\
  \\\").database(\\\"DDTelInsights\\\").VS_Release_Telemetry_Manifest  \\r\\n|
  where isnotempty(ReleaseDate)\\r\\n| where ReleaseDate < ago(7d)\\r\\n| where
  ReleaseScope contains \\\"Public\\\"\\r\\n| join (
  \\r\\n   cluster(\\\"ddtelinsights\\\").database(\\\"DDTelInsights\\\").VS_Re\
  lease_Telemetry_ChannelItems  \\r\\n   | extend ManifestID = ChannelManifestID
  \\r\\n   | where Type =~ \\\"channel\\\" and ChannelName contains
  \\\"Release\\\"  \\r\\n) on ManifestID  \\r\\n| order by ReleaseDate desc
  nulls first \\r\\n| project ManifestIdToSuppress=ManifestID \\r\\n| join kind
  = rightouter hint.remote=local (\\r\\nRawEventsVS\\r\\n| where not (ExeName ==
  \\\"devenv\\\" and ExeVersion startswith \\\"10\\\")\\r\\n| where not (ExeName
  == \\\"devenv\\\" and ExeVersion startswith \\\"11\\\")\\r\\n| where not
  (ExeName == \\\"devenv\\\" and ExeVersion startswith \\\"12\\\")\\r\\n| where
  not (ExeName == \\\"devenv\\\" and ExeVersion startswith \\\"14\\\")\\r\\n|
  where not (ExeName in (\\\"vsta_ls\\\", \\\"vsixautoupdate\\\",
  \\\"microsoft.vshub.server.httphost\\\", \\\"wdexpress\\\",
  \\\"vs_professional\\\", \\\"vwdexpress\\\", \\\"vshub\\\", \\\"blend\\\",
  \\\"vs_community\\\", \\\"vs_enterprise\\\") and ExeVersion startswith
  \\\"14\\\")\\r\\n| where not (ExeName contains \\\"vs14\\\")\\r\\n| where
  EventName !in ( \\\"vs/setupengine/package-operation\\\",
  \\\"vs/setupengine/channel-operation\\\",\\\"vs/setupengine/build-dependency-\
  graph\\\", \\\"vs/willow/query-product\\\", \\\"vs/willow/focus-window\\\"
  )\\r\\n) on $left.ManifestIdToSuppress == $right.ChannelManifestId  \\r\\n|
  where isempty(ManifestIdToSuppress)\\r\\n| project-away
  ManifestIdToSuppress\\r\\n}\",\"inputParameters\":[]},{\"name\":\"RawEventsVS\
  InternalUpdate\",\"body\":\"{\\r\\n    RawEventsVS\\r\\n    | where IsInternal
  == \\\"True\\\"
  \\r\\n}\",\"inputParameters\":[]},{\"name\":\"VS_Telemetry_Releases_Func\",\"\
  docstring\":\"VSReleases latest distinct records\",\"body\":\"{
  \\r\\n    cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").VS_T\
  elemetry_Releases    \\r\\n    | extend UpdateDate = iif(isempty(UpdateDate),
  datetime(1/1/1900), UpdateDate) \\r\\n    | summarize
  argmax(UpdateDate,\\r\\n        ChannelShortName,     \\r\\n        ChannelId\
  ,     \\r\\n        VsVersion,     \\r\\n        VsBranch,\\r\\n        Build\
  Date, \\r\\n        ReleaseDate,
  \\r\\n        ReleaseScope,   \\r\\n        WillowInstallerVersion,     \\r\\\
  n        ManifestVersion,     \\r\\n        ReleaseGroupLabel,     \\r\\n        \
  ReleaseName,\\t   \\r\\n        BuildNumberMajorVersion,     \\r\\n        Pr\
  oductMilestone,
  \\r\\n        ProductDisplayVersion,\\r\\n        ProductSemanticVersion,\\r\
  \\n        RoadmapWitId) by ChannelManifestId, ProductManifestId\\r\\n    |
  extend ChannelShortName = max_UpdateDate_ChannelShortName\\r\\n    | extend
  ChannelId = max_UpdateDate_ChannelId\\r\\n    | extend VsVersion =
  max_UpdateDate_VsVersion\\r\\n    | extend VsBranch =
  max_UpdateDate_VsBranch\\r\\n    | extend BuildDate =
  max_UpdateDate_BuildDate\\r\\n    | extend ReleaseDate =
  max_UpdateDate_ReleaseDate\\r\\n    | extend ReleaseScope =
  max_UpdateDate_ReleaseScope\\r\\n    | extend WillowInstallerVersion =
  max_UpdateDate_WillowInstallerVersion\\r\\n    | extend ManifestVersion =
  max_UpdateDate_ManifestVersion\\r\\n    | extend ReleaseGroupLabel =
  max_UpdateDate_ReleaseGroupLabel\\r\\n    | extend ReleaseName =
  max_UpdateDate_ReleaseName\\r\\n    | extend BuildNumberMajorVersion =
  max_UpdateDate_BuildNumberMajorVersion\\r\\n    | extend ProductMilestone =
  max_UpdateDate_ProductMilestone\\r\\n    | extend ProductDisplayVersion =
  max_UpdateDate_ProductDisplayVersion \\r\\n    | extend ProductSemanticVersion
  = max_UpdateDate_ProductSemanticVersion\\r\\n    | extend RoadmapWitId =
  max_UpdateDate_RoadmapWitId  \\r\\n    | extend UpdateDate =
  max_UpdateDate    \\r\\n    | project \\r\\n       ChannelManifestId,
  \\r\\n       ProductManifestId,
  \\r\\n       ChannelShortName,  \\r\\n       ChannelId,
  \\r\\n       VsVersion, \\r\\n       VsBranch, \\r\\n       BuildDate,
  \\r\\n       ReleaseDate, \\r\\n       ReleaseScope,
  \\r\\n       WillowInstallerVersion, \\r\\n       ManifestVersion,
  \\r\\n       ReleaseGroupLabel,
  \\r\\n       ReleaseName,\\t   \\r\\n       ProductDisplayVersion,\\r\\n       \
  BuildNumberMajorVersion,
  \\r\\n       ProductMilestone,\\r\\n       ProductSemanticVersion,\\r\\n       \
  UpdateDate,\\r\\n       RoadmapWitId\\r\\n
  }\",\"inputParameters\":[]},{\"name\":\"Setup100_BootstrapperOperationEvents\
  \",\"docstring\":\"Returns VS bootstrapper operation
  events.\",\"body\":\"{\\r\\n    cluster('Ddtelvsraw').database('VS').RawEvent\
  sVS\\r\\n    | where AdvancedServerTimestampUtc > startTime\\r\\n    | where
  IsInternal == false\\r\\n    | where EventName ==
  \\\"vs/setup/bootstrapper/app-run\\\"\\r\\n    | where
  tostring(Properties[\\\"reserved.datamodel.action.type\\\"]) ==
  \\\"End\\\"\\r\\n    | where
  Properties[\\\"context.default.vs.setup.bootstrapper.commandline.startuptype\\\
  \"] == operationName\\r\\n    | where
  Properties[\\\"context.default.vs.setup.bootstrapper.commandline.responsefile\
  .channelid\\\"] == channelId\\r\\n    | where
  tostring(Properties[\\\"reserved.datamodel.action.resultsummary\\\"]) != \\\"A
  second vs/setup/bootstrapper/app-run event was requested.\\\"\\r\\n    //
  Ignoring \\\"Exit code=1\\\" since the bootstrapper is waiting for CLI or
  Willow to complete and this is their error code.  CLI and Willow code are
  track separately in their respectively event.\\r\\n    | where
  tostring(Properties[\\\"vs.setup.bootstrapper.error\\\"]) != \\\"Exit
  code=1\\\"\\r\\n    | where GeoCountryRegionIso ==
  countryIso\\r\\n}\",\"inputParameters\":[{\"name\":\"channelId\",\"cslType\":\
  \"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\"country\
  Iso\",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\
  \"name\":\"operationName\",\"cslType\":\"string\",\"type\":\"System.String\",\
  \"docstring\":\"\"},{\"name\":\"startTime\",\"cslType\":\"datetime\",\"type\":\
  \"System.DateTime\",\"docstring\":\"\"}]},{\"name\":\"Setup100_BootstrapperOp\
  erationGoal\",\"docstring\":\"Returns VS bootstrapper operation success
  rate.\",\"body\":\"{\\r\\n    Setup100_BootstrapperOperationEvents(channelId,
  countryIso, operationName, now() - lookbackPeriod)\\r\\n    | where
  tostring(Properties[\\\"reserved.datamodel.action.result\\\"]) !=
  \\\"UserCancel\\\"\\r\\n    | where
  isempty(Properties[\\\"vs.setup.bootstrapper.blocktype\\\"])\\r\\n    // 1641
  is a machine is being rebooted case, so we are going to treat it as a
  success.\\r\\n    | summarize Total = dcount(MacAddressHash), Success =
  dcountif(MacAddressHash,
  tostring(Properties[\\\"reserved.datamodel.action.result\\\"]) ==
  \\\"Success\\\" and tostring(Properties[\\\"vs.setup.bootstrapper.error\\\"])
  != \\\"Exit code=1641\\\")\\r\\n    | extend Result = iif(Total >=
  minEventCount, (Success * 100.0) / Total,
  100.0)\\r\\n}\",\"inputParameters\":[{\"name\":\"channelId\",\"cslType\":\"st\
  ring\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\"countryIso\
  \",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"n\
  ame\":\"operationName\",\"cslType\":\"string\",\"type\":\"System.String\",\"d\
  ocstring\":\"\"},{\"name\":\"minEventCount\",\"cslType\":\"int\",\"type\":\"S\
  ystem.Int32\",\"docstring\":\"\"},{\"name\":\"lookbackPeriod\",\"cslType\":\"\
  timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"}]},{\"name\":\"Set\
  up100_BootstrapperOperationGoalDetails\",\"docstring\":\"Returns VS
  bootstrapper failure
  details.\",\"body\":\"{\\r\\n    Setup100_BootstrapperOperationEvents(channel\
  Id, countryIso, operationName, now() - lookbackPeriod)\\r\\n    | where
  tostring(Properties[\\\"reserved.datamodel.action.result\\\"]) !=
  \\\"UserCancel\\\"\\r\\n    | where
  isempty(Properties[\\\"vs.setup.bootstrapper.blocktype\\\"])\\r\\n    | extend
  Error = tostring(Properties[\\\"vs.setup.bootstrapper.error\\\"])\\r\\n    |
  where Error != \\\"Exit code=1641\\\"\\r\\n    | where isempty(Error) !=
  true\\r\\n    | summarize hits = count(), dhits = dcount(MacAddressHash) by
  Error\\r\\n}\",\"inputParameters\":[{\"name\":\"channelId\",\"cslType\":\"str\
  ing\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\"countryIso\",\
  \"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\
  \":\"operationName\",\"cslType\":\"string\",\"type\":\"System.String\",\"docs\
  tring\":\"\"},{\"name\":\"minEventCount\",\"cslType\":\"int\",\"type\":\"Syst\
  em.Int32\",\"docstring\":\"\"},{\"name\":\"lookbackPeriod\",\"cslType\":\"tim\
  espan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"}]},{\"name\":\"Setup1\
  00_Failures\",\"docstring\":\"Return failures per
  release\",\"body\":\"{\\r\\nlet latestReleaseName =
  cluster(\\\"Ddtelvsraw\\\").database(\\\"LookupTables\\\").VS_Telemetry_Relea\
  ses_Func() \\r\\n                        | where ChannelId ==
  channelId\\r\\n                        | summarize by ManifestVersion,
  ProductDisplayVersion \\r\\n                        | top 1 by ManifestVersion
  desc\\r\\n                        | project ProductDisplayVersion;\\r\\nlet
  bugs =
  cluster(\\\"DDTelInsights\\\").database(\\\"Playground\\\").SetupErrorToBugMa\
  pping\\r\\n    | where isempty(Ignore) and isnotempty(IssueId)\\r\\n    |
  extend IssueId = toint(IssueId)\\r\\n    | summarize bugId = any(IssueId) by
  errorMessage = tolower(replace(\\\"\\\\\\\\s*\\\", \\\"\\\",
  ErrorMessage));\\r\\nlet events =
  cluster(\\\"DDTelInsights\\\").database(\\\"DDTelInsights\\\").SetupWillowIns\
  tallProductMerged\\r\\n    | where ReleaseScope contains
  \\\"public\\\"\\r\\n    | where EngineProductDisplayVersion ==
  iif(isempty(releaseName), toscalar(latestReleaseName), releaseName)\\r\\n    |
  where IsInternal == false\\r\\n    | where GeneralReportResult in
  (\\\"Success\\\",\\\"Failure\\\",\\\"MissingEnd\\\",\\\"Cancel\\\",\\\"Block\\\
  \",\\\"Warning\\\")\\r\\n    | project   InstallSessionId,
  \\r\\n                GeneralResult = GeneralReportResult,
  \\r\\n                FailedPackageIds,\\r\\n                ErrorMessage,
  \\r\\n                MacAddressHash;\\r\\nlet errors = events\\r\\n    |
  where GeneralResult in (\\\"Warning\\\", \\\"Failure\\\")\\r\\n;\\r\\nlet
  total = errors \\r\\n    | summarize totalMachines = dcount(MacAddressHash, 2)
  \\r\\n    | project key = 1, totalMachines;\\r\\nerrors\\r\\n    | parse
  ErrorMessage with GeneralException \\\": \\\" GeneralError \\\"\\\\n\\\"
  *\\r\\n    | parse ErrorMessage with
  \\\"Microsoft.VisualStudio.Setup.PackageFailureException: \\\" PackageError
  \\\"\\\\n\\\" *\\r\\n    | extend ReportErrorMessage =
  iif(isempty(PackageError), GeneralError, PackageError) \\r\\n    | extend
  ReportErrorMessage = iif(isempty(ReportErrorMessage), ErrorMessage,
  ReportErrorMessage) \\r\\n    | extend ReportException =
  iif(isempty(PackageError), GeneralException, \\\"PackageFailureException\\\")
  \\r\\n    | extend ReportException = iif(isempty(ReportException),
  \\\"Unknown\\\", ReportException) \\r\\n    | parse ReportErrorMessage with
  MessageToKeep \\\";\\\" *  // If there are multiple package report failures,
  take the first one\\r\\n    | extend ReportErrorMessage =
  iif(isempty(MessageToKeep), ReportErrorMessage, MessageToKeep)\\r\\n    |
  parse FailedPackageIds with \\\"[\\\"\\\"\\\" PackageIds \\\"\\\"\\\"]\\\"
  *  // If there are multiple package report failures, take the first
  one\\r\\n    | parse PackageIds with PackageId \\\",\\\" *  // If there are
  multiple package report failures, take the first one\\r\\n    | extend
  PackageId = trim(\\\"\\\\\\\"\\\", tostring(iif(isempty(PackageId) and
  PackageIds != \\\"\\\", PackageIds, PackageId)))\\r\\n    | extend
  ReportErrorMessage = iif(ReportErrorMessage contains 'Недостаточно места на
  диске.', 'There is not enough space on the
  disk.',\\r\\n                                iif(ReportErrorMessage contains
  '磁盘空间不足。', 'There is not enough space on the
  disk.',\\r\\n                                iif(ReportErrorMessage contains
  '디스크 공간이 부족합니다.', 'There is not enough space on the
  disk.',\\r\\n                                iif(ReportErrorMessage contains
  'Microsoft.VisualStudio.Setup.ChannelsLockedException', 'Exception of type
  \\\\'Microsoft.VisualStudio.Setup.ChannelsLockedException\\\\' was
  thrown.',\\r\\n                                iif(ReportException =~
  'System.NullReferenceException', 'Object reference not set to an instance of
  an object.',\\r\\n                                iif(ReportErrorMessage
  contains 'There is not enough space on the disk.', 'There is not enough space
  on the disk.', ReportErrorMessage))))))\\r\\n| join kind=leftouter
  \\r\\n    (cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").Dat\
  aModelFault\\r\\n        | where EventName ==
  \\\"vs/setupengine/packagefailure\\\"\\r\\n        | extend OperationType =
  tostring(Properties[\\\"vs.setupengine.operationtype\\\"])\\r\\n        |
  extend PackageId =
  tostring(Properties[\\\"vs.setupengine.packageid\\\"])\\r\\n        | extend
  SharedWillowInstallSessionId =
  tostring(Properties[\\\"context.default.vs.setupengine.sharedwillowinstallses\
  sionid\\\"])\\r\\n        | extend ResultSummary =
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam8\\\"])\\r\\n        \
  | extend ErrorCode_P7 =
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam7\\\"])\\r\\n        \
  | extend Operation_P6 = iif(ErrorCode_P7 == \\\"-2146889721\\\", \\\"Install -
  Win10SDK\\\",
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam6\\\"]))\\r\\n        \
  | extend PackageFailureMessage = strcat(PackageId, \\\"_\\\", ErrorCode_P7,
  \\\"_\\\", Operation_P6)\\r\\n        | join kind=leftouter (
  \\r\\n                                cluster(\\\"DDTelInsights\\\").database(\
  \\\"Playground\\\").SetupErrorRemapper \\r\\n                              )
  \\r\\n                              on $left.ErrorCode_P7 ==
  $right.FilterInSignature\\r\\n        | extend PackageFailureMessage =
  iif(isempty(Title), PackageFailureMessage, Title)\\r\\n        | where
  isnotempty(SharedWillowInstallSessionId)\\r\\n        | project PackageId,
  SharedWillowInstallSessionId, PackageFailureMessage, PackageErrorCode =
  ErrorCode_P7\\r\\n    ) on PackageId, $left.InstallSessionId ==
  $right.SharedWillowInstallSessionId\\r\\n| join kind=leftouter \\r\\n     (
  cluster('Ddtelvsraw').database('VS').RawEventsVS\\r\\n        | where
  EventName == \\\"vs/setupengine/packagefailure\\\"\\r\\n        | where
  IsInternal == false\\r\\n        | extend PackageId =
  tostring(Properties[\\\"vs.setupengine.packageid\\\"])\\r\\n        | extend
  SharedWillowInstallSessionId =
  tostring(Properties[\\\"context.default.vs.setupengine.sharedwillowinstallses\
  sionid\\\"])\\r\\n        | extend ResultSummary =
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam8\\\"])\\r\\n        \
  | extend ErrorCode_P7 =
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam7\\\"])\\r\\n        \
  | extend Operation_P6 = iif(ErrorCode_P7 == \\\"-2146889721\\\", \\\"Install -
  Win10SDK\\\",
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam6\\\"]))\\r\\n        \
  | extend PackageFailureMessage = strcat(PackageId, \\\"_\\\", ErrorCode_P7,
  \\\"_\\\", Operation_P6)\\r\\n        | join kind=leftouter (
  \\r\\n                                cluster(\\\"DDTelInsights\\\").database(\
  \\\"Playground\\\").SetupErrorRemapper \\r\\n                              )
  \\r\\n                              on $left.ErrorCode_P7 ==
  $right.FilterInSignature\\r\\n        | extend PackageFailureMessage =
  iif(isempty(Title), PackageFailureMessage, Title)\\r\\n        |
  project   rPackageId = PackageId,
  \\r\\n                    rSharedWillowInstallSessionId =
  SharedWillowInstallSessionId, \\r\\n                    rPackageFailureMessage
  = PackageFailureMessage,\\r\\n                    rPackageErrorCode =
  ErrorCode_P7\\r\\n     ) on $left.PackageId == $right.rPackageId,
  $left.InstallSessionId == $right.rSharedWillowInstallSessionId\\r\\n| extend
  ReportErrorMessage = iif(isnotempty(PackageFailureMessage),
  PackageFailureMessage,\\r\\n                                    iif(isnotempt\
  y(rPackageFailureMessage), rPackageFailureMessage, ReportErrorMessage))\\r\\n|
  extend ReportErrorCode = iif(isnotempty(PackageErrorCode),
  PackageErrorCode,\\r\\n                                    iif(isnotempty(rPa\
  ckageErrorCode), rPackageErrorCode, ReportErrorMessage))\\r\\n| summarize
  machineCount = dcount(MacAddressHash, 2) by errorMessage = ReportErrorMessage,
  operationResult = GeneralResult, exception = ReportException, errorCode =
  ReportErrorCode\\r\\n| extend errorMessageForJoin =
  tolower(replace(\\\"\\\\\\\\s*\\\", \\\"\\\", errorMessage))\\r\\n| where
  errorMessage != \\\"\\\"\\r\\n| extend key=1\\r\\n| join kind=inner total on
  key\\r\\n| extend percentageMachines = todouble(machineCount) / totalMachines
  * 100\\r\\n| join kind=leftouter bugs on $left.errorMessageForJoin ==
  $right.errorMessage\\r\\n| extend errorMessage = iif(errorMessage contains
  \\\"Underlying stream has closed\\\", \\\"The underlying stream has
  closed\\\", errorMessage)\\r\\n| extend errorCode = iif(errorCode contains
  \\\"Underlying stream has closed\\\", \\\"The underlying stream has
  closed\\\", errorCode)\\r\\n| project errorMessage, operationResult,
  exception, machineCount, round(percentageMachines,2), bugId, errorCode\\r\\n|
  order by percentageMachines
  desc\\r\\n}\",\"inputParameters\":[{\"name\":\"releaseName\",\"cslType\":\"st\
  ring\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\"channelId\",\
  \"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"}]},{\"na\
  me\":\"Setup100_Failures_IntPreview\",\"docstring\":\"Return failures per
  release\",\"body\":\"{\\r\\nlet bugs =
  cluster(\\\"DDTelInsights\\\").database(\\\"Playground\\\").SetupErrorToBugMa\
  pping\\r\\n    | where isempty(Ignore) and isnotempty(IssueId)\\r\\n    |
  extend IssueId = toint(IssueId)\\r\\n    | summarize bugId = any(IssueId) by
  errorMessage = tolower(replace(\\\"\\\\\\\\s*\\\", \\\"\\\",
  ErrorMessage));\\r\\nlet versions =
  cluster(\\\"Ddtelvsraw\\\").database(\\\"LookupTables\\\").VS_Telemetry_Relea\
  ses_Func()\\r\\n                        | where ProductDisplayVersion contains
  releaseName\\r\\n                        | distinct ManifestVersion;\\r\\nlet
  events =
  cluster(\\\"DDTelInsights\\\").database(\\\"DDTelInsights\\\").SetupWillowIns\
  tallProductMerged\\r\\n| where ChannelId ==
  \\\"VisualStudio.15.IntPreview\\\"\\r\\n| where AppVersion in (versions)
  \\r\\n    | where GeneralReportResult in
  (\\\"Success\\\",\\\"Failure\\\",\\\"MissingEnd\\\",\\\"Cancel\\\",\\\"Block\\\
  \",\\\"Warning\\\")\\r\\n    | project   InstallSessionId,
  \\r\\n                GeneralResult = GeneralReportResult,
  \\r\\n                FailedPackageIds,\\r\\n                ErrorMessage,
  \\r\\n                MacAddressHash;\\r\\nlet errors = events\\r\\n    |
  where GeneralResult in (\\\"Warning\\\", \\\"Failure\\\")\\r\\n;\\r\\nlet
  total = errors \\r\\n    | summarize totalMachines = dcount(MacAddressHash, 2)
  \\r\\n    | project key = 1, totalMachines;\\r\\nerrors\\r\\n    | parse
  ErrorMessage with GeneralException \\\": \\\" GeneralError \\\"\\\\n\\\"
  *\\r\\n    | parse ErrorMessage with
  \\\"Microsoft.VisualStudio.Setup.PackageFailureException: \\\" PackageError
  \\\"\\\\n\\\" *\\r\\n    | extend ReportErrorMessage =
  iif(isempty(PackageError), GeneralError, PackageError) \\r\\n    | extend
  ReportErrorMessage = iif(isempty(ReportErrorMessage), ErrorMessage,
  ReportErrorMessage) \\r\\n    | extend ReportException =
  iif(isempty(PackageError), GeneralException, \\\"PackageFailureException\\\")
  \\r\\n    | extend ReportException = iif(isempty(ReportException),
  \\\"Unknown\\\", ReportException) \\r\\n    | parse ReportErrorMessage with
  MessageToKeep \\\";\\\" *  // If there are multiple package report failures,
  take the first one\\r\\n    | extend ReportErrorMessage =
  iif(isempty(MessageToKeep), ReportErrorMessage, MessageToKeep)\\r\\n    |
  parse FailedPackageIds with \\\"[\\\"\\\"\\\" PackageIds \\\"\\\"\\\"]\\\"
  *  // If there are multiple package report failures, take the first
  one\\r\\n    | parse PackageIds with PackageId \\\",\\\" *  // If there are
  multiple package report failures, take the first one\\r\\n    | extend
  PackageId = trim(\\\"\\\\\\\"\\\", tostring(iif(isempty(PackageId) and
  PackageIds != \\\"\\\", PackageIds, PackageId)))\\r\\n    | extend
  ReportErrorMessage = iif(ReportErrorMessage contains 'Недостаточно места на
  диске.', 'There is not enough space on the
  disk.',\\r\\n                                iif(ReportErrorMessage contains
  '磁盘空间不足。', 'There is not enough space on the
  disk.',\\r\\n                                iif(ReportErrorMessage contains
  '디스크 공간이 부족합니다.', 'There is not enough space on the
  disk.',\\r\\n                                iif(ReportErrorMessage contains
  'Microsoft.VisualStudio.Setup.ChannelsLockedException', 'Exception of type
  \\\\'Microsoft.VisualStudio.Setup.ChannelsLockedException\\\\' was
  thrown.',\\r\\n                                iif(ReportException =~
  'System.NullReferenceException', 'Object reference not set to an instance of
  an object.',\\r\\n                                iif(ReportErrorMessage
  contains 'There is not enough space on the disk.', 'There is not enough space
  on the disk.', ReportErrorMessage))))))\\r\\n| join kind=leftouter
  \\r\\n    (cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").Dat\
  aModelFault\\r\\n        | where EventName ==
  \\\"vs/setupengine/packagefailure\\\"\\r\\n        | extend OperationType =
  tostring(Properties[\\\"vs.setupengine.operationtype\\\"])\\r\\n        |
  extend PackageId =
  tostring(Properties[\\\"vs.setupengine.packageid\\\"])\\r\\n        | extend
  SharedWillowInstallSessionId =
  tostring(Properties[\\\"context.default.vs.setupengine.sharedwillowinstallses\
  sionid\\\"])\\r\\n        | extend ResultSummary =
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam8\\\"])\\r\\n        \
  | extend ErrorCode_P7 =
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam7\\\"])\\r\\n        \
  | extend Operation_P6 = iif(ErrorCode_P7 == \\\"-2146889721\\\", \\\"Install -
  Win10SDK\\\",
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam6\\\"]))\\r\\n        \
  | extend PackageFailureMessage = strcat(PackageId, \\\"_\\\", ErrorCode_P7,
  \\\"_\\\", Operation_P6)\\r\\n        | where
  isnotempty(SharedWillowInstallSessionId)\\r\\n        | join kind=leftouter (
  \\r\\n                                cluster(\\\"DDTelInsights\\\").database(\
  \\\"Playground\\\").SetupErrorRemapper \\r\\n                              )
  \\r\\n                              on $left.ErrorCode_P7 ==
  $right.FilterInSignature\\r\\n        | extend PackageFailureMessage =
  iif(isempty(Title), PackageFailureMessage, Title)\\r\\n        | project
  PackageId, SharedWillowInstallSessionId, PackageFailureMessage,
  PackageErrorCode = ErrorCode_P7\\r\\n    ) on PackageId,
  $left.InstallSessionId == $right.SharedWillowInstallSessionId\\r\\n| join
  kind=leftouter \\r\\n     (
  cluster('Ddtelvsraw').database('VS').RawEventsVS\\r\\n        | where
  EventName == \\\"vs/setupengine/packagefailure\\\"\\r\\n        | extend
  PackageId =
  tostring(Properties[\\\"vs.setupengine.packageid\\\"])\\r\\n        | extend
  SharedWillowInstallSessionId =
  tostring(Properties[\\\"context.default.vs.setupengine.sharedwillowinstallses\
  sionid\\\"])\\r\\n        | extend ResultSummary =
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam8\\\"])\\r\\n        \
  | extend ErrorCode_P7 =
  tostring(Properties[\\\"Reserved.DataModel.Fault.BucketParam7\\\"])\\r\\n        \
  | extend Operation_P6 = iif(ErrorCode_P7 == \\\"-2146889721\\\", \\\"Install -
  Win10SDK\\\",
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam6\\\"]))\\r\\n        \
  | extend PackageFailureMessage = strcat(PackageId, \\\"_\\\", ErrorCode_P7,
  \\\"_\\\", Operation_P6)\\r\\n        | join kind=leftouter (
  \\r\\n                                cluster(\\\"DDTelInsights\\\").database(\
  \\\"Playground\\\").SetupErrorRemapper \\r\\n                              )
  \\r\\n                              on $left.ErrorCode_P7 ==
  $right.FilterInSignature\\r\\n        | extend PackageFailureMessage =
  iif(isempty(Title), PackageFailureMessage, Title)\\r\\n        |
  project   rPackageId = PackageId,
  \\r\\n                    rSharedWillowInstallSessionId =
  SharedWillowInstallSessionId, \\r\\n                    rPackageFailureMessage
  = PackageFailureMessage,\\r\\n                    rPackageErrorCode =
  ErrorCode_P7\\r\\n     ) on $left.PackageId == $right.rPackageId,
  $left.InstallSessionId == $right.rSharedWillowInstallSessionId\\r\\n| extend
  ReportErrorMessage = iif(isnotempty(PackageFailureMessage),
  PackageFailureMessage,\\r\\n                                    iif(isnotempt\
  y(rPackageFailureMessage), rPackageFailureMessage, ReportErrorMessage))\\r\\n|
  extend ReportErrorCode = iif(isnotempty(PackageErrorCode),
  PackageErrorCode,\\r\\n                                    iif(isnotempty(rPa\
  ckageErrorCode), rPackageErrorCode, ReportErrorMessage))\\r\\n| summarize
  machineCount = dcount(MacAddressHash, 2) by errorMessage = ReportErrorMessage,
  operationResult = GeneralResult, exception = ReportException, errorCode =
  ReportErrorCode\\r\\n| extend errorMessageForJoin =
  tolower(replace(\\\"\\\\\\\\s*\\\", \\\"\\\", errorMessage))\\r\\n| where
  errorMessage != \\\"\\\"\\r\\n| extend key=1\\r\\n| join kind=inner total on
  key\\r\\n| extend percentageMachines = todouble(machineCount) / totalMachines
  * 100\\r\\n| join kind=leftouter bugs on $left.errorMessageForJoin ==
  $right.errorMessage\\r\\n| extend errorCode = iif(errorCode contains
  \\\"Underlying stream has closed\\\", \\\"The underlying stream has
  closed\\\", errorCode)\\r\\n| project errorMessage, operationResult,
  exception, machineCount, round(percentageMachines,2), bugId, errorCode\\r\\n|
  order by percentageMachines
  desc\\r\\n}\",\"inputParameters\":[{\"name\":\"releaseName\",\"cslType\":\"st\
  ring\",\"type\":\"System.String\",\"docstring\":\"\"}]},{\"name\":\"Setup100_\
  Issues_stage\",\"docstring\":\"Return issues from last x
  days.\",\"body\":\"{\\r\\nlet GetSurveyConfigurationError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/get-surveyconfiguration-error\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | extend ErrorMessage = ExceptionMessageHash\\r\\n    | extend
  ErrorMessage = iif(ErrorMessage contains \\\"The underlying stream has
  closed\\\", \\\"The underlying stream has closed\\\",ErrorMessage) \\r\\n    |
  extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage = trim(\\\" \\\",ErrorMessage), Type =
  EventName;\\r\\nlet DeleteShotcutFailed =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/deleteshortcutfailed\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | extend ErrorMessage = FaultDescription\\r\\n    | extend
  MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage = trim(\\\" \\\",ErrorMessage), Type =
  EventName;\\r\\nlet UserDataWriteFailed =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/userdatawritefailed\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | parse ExceptionMessageHash with Error \\\", open\\\"
  *\\r\\n    | extend Error = iff(isempty(Error), ExceptionMessageHash,
  Error)\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | summarize Hits = count(), sHits =
  dcount(SessionId), dHits = dcount(MacAddressHash) by ErrorMessage = trim(\\\"
  \\\",Error), Type = EventName;\\r\\nlet GraphConstructionError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/setupengine/graphconstructionerrors\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | extend ErrorMessage =
  Properties[\\\"vs.setupengine.errormessage\\\"]\\r\\n    | parse ErrorMessage
  with Error \\\"found in catalog\\\" *\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | summarize Hits = count(), sHits =
  dcount(SessionId), dHits = dcount(MacAddressHash) by ErrorMessage = trim(\\\"
  \\\",Error), Type = EventName;\\r\\nlet VsixInstallerFault =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where IsInternal == false\\r\\n    | where EventName
  == \\\"vs/extensionmanager/vsixinstaller/fault\\\"\\r\\n    | where
  ExceptionMessageHash !contains \\\"[UserName]\\\"\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash contains
  \\\"/admin\\\",\\\"You must have administrative privileges to install using
  the /admin switch.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash contains \\\"IncrediBuild
  Build Acceleration\\\" and ExceptionMessageHash contains
  \\\"IncrediBuildMenu\\\",\\\"Uninstall of IncrediBuild Build Acceleration
  failed. To uninstall this extension please uninstall all of the following
  components: IncrediBuildMenu, IncrediBuild - Build
  Acceleration\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash contains
  \\\"VSIXInstaller.UserCancelledException\\\",\\\"Exception of type
  'VSIXInstaller.UserCancelledException' was
  thrown.\\\",ExceptionMessageHash)\\r\\n    // This extension is already
  installed to all applicable products.\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash contains
  \\\"此扩展已安装到所有适用的产品。\\\",\\\"This extension is already installed to all
  applicable products.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash contains
  \\\"この拡張機能は、すべての適用可能な製品に既にインストールされています。\\\",\\\"This extension is already
  installed to all applicable products.\\\",ExceptionMessageHash)\\r\\n    |
  extend ExceptionMessageHash  = iif(ExceptionMessageHash contains \\\"Это
  расширение уже установлено для всех возможных продуктов.\\\",\\\"This
  extension is already installed to all applicable
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash contains \\\"Esta extensão já foi instalada em todos
  os produtos aplicáveis.\\\",\\\"This extension is already installed to all
  applicable products.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash contains \\\"Cette extension
  est déjà installée dans tous les produits applicables.\\\",\\\"This extension
  is already installed to all applicable
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash contains \\\"Rozszerzenie zostało już zainstalowane
  do wszystkich dających się zastosować produktów.\\\",\\\"This extension is
  already installed to all applicable
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash contains \\\"이 확장은 적용 가능한 모든 제품에 이미 설치되어
  있습니다.\\\",\\\"This extension is already installed to all applicable
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash contains \\\"Bu uzantı zaten uygun tüm ürünler için
  yüklü.\\\",\\\"This extension is already installed to all applicable
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash contains \\\"Questa estensione è già installata per
  tutti i prodotti utilizzabili.\\\",\\\"This extension is already installed to
  all applicable products.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash contains \\\"Diese
  Erweiterung ist bereits für alle entsprechenden Produkte
  installiert.\\\",\\\"This extension is already installed to all applicable
  products.\\\",ExceptionMessageHash)\\r\\n    // This extension is not
  installable on any currently installed products.\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash contains
  \\\"此扩展不能安装在任何当前安装的产品上。\\\",\\\"This extension is not installable on any
  currently installed products.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash contains \\\"Bu uzantı yüklü
  ürünlerden herhangi birinde yüklenebilir değil.\\\",\\\"This extension is not
  installable on any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash contains \\\"Esta extensión no se puede instalar en
  ninguno de los productos instalados actualmente.\\\",\\\"This extension is not
  installable on any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash contains \\\"Cette extension n'est installée sur
  aucun des produits actuellement installés.\\\",\\\"This extension is not
  installable on any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash contains \\\"Это расширение не может быть установлено
  ни для одного из установленных продуктов.\\\",\\\"This extension is not
  installable on any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash contains
  \\\"この拡張機能は、現在インストール済みの製品にはインストールできません。\\\",\\\"This extension is not
  installable on any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash contains \\\"이 확장은 현재 설치되어 있는 제품에 설치할 수
  없습니다.\\\",\\\"This extension is not installable on any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash contains \\\"Diese Erweiterung kann auf den derzeit
  installierten Produkten nicht installiert werden.\\\",\\\"This extension is
  not installable on any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash contains \\\"Esta extensión está ya instalada en
  todos los productos aplicables.\\\",\\\"This extension is not installable on
  any currently installed products.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash contains \\\"Esta extensão
  não é instalável em nenhum dos produtos atualmente instalados.\\\",\\\"This
  extension is not installable on any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash contains \\\"Esta extensión está ya instalada en
  todos los productos aplicables.\\\",\\\"This extension is not installable on
  any currently installed products.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"The extension
  with ID\\\" and ExceptionMessageHash endswith \\\"is not installed to any
  currently installed products.\\\",\\\"The extension with ID 'x' is not
  installed to any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"ID 为\\\" and ExceptionMessageHash
  endswith \\\"的扩展未安装到任何当前已安装的产品中。\\\",\\\"The extension with ID 'x' is not
  installed to any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"L'extension avec l\\\" and
  ExceptionMessageHash endswith \\\"est installée sur aucun des produits
  actuellement installés.\\\",\\\"The extension with ID 'x' is not installed to
  any currently installed products.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"ID 为\\\" and
  ExceptionMessageHash endswith \\\"的扩展未安装到任何当前已安装的产品中。\\\",\\\"The extension
  with ID 'x' is not installed to any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"현재 설치된 제품에 ID가 \\\" and
  ExceptionMessageHash endswith \\\"인 확장이 설치되어 있지 않습니다.\\\",\\\"The extension
  with ID 'x' is not installed to any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash endswith \\\"kimlikli uzantı yüklü ürünlerden
  herhangi birinde yüklü değil.\\\",\\\"The extension with ID 'x' is not
  installed to any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"ID 为\\\" and ExceptionMessageHash
  endswith \\\"的扩展未安装到任何当前已安装的产品中。\\\",\\\"The extension with ID 'x' is not
  installed to any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Rozszerzenie o identyfikatorze \\\"
  and ExceptionMessageHash endswith \\\"nie jest zainstalowane dla żadnego
  obecnie zainstalowanego rozszerzenia.\\\",\\\"The extension with ID 'x' is not
  installed to any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"ID\\\" and ExceptionMessageHash
  endswith \\\"の拡張機能は、現在インストールされているどの製品にもインストールされていません。\\\",\\\"The extension
  with ID 'x' is not installed to any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"A extensão com a ID\\\" and
  ExceptionMessageHash endswith \\\"não foi instalada em nenhum dos produtos
  atualmente instalados.\\\",\\\"The extension with ID 'x' is not installed to
  any currently installed products.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"L'estensione
  con ID\\\" and ExceptionMessageHash endswith \\\"non è installata in nessuno
  dei prodotti attualmente installati.\\\",\\\"The extension with ID 'x' is not
  installed to any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Расширение с идентификатором \\\" and
  ExceptionMessageHash endswith \\\"не установлено в какой-либо из установленных
  продуктов.\\\",\\\"The extension with ID 'x' is not installed to any currently
  installed products.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"La extensión
  con el identificador \\\" and ExceptionMessageHash endswith \\\"no está
  instalada en ninguno de los productos actualmente instalados.\\\",\\\"The
  extension with ID 'x' is not installed to any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Rozšíření s ID \\\" and
  ExceptionMessageHash endswith \\\"není nainstalováno do žádného z momentálně
  nainstalovaných produktů.\\\",\\\"The extension with ID 'x' is not installed
  to any currently installed products.\\\",ExceptionMessageHash)\\r\\n    |
  extend ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"Die
  Erweiterung mit der ID \\\" and ExceptionMessageHash endswith \\\"ist für
  keines der momentan installierten Produkte installiert.\\\",\\\"The extension
  with ID 'x' is not installed to any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"The extension with ID\\\" and
  ExceptionMessageHash endswith \\\"is not installed to Community.\\\",\\\"The
  extension with ID 'x' is not installed to Community | Pro |
  Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"The extension
  with ID\\\" and ExceptionMessageHash endswith \\\"is not installed to
  Pro.\\\",\\\"The extension with ID 'x' is not installed to Community | Pro |
  Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"The extension
  with ID\\\" and ExceptionMessageHash endswith \\\"is not installed to
  Enterprise.\\\",\\\"The extension with ID 'x' is not installed to Community |
  Pro | Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"Die
  Erweiterung mit der ID \\\" and ExceptionMessageHash endswith \\\"wird nicht
  für Pro installiert.\\\",\\\"The extension with ID 'x' is not installed to
  Community | Pro | Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash endswith \\\"
  Pro.\\\",\\\"The extension with ID 'x' is not installed to Community | Pro |
  Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash endswith
  \\\"Pro'.\\\",\\\"The extension with ID 'x' is not installed to Community |
  Pro | Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash endswith \\\"
  Pro。\\\",\\\"The extension with ID 'x' is not installed to Community | Pro |
  Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash endswith \\\"인 확장이 Pro에 설치되어
  있지 않습니다.\\\",\\\"The extension with ID 'x' is not installed to Community | Pro
  | Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"ID 为\\\" and
  ExceptionMessageHash endswith \\\"的扩展未安装到 Community。\\\",\\\"The extension
  with ID 'x' is not installed to Community | Pro |
  Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"ID '\\\" and
  ExceptionMessageHash endswith \\\"の拡張機能は Community にインストールされません。\\\",\\\"The
  extension with ID 'x' is not installed to Community | Pro |
  Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"Die
  Erweiterung mit der ID \\\" and ExceptionMessageHash endswith \\\"wird nicht
  für Community installiert.\\\",\\\"The extension with ID 'x' is not installed
  to Community | Pro | Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash endswith \\\"
  Community.\\\",\\\"The extension with ID 'x' is not installed to Community |
  Pro | Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash endswith
  \\\"Community'.\\\",\\\"The extension with ID 'x' is not installed to
  Community | Pro | Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash endswith \\\"
  Community。\\\",\\\"The extension with ID 'x' is not installed to Community |
  Pro | Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash endswith \\\"인 확장이 Community에
  설치되어 있지 않습니다.\\\",\\\"The extension with ID 'x' is not installed to Community
  | Pro | Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"ID 为\\\" and
  ExceptionMessageHash endswith \\\"的扩展未安装到 Enterprise。\\\",\\\"The extension
  with ID 'x' is not installed to Community | Pro |
  Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"Die
  Erweiterung mit der ID \\\" and ExceptionMessageHash endswith \\\"wird nicht
  für Enterprise installiert.\\\",\\\"The extension with ID 'x' is not installed
  to Community | Pro | Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"ID '\\\" and
  ExceptionMessageHash endswith \\\"の拡張機能は Enterprise にインストールされません。\\\",\\\"The
  extension with ID 'x' is not installed to Community | Pro |
  Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"ID '\\\" and
  ExceptionMessageHash endswith \\\"の拡張機能は Pro にインストールされません。\\\",\\\"The
  extension with ID 'x' is not installed to Community | Pro |
  Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash endswith \\\"
  Enterprise.\\\",\\\"The extension with ID 'x' is not installed to Community |
  Pro | Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash endswith
  \\\"Enterprise'.\\\",\\\"The extension with ID 'x' is not installed to
  Community | Pro | Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash endswith \\\"
  Enterprise。\\\",\\\"The extension with ID 'x' is not installed to Community |
  Pro | Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash endswith \\\"인 확장이 Enterpise에
  설치되어 있지 않습니다.\\\",\\\"The extension with ID 'x' is not installed to Community
  | Pro | Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"ID 为\\\" and
  ExceptionMessageHash endswith \\\"的扩展未安装到 Pro。\\\",\\\"The extension with ID
  'x' is not installed to Community | Pro |
  Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"Package\\\"
  and ExceptionMessageHash endswith \\\"failed to install\\\",\\\"Package 'x'
  failed to install\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"Package\\\"
  and ExceptionMessageHash endswith \\\"failed to download\\\",\\\"Package 'x'
  failed to download\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"The following
  processes need to be shut down before executing extension
  changes\\\",\\\"Blocking Processes\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"Os processos a
  seguir precisam ser encerrados antes de executar alterações de
  extensão\\\",\\\"Blocking Processes\\\",ExceptionMessageHash)\\r\\n    |
  extend ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"Перед
  тем как совершать изменения расширения, необходимо завершить следующие
  процессы:\\\",\\\"Blocking Processes\\\",ExceptionMessageHash)\\r\\n    |
  extend ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"확장 변경
  내용을 실행하기 전에 다음 프로세스를 종료해야 합니다.\\\",\\\"Blocking
  Processes\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Les processus suivants doivent être
  arrêtés avant l'exécution des modifications d'extension :\\\",\\\"Blocking
  Processes\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith
  \\\"拡張機能の変更を実行する前に、次のプロセスをシャットダウンする必要があります:\\\",\\\"Blocking
  Processes\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Uzantı değişiklikleri yürütülmeden
  önce aşağıdaki işlemlerin kapatılması gerekiyor:\\\",\\\"Blocking
  Processes\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"執行延伸模組變更前，必須先關閉下列處理序:\\\",\\\"Blocking
  Processes\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Než se provedou změny rozšíření, musí
  se vypnout tyto procesy:\\\",\\\"Blocking
  Processes\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Przed wprowadzeniem zmian rozszerzenia
  należy zamknąć następujące procesy:\\\",\\\"Blocking
  Processes\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Prima di apportare le modifiche alle
  estensioni, è necessario arrestare i processi seguenti:\\\",\\\"Blocking
  Processes\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Die folgenden Prozesse müssen
  heruntergefahren werden, bevor die Erweiterungsänderungen ausgeführt
  werden:\\\",\\\"Blocking Processes\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"Es necesario
  apagar los procesos siguientes antes de ejecutar los cambios de
  extensión:\\\",\\\"Blocking Processes\\\",ExceptionMessageHash)\\r\\n    |
  extend ExceptionMessageHash  = iif(ExceptionMessageHash endswith \\\"because
  it is being used by another process.\\\",\\\"The process cannot access the
  file 'x' because it is being used by another
  process.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"执行扩展更改前，需要关闭以下进程:\\\",\\\"Blocking
  Processes\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"No product with instance
  id(s)\\\",\\\"No product with instance id(s) x are
  installed.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Kein Produkt mit
  Instanz-ID(s)\\\",\\\"No product with instance id(s) x are
  installed.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"未安裝執行個體識別碼為 \\\",\\\"No product with
  instance id(s) x are installed.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"Продукты с
  идентификатором экземпляра \\\",\\\"No product with instance id(s) x are
  installed.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Örnek kimliği \\\",\\\"No product with
  instance id(s) x are installed.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"Nenhum produto
  com as IDs \\\",\\\"No product with instance id(s) x are
  installed.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Aucun produit avec le ou les
  ID\\\",\\\"No product with instance id(s) x are
  installed.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"No hay ningún producto instalado con
  este identificador de instancia:\\\",\\\"No product with instance id(s) x are
  installed.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"未安装具有实例\\\",\\\"No product with
  instance id(s) x are installed.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"The dependent
  package of \\\",\\\"The dependent package of 'x' cannot be found:
  y.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"找不到依赖包 \\\",\\\"The dependent package
  of 'x' cannot be found: y.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash contains
  \\\"CancelledException'\\\",\\\"Exception of type
  'VSIXInstaller.UserCancelledException' was
  thrown.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"This extension cannot be installed
  because the following references are missing:\\\",\\\"Missing
  references\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Could not find file \\\",\\\"Could not
  find file 'x'.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith
  \\\"未能找到文件\\\",\\\"Could not find file
  'x'.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Не удалось найти часть
  пути\\\",\\\"Could not find file 'x'.\\\",ExceptionMessageHash)\\r\\n    |
  extend ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"Could
  not find a part of the path\\\",\\\"Could not find a part of the path
  'x'.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"未能找到路径\\\",\\\"Could not find a part
  of the path 'x'.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"Access to the
  path \\\",\\\"Access to the path 'x' is
  denied.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Access to the registry key
  \\\",\\\"Access to the registry key 'x' is
  denied.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"WebClient download
  failed\\\",\\\"Download Failure\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"VSHiveStub.exe
  failed\\\",\\\"VSHiveStub.exe failed\\\",ExceptionMessageHash)\\r\\n    // No
  modifications could be applied.\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"无法应用修改。\\\",\\\"No modifications could
  be applied.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith
  \\\"変更を適用できませんでした。\\\",\\\"No modifications could be
  applied.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"The application\\\" and
  ExceptionMessageHash endswith \\\"is not installed.\\\",\\\"The application
  'Enterprise | Pro | Community', version x, is not
  installed.\\\",ExceptionMessageHash)\\r\\n    | where ExceptionMessageHash
  !startswith \\\"Pre-check verification\\\"\\r\\n    | where
  ExceptionMessageHash !contains (\\\"/admin\\\") \\r\\n    | where
  ExceptionMessageHash !contains (\\\"Blocking Processes\\\")\\r\\n    | where
  ExceptionMessageHash !contains (\\\"Exception of type
  'VSIXInstaller.UserCancelledException' was thrown.\\\")\\r\\n    | extend
  Error = ExceptionMessageHash\\r\\n    // Filter out known issue\\r\\n    |
  where Error != \\\"The extension with ID 'x' is not installed to any currently
  installed products.\\\"\\r\\n    | where Error != \\\"This extension is not
  installable on any currently installed products.\\\"\\r\\n    | where Error !=
  \\\"This extension is already installed to all applicable
  products.\\\"\\r\\n    | where Error != \\\"No modifications could be
  applied.\\\"\\r\\n    | where Error != \\\"No product with instance id(s) x
  are installed.\\\"\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | summarize Hits = count(), sHits =
  dcount(SessionId), dHits = dcount(MacAddressHash) by ErrorMessage = trim(\\\"
  \\\",Error), Type = EventName;\\r\\nlet SetupEngineFault =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/setupengine/fault\\\"\\r\\n    | where IsInternal == false\\r\\n    |
  extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | extend ExceptionMessageHash =
  iif(isempty(ExceptionMessageHash), FaultDescription,
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionType == \\\"System.NullReferenceException\\\",
  strcat(\\\"NullReferenceException:\\\",Properties[\\\"reserved.datamodel.faul\
  t.bucketparam6\\\"]), ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash contains
  \\\"https://download.visualstudio.microsoft.com/download\\\" and ExeName ==
  \\\"backgrounddownload\\\", strcat(ExeName,\\\": \\\",ExceptionType),
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"12029\\\", \\\"12029 Download Failure\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"The operation was canceled.\\\", \\\"The
  operation was canceled.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"已取消该操作。\\\", \\\"The
  operation was canceled.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"Operación
  cancelada.\\\", \\\"The operation was canceled.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"Операция была отменена.\\\", \\\"The operation
  was canceled.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"A operação foi
  cancelada.\\\", \\\"The operation was canceled.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"Der Vorgang wurde abgebrochen.\\\", \\\"The
  operation was canceled.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"操作は取り消されました。\\\",
  \\\"The operation was canceled.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"已取消一个任务。\\\", \\\"The
  operation was canceled.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"L'opération a été
  annulée.\\\", \\\"The operation was canceled.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"작업이 취소되었습니다.\\\", \\\"The operation was
  canceled.\\\", ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"Se canceló una tarea.\\\", \\\"A task was
  canceled.\\\", ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"The operation was canceled.\\\", \\\"The
  operation was canceled.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"文件包含损坏的数据。\\\",
  \\\"File contains corrupted data.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"Dosya bozuk veri
  içeriyor.\\\", \\\"File contains corrupted data.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"ファイルのデータが壊れています。\\\", \\\"File contains
  corrupted data.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"El archivo contiene
  datos dañados.\\\", \\\"File contains corrupted data.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"Il file contiene dati danneggiati.\\\",
  \\\"File contains corrupted data.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"Файл содержит
  поврежденные данные.\\\", \\\"File contains corrupted data.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"Plik zawiera uszkodzone dane.\\\", \\\"File
  contains corrupted data.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"Die Datei enthält
  beschädigte Daten.\\\", \\\"File contains corrupted data.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"Le fichier contient des données
  endommagées.\\\", \\\"File contains corrupted data.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"O arquivo contém dados corrompidos.\\\",
  \\\"File contains corrupted data.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"El producto se modificó
  fuera del instalador. Reintente la operación.\\\", \\\"The product was
  modified outside of this installer. Please retry the operation.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"该产品在此安装程序之外进行了修改。请重试操作。\\\", \\\"The product
  was modified outside of this installer. Please retry the operation.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"Продукт был изменен вне этой программы
  установки. Повторите операцию.\\\", \\\"The product was modified outside of
  this installer. Please retry the operation.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"Das Produkt wurde außerhalb dieses Installers
  geändert. Wiederholen Sie den Vorgang.\\\", \\\"The product was modified
  outside of this installer. Please retry the operation.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"Le produit a été modifié en dehors de ce
  programme d'installation. Réessayez l'opération.\\\", \\\"The product was
  modified outside of this installer. Please retry the operation.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"O produto foi modificado fora desse
  instalador. Tente a operação novamente.\\\", \\\"The product was modified
  outside of this installer. Please retry the operation.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"Produkt został zmodyfikowany poza tym
  instalatorem. Spróbuj ponownie wykonać operację.\\\", \\\"The product was
  modified outside of this installer. Please retry the operation.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"Jest już uruchomiona inna instalacja programu
  Visual Studio. Musisz ją zamknąć przed kontynuowaniem.\\\", \\\"Another Visual
  Studio installation is running. You'll need to close it before you
  continue.\\\", ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"Il prodotto non è stato modificato in questo
  programma di installazione. Ripetere l'operazione.\\\", \\\"The product was
  modified outside of this installer. Please retry the operation.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"製品は、このインストーラーの外部で変更されました。操作を再試行してください。\\\",
  \\\"The product was modified outside of this installer. Please retry the
  operation.\\\", ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"算术运算导致溢出。\\\", \\\"Arithmetic operation
  resulted in an overflow.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"磁盘空间不足。\\\", \\\"There
  is not enough space on the disk.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"Espacio en disco
  insuficiente.\\\", \\\"There is not enough space on the disk.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"Недостаточно места на диске.\\\", \\\"There is
  not enough space on the disk.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"Espace insuffisant sur
  le disque.\\\", \\\"There is not enough space on the disk.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"Es steht nicht genug Speicherplatz auf dem
  Datenträger zur Verfügung.\\\", \\\"There is not enough space on the
  disk.\\\", ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"另一项 Visual Studio 安装正在进行中。你需要先关闭它，然后才能继续。\\\",
  \\\"Another Visual Studio installation is running. You'll need to close it
  before you continue.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"Eine andere Visual
  Studio-Installation wird bereits ausgeführt. Schließen Sie sie, bevor Sie
  fortfahren.\\\", \\\"Another Visual Studio installation is running. You'll
  need to close it before you continue.\\\", ExceptionMessageHash)\\r\\n    |
  extend ExceptionMessageHash = iif(ExceptionMessageHash == \\\"Hay otra
  instalación de Visual Studio en ejecución. Tendrá que cerrarla para
  continuar.\\\", \\\"Another Visual Studio installation is running. You'll need
  to close it before you continue.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"Başka bir Visual Studio
  yüklemesi çalışıyor. Devam etmeden önce diğer yüklemeyi kapatmanız
  gerekir.\\\", \\\"Another Visual Studio installation is running. You'll need
  to close it before you continue.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"Outra instalação do
  Visual Studio está em execução. Será necessário fechá-la antes de
  continuar.\\\", \\\"Another Visual Studio installation is running. You'll need
  to close it before you continue.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"Une autre installation
  de Visual Studio est en cours d'exécution. Vous devez fermer cette dernière
  pour pouvoir continuer.\\\", \\\"Another Visual Studio installation is
  running. You'll need to close it before you continue.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"Запущена другая установка Visual Studio.
  Закройте ее перед тем, как продолжить.\\\", \\\"Another Visual Studio
  installation is running. You'll need to close it before you continue.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"別の Visual Studio
  のインストールが実行中であり、それを閉じてからでないと続行できません。\\\", \\\"Another Visual Studio
  installation is running. You'll need to close it before you continue.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"다른 Visual Studio 설치가 실행 중입니다. 계속하려면 설치를 취소해야
  합니다.\\\", \\\"Another Visual Studio installation is running. You'll need to
  close it before you continue.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"È in esecuzione
  un'altra installazione di Visual Studio ed è necessario chiuderla per
  continuare.\\\", \\\"Another Visual Studio installation is running. You'll
  need to close it before you continue.\\\", ExceptionMessageHash)\\r\\n    |
  extend ExceptionMessageHash = iif(ExceptionMessageHash == \\\"Esta extensión
  no se puede instalar en ninguno de los productos instalados actualmente.\\\",
  \\\"This extension cannot be installed on any of the currently installed
  products.\\\", ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"此扩展不能安装在任何当前安装的产品上。\\\", \\\"This extension
  cannot be installed on any of the currently installed products.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"La operación aritmética ha provocado un
  desbordamiento.\\\", \\\"Arithmetic operation resulted in an overflow.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash contains \\\"12029\\\",
  \\\"ERROR_WINHTTP_CANNOT_CONNECT (12029)\\\",ExceptionMessageHash)\\r\\n    |
  parse ExceptionMessageHash with FailurePackage \\\";\\\" *\\r\\n    | where
  ExceptionMessageHash !contains \\\"failed to download\\\" \\r\\n    | parse
  ExceptionStackTraceHash  with \\\"[\\\\\\\"\\\" message \\\"(\\\" *\\r\\n    |
  parse ExceptionStackTraceHash  with * \\\"at \\\" message1 \\\"(\\\"
  *\\r\\n    | parse ExceptionStackTraceHash  with message2 \\\"(\\\"
  *\\r\\n    | extend message = iif(isempty(message), message1,
  message)\\r\\n    | extend message = iif(isempty(message), message2,
  message)\\r\\n    | extend ExceptionMessageHash = iif( ExceptionMessageHash
  ==\\\"File contains corrupted data.\\\",
  message,  ExceptionMessageHash)\\r\\n    | where ExceptionMessageHash
  !contains \\\"12007\\\"\\r\\n    // Ignore the caching error since the actual
  error will be captured in the fault event before this\\r\\n    | where
  ExceptionMessageHash !contains \\\"Unable to cache catalog using
  channel\\\"\\r\\n    | summarize Hits = count(), sHits = dcount(SessionId),
  dHits = dcount(MacAddressHash) by ErrorMessage = ExceptionMessageHash, Type =
  EventName;\\r\\nlet LoadDetailsPageError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/load-detailspage-error\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | summarize Hits = count(), sHits =
  dcount(SessionId), dHits = dcount(MacAddressHash) by ErrorMessage = trim(\\\"
  \\\",FaultDescription ), Type = EventName;\\r\\nlet AppUninstallSelfFailed =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/appuninstallselffailed\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | extend ErrorMessage = ExceptionMessageHash\\r\\n    | extend
  MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage = trim(\\\" \\\",ErrorMessage), Type =
  EventName;\\r\\nlet OpenLogError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/open-log-error\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | extend ErrorMessage = FaultDescription \\r\\n    | extend
  MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage = trim(\\\" \\\",ErrorMessage), Type =
  EventName;\\r\\nlet BackgroundDownloaderUnhandledException =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/setupengine/backgrounddownload/unhandledexceptionthrown\\\"\\r\\n    |
  where IsInternal == false\\r\\n    | extend ErrorMessage =
  tostring(Properties[\\\"reserved.datamodel.fault.description\\\"])\\r\\n    |
  extend ErrorMEssage = trim(\\\" \\\",ErrorMessage)\\r\\n    | extend
  ErrorMessage = iif(ExceptionType == \\\"System.NullReferenceException\\\",
  strcat(\\\"NullReferenceException:\\\",Properties[\\\"reserved.datamodel.faul\
  t.bucketparam6\\\"]), ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage == \\\"BackgrounDownload unexpected error\\\",
  ExceptionMessageHash, ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage startswith \\\"No catalog found at
  'C:\\\\\\\\WINDOWS\\\\\\\\system32\\\\\\\\config\\\\\\\\systemprofile\\\\\\\\\
  AppData\\\\\\\\Local\\\\\\\\Microsoft\\\\\\\\VisualStudio\\\\\\\\Packages\\\\\
  \\\\_Channels\\\", \\\"No catalog found at
  'C:\\\\\\\\WINDOWS\\\\\\\\system32\\\\\\\\config\\\\\\\\systemprofile\\\\\\\\\
  AppData\\\\\\\\Local\\\\\\\\Microsoft\\\\\\\\VisualStudio\\\\\\\\Packages\\\\\
  \\\\_Channels\\\\\\\\[InstanceId]\\\\\\\\catalog.json'\\\",
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage == \\\"Cannot
  get remote settings, use default value instead. Exception: 已取消一个任务。\\\", \\\"A
  task was canceled.\\\",\\r\\n                                iif(ErrorMessage
  == \\\"Cannot get remote settings, use default value instead. Exception: A
  task was canceled.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: Eine
  Aufgabe wurde abgebrochen.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception:
  タスクが取り消されました。\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: Se
  canceló una tarea.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: Отменена
  задача.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: 작업이
  취소되었습니다.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: Uma
  tarefa foi cancelada.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: Une
  tâche a été annulée.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: Zadanie
  zostało anulowane.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception:
  Un'attività è stata annullata.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: Bir
  görev iptal edildi.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception:
  工作已取消。\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: Een taak
  is geannuleerd.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: En
  uppgift har avbrutits.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: Úloha
  byla zrušena.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: Egy
  feladat végrehajtása megszakadt.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: En
  opgave blev annulleret.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: Foi
  cancelada uma tarefa.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: En
  oppgave ble avbrutt.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: تم إلغاء
  مهمة.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception:
  Ακυρώθηκε μια εργασία.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: Tehtävä
  peruutettiin.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: En
  aktivitet har avbrutits.\\\", \\\"A task was canceled.\\\",
  ErrorMessage))))))))))))))))))))))))\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage = trim(\\\" \\\",ErrorMessage), Type =
  EventName;\\r\\nlet VSFeedbackError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/open-vsfeedback-error\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | extend ErrorMessage = ExceptionMessageHash  \\r\\n    |
  extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage = trim(\\\" \\\",ErrorMessage), Type =
  EventName;\\r\\nlet AppFinalizeFailed =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/appfinalizefailed\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | extend ErrorMessage = ExceptionMessageHash\\r\\n    | extend
  MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage = trim(\\\" \\\",ErrorMessage), Type =
  EventName;\\r\\n    let SearchFailedError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/feedbackclient/search-failed\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | extend ErrorMessage =
  tostring(Properties[\\\"vs.willow.error\\\"])\\r\\n    | extend MacAddressHash
  =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage = trim(\\\" \\\",ErrorMessage), Type =
  EventName;\\r\\n    let StartServiceHubError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/start-servicehub-error\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | extend ErrorMessage = FaultDescription\\r\\n    | extend
  MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage = trim(\\\" \\\",ErrorMessage), Type =
  EventName;\\r\\nlet QueryProductError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/query-product-error\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | extend ErrorMessage = ExceptionType\\r\\n    | extend
  ErrorMessage1 = FaultDescription\\r\\n    | extend Stack =
  ExceptionStackTraceHash\\r\\n    | parse ExceptionStackTraceHash with
  ExceptionName2 \\\": \\\" ErrorMessage2 \\\"\\\\n\\\" *\\r\\n    | parse
  ExceptionStackTraceHash with ChannelManifestDownloadExceptionPrefixString
  \\\"Unknown error\\\" ChannelManifestDownloadExceptionErrorCode \\\"\\\\n\\\"
  *\\r\\n    | parse ExceptionStackTraceHash with Garbage \\\"Unknown error\\\"
  ErrorCode1 \\\"\\\\n\\\" *\\r\\n    | parse ExceptionStackTraceHash with
  \\\"Error: \\\" ExceptionName3 \\\": \\\" ErrorMessage3 \\\"\\\\n\\\"
  *\\r\\n    | extend ErrorMessage = iif(isempty(ExceptionName3), ErrorMessage2,
  ErrorMessage3)\\r\\n    | extend ErrorMessage = iif(isempty(ErrorMessage),
  ExceptionType, ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage
  == \\\"Error\\\", FaultDescription, ErrorMessage)\\r\\n    | extend
  ErrorMessage = iif(ErrorMessage contains \\\"underlying stream has closed\\\",
  \\\"The underlying stream has closed\\\", ErrorMessage)\\r\\n    // Object
  reference not set to an instance of an object.\\r\\n    | extend ErrorMessage
  = iif(ErrorMessage contains \\\"未将对象引用设置到对象的实例。\\\", \\\"Object reference not
  set to an instance of an object.\\\", ErrorMessage)\\r\\n    | extend
  ErrorMessage = iif(ErrorMessage contains \\\"Ссылка на объект не указывает на
  экземпляр объекта.\\\", \\\"Object reference not set to an instance of an
  object.\\\", ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage
  startswith \\\"The installer manifest failed signature validation.\\\",
  \\\"The installer manifest failed signature validation.\\\",
  ErrorMessage)\\r\\n    // The installer manifest failed signature
  validation.\\r\\n    | extend ErrorMessage = iif(ErrorMessage startswith
  \\\"安装程序清单签名验证失败\\\", \\\"The installer manifest failed signature
  validation.\\\", ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage startswith \\\"El manifiesto de instalador no pudo realizar
  la validación de signatura.\\\", \\\"The installer manifest failed signature
  validation.\\\", ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage startswith \\\"O manifesto do instalador apresentou falha na
  validação da assinatura.\\\", \\\"The installer manifest failed signature
  validation.\\\", ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage startswith \\\"Манифест установщика не прошел проверку
  подписи.\\\", \\\"The installer manifest failed signature validation.\\\",
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage startswith
  \\\"安裝程式資訊清單未通過特徵標記驗證。\\\", \\\"The installer manifest failed signature
  validation.\\\", ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage startswith \\\"Échec de la validation de la signature du
  manifeste du programme d'installation.\\\", \\\"The installer manifest failed
  signature validation.\\\", ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage startswith \\\"connect ENOENT \\\", \\\"connect ENOENT\\\",
  ErrorMessage)\\r\\n    // The dependent package cannot be found: x\\r\\n    |
  extend ErrorMessage = iif(ErrorMessage startswith \\\"找不到相关程序包:\\\", \\\"The
  dependent package cannot be found: x\\\", ErrorMessage)\\r\\n    | extend
  ErrorMessage = iif(ErrorMessage startswith \\\"Das abhängige Paket wurde nicht
  gefunden\\\", \\\"The dependent package cannot be found: x\\\",
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage contains
  \\\"Не удалось найти зависимый пакет\\\", \\\"The dependent package cannot be
  found: x\\\", ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage
  startswith \\\"The dependent package cannot be found\\\", \\\"The dependent
  package cannot be found: x\\\", ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage startswith \\\"Product \\\" and ErrorMessage contains \\\"is
  not available.\\\", \\\"Product 'x' is not available\\\",
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage startswith
  \\\"Did not find product with ID \\\" and ErrorMessage contains \\\"instead
  found these versions\\\", \\\"Did not find product with ID x, instead found
  these versions [y]\\\", ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage contains \\\"https://aka.ms/vs/cleanup\\\", \\\"An instance
  of the product cannot be loaded. Please visit https://aka.ms/vs/cleanup for
  help with this issue.\\\", ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage startswith \\\"No products are registered for instance \\\",
  \\\"No products are registered for instance 'x'.\\\", ErrorMessage)\\r\\n    |
  extend ErrorMessage = iif(ErrorMessage contains \\\"Hub host 'desktopClr'\\\",
  \\\"Hub Host 'desktopClr' failure\\\", ErrorMessage)    \\r\\n    | extend
  ErrorMessage = iif(Stack contains
  \\\"System.IO.__Error.WinIOError\\\",\\\"There is not enough space on the
  disk\\\", ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ExceptionType ==
  \\\"ChannelManifestDownloadError\\\" and (Stack contains
  \\\"https://aka.ms/vs/15/release/channel\\\" or Stack contains
  \\\"https://aka.ms/vs/15/pre/channel\\\"),
  \\r\\n                                        iif(
  isempty(ChannelManifestDownloadExceptionErrorCode), \\\"Unable to download the
  channel manifest\\\", strcat(\\\"Unable to download the channel
  manifest.  Error: \\\",ChannelManifestDownloadExceptionErrorCode)),
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(Stack contains \\\"Hub
  Controller\\\",\\\"Hub Controller issue.\\\", ErrorMessage)\\r\\n    | extend
  ErrorMessage = iif(Stack contains \\\"There are no handlers for setup service
  update required notifications.\\\",\\\"NoMessageHandlerError\\\",
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage ==
  \\\"InstallerError\\\",FaultDescription,ErrorMessage)\\r\\n    | extend
  ErrorMessage = iif(ErrorMessage  == \\\"ServiceHubUnavailableError\\\",
  FaultDescription, ErrorMessage)\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage = trim(\\\" \\\",ErrorMessage), Type =
  EventName;\\r\\n    let InstallProductError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/install-product-error\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | extend ErrorMessage = ExceptionType\\r\\n    | extend
  ErrorMessage1 = FaultDescription\\r\\n    | extend Stack =
  ExceptionStackTraceHash\\r\\n    | parse ExceptionStackTraceHash with
  ExceptionName \\\";\\\" ErrorMessage \\\"\\\\n\\\" *\\r\\n    | parse
  ExceptionStackTraceHash with \\\"Error: \\\" ExceptionName2 \\\": \\\"
  ErrorMessage2 \\\"\\\\n\\\" *\\r\\n    | extend ErrorMessage =
  iif(isempty(ExceptionName), ErrorMessage2, ErrorMessage)\\r\\n    | extend
  ErrorMessage = iif(isempty(ErrorMessage), ErrorMessage1,
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage contains
  \\\"underlying stream has closed\\\", \\\"The underlying stream has
  closed\\\", ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage1
  == \\\"IOException\\\" and Stack contains
  \\\"System.IO.__Error.WinIOError\\\",\\\"There is not enough space on the
  disk\\\", ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage1 ==
  \\\"InvalidOperationException\\\" and Stack contains
  \\\"VerifyInstallationPath\\\",\\\"The specified instance 'x' cannot be
  installed to the same location or child directory of existing instance
  'y\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage1 ==
  \\\"InvalidOperationException\\\" and Stack contains
  \\\"Engine.CacheCatalogUsingChannelManager\\\",\\\"Unable to cache catalog
  using channel uri
  https://aka.ms/vs/15/release/channel\\\",ErrorMessage)\\r\\n    | extend
  ErrorMessage = iif(ErrorMessage1 == \\\"InvalidOperationException\\\" and
  Stack contains
  \\\"CheckAndSetGlobalMutex\\\",\\\"ERROR_INSTALL_ALREADY_RUNNING
  (1618)\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage1 ==
  \\\"InvalidOperationException\\\" and Stack contains
  \\\".CommonExtensions.GetProduct\\\",\\\"No products are registered for
  instance 'x'.\\\",ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage1 == \\\"InvalidOperationException\\\" and Stack contains
  \\\"ThrowIfRunningInstallationOperation\\\",\\\"An installation operation is
  still processing and must be completed before starting
  another\\\",ErrorMessage)\\r\\n    | where ExceptionType !in
  (\\\"OperationCanceledError\\\",\\\"InstallerError\\\",
  \\\"PackageFailureException\\\")\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage, Type = EventName;\\r\\n    let
  PackageFailure =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/setupengine/packagefailure\\\"\\r\\n    | where IsInternal ==
  false\\r\\n   | extend OperationType =
  tostring(Properties[\\\"vs.setupengine.operationtype\\\"])\\r\\n    | extend
  PackageId = tostring(Properties[\\\"vs.setupengine.packageid\\\"])\\r\\n    |
  extend InstallerId =
  tostring(Properties[\\\"context.default.vs.setupengine.sharedwillowinstallses\
  sionid\\\"])\\r\\n    | extend ResultSummary =
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam8\\\"])\\r\\n    |
  extend Operation_P7 =
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam7\\\"])\\r\\n    |
  extend ReturnCode_P6 = iif(Operation_P7 == \\\"-2146889721\\\", \\\"Install -
  Win10SDK\\\",
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam6\\\"]))\\r\\n    \
  | extend ErrorMessage = strcat(PackageId, \\\"_\\\", Operation_P7, \\\"_\\\",
  ReturnCode_P6)\\r\\n    | extend ErrorMessage = iif(ErrorMessage contains
  \\\"0x80072ee7\\\", \\\"WININET_E_NAME_NOT_RESOLVED (0x80072ee7)\\\",
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage contains
  \\\"2203\\\", \\\"Database: [2]. Cannot open database file. System error [3].
  (2203)\\\", ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage
  contains \\\"1303\\\", \\\"The installer has insufficient privileges to access
  this directory (1303)\\\", ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage contains \\\"1620\\\", \\\"This installation package could
  not be opened. Contact the application vendor to verify that this is a valid
  Windows Installer package. (1620)\\\", ErrorMessage)\\r\\n    | extend
  ErrorMessage = iif(ErrorMessage contains \\\"1601\\\", \\\"The Windows
  Installer Service could not be accessed (1601)\\\", ErrorMessage)\\r\\n    |
  extend ErrorMessage = iif(ErrorMessage contains \\\"-2147024784\\\", \\\"Out
  of diskspace errors performing various setup/willow operations.\\\",
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage contains
  \\\"0x80096004\\\", \\\"Setup fails due to corrupt file in temp cache\\\",
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage contains
  \\\"-2146233033\\\", \\\"GetVsixType throwing System.IO.FileFormatException
  (-2146233033)\\\", ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ReturnCode_P6 == \\\"CachePackage\\\", strcat(\\\"Error in CachePackage:
  \\\",Operation_P7), ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage contains \\\"1618\\\", \\\"ERROR_INSTALL_ALREADY_RUNNING
  (1618)\\\", ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage
  contains \\\"-2147024893_Uninstall\\\", \\\"COR_E_DIRECTORYNOTFOUND during
  Uinstall\\\", ErrorMessage)\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage, Type = EventName;    \\r\\n    // let
  Fault =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    //                        | where AdvancedServerTimestampUtc > now()
  - daysToLookback\\r\\n    //                        | where EventName ==
  \\\"vs/setupengine/fault\\\"\\r\\n    //                        | where
  IsInternal == false\\r\\n    //                        | extend ErrorMessage =
  ExceptionType\\r\\n    //                        | where ErrorMessage !in
  (\\\"OperationCanceledError\\\",\\\"InstallerError\\\")\\r\\n    //                        \
  | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage, Type = EventName;\\r\\n    let
  EvaluateInstallPatametersError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/evaluateinstallparameters-error\\\"\\r\\n    | where IsInternal
  == false\\r\\n    | extend ErrorMessage = ExceptionMessageHash\\r\\n    |
  extend ErrorMessage = iif(ErrorMessage contains @\\\"“:\\\\Program Files
  (x86)\\\\Microsoft Visual Studio\\\\2017\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  \\r\\n                                iif(ErrorMessage contains
  @\\\"':\\\\Program Files (x86)\\\\Microsoft Visual Studio\\\\2017\\\",
  @\\\"The path x is
  invalid.\\\",                                                                  \
  \\r\\n                                iif(ErrorMessage contains
  \\\"\\\\\\\":\\\\\\\\Program Files (x86)\\\\\\\\Microsoft Visual
  Studio\\\\\\\\2017\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  \\r\\n                                iif(ErrorMessage contains @\\\"is
  invalid\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  \\r\\n                                iif(ErrorMessage contains \\\" jest
  nieprawidłowa.\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  \\r\\n                                iif(ErrorMessage contains @\\\"”无效。\\\",
  @\\\"The path x is
  invalid.\\\",                                                                  \
  \\r\\n                                iif(ErrorMessage contains \\\"路徑 '\\\",
  @\\\"The path x is
  invalid.\\\",                                                                  \
  \\r\\n                                iif(ErrorMessage contains \\\"
  недопустим.\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  \\r\\n                                iif(ErrorMessage contains \\\"은(는) 잘못된
  경로입니다.\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  \\r\\n                                iif(ErrorMessage contains \\\"' non è
  valido.\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  \\r\\n                                iif(ErrorMessage contains \\\"is
  inva[USERNAME]id.\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  \\r\\n                                iif(ErrorMessage contains \\\"' n'est
  pas valide.\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  \\r\\n                                iif(ErrorMessage contains \\\" no es
  válida.\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  \\r\\n                                iif(ErrorMessage contains \\\"' é
  inválido.\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  \\r\\n                                iif(ErrorMessage contains \\\" ist
  ungültig.\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  \\r\\n                                iif(ErrorMessage contains \\\" yolu
  geçerli değil.\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  \\r\\n                                iif(ErrorMessage contains \\\" je
  neplatná.\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  \\r\\n                                iif(ErrorMessage contains \\\" jest
  nieprawidłowa.\\\", @\\\"The path x is
  invalid.\\\",                                                                   \
  \\r\\n                                iif(ErrorMessage contains \\\"
  が正しくありません。\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  \\r\\n                                iif(ErrorMessage contains \\\"La ruta de
  acceso de instalación raíz es demasiado larga para este producto.\\\",
  @\\\"The root installation path is too long for this
  product.\\\",                                                                  \
  iif(ErrorMessage contains \\\"O caminho da instalação raiz é longo demais para
  este produto.\\\", @\\\"The root installation path is too long for this
  product.\\\",                                                                  \
  iif(ErrorMessage contains \\\"Le chemin d'installation racine est trop long
  pour ce produit.\\\", @\\\"The root installation path is too long for this
  product.\\\",                                                                  \
  iif(ErrorMessage contains \\\"Główna ścieżka instalacji jest za długa dla tego
  produktu.\\\", @\\\"The root installation path is too long for this
  product.\\\",                                                                  \
  iif(ErrorMessage contains \\\"Il percorso di installazione radice è troppo
  lungo per questo prodotto.\\\", @\\\"The root installation path is too long
  for this
  product.\\\",                                                                  \
  iif(ErrorMessage contains \\\"この製品のルート インストール パスが長すぎます。\\\", @\\\"The root
  installation path is too long for this
  product.\\\",                                                                  \
  iif(ErrorMessage contains \\\"Kořenová cesta instalace je pro tento produkt
  moc dlouhá.\\\", @\\\"The root installation path is too long for this
  product.\\\",                                                                  \
  iif(ErrorMessage contains \\\"Bu ürün için kök yükleme yolu çok uzun.\\\",
  @\\\"The root installation path is too long for this
  product.\\\",                                                                  \
  iif(ErrorMessage contains \\\"根安裝路徑對此產品而言過長。\\\", @\\\"The root installation
  path is too long for this
  product.\\\",                                                                  \
  iif(ErrorMessage contains \\\"이 제품의 루트 설치 경로가 너무 깁니다.\\\", @\\\"The root
  installation path is too long for this
  product.\\\",                                                                  \
  iif(ErrorMessage contains \\\"Корневой путь установки слишком длинный для
  этого продукта.\\\", @\\\"The root installation path is too long for this
  product.\\\",                                                                  \
  iif(ErrorMessage contains \\\"根安装路径长度对于此产品过长。\\\", @\\\"The root installation
  path is too long for this
  product.\\\",                                                                  \
  iif(ErrorMessage contains \\\"Der Stamminstallationspfad ist zu lang für
  dieses Produkt.\\\", @\\\"The root installation path is too long for this
  product.\\\",                                                                  \
  iif(ErrorMessage contains @\\\"Visual Studio nejde nainstalovat do neprázdného
  adresáře\\\", @\\\"Visual Studio cannot be installed to a nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage contains @\\\" dizinine yüklenemez.\\\", @\\\"Visual Studio
  cannot be installed to a nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage contains @\\\"Non è possibile installare Visual Studio in una
  directory non vuota '\\\", @\\\"Visual Studio cannot be installed to a
  nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage contains @\\\"nonempty directory\\\", @\\\"Visual Studio
  cannot be installed to a nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage contains @\\\"Visual Studio cannot be installed to a \\\",
  @\\\"Visual Studio cannot be installed to a nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage contains @\\\"to a nonempty \\\", @\\\"Visual Studio cannot
  be installed to a nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage contains @\\\" をインストールすることはできません。\\\", @\\\"Visual Studio
  cannot be installed to a nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage startswith @\\\"Nie można zainstalować programu Visual Studio
  w katalogu \\\", @\\\"Visual Studio cannot be installed to a nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage startswith @\\\"Visual Studio cannot be installed to a
  nonempty directory\\\", @\\\"Visual Studio cannot be installed to a nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage startswith @\\\"Visual Studio ne peut pas être installé dans
  un répertoire non vide\\\", @\\\"Visual Studio cannot be installed to a
  nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage startswith @\\\"无法在非空目录\\\", @\\\"Visual Studio cannot be
  installed to a nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage startswith @\\\"O Visual Studio não pode ser instalado em um
  diretório não vazio '\\\", @\\\"Visual Studio cannot be installed to a
  nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage startswith @\\\"Visual Studio kann nicht im Verzeichnis \\\",
  @\\\"Visual Studio cannot be installed to a nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage startswith @\\\"Visual Studio를 비어 있지 않은 디렉터리 '\\\",
  @\\\"Visual Studio cannot be installed to a nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage startswith @\\\"Visual Studio невозможно установить в
  непустом каталоге \\\", @\\\"Visual Studio cannot be installed to a nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage startswith @\\\"Visual Studio 無法安裝至非空白目錄 '\\\", @\\\"Visual
  Studio cannot be installed to a nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage startswith @\\\"Visual Studio no se puede instalar en un
  directorio que no esté vacío\\\", @\\\"Visual Studio cannot be installed to a
  nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage contains @\\\" は空でないため、Visual Studio をインストールすることはできません。\\\",
  @\\\"Visual Studio cannot be installed to a nonempty
  directory\\\",                                                                                                                                  \
  ErrorMessage))))))))))))))))))))))))))))))))))))))))))))))))))\\r\\n    |
  extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage, Type = EventName;\\r\\n    let
  EndOperationGetProductError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/endoperationgetproducterror\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | parse ExceptionMessageHash with ExceptionName \\\":\\\"
  ErrorMessage \\\"\\\\n\\\" *\\r\\n    | extend ErrorMessage =
  iif(ExceptionMessageHash contains
  \\\"System.IO.__Error.WinIOError\\\",\\\"There is not enough space on the
  disk\\\", ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ExceptionName ==
  \\\"System.ObjectDisposedException\\\",FaultDescription,
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ExceptionMessageHash
  contains \\\"Hub host 'desktopClr'\\\", \\\"Hub Host 'desktopClr' failure\\\",
  ErrorMessage) \\r\\n    | extend ErrorMessage = iif(ExceptionName ==
  \\\"System.InvalidOperationException\\\" and ExceptionMessageHash contains
  \\\".CommonExtensions.GetProduct\\\",\\\"No products are registered for
  instance 'x'.\\\",ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(isempty(ErrorMessage), ExceptionMessageHash , ErrorMessage)\\r\\n    |
  extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage = trim(\\\" \\\",ErrorMessage), Type =
  EventName;\\r\\n    let CmdLineError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/cmdlineerror\\\"\\r\\n    | where IsInternal == false\\r\\n    |
  extend ErrorMessage = ExceptionType\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage, Type = EventName;\\r\\n    let JsCrash
  =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/jscrash\\\"\\r\\n    | where IsInternal == false\\r\\n    |
  extend JsCrashMessage = ExceptionMessageHash\\r\\n    | parse kind= regex
  JsCrashMessage with ErrorMessage:string \\\",\\\"\\r\\n    | extend
  ErrorMessage = iif(isempty(ErrorMessage), JsCrashMessage,
  ErrorMessage)\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage, Type = EventName;\\r\\n    let Name =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName == \\\"vs/willow/name\\\"\\r\\n    |
  where IsInternal == false\\r\\n    | extend ErrorMessage =
  FaultDescription\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage, Type = EventName;\\r\\n    let
  EvaluateModifyParametersError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/evaluatemodifyparameters-error\\\"\\r\\n    | where IsInternal
  == false\\r\\n    | extend ErrorMessage =
  tostring(Properties[\\\"VS.Willow.errorType\\\"])\\r\\n    | extend
  MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage, Type = EventName;\\r\\n    let
  Exception =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/setupengine/exception\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | extend ErrorMessage = ExceptionType\\r\\n    | extend
  MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage, Type = EventName;\\r\\n    let
  CreateShortcutFailed =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/createshortcutfailed\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | parse ExceptionMessageHash with ExceptionType1 \\\": \\\"
  Message \\\"\\\\n\\\" *\\r\\n    | extend ErrorMessage =
  iif(isempty(ExceptionType1), ExceptionMessageHash, Message)\\r\\n    | extend
  ErrorMessage = iif(ErrorMessage contains \\\"Hub host 'desktopClr'\\\",
  \\\"Hub Host 'desktopClr' failure\\\", ErrorMessage)\\r\\n    | extend
  ErrorMessage = iif(ErrorMessage contains (\\\".log' is denied.\\\"),
  \\\"Access to the path 'xxxxx\\\\\\\\xxxx.log' is denied\\\",
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage contains
  \\\"Hub Controller\\\",\\\"Hub Controller issue.\\\", ErrorMessage)\\r\\n    |
  extend ErrorMessage = iif(ErrorMessage startswith \\\"connect ENOENT\\\",
  \\\"connect ENOENT\\\", ErrorMessage)\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage, Type = EventName;\\r\\n    let
  ConfigError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/configerror\\\"\\r\\n    | where IsInternal == false\\r\\n    |
  extend ErrorMessage = FaultDescription\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage, Type =
  \\\"ConfigError\\\";\\r\\n    let BoostrapperError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/setup/bootstrapper/error\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | extend ErrorMessage = iif( isempty(ExceptionMessageHash),
  tostring(Properties[\\\"vs.setup.bootstrapper.error\\\"]),
  ExceptionMessageHash)\\r\\n    | extend ErrorMessage = iif(FaultDescription ==
  \\\"IOException\\\" and ExceptionMessageHash contains
  \\\"vs_setup_bootstrapper.json\\\", \\\"The process cannot access the file
  'C:\\\\\\\\ProgramData\\\\\\\\Microsoft\\\\\\\\VisualStudio\\\\\\\\Packages\\\
  \\\\\\_bootstrapper\\\\\\\\vs_setup_bootstrapper.json' because it is being
  used by another process.\\\",ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage == \\\"Не удалось установить файлы в целевое расположение.
  Ошибка: Недостаточно места на диске.\\\", \\\"Unable to install the files to
  target location. Error: There is not enough space on the
  disk.\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage ==
  \\\"无法将文件安装到目标位置。错误: 磁盘空间不足。\\\", \\\"Unable to install the files to target
  location. Error: There is not enough space on the
  disk.\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage ==
  \\\"Die Dateien können nicht am Zielspeicherort installiert werden. Fehler: Es
  steht nicht genug Speicherplatz auf dem Datenträger zur Verfügung.\\\",
  \\\"Unable to install the files to target location. Error: There is not enough
  space on the disk.\\\",ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage == \\\"文件包含损坏的数据。\\\", \\\"File contains corrupted
  data.\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage ==
  \\\"В системе отображения конечных точек не осталось доступных конечных
  точек.\\\", \\\"There are no more endpoints available from the endpoint
  mapper.\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage ==
  \\\"终结点映射器中没有更多的终结点可用。\\\", \\\"There are no more endpoints available from the
  endpoint mapper.\\\",ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage == \\\"Yükleme dosyalarının bütünlüğü doğrulanamıyor.
  Sertifika doğrulanamadı.\\\", \\\"Unable to verify the integrity of the
  installation files: the certificate could not be
  verified\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage
  == \\\"Não é possível verificar a integridade dos arquivos de instalação: o
  certificado não pôde ser verificado\\\", \\\"Unable to verify the integrity of
  the installation files: the certificate could not be
  verified\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage
  == \\\"설치 파일의 무결성을 검증할 수 없습니다. 인증서를 확인할 수 없습니다.\\\", \\\"Unable to verify the
  integrity of the installation files: the certificate could not be
  verified\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage
  == \\\"Impossible de vérifier l'intégrité des fichiers d'installation : le
  certificat n'a pas pu être vérifié\\\", \\\"Unable to verify the integrity of
  the installation files: the certificate could not be
  verified\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage
  == \\\"インストール ファイルの整合性を確認できません。証明書を確認できませんでした\\\", \\\"Unable to verify the
  integrity of the installation files: the certificate could not be
  verified\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage
  == \\\"无法验证安装文件的完整性: 无法验证证书\\\", \\\"Unable to verify the integrity of the
  installation files: the certificate could not be
  verified\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage
  == \\\"Die Integrität der Installationsdateien kann nicht überprüft werden:
  Überprüfung des Zertifikats nicht möglich.\\\", \\\"Unable to verify the
  integrity of the installation files: the certificate could not be
  verified\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage
  == \\\"No se puede comprobar la integridad de los archivos de instalación: no
  se pudo comprobar el certificado\\\", \\\"Unable to verify the integrity of
  the installation files: the certificate could not be
  verified\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage
  == \\\"Не удается проверить целостность установочных файлов: не удалось
  проверить сертификат.\\\", \\\"Unable to verify the integrity of the
  installation files: the certificate could not be
  verified\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage
  contains \\\"Could not find a part of the path\\\",\\\"Unable to install the
  files to target location. Error: Could not find a part of the path x.\\\",
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage contains
  \\\"d3dcompiler_47.dll\\\",\\\"Unable to install the files to target location.
  Error: Access to the path 'C:\\\\\\\\Program Files (x86)\\\\\\\\Microsoft
  Visual Studio\\\\\\\\Installer\\\\\\\\d3dcompiler_47.dll' is denied.\\\",
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage contains
  \\\"vs_installer.opc' returned HTTP status code: \\\",\\\"OPC download return
  HTTP status code x\\\", ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage contains \\\"12007\\\",\\\"WININET_E_NAME_NOT_RESOLVED
  (0x80072ee7)\\\", ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage contains \\\" HRESULT: 0x80070422)\\\", \\\"The service
  cannot be started, either because it is disabled or because it has no enabled
  devices associated with it. (Exception from HRESULT: 0x80070422)\\\",
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage contains
  \\\"or a file within it is locked by another
  program.\\\"                                           or ErrorMessage
  contains \\\"Microsoft Visual
  Studio\\\\\\\\Installer’\\\"                                           or
  ErrorMessage contains \\\"Microsoft Visual
  Studio\\\\\\\\Installer\\\\\\\"\\\"                                           \
  or ErrorMessage contains \\\"Microsoft Visual Studio\\\\\\\\Installer
  \\\"                                           or ErrorMessage contains
  \\\"Microsoft Visual
  Studio\\\\\\\\Installer'\\\"                                          or
  ErrorMessage contains \\\"Microsoft Visual
  Studio\\\\\\\\Installer,\\\"                                          or
  ErrorMessage contains \\\"Microsoft Visual
  Studio\\\\\\\\Installer”\\\"                              , \\\"Unable to
  install the files to target location. Error: The folder ‘C:\\\\\\\\Program
  Files (x86)\\\\\\\\Microsoft Visual Studio\\\\\\\\Installer’ or a file within
  it is locked by another program. Close any applications that might be using it
  and try again.\\\",ErrorMessage)\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where ErrorMessage !in (\\\"Exit
  code=1\\\",\\\"Exit code=-1073741510\\\")\\r\\n    | summarize Hits = count(),
  sHits = dcount(SessionId), dHits = dcount(MacAddressHash) by ErrorMessage,
  Type = EventName;\\r\\n    let AppUpdateDownloadFinishedFailed =
  cluster('Ddtelvsraw').database('VS').RawEventsVS\\r\\n    | where
  AdvancedServerTimestampUtc > now() - daysToLookback\\r\\n    | where EventName
  == \\\"vs/willow/appupdatedownloadfinished\\\"\\r\\n    | where IsInternal ==
  false    \\r\\n    | where
  tostring(Properties[\\\"reserved.datamodel.action.result\\\"]) ==
  \\\"Failure\\\"\\r\\n    | summarize Hits = count(), sHits =
  dcount(SessionId), dHits =dcount(MacAddressHash) by ErrorMessage =
  tostring(Properties[\\\"reserved.datamodel.action.resultsummary\\\"]),
  Type=EventName;  \\r\\n    let EngineUnhandledException =
  cluster('Ddtelvsraw').database('VS').RawEventsVS\\r\\n    | where
  AdvancedServerTimestampUtc > now() - daysToLookback\\r\\n    | where EventName
  == \\\"vs/setupengine/unhandledexception\\\"\\r\\n    | extend Error =
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam7\\\"])\\r\\n    |
  extend  Description =
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam6\\\"])
  \\r\\n    | extend Details =
  tostring(Properties[\\\"reserved.datamodel.fault.description\\\"]) \\r\\n    |
  parse Details with * \\\":\\\" * \\\": \\\" ErrorMessage \\\"\\\\n\\\"
  *\\r\\n    | extend ErrorMessage = iif (ErrorMessage contains \\\"Diskte
  yeterli yer yok.\\\", \\\"There is not enough space on the
  disk.\\\",\\r\\n                                iif(ErrorMessage contains
  \\\"There is not enough space on the disk\\\", \\\"There is not enough space
  on the disk.\\\",\\r\\n                                iif(ErrorMessage
  contains \\\"このコマンドを実行するための十分な記憶域がありません\\\", \\\"There is not enough space on
  the disk.\\\",\\r\\n                                iif(ErrorMessage contains
  \\\"Έγινε προσπάθεια εκτέλεσης μη εξουσιοδοτημένης ενέργειας.\\\",
  \\\"Attempted to perform an unauthorized
  operation.\\\",\\r\\n                                iif(ErrorMessage contains
  \\\"Attempted to perform an unauthorized operation.\\\", \\\"Attempted to
  perform an unauthorized
  operation.\\\",\\r\\n                                ErrorMessage)))))\\r\\n     \
  | summarize Hits = count(), sHits = dcount(SessionId), dHits
  =dcount(MacAddressHash) by ErrorMessage,
  Type=EventName;  \\r\\n    QueryProductError\\r\\n    |
  union                       \\r\\n    InstallProductError,                       \
  \\r\\n    PackageFailure,\\r\\n    //Fault,\\r\\n    EvaluateInstallPatameter\
  sError,\\r\\n    EndOperationGetProductError,\\r\\n    CmdLineError,\\r\\n    \
  JsCrash,\\r\\n    Name,\\r\\n    EvaluateModifyParametersError,\\r\\n    Exce\
  ption,\\r\\n    CreateShortcutFailed,\\r\\n    ConfigError,\\r\\n    Boostrap\
  perError,\\r\\n    AppUpdateDownloadFinishedFailed,\\r\\n    EngineUnhandledE\
  xception,\\r\\n    GetSurveyConfigurationError,\\r\\n    DeleteShotcutFailed,\
  \\r\\n    UserDataWriteFailed,\\r\\n    LoadDetailsPageError,\\r\\n    AppUni\
  nstallSelfFailed,\\r\\n    OpenLogError,\\r\\n    VSFeedbackError,\\r\\n    A\
  ppFinalizeFailed,\\r\\n    BackgroundDownloaderUnhandledException,\\r\\n    S\
  etupEngineFault,\\r\\n    GraphConstructionError,\\r\\n    VsixInstallerFault,\
  \\r\\n    StartServiceHubError\\r\\n    |order by dHits
  desc\\r\\n}\",\"inputParameters\":[{\"name\":\"daysToLookback\",\"cslType\":\
  \"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"}]},{\"name\":\"S\
  etup100_Issues_30days\",\"docstring\":\"Return issues from last 7
  days.\",\"body\":\"{\\r\\nSetup100_Issues_stage(totimespan(\\\"30.00:00:00\\\
  \"))\\r\\n}\",\"inputParameters\":[]},{\"name\":\"Setup100_Issues_7days\",\"d\
  ocstring\":\"Return issues from last 7
  days.\",\"body\":\"{\\r\\nSetup100_Issues_stage(totimespan(\\\"7.00:00:00\\\"\
  ))\\r\\n}\",\"inputParameters\":[]},{\"name\":\"Setup100_Issues_Preview\",\"d\
  ocstring\":\"Return issues from last x days for
  preview.\",\"body\":\"{   \\r\\nlet GetSurveyConfigurationError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/get-surveyconfiguration-error\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | where ExeVersion startswith previewVersion\\r\\n    | extend
  ErrorMessage = ExceptionMessageHash\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage contains \\\"The underlying stream has closed\\\", \\\"The
  underlying stream has closed\\\",ErrorMessage) \\r\\n    | extend
  MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage = trim(\\\" \\\",ErrorMessage), Type =
  EventName;\\r\\nlet DeleteShotcutFailed =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/deleteshortcutfailed\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | where ExeVersion startswith previewVersion\\r\\n    | extend
  ErrorMessage = FaultDescription\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage = trim(\\\" \\\",ErrorMessage), Type =
  EventName;\\r\\nlet UserDataWriteFailed =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/userdatawritefailed\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | where ExeVersion startswith previewVersion\\r\\n    | parse
  ExceptionMessageHash with Error \\\", open\\\" *\\r\\n    | extend Error =
  iff(isempty(Error), ExceptionMessageHash, Error)\\r\\n    | extend
  MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | summarize Hits = count(), sHits =
  dcount(SessionId), dHits = dcount(MacAddressHash) by ErrorMessage = trim(\\\"
  \\\",Error), Type = EventName;\\r\\nlet GraphConstructionError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/setupengine/graphconstructionerrors\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | where ExeVersion startswith previewVersion\\r\\n    | extend
  ErrorMessage = Properties[\\\"vs.setupengine.errormessage\\\"]\\r\\n    |
  parse ErrorMessage with Error \\\"found in catalog\\\" *\\r\\n    | extend
  MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | summarize Hits = count(), sHits =
  dcount(SessionId), dHits = dcount(MacAddressHash) by ErrorMessage = trim(\\\"
  \\\",Error), Type = EventName;\\r\\nlet VsixInstallerFault =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where IsInternal == false\\r\\n    | where
  ExeVersion startswith previewVsVersion\\r\\n    | where EventName ==
  \\\"vs/extensionmanager/vsixinstaller/fault\\\"\\r\\n    | where
  ExceptionMessageHash !contains \\\"[UserName]\\\"\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash contains
  \\\"/admin\\\",\\\"You must have administrative privileges to install using
  the /admin switch.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash contains \\\"IncrediBuild
  Build Acceleration\\\" and ExceptionMessageHash contains
  \\\"IncrediBuildMenu\\\",\\\"Uninstall of IncrediBuild Build Acceleration
  failed. To uninstall this extension please uninstall all of the following
  components: IncrediBuildMenu, IncrediBuild - Build
  Acceleration\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash contains
  \\\"VSIXInstaller.UserCancelledException\\\",\\\"Exception of type
  'VSIXInstaller.UserCancelledException' was
  thrown.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash contains \\\"此扩展已安装到所有适用的产品。\\\",\\\"This extension
  is already installed to all applicable
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash contains
  \\\"この拡張機能は、すべての適用可能な製品に既にインストールされています。\\\",\\\"This extension is already
  installed to all applicable products.\\\",ExceptionMessageHash)\\r\\n    |
  extend ExceptionMessageHash  = iif(ExceptionMessageHash contains \\\"Это
  расширение уже установлено для всех возможных продуктов.\\\",\\\"This
  extension is already installed to all applicable
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash contains \\\"Esta extensão já foi instalada em todos
  os produtos aplicáveis.\\\",\\\"This extension is already installed to all
  applicable products.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash contains \\\"Cette extension
  est déjà installée dans tous les produits applicables.\\\",\\\"This extension
  is already installed to all applicable
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash contains \\\"Rozszerzenie zostało już zainstalowane
  do wszystkich dających się zastosować produktów.\\\",\\\"This extension is
  already installed to all applicable
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash contains \\\"이 확장은 적용 가능한 모든 제품에 이미 설치되어
  있습니다.\\\",\\\"This extension is already installed to all applicable
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash contains \\\"Bu uzantı zaten uygun tüm ürünler için
  yüklü.\\\",\\\"This extension is already installed to all applicable
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash contains \\\"Questa estensione è già installata per
  tutti i prodotti utilizzabili.\\\",\\\"This extension is already installed to
  all applicable products.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash contains \\\"Diese
  Erweiterung ist bereits für alle entsprechenden Produkte
  installiert.\\\",\\\"This extension is already installed to all applicable
  products.\\\",ExceptionMessageHash)\\r\\n    // This extension is not
  installable on any currently installed products.\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash contains
  \\\"此扩展不能安装在任何当前安装的产品上。\\\",\\\"This extension is not installable on any
  currently installed products.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash contains \\\"Bu uzantı yüklü
  ürünlerden herhangi birinde yüklenebilir değil.\\\",\\\"This extension is not
  installable on any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash contains \\\"Esta extensión no se puede instalar en
  ninguno de los productos instalados actualmente.\\\",\\\"This extension is not
  installable on any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash contains \\\"Cette extension n'est installée sur
  aucun des produits actuellement installés.\\\",\\\"This extension is not
  installable on any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash contains \\\"Это расширение не может быть установлено
  ни для одного из установленных продуктов.\\\",\\\"This extension is not
  installable on any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash contains
  \\\"この拡張機能は、現在インストール済みの製品にはインストールできません。\\\",\\\"This extension is not
  installable on any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash contains \\\"이 확장은 현재 설치되어 있는 제품에 설치할 수
  없습니다.\\\",\\\"This extension is not installable on any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash contains \\\"Diese Erweiterung kann auf den derzeit
  installierten Produkten nicht installiert werden.\\\",\\\"This extension is
  not installable on any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash contains \\\"Esta extensión está ya instalada en
  todos los productos aplicables.\\\",\\\"This extension is not installable on
  any currently installed products.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash contains \\\"Esta extensão
  não é instalável em nenhum dos produtos atualmente instalados.\\\",\\\"This
  extension is not installable on any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash contains \\\"Esta extensión está ya instalada en
  todos los productos aplicables.\\\",\\\"This extension is not installable on
  any currently installed products.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"The extension
  with ID\\\" and ExceptionMessageHash endswith \\\"is not installed to any
  currently installed products.\\\",\\\"The extension with ID 'x' is not
  installed to any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"ID 为\\\" and ExceptionMessageHash
  endswith \\\"的扩展未安装到任何当前已安装的产品中。\\\",\\\"The extension with ID 'x' is not
  installed to any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"L'extension avec l\\\" and
  ExceptionMessageHash endswith \\\"est installée sur aucun des produits
  actuellement installés.\\\",\\\"The extension with ID 'x' is not installed to
  any currently installed products.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"ID 为\\\" and
  ExceptionMessageHash endswith \\\"的扩展未安装到任何当前已安装的产品中。\\\",\\\"The extension
  with ID 'x' is not installed to any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"현재 설치된 제품에 ID가 \\\" and
  ExceptionMessageHash endswith \\\"인 확장이 설치되어 있지 않습니다.\\\",\\\"The extension
  with ID 'x' is not installed to any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash endswith \\\"kimlikli uzantı yüklü ürünlerden
  herhangi birinde yüklü değil.\\\",\\\"The extension with ID 'x' is not
  installed to any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"ID 为\\\" and ExceptionMessageHash
  endswith \\\"的扩展未安装到任何当前已安装的产品中。\\\",\\\"The extension with ID 'x' is not
  installed to any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Rozszerzenie o identyfikatorze \\\"
  and ExceptionMessageHash endswith \\\"nie jest zainstalowane dla żadnego
  obecnie zainstalowanego rozszerzenia.\\\",\\\"The extension with ID 'x' is not
  installed to any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"ID\\\" and ExceptionMessageHash
  endswith \\\"の拡張機能は、現在インストールされているどの製品にもインストールされていません。\\\",\\\"The extension
  with ID 'x' is not installed to any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"A extensão com a ID\\\" and
  ExceptionMessageHash endswith \\\"não foi instalada em nenhum dos produtos
  atualmente instalados.\\\",\\\"The extension with ID 'x' is not installed to
  any currently installed products.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"L'estensione
  con ID\\\" and ExceptionMessageHash endswith \\\"non è installata in nessuno
  dei prodotti attualmente installati.\\\",\\\"The extension with ID 'x' is not
  installed to any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Расширение с идентификатором \\\" and
  ExceptionMessageHash endswith \\\"не установлено в какой-либо из установленных
  продуктов.\\\",\\\"The extension with ID 'x' is not installed to any currently
  installed products.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"La extensión
  con el identificador \\\" and ExceptionMessageHash endswith \\\"no está
  instalada en ninguno de los productos actualmente instalados.\\\",\\\"The
  extension with ID 'x' is not installed to any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Rozšíření s ID \\\" and
  ExceptionMessageHash endswith \\\"není nainstalováno do žádného z momentálně
  nainstalovaných produktů.\\\",\\\"The extension with ID 'x' is not installed
  to any currently installed products.\\\",ExceptionMessageHash)\\r\\n    |
  extend ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"Die
  Erweiterung mit der ID \\\" and ExceptionMessageHash endswith \\\"ist für
  keines der momentan installierten Produkte installiert.\\\",\\\"The extension
  with ID 'x' is not installed to any currently installed
  products.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"The extension with ID\\\" and
  ExceptionMessageHash endswith \\\"is not installed to Community.\\\",\\\"The
  extension with ID 'x' is not installed to Community | Pro |
  Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"The extension
  with ID\\\" and ExceptionMessageHash endswith \\\"is not installed to
  Pro.\\\",\\\"The extension with ID 'x' is not installed to Community | Pro |
  Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"The extension
  with ID\\\" and ExceptionMessageHash endswith \\\"is not installed to
  Enterprise.\\\",\\\"The extension with ID 'x' is not installed to Community |
  Pro | Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"Die
  Erweiterung mit der ID \\\" and ExceptionMessageHash endswith \\\"wird nicht
  für Pro installiert.\\\",\\\"The extension with ID 'x' is not installed to
  Community | Pro | Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash endswith \\\"
  Pro.\\\",\\\"The extension with ID 'x' is not installed to Community | Pro |
  Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash endswith
  \\\"Pro'.\\\",\\\"The extension with ID 'x' is not installed to Community |
  Pro | Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash endswith \\\"
  Pro。\\\",\\\"The extension with ID 'x' is not installed to Community | Pro |
  Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash endswith \\\"인 확장이 Pro에 설치되어
  있지 않습니다.\\\",\\\"The extension with ID 'x' is not installed to Community | Pro
  | Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"ID 为\\\" and
  ExceptionMessageHash endswith \\\"的扩展未安装到 Community。\\\",\\\"The extension
  with ID 'x' is not installed to Community | Pro |
  Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"ID '\\\" and
  ExceptionMessageHash endswith \\\"の拡張機能は Community にインストールされません。\\\",\\\"The
  extension with ID 'x' is not installed to Community | Pro |
  Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"Die
  Erweiterung mit der ID \\\" and ExceptionMessageHash endswith \\\"wird nicht
  für Community installiert.\\\",\\\"The extension with ID 'x' is not installed
  to Community | Pro | Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash endswith \\\"
  Community.\\\",\\\"The extension with ID 'x' is not installed to Community |
  Pro | Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash endswith
  \\\"Community'.\\\",\\\"The extension with ID 'x' is not installed to
  Community | Pro | Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash endswith \\\"
  Community。\\\",\\\"The extension with ID 'x' is not installed to Community |
  Pro | Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash endswith \\\"인 확장이 Community에
  설치되어 있지 않습니다.\\\",\\\"The extension with ID 'x' is not installed to Community
  | Pro | Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"ID 为\\\" and
  ExceptionMessageHash endswith \\\"的扩展未安装到 Enterprise。\\\",\\\"The extension
  with ID 'x' is not installed to Community | Pro |
  Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"Die
  Erweiterung mit der ID \\\" and ExceptionMessageHash endswith \\\"wird nicht
  für Enterprise installiert.\\\",\\\"The extension with ID 'x' is not installed
  to Community | Pro | Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"ID '\\\" and
  ExceptionMessageHash endswith \\\"の拡張機能は Enterprise にインストールされません。\\\",\\\"The
  extension with ID 'x' is not installed to Community | Pro |
  Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"ID '\\\" and
  ExceptionMessageHash endswith \\\"の拡張機能は Pro にインストールされません。\\\",\\\"The
  extension with ID 'x' is not installed to Community | Pro |
  Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash endswith \\\"
  Enterprise.\\\",\\\"The extension with ID 'x' is not installed to Community |
  Pro | Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash endswith
  \\\"Enterprise'.\\\",\\\"The extension with ID 'x' is not installed to
  Community | Pro | Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash endswith \\\"
  Enterprise。\\\",\\\"The extension with ID 'x' is not installed to Community |
  Pro | Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash endswith \\\"인 확장이 Enterpise에
  설치되어 있지 않습니다.\\\",\\\"The extension with ID 'x' is not installed to Community
  | Pro | Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"ID 为\\\" and
  ExceptionMessageHash endswith \\\"的扩展未安装到 Pro。\\\",\\\"The extension with ID
  'x' is not installed to Community | Pro |
  Enterprise.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"Package\\\"
  and ExceptionMessageHash endswith \\\"failed to install\\\",\\\"Package 'x'
  failed to install\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"Package\\\"
  and ExceptionMessageHash endswith \\\"failed to download\\\",\\\"Package 'x'
  failed to download\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"The following
  processes need to be shut down before executing extension
  changes\\\",\\\"Blocking Processes\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"Os processos a
  seguir precisam ser encerrados antes de executar alterações de
  extensão\\\",\\\"Blocking Processes\\\",ExceptionMessageHash)\\r\\n    |
  extend ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"Перед
  тем как совершать изменения расширения, необходимо завершить следующие
  процессы:\\\",\\\"Blocking Processes\\\",ExceptionMessageHash)\\r\\n    |
  extend ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"확장 변경
  내용을 실행하기 전에 다음 프로세스를 종료해야 합니다.\\\",\\\"Blocking
  Processes\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Les processus suivants doivent être
  arrêtés avant l'exécution des modifications d'extension :\\\",\\\"Blocking
  Processes\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith
  \\\"拡張機能の変更を実行する前に、次のプロセスをシャットダウンする必要があります:\\\",\\\"Blocking
  Processes\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Uzantı değişiklikleri yürütülmeden
  önce aşağıdaki işlemlerin kapatılması gerekiyor:\\\",\\\"Blocking
  Processes\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"執行延伸模組變更前，必須先關閉下列處理序:\\\",\\\"Blocking
  Processes\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Než se provedou změny rozšíření, musí
  se vypnout tyto procesy:\\\",\\\"Blocking
  Processes\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Przed wprowadzeniem zmian rozszerzenia
  należy zamknąć następujące procesy:\\\",\\\"Blocking
  Processes\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Prima di apportare le modifiche alle
  estensioni, è necessario arrestare i processi seguenti:\\\",\\\"Blocking
  Processes\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Die folgenden Prozesse müssen
  heruntergefahren werden, bevor die Erweiterungsänderungen ausgeführt
  werden:\\\",\\\"Blocking Processes\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"Es necesario
  apagar los procesos siguientes antes de ejecutar los cambios de
  extensión:\\\",\\\"Blocking Processes\\\",ExceptionMessageHash)\\r\\n    |
  extend ExceptionMessageHash  = iif(ExceptionMessageHash endswith \\\"because
  it is being used by another process.\\\",\\\"The process cannot access the
  file 'x' because it is being used by another
  process.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"执行扩展更改前，需要关闭以下进程:\\\",\\\"Blocking
  Processes\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"No product with instance
  id(s)\\\",\\\"No product with instance id(s) x are
  installed.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Kein Produkt mit
  Instanz-ID(s)\\\",\\\"No product with instance id(s) x are
  installed.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"未安裝執行個體識別碼為 \\\",\\\"No product with
  instance id(s) x are installed.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"Продукты с
  идентификатором экземпляра \\\",\\\"No product with instance id(s) x are
  installed.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Örnek kimliği \\\",\\\"No product with
  instance id(s) x are installed.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"Nenhum produto
  com as IDs \\\",\\\"No product with instance id(s) x are
  installed.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Aucun produit avec le ou les
  ID\\\",\\\"No product with instance id(s) x are
  installed.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"No hay ningún producto instalado con
  este identificador de instancia:\\\",\\\"No product with instance id(s) x are
  installed.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"未安装具有实例\\\",\\\"No product with
  instance id(s) x are installed.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"The dependent
  package of \\\",\\\"The dependent package of 'x' cannot be found:
  y.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"找不到依赖包 \\\",\\\"The dependent package
  of 'x' cannot be found: y.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash contains
  \\\"CancelledException'\\\",\\\"Exception of type
  'VSIXInstaller.UserCancelledException' was
  thrown.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"This extension cannot be installed
  because the following references are missing:\\\",\\\"Missing
  references\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Could not find file \\\",\\\"Could not
  find file 'x'.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith
  \\\"未能找到文件\\\",\\\"Could not find file
  'x'.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Не удалось найти часть
  пути\\\",\\\"Could not find file 'x'.\\\",ExceptionMessageHash)\\r\\n    |
  extend ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"Could
  not find a part of the path\\\",\\\"Could not find a part of the path
  'x'.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"未能找到路径\\\",\\\"Could not find a part
  of the path 'x'.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"Access to the
  path \\\",\\\"Access to the path 'x' is
  denied.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"Access to the registry key
  \\\",\\\"Access to the registry key 'x' is
  denied.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"WebClient download
  failed\\\",\\\"Download Failure\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith \\\"VSHiveStub.exe
  failed\\\",\\\"VSHiveStub.exe failed\\\",ExceptionMessageHash)\\r\\n    // No
  modifications could be applied.\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"无法应用修改。\\\",\\\"No modifications could
  be applied.\\\",ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash  = iif(ExceptionMessageHash startswith
  \\\"変更を適用できませんでした。\\\",\\\"No modifications could be
  applied.\\\",ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash  =
  iif(ExceptionMessageHash startswith \\\"The application\\\" and
  ExceptionMessageHash endswith \\\"is not installed.\\\",\\\"The application
  'Enterprise | Pro | Community', version x, is not
  installed.\\\",ExceptionMessageHash)\\r\\n    | where ExceptionMessageHash
  !startswith \\\"Pre-check verification\\\"\\r\\n    | where
  ExceptionMessageHash !contains (\\\"/admin\\\") \\r\\n    | where
  ExceptionMessageHash !contains (\\\"Blocking Processes\\\")\\r\\n    | where
  ExceptionMessageHash !contains (\\\"Exception of type
  'VSIXInstaller.UserCancelledException' was thrown.\\\")\\r\\n    | extend
  Error = ExceptionMessageHash\\r\\n    // Filter out known issue\\r\\n    |
  where Error != \\\"The extension with ID 'x' is not installed to any currently
  installed products.\\\"\\r\\n    | where Error != \\\"This extension is not
  installable on any currently installed products.\\\"\\r\\n    | where Error !=
  \\\"This extension is already installed to all applicable
  products.\\\"\\r\\n    | where Error != \\\"No modifications could be
  applied.\\\"\\r\\n    | where Error != \\\"No product with instance id(s) x
  are installed.\\\"\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)    \\r\\n    | summarize Hits = count(), sHits =
  dcount(SessionId), dHits = dcount(MacAddressHash) by ErrorMessage = trim(\\\"
  \\\",Error), Type = EventName;\\r\\nlet SetupEngineFault =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/setupengine/fault\\\"\\r\\n    | where IsInternal == false\\r\\n    |
  where ExeVersion startswith previewVersion or ExeVersion startswith
  previewVsVersion \\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | extend ExceptionMessageHash =
  iif(isempty(ExceptionMessageHash), FaultDescription,
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionType == \\\"System.NullReferenceException\\\",
  strcat(\\\"NullReferenceException:\\\",Properties[\\\"reserved.datamodel.faul\
  t.bucketparam6\\\"]), ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash contains
  \\\"https://download.visualstudio.microsoft.com/download\\\" and ExeName ==
  \\\"backgrounddownload\\\", strcat(ExeName,\\\": \\\",ExceptionType),
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"12029\\\", \\\"12029 Download Failure\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"文件包含损坏的数据。\\\", \\\"File contains corrupted
  data.\\\", ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"Dosya bozuk veri içeriyor.\\\", \\\"File
  contains corrupted data.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"ファイルのデータが壊れています。\\\",
  \\\"File contains corrupted data.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"El archivo contiene
  datos dañados.\\\", \\\"File contains corrupted data.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"Il file contiene dati danneggiati.\\\",
  \\\"File contains corrupted data.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"Файл содержит
  поврежденные данные.\\\", \\\"File contains corrupted data.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"Plik zawiera uszkodzone dane.\\\", \\\"File
  contains corrupted data.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"Die Datei enthält
  beschädigte Daten.\\\", \\\"File contains corrupted data.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"Le fichier contient des données
  endommagées.\\\", \\\"File contains corrupted data.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"O arquivo contém dados corrompidos.\\\",
  \\\"File contains corrupted data.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"El producto se modificó
  fuera del instalador. Reintente la operación.\\\", \\\"The product was
  modified outside of this installer. Please retry the operation.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"该产品在此安装程序之外进行了修改。请重试操作。\\\", \\\"The product
  was modified outside of this installer. Please retry the operation.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"Продукт был изменен вне этой программы
  установки. Повторите операцию.\\\", \\\"The product was modified outside of
  this installer. Please retry the operation.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"Das Produkt wurde außerhalb dieses Installers
  geändert. Wiederholen Sie den Vorgang.\\\", \\\"The product was modified
  outside of this installer. Please retry the operation.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"Le produit a été modifié en dehors de ce
  programme d'installation. Réessayez l'opération.\\\", \\\"The product was
  modified outside of this installer. Please retry the operation.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"O produto foi modificado fora desse
  instalador. Tente a operação novamente.\\\", \\\"The product was modified
  outside of this installer. Please retry the operation.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"Produkt został zmodyfikowany poza tym
  instalatorem. Spróbuj ponownie wykonać operację.\\\", \\\"The product was
  modified outside of this installer. Please retry the operation.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"Il prodotto non è stato modificato in questo
  programma di installazione. Ripetere l'operazione.\\\", \\\"The product was
  modified outside of this installer. Please retry the operation.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"製品は、このインストーラーの外部で変更されました。操作を再試行してください。\\\",
  \\\"The product was modified outside of this installer. Please retry the
  operation.\\\", ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"算术运算导致溢出。\\\", \\\"Arithmetic operation
  resulted in an overflow.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"磁盘空间不足。\\\", \\\"There
  is not enough space on the disk.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"Espacio en disco
  insuficiente.\\\", \\\"There is not enough space on the disk.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"Недостаточно места на диске.\\\", \\\"There is
  not enough space on the disk.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"Espace insuffisant sur
  le disque.\\\", \\\"There is not enough space on the disk.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"Es steht nicht genug Speicherplatz auf dem
  Datenträger zur Verfügung.\\\", \\\"There is not enough space on the
  disk.\\\", ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"另一项 Visual Studio 安装正在进行中。你需要先关闭它，然后才能继续。\\\",
  \\\"Another Visual Studio installation is running. You'll need to close it
  before you continue.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"Eine andere Visual
  Studio-Installation wird bereits ausgeführt. Schließen Sie sie, bevor Sie
  fortfahren.\\\", \\\"Another Visual Studio installation is running. You'll
  need to close it before you continue.\\\", ExceptionMessageHash)\\r\\n    |
  extend ExceptionMessageHash = iif(ExceptionMessageHash == \\\"Hay otra
  instalación de Visual Studio en ejecución. Tendrá que cerrarla para
  continuar.\\\", \\\"Another Visual Studio installation is running. You'll need
  to close it before you continue.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"Başka bir Visual Studio
  yüklemesi çalışıyor. Devam etmeden önce diğer yüklemeyi kapatmanız
  gerekir.\\\", \\\"Another Visual Studio installation is running. You'll need
  to close it before you continue.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"Jest już uruchomiona
  inna instalacja programu Visual Studio. Musisz ją zamknąć przed
  kontynuowaniem.\\\", \\\"Another Visual Studio installation is running. You'll
  need to close it before you continue.\\\", ExceptionMessageHash)\\r\\n    |
  extend ExceptionMessageHash = iif(ExceptionMessageHash == \\\"Outra instalação
  do Visual Studio está em execução. Será necessário fechá-la antes de
  continuar.\\\", \\\"Another Visual Studio installation is running. You'll need
  to close it before you continue.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"Une autre installation
  de Visual Studio est en cours d'exécution. Vous devez fermer cette dernière
  pour pouvoir continuer.\\\", \\\"Another Visual Studio installation is
  running. You'll need to close it before you continue.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"Запущена другая установка Visual Studio.
  Закройте ее перед тем, как продолжить.\\\", \\\"Another Visual Studio
  installation is running. You'll need to close it before you continue.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"別の Visual Studio
  のインストールが実行中であり、それを閉じてからでないと続行できません。\\\", \\\"Another Visual Studio
  installation is running. You'll need to close it before you continue.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"다른 Visual Studio 설치가 실행 중입니다. 계속하려면 설치를 취소해야
  합니다.\\\", \\\"Another Visual Studio installation is running. You'll need to
  close it before you continue.\\\", ExceptionMessageHash)\\r\\n    | extend
  ExceptionMessageHash = iif(ExceptionMessageHash == \\\"È in esecuzione
  un'altra installazione di Visual Studio ed è necessario chiuderla per
  continuare.\\\", \\\"Another Visual Studio installation is running. You'll
  need to close it before you continue.\\\", ExceptionMessageHash)\\r\\n    |
  extend ExceptionMessageHash = iif(ExceptionMessageHash == \\\"Esta extensión
  no se puede instalar en ninguno de los productos instalados actualmente.\\\",
  \\\"This extension cannot be installed on any of the currently installed
  products.\\\", ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"此扩展不能安装在任何当前安装的产品上。\\\", \\\"This extension
  cannot be installed on any of the currently installed products.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash == \\\"La operación aritmética ha provocado un
  desbordamiento.\\\", \\\"Arithmetic operation resulted in an overflow.\\\",
  ExceptionMessageHash)\\r\\n    | extend ExceptionMessageHash =
  iif(ExceptionMessageHash contains \\\"12029\\\",
  \\\"ERROR_WINHTTP_CANNOT_CONNECT (12029)\\\",ExceptionMessageHash) \\r\\n    |
  parse ExceptionMessageHash with FailurePackage \\\";\\\" *\\r\\n    | where
  ExceptionMessageHash !contains \\\"failed to download\\\" \\r\\n    | parse
  ExceptionStackTraceHash  with \\\"[\\\\\\\"\\\" message \\\"(\\\" *\\r\\n    |
  parse ExceptionStackTraceHash  with * \\\"at \\\" message1 \\\"(\\\"
  *\\r\\n    | parse ExceptionStackTraceHash  with message2 \\\"(\\\"
  *\\r\\n    | extend message = iif(isempty(message), message1,
  message)\\r\\n    | extend message = iif(isempty(message), message2,
  message)\\r\\n    | extend ExceptionMessageHash = iif( ExceptionMessageHash
  ==\\\"File contains corrupted data.\\\",
  message,  ExceptionMessageHash)\\r\\n    | where ExceptionMessageHash
  !contains \\\"12007\\\"\\r\\n    // Ignore the caching error since the actual
  error will be captured in the fault event before this\\r\\n    | where
  ExceptionMessageHash !contains \\\"Unable to cache catalog using
  channel\\\"\\r\\n    | summarize Hits = count(), sHits = dcount(SessionId),
  dHits = dcount(MacAddressHash) by ErrorMessage = ExceptionMessageHash, Type =
  EventName;\\r\\nlet LoadDetailsPageError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/load-detailspage-error\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | where ExeVersion startswith previewVersion\\r\\n    | extend
  MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | summarize Hits = count(), sHits =
  dcount(SessionId), dHits = dcount(MacAddressHash) by ErrorMessage = trim(\\\"
  \\\",FaultDescription ), Type = EventName;\\r\\nlet AppUninstallSelfFailed =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/appuninstallselffailed\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | where ExeVersion startswith previewVersion\\r\\n    | extend
  ErrorMessage = ExceptionMessageHash\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage = trim(\\\" \\\",ErrorMessage), Type =
  EventName;\\r\\nlet OpenLogError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/open-log-error\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | where ExeVersion startswith previewVersion\\r\\n    | extend
  ErrorMessage = FaultDescription \\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage = trim(\\\" \\\",ErrorMessage), Type =
  EventName;\\r\\nlet BackgroundDownloaderUnhandledException =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/setupengine/backgrounddownload/unhandledexceptionthrown\\\"\\r\\n    |
  where ExeVersion startswith previewVersion\\r\\n    | where IsInternal ==
  false\\r\\n    | extend ErrorMessage =
  tostring(Properties[\\\"reserved.datamodel.fault.description\\\"])\\r\\n    |
  extend ErrorMessage = iif(ExceptionType ==
  \\\"System.NullReferenceException\\\",
  strcat(\\\"NullReferenceException:\\\",Properties[\\\"reserved.datamodel.faul\
  t.bucketparam6\\\"]), ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage == \\\"BackgrounDownload unexpected error\\\",
  ExceptionMessageHash, ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage startswith \\\"No catalog found at
  'C:\\\\\\\\WINDOWS\\\\\\\\system32\\\\\\\\config\\\\\\\\systemprofile\\\\\\\\\
  AppData\\\\\\\\Local\\\\\\\\Microsoft\\\\\\\\VisualStudio\\\\\\\\Packages\\\\\
  \\\\_Channels\\\", \\\"No catalog found at
  'C:\\\\\\\\WINDOWS\\\\\\\\system32\\\\\\\\config\\\\\\\\systemprofile\\\\\\\\\
  AppData\\\\\\\\Local\\\\\\\\Microsoft\\\\\\\\VisualStudio\\\\\\\\Packages\\\\\
  \\\\_Channels\\\\\\\\[InstanceId]\\\\\\\\catalog.json'\\\",
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage == \\\"Cannot
  get remote settings, use default value instead. Exception: 已取消一个任务。\\\", \\\"A
  task was canceled.\\\",\\r\\n                                iif(ErrorMessage
  == \\\"Cannot get remote settings, use default value instead. Exception: A
  task was canceled.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: Eine
  Aufgabe wurde abgebrochen.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception:
  タスクが取り消されました。\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: Se
  canceló una tarea.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: Отменена
  задача.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: 작업이
  취소되었습니다.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: Uma
  tarefa foi cancelada.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: Une
  tâche a été annulée.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: Zadanie
  zostało anulowane.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception:
  Un'attività è stata annullata.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: Bir
  görev iptal edildi.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception:
  工作已取消。\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: Een taak
  is geannuleerd.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: En
  uppgift har avbrutits.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: Úloha
  byla zrušena.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: Egy
  feladat végrehajtása megszakadt.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: En
  opgave blev annulleret.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: Foi
  cancelada uma tarefa.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: En
  oppgave ble avbrutt.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: تم إلغاء
  مهمة.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception:
  Ακυρώθηκε μια εργασία.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: Tehtävä
  peruutettiin.\\\", \\\"A task was
  canceled.\\\",\\r\\n                                iif(ErrorMessage ==
  \\\"Cannot get remote settings, use default value instead. Exception: En
  aktivitet har avbrutits.\\\", \\\"A task was canceled.\\\",
  ErrorMessage))))))))))))))))))))))))\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage = trim(\\\" \\\",ErrorMessage), Type =
  EventName;\\r\\nlet VSFeedbackError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/open-vsfeedback-error\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | where ExeVersion startswith previewVersion\\r\\n    | extend
  ErrorMessage = ExceptionMessageHash  \\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage = trim(\\\" \\\",ErrorMessage), Type =
  EventName;\\r\\nlet AppFinalizeFailed =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/appfinalizefailed\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | where ExeVersion startswith previewVersion\\r\\n    | extend
  ErrorMessage = ExceptionMessageHash\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage = trim(\\\" \\\",ErrorMessage), Type =
  EventName;\\r\\nlet SearchFailedError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/feedbackclient/search-failed\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | where ExeVersion startswith previewVersion\\r\\n    | extend
  ErrorMessage = tostring(Properties[\\\"vs.willow.error\\\"])\\r\\n    | extend
  MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage = trim(\\\" \\\",ErrorMessage), Type =
  EventName;\\r\\nlet StartServiceHubError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/start-servicehub-error\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | where ExeVersion startswith previewVersion\\r\\n    | extend
  ErrorMessage = FaultDescription\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage = trim(\\\" \\\",ErrorMessage), Type =
  EventName;\\r\\nlet QueryProductError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/query-product-error\\\"\\r\\n    | where ExeVersion startswith
  previewVersion\\r\\n    | where IsInternal == false\\r\\n    | extend
  ErrorMessage = ExceptionType\\r\\n    | extend ErrorMessage1 =
  FaultDescription\\r\\n    | extend Stack = ExceptionStackTraceHash\\r\\n    |
  parse ExceptionStackTraceHash with ExceptionName2 \\\": \\\" ErrorMessage2
  \\\"\\\\n\\\" *\\r\\n    | parse ExceptionStackTraceHash with
  ChannelManifestDownloadExceptionPrefixString \\\"Unknown error\\\"
  ChannelManifestDownloadExceptionErrorCode \\\"\\\\n\\\" *\\r\\n    | parse
  ExceptionStackTraceHash with Garbage \\\"Unknown error\\\" ErrorCode1
  \\\"\\\\n\\\" *\\r\\n    | parse ExceptionStackTraceHash with \\\"Error: \\\"
  ExceptionName3 \\\": \\\" ErrorMessage3 \\\"\\\\n\\\" *\\r\\n    | extend
  ErrorMessage = iif(isempty(ExceptionName3), ErrorMessage2,
  ErrorMessage3)\\r\\n    | extend ErrorMessage = iif(isempty(ErrorMessage),
  ExceptionType, ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage
  == \\\"Error\\\", FaultDescription, ErrorMessage)\\r\\n    | extend
  ErrorMessage = iif(ErrorMessage contains \\\"underlying stream has closed\\\",
  \\\"The underlying stream has closed\\\", ErrorMessage)\\r\\n    // Object
  reference not set to an instance of an object.\\r\\n    | extend ErrorMessage
  = iif(ErrorMessage contains \\\"未将对象引用设置到对象的实例。\\\", \\\"Object reference not
  set to an instance of an object.\\\", ErrorMessage)\\r\\n    | extend
  ErrorMessage = iif(ErrorMessage contains \\\"Ссылка на объект не указывает на
  экземпляр объекта.\\\", \\\"Object reference not set to an instance of an
  object.\\\", ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage
  startswith \\\"The installer manifest failed signature validation.\\\",
  \\\"The installer manifest failed signature validation.\\\",
  ErrorMessage)\\r\\n    // The installer manifest failed signature
  validation.\\r\\n    | extend ErrorMessage = iif(ErrorMessage startswith
  \\\"安装程序清单签名验证失败\\\", \\\"The installer manifest failed signature
  validation.\\\", ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage startswith \\\"El manifiesto de instalador no pudo realizar
  la validación de signatura.\\\", \\\"The installer manifest failed signature
  validation.\\\", ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage startswith \\\"O manifesto do instalador apresentou falha na
  validação da assinatura.\\\", \\\"The installer manifest failed signature
  validation.\\\", ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage startswith \\\"Манифест установщика не прошел проверку
  подписи.\\\", \\\"The installer manifest failed signature validation.\\\",
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage startswith
  \\\"安裝程式資訊清單未通過特徵標記驗證。\\\", \\\"The installer manifest failed signature
  validation.\\\", ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage startswith \\\"Échec de la validation de la signature du
  manifeste du programme d'installation.\\\", \\\"The installer manifest failed
  signature validation.\\\", ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage startswith \\\"connect ENOENT \\\", \\\"connect ENOENT\\\",
  ErrorMessage)\\r\\n    // The dependent package cannot be found: x\\r\\n    |
  extend ErrorMessage = iif(ErrorMessage startswith \\\"找不到相关程序包:\\\", \\\"The
  dependent package cannot be found: x\\\", ErrorMessage)\\r\\n    | extend
  ErrorMessage = iif(ErrorMessage startswith \\\"Das abhängige Paket wurde nicht
  gefunden\\\", \\\"The dependent package cannot be found: x\\\",
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage contains
  \\\"Не удалось найти зависимый пакет\\\", \\\"The dependent package cannot be
  found: x\\\", ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage
  startswith \\\"The dependent package cannot be found\\\", \\\"The dependent
  package cannot be found: x\\\", ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage startswith \\\"Product \\\" and ErrorMessage contains \\\"is
  not available.\\\", \\\"Product 'x' is not available\\\",
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage startswith
  \\\"Did not find product with ID \\\" and ErrorMessage contains \\\"instead
  found these versions\\\", \\\"Did not find product with ID x, instead found
  these versions [y]\\\", ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage contains \\\"https://aka.ms/vs/cleanup\\\", \\\"An instance
  of the product cannot be loaded. Please visit https://aka.ms/vs/cleanup for
  help with this issue.\\\", ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage startswith \\\"No products are registered for instance \\\",
  \\\"No products are registered for instance 'x'.\\\", ErrorMessage)\\r\\n    |
  extend ErrorMessage = iif(ErrorMessage contains \\\"Hub host 'desktopClr'\\\",
  \\\"Hub Host 'desktopClr' failure\\\", ErrorMessage)    \\r\\n    | extend
  ErrorMessage = iif(Stack contains
  \\\"System.IO.__Error.WinIOError\\\",\\\"There is not enough space on the
  disk\\\", ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ExceptionType ==
  \\\"ChannelManifestDownloadError\\\" and (Stack contains
  \\\"https://aka.ms/vs/15/release/channel\\\" or Stack contains
  \\\"https://aka.ms/vs/15/pre/channel\\\"),
  \\r\\n                                        iif(
  isempty(ChannelManifestDownloadExceptionErrorCode), \\\"Unable to download the
  channel manifest\\\", strcat(\\\"Unable to download the channel
  manifest.  Error: \\\",ChannelManifestDownloadExceptionErrorCode)),
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(Stack contains \\\"Hub
  Controller\\\",\\\"Hub Controller issue.\\\", ErrorMessage)\\r\\n    | extend
  ErrorMessage = iif(Stack contains \\\"There are no handlers for setup service
  update required notifications.\\\",\\\"NoMessageHandlerError\\\",
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage ==
  \\\"InstallerError\\\",FaultDescription,ErrorMessage)\\r\\n    | extend
  ErrorMessage = iif(ErrorMessage  == \\\"ServiceHubUnavailableError\\\",
  FaultDescription, ErrorMessage)\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage = trim(\\\" \\\",ErrorMessage), Type =
  EventName;\\r\\n    let InstallProductError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/install-product-error\\\"\\r\\n    | where ExeVersion startswith
  previewVersion\\r\\n    | where IsInternal == false\\r\\n    | extend
  ErrorMessage = ExceptionType\\r\\n    | extend ErrorMessage1 =
  FaultDescription\\r\\n    | extend Stack = ExceptionStackTraceHash\\r\\n    |
  parse ExceptionStackTraceHash with ExceptionName \\\";\\\" ErrorMessage
  \\\"\\\\n\\\" *\\r\\n    | parse ExceptionStackTraceHash with \\\"Error: \\\"
  ExceptionName2 \\\": \\\" ErrorMessage2 \\\"\\\\n\\\" *\\r\\n    | extend
  ErrorMessage = iif(isempty(ExceptionName), ErrorMessage2,
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(isempty(ErrorMessage),
  ErrorMessage1, ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage
  contains \\\"underlying stream has closed\\\", \\\"The underlying stream has
  closed\\\", ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage1
  == \\\"IOException\\\" and Stack contains
  \\\"System.IO.__Error.WinIOError\\\",\\\"There is not enough space on the
  disk\\\", ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage1 ==
  \\\"InvalidOperationException\\\" and Stack contains
  \\\"VerifyInstallationPath\\\",\\\"The specified instance 'x' cannot be
  installed to the same location or child directory of existing instance
  'y\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage1 ==
  \\\"InvalidOperationException\\\" and Stack contains
  \\\"Engine.CacheCatalogUsingChannelManager\\\",\\\"Unable to cache catalog
  using channel uri
  https://aka.ms/vs/15/release/channel\\\",ErrorMessage)\\r\\n    | extend
  ErrorMessage = iif(ErrorMessage1 == \\\"InvalidOperationException\\\" and
  Stack contains
  \\\"CheckAndSetGlobalMutex\\\",\\\"ERROR_INSTALL_ALREADY_RUNNING
  (1618)\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage1 ==
  \\\"InvalidOperationException\\\" and Stack contains
  \\\".CommonExtensions.GetProduct\\\",\\\"No products are registered for
  instance 'x'.\\\",ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage1 == \\\"InvalidOperationException\\\" and Stack contains
  \\\"ThrowIfRunningInstallationOperation\\\",\\\"An installation operation is
  still processing and must be completed before starting
  another\\\",ErrorMessage)\\r\\n    | where ExceptionType !in
  (\\\"OperationCanceledError\\\",\\\"InstallerError\\\",
  \\\"PackageFailureException\\\")\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage, Type = EventName;\\r\\n    let
  PackageFailure =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/setupengine/packagefailure\\\"\\r\\n    | where
  tostring(Properties[\\\"context.default.vs.setupengine.id\\\"]) contains
  \\\"preview\\\"\\r\\n    | where IsInternal == false\\r\\n    | extend
  OperationType =
  tostring(Properties[\\\"vs.setupengine.operationtype\\\"])\\r\\n    | extend
  PackageId = tostring(Properties[\\\"vs.setupengine.packageid\\\"])\\r\\n    |
  extend InstallerId =
  tostring(Properties[\\\"context.default.vs.setupengine.sharedwillowinstallses\
  sionid\\\"])\\r\\n    | extend ResultSummary =
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam8\\\"])\\r\\n    |
  extend Operation_P7 =
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam7\\\"])\\r\\n    |
  extend ReturnCode_P6 = iif(Operation_P7 == \\\"-2146889721\\\", \\\"Install -
  Win10SDK\\\",
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam6\\\"]))\\r\\n    \
  | extend ErrorMessage = strcat(PackageId, \\\"_\\\", Operation_P7, \\\"_\\\",
  ReturnCode_P6)\\r\\n    | extend ErrorMessage = iif(ErrorMessage contains
  \\\"0x80072ee7\\\", \\\"WININET_E_NAME_NOT_RESOLVED (0x80072ee7)\\\",
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage contains
  \\\"2203\\\", \\\"MSI 2203 - Database: [2]. Cannot open database file. System
  error [3].\\\", ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage contains \\\"1303\\\", \\\"The installer has insufficient
  privileges to access this directory (1303)\\\", ErrorMessage)\\r\\n    |
  extend ErrorMessage = iif(ErrorMessage contains \\\"1620\\\", \\\"MSI 1620 -
  ERROR_INSTALL_PACKAGE_INVALID\\\", ErrorMessage)\\r\\n    | extend
  ErrorMessage = iif(ErrorMessage contains \\\"1601\\\", \\\"The Windows
  Installer Service could not be accessed (1601)\\\", ErrorMessage)\\r\\n    |
  extend ErrorMessage = iif(ErrorMessage contains \\\"-2147024784\\\", \\\"Out
  of diskspace errors performing various setup/willow operations.\\\",
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage contains
  \\\"0x80096004\\\", \\\"Setup fails due to corrupt file in temp cache\\\",
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage contains
  \\\"-2146233033\\\", \\\"GetVsixType throwing System.IO.FileFormatException
  (-2146233033)\\\", ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ReturnCode_P6 == \\\"CachePackage\\\", strcat(\\\"Error in CachePackage:
  \\\",Operation_P7), ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage contains \\\"1618\\\", \\\"ERROR_INSTALL_ALREADY_RUNNING
  (1618)\\\", ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage
  contains \\\"-2147024893_Uninstall\\\", \\\"COR_E_DIRECTORYNOTFOUND during
  Uinstall\\\", ErrorMessage)\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage, Type = EventName;    \\r\\n    // let
  Fault =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    //                        | where AdvancedServerTimestampUtc > now()
  - daysToLookback\\r\\n    //                        | where EventName ==
  \\\"vs/setupengine/fault\\\"\\r\\n    //                        | where
  IsInternal == false\\r\\n    //                        | extend ErrorMessage =
  ExceptionType\\r\\n    //                        | where ErrorMessage !in
  (\\\"OperationCanceledError\\\",\\\"InstallerError\\\")\\r\\n    //                        \
  | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage, Type = EventName;\\r\\n    let
  EvaluateInstallPatametersError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/evaluateinstallparameters-error\\\"\\r\\n    | where ExeVersion
  startswith previewVersion\\r\\n    | where IsInternal == false\\r\\n    |
  extend ErrorMessage = ExceptionMessageHash\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage contains @\\\"“:\\\\Program Files (x86)\\\\Microsoft Visual
  Studio\\\\2017\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  iif(ErrorMessage contains @\\\"':\\\\Program Files (x86)\\\\Microsoft Visual
  Studio\\\\2017\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  iif(ErrorMessage contains \\\"\\\\\\\":\\\\\\\\Program Files
  (x86)\\\\\\\\Microsoft Visual Studio\\\\\\\\2017\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  iif(ErrorMessage contains @\\\"is invalid\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  iif(ErrorMessage contains \\\" jest nieprawidłowa.\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  iif(ErrorMessage contains @\\\"”无效。\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  iif(ErrorMessage contains \\\"路徑 '\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  iif(ErrorMessage contains \\\" недопустим.\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  iif(ErrorMessage contains \\\"은(는) 잘못된 경로입니다.\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  iif(ErrorMessage contains \\\"' non è valido.\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  iif(ErrorMessage contains \\\"is inva[USERNAME]id.\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  iif(ErrorMessage contains \\\"' n'est pas valide.\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  iif(ErrorMessage contains \\\" no es válida.\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  iif(ErrorMessage contains \\\"' é inválido.\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  iif(ErrorMessage contains \\\" ist ungültig.\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  iif(ErrorMessage contains \\\" yolu geçerli değil.\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  iif(ErrorMessage contains \\\" je neplatná.\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  iif(ErrorMessage contains \\\" jest nieprawidłowa.\\\", @\\\"The path x is
  invalid.\\\",                                                                   \
  iif(ErrorMessage contains \\\" が正しくありません。\\\", @\\\"The path x is
  invalid.\\\",                                                                  \
  iif(ErrorMessage contains \\\"La ruta de acceso de instalación raíz es
  demasiado larga para este producto.\\\", @\\\"The root installation path is
  too long for this
  product.\\\",                                                                  \
  iif(ErrorMessage contains \\\"O caminho da instalação raiz é longo demais para
  este produto.\\\", @\\\"The root installation path is too long for this
  product.\\\",                                                                  \
  iif(ErrorMessage contains \\\"Le chemin d'installation racine est trop long
  pour ce produit.\\\", @\\\"The root installation path is too long for this
  product.\\\",                                                                  \
  iif(ErrorMessage contains \\\"Główna ścieżka instalacji jest za długa dla tego
  produktu.\\\", @\\\"The root installation path is too long for this
  product.\\\",                                                                  \
  iif(ErrorMessage contains \\\"Il percorso di installazione radice è troppo
  lungo per questo prodotto.\\\", @\\\"The root installation path is too long
  for this
  product.\\\",                                                                  \
  iif(ErrorMessage contains \\\"この製品のルート インストール パスが長すぎます。\\\", @\\\"The root
  installation path is too long for this
  product.\\\",                                                                  \
  iif(ErrorMessage contains \\\"Kořenová cesta instalace je pro tento produkt
  moc dlouhá.\\\", @\\\"The root installation path is too long for this
  product.\\\",                                                                  \
  iif(ErrorMessage contains \\\"Bu ürün için kök yükleme yolu çok uzun.\\\",
  @\\\"The root installation path is too long for this
  product.\\\",                                                                  \
  iif(ErrorMessage contains \\\"根安裝路徑對此產品而言過長。\\\", @\\\"The root installation
  path is too long for this
  product.\\\",                                                                  \
  iif(ErrorMessage contains \\\"이 제품의 루트 설치 경로가 너무 깁니다.\\\", @\\\"The root
  installation path is too long for this
  product.\\\",                                                                  \
  iif(ErrorMessage contains \\\"Корневой путь установки слишком длинный для
  этого продукта.\\\", @\\\"The root installation path is too long for this
  product.\\\",                                                                  \
  iif(ErrorMessage contains \\\"根安装路径长度对于此产品过长。\\\", @\\\"The root installation
  path is too long for this
  product.\\\",                                                                  \
  iif(ErrorMessage contains \\\"Der Stamminstallationspfad ist zu lang für
  dieses Produkt.\\\", @\\\"The root installation path is too long for this
  product.\\\",                                                                  \
  iif(ErrorMessage contains @\\\"Visual Studio nejde nainstalovat do neprázdného
  adresáře\\\", @\\\"Visual Studio cannot be installed to a nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage contains @\\\" dizinine yüklenemez.\\\", @\\\"Visual Studio
  cannot be installed to a nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage contains @\\\"Non è possibile installare Visual Studio in una
  directory non vuota '\\\", @\\\"Visual Studio cannot be installed to a
  nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage contains @\\\"nonempty directory\\\", @\\\"Visual Studio
  cannot be installed to a nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage contains @\\\"Visual Studio cannot be installed to a \\\",
  @\\\"Visual Studio cannot be installed to a nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage contains @\\\"to a nonempty \\\", @\\\"Visual Studio cannot
  be installed to a nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage contains @\\\" をインストールすることはできません。\\\", @\\\"Visual Studio
  cannot be installed to a nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage startswith @\\\"Nie można zainstalować programu Visual Studio
  w katalogu \\\", @\\\"Visual Studio cannot be installed to a nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage startswith @\\\"Visual Studio cannot be installed to a
  nonempty directory\\\", @\\\"Visual Studio cannot be installed to a nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage startswith @\\\"Visual Studio ne peut pas être installé dans
  un répertoire non vide\\\", @\\\"Visual Studio cannot be installed to a
  nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage startswith @\\\"无法在非空目录\\\", @\\\"Visual Studio cannot be
  installed to a nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage startswith @\\\"O Visual Studio não pode ser instalado em um
  diretório não vazio '\\\", @\\\"Visual Studio cannot be installed to a
  nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage startswith @\\\"Visual Studio kann nicht im Verzeichnis \\\",
  @\\\"Visual Studio cannot be installed to a nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage startswith @\\\"Visual Studio를 비어 있지 않은 디렉터리 '\\\",
  @\\\"Visual Studio cannot be installed to a nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage startswith @\\\"Visual Studio невозможно установить в
  непустом каталоге \\\", @\\\"Visual Studio cannot be installed to a nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage startswith @\\\"Visual Studio 無法安裝至非空白目錄 '\\\", @\\\"Visual
  Studio cannot be installed to a nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage startswith @\\\"Visual Studio no se puede instalar en un
  directorio que no esté vacío\\\", @\\\"Visual Studio cannot be installed to a
  nonempty
  directory\\\",                                                                  \
  iif(ErrorMessage contains @\\\" は空でないため、Visual Studio をインストールすることはできません。\\\",
  @\\\"Visual Studio cannot be installed to a nonempty
  directory\\\",                                                                                                                                  \
  ErrorMessage))))))))))))))))))))))))))))))))))))))))))))))))))\\r\\n    |
  extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage, Type = EventName;\\r\\n    let
  EndOperationGetProductError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/endoperationgetproducterror\\\"\\r\\n    | where ExeVersion
  startswith previewVersion\\r\\n    | where IsInternal == false\\r\\n    |
  parse ExceptionMessageHash with ExceptionName \\\":\\\" ErrorMessage
  \\\"\\\\n\\\" *\\r\\n    | extend ErrorMessage = iif(ExceptionMessageHash
  contains \\\"System.IO.__Error.WinIOError\\\",\\\"There is not enough space on
  the disk\\\", ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ExceptionMessageHash contains \\\"Hub host 'desktopClr'\\\", \\\"Hub Host
  'desktopClr' failure\\\", ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ExceptionName == \\\"System.ObjectDisposedException\\\",FaultDescription,
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ExceptionName ==
  \\\"System.InvalidOperationException\\\" and ExceptionMessageHash contains
  \\\".CommonExtensions.GetProduct\\\",\\\"No products are registered for
  instance 'x'.\\\",ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(isempty(ErrorMessage), ExceptionMessageHash , ErrorMessage)\\r\\n    |
  extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage = trim(\\\" \\\",ErrorMessage), Type =
  EventName;\\r\\n    let CmdLineError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/cmdlineerror\\\"\\r\\n    | where ExeVersion startswith
  previewVersion\\r\\n    | where IsInternal == false\\r\\n    | extend
  ErrorMessage = ExceptionType\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage, Type = EventName;\\r\\n    let JsCrash
  =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/jscrash\\\"\\r\\n    | where ExeVersion startswith
  previewVersion\\r\\n    | where IsInternal == false\\r\\n    | extend
  JsCrashMessage = ExceptionMessageHash\\r\\n    | parse kind= regex
  JsCrashMessage with ErrorMessage:string \\\",\\\"\\r\\n    | extend
  ErrorMessage = iif(isempty(ErrorMessage), JsCrashMessage,
  ErrorMessage)\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage, Type = EventName;\\r\\n    let Name =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName == \\\"vs/willow/name\\\"\\r\\n    |
  where ExeVersion startswith previewVersion\\r\\n    | where IsInternal ==
  false\\r\\n    | extend ErrorMessage = FaultDescription\\r\\n    | extend
  MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage, Type = EventName;\\r\\n    let
  EvaluateModifyParametersError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/evaluatemodifyparameters-error\\\"\\r\\n    | where ExeVersion
  startswith previewVersion\\r\\n    | where IsInternal == false\\r\\n    |
  extend ErrorMessage =
  tostring(Properties[\\\"VS.Willow.errorType\\\"])\\r\\n    | extend
  MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage, Type = EventName;\\r\\n    let
  Exception =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/setupengine/exception\\\"\\r\\n    | where ExeVersion startswith
  previewVersion\\r\\n    | where IsInternal == false\\r\\n    | extend
  ErrorMessage = ExceptionType\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage, Type = EventName;\\r\\n    let
  CreateShortcutFailed =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/createshortcutfailed\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | where ExeVersion startswith previewVersion\\r\\n    | parse
  ExceptionMessageHash with ExceptionType1 \\\": \\\" Message \\\"\\\\n\\\"
  *\\r\\n    | extend ErrorMessage = iif(isempty(ExceptionType1),
  ExceptionMessageHash, Message)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage contains \\\"Hub host 'desktopClr'\\\", \\\"Hub Host
  'desktopClr' failure\\\", ErrorMessage) \\r\\n    | extend ErrorMessage =
  iif(ErrorMessage contains (\\\".log' is denied.\\\"), \\\"Access to the path
  'xxxxx\\\\\\\\xxxx.log' is denied\\\", ErrorMessage)\\r\\n    | extend
  ErrorMessage = iif(ErrorMessage contains \\\"Hub Controller\\\",\\\"Hub
  Controller issue.\\\", ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage startswith \\\"connect ENOENT\\\", \\\"connect ENOENT\\\",
  ErrorMessage)\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage, Type = EventName;\\r\\n    let
  ConfigError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/willow/configerror\\\"\\r\\n    | where ExeVersion startswith
  previewVersion\\r\\n    | where IsInternal == false\\r\\n    | extend
  ErrorMessage = FaultDescription\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | summarize Hits = count(), sHits = dcount(SessionId), dHits =
  dcount(MacAddressHash) by ErrorMessage, Type =
  \\\"ConfigError\\\";\\r\\n    let BoostrapperError =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").DataModelFault\
  \\r\\n    | where AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName ==
  \\\"vs/setup/bootstrapper/error\\\"\\r\\n    | where
  tostring(Properties[\\\"context.default.vs.setupengine.id\\\"]) contains
  \\\"preview\\\"\\r\\n    | where IsInternal == false\\r\\n    | extend
  ErrorMessage = iif( isempty(ExceptionMessageHash),
  tostring(Properties[\\\"vs.setup.bootstrapper.error\\\"]),
  ExceptionMessageHash)\\r\\n    | extend ErrorMessage = iif(FaultDescription ==
  \\\"IOException\\\" and ExceptionMessageHash contains
  \\\"vs_setup_bootstrapper.json\\\", \\\"The process cannot access the file
  'C:\\\\\\\\ProgramData\\\\\\\\Microsoft\\\\\\\\VisualStudio\\\\\\\\Packages\\\
  \\\\\\_bootstrapper\\\\\\\\vs_setup_bootstrapper.json' because it is being
  used by another process.\\\",ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage == \\\"Не удалось установить файлы в целевое расположение.
  Ошибка: Недостаточно места на диске.\\\", \\\"Unable to install the files to
  target location. Error: There is not enough space on the
  disk.\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage ==
  \\\"无法将文件安装到目标位置。错误: 磁盘空间不足。\\\", \\\"Unable to install the files to target
  location. Error: There is not enough space on the
  disk.\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage ==
  \\\"Die Dateien können nicht am Zielspeicherort installiert werden. Fehler: Es
  steht nicht genug Speicherplatz auf dem Datenträger zur Verfügung.\\\",
  \\\"Unable to install the files to target location. Error: There is not enough
  space on the disk.\\\",ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage == \\\"文件包含损坏的数据。\\\", \\\"File contains corrupted
  data.\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage ==
  \\\"В системе отображения конечных точек не осталось доступных конечных
  точек.\\\", \\\"There are no more endpoints available from the endpoint
  mapper.\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage ==
  \\\"终结点映射器中没有更多的终结点可用。\\\", \\\"There are no more endpoints available from the
  endpoint mapper.\\\",ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage == \\\"Yükleme dosyalarının bütünlüğü doğrulanamıyor.
  Sertifika doğrulanamadı.\\\", \\\"Unable to verify the integrity of the
  installation files: the certificate could not be
  verified\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage
  == \\\"Não é possível verificar a integridade dos arquivos de instalação: o
  certificado não pôde ser verificado\\\", \\\"Unable to verify the integrity of
  the installation files: the certificate could not be
  verified\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage
  == \\\"설치 파일의 무결성을 검증할 수 없습니다. 인증서를 확인할 수 없습니다.\\\", \\\"Unable to verify the
  integrity of the installation files: the certificate could not be
  verified\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage
  == \\\"Impossible de vérifier l'intégrité des fichiers d'installation : le
  certificat n'a pas pu être vérifié\\\", \\\"Unable to verify the integrity of
  the installation files: the certificate could not be
  verified\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage
  == \\\"インストール ファイルの整合性を確認できません。証明書を確認できませんでした\\\", \\\"Unable to verify the
  integrity of the installation files: the certificate could not be
  verified\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage
  == \\\"无法验证安装文件的完整性: 无法验证证书\\\", \\\"Unable to verify the integrity of the
  installation files: the certificate could not be
  verified\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage
  == \\\"Die Integrität der Installationsdateien kann nicht überprüft werden:
  Überprüfung des Zertifikats nicht möglich.\\\", \\\"Unable to verify the
  integrity of the installation files: the certificate could not be
  verified\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage
  == \\\"No se puede comprobar la integridad de los archivos de instalación: no
  se pudo comprobar el certificado\\\", \\\"Unable to verify the integrity of
  the installation files: the certificate could not be
  verified\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage
  == \\\"Не удается проверить целостность установочных файлов: не удалось
  проверить сертификат.\\\", \\\"Unable to verify the integrity of the
  installation files: the certificate could not be
  verified\\\",ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage
  contains \\\"Could not find a part of the path\\\",\\\"Unable to install the
  files to target location. Error: Could not find a part of the path x.\\\",
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage contains
  \\\"d3dcompiler_47.dll\\\",\\\"Unable to install the files to target location.
  Error: Access to the path 'C:\\\\\\\\Program Files (x86)\\\\\\\\Microsoft
  Visual Studio\\\\\\\\Installer\\\\\\\\d3dcompiler_47.dll' is denied.\\\",
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage contains
  \\\"vs_installer.opc' returned HTTP status code: \\\",\\\"OPC download return
  HTTP status code x\\\", ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage contains \\\"12007\\\",\\\"WININET_E_NAME_NOT_RESOLVED
  (0x80072ee7)\\\", ErrorMessage)\\r\\n    | extend ErrorMessage =
  iif(ErrorMessage contains \\\" HRESULT: 0x80070422)\\\", \\\"The service
  cannot be started, either because it is disabled or because it has no enabled
  devices associated with it. (Exception from HRESULT: 0x80070422)\\\",
  ErrorMessage)\\r\\n    | extend ErrorMessage = iif(ErrorMessage contains
  \\\"or a file within it is locked by another
  program.\\\"                                           or ErrorMessage
  contains \\\"Microsoft Visual
  Studio\\\\\\\\Installer’\\\"                                           or
  ErrorMessage contains \\\"Microsoft Visual
  Studio\\\\\\\\Installer\\\\\\\"\\\"                                           \
  or ErrorMessage contains \\\"Microsoft Visual Studio\\\\\\\\Installer
  \\\"                                           or ErrorMessage contains
  \\\"Microsoft Visual
  Studio\\\\\\\\Installer'\\\"                                          or
  ErrorMessage contains \\\"Microsoft Visual
  Studio\\\\\\\\Installer,\\\"                                          or
  ErrorMessage contains \\\"Microsoft Visual
  Studio\\\\\\\\Installer”\\\"                              , \\\"Unable to
  install the files to target location. Error: The folder ‘C:\\\\\\\\Program
  Files (x86)\\\\\\\\Microsoft Visual Studio\\\\\\\\Installer’ or a file within
  it is locked by another program. Close any applications that might be using it
  and try again.\\\",ErrorMessage)\\r\\n    | extend MacAddressHash =
  tostring(Properties[\\\"context.default.vs.core.macaddresshash\\\"])\\r\\n    \
  | where isnotnull(MacAddressHash)\\r\\n    | where
  isnotempty(MacAddressHash)\\r\\n    | where MacAddressHash <>
  \\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\\
  n    | where ErrorMessage !in (\\\"Exit code=1\\\",\\\"Exit
  code=-1073741510\\\")\\r\\n    | summarize Hits = count(), sHits =
  dcount(SessionId), dHits = dcount(MacAddressHash) by ErrorMessage, Type =
  EventName;\\r\\n    let AppUpdateDownloadFinishedFailed =
  cluster('Ddtelvsraw').database('VS').RawEventsVS\\r\\n    | where
  AdvancedServerTimestampUtc > now() - daysToLookback\\r\\n    | where EventName
  == \\\"vs/willow/appupdatedownloadfinished\\\"\\r\\n    | where IsInternal ==
  false  \\r\\n    | where ExeVersion startswith previewVersion\\r\\n    | where
  tostring(Properties[\\\"reserved.datamodel.action.result\\\"]) ==
  \\\"Failure\\\"\\r\\n    | join kind=leftouter (
  cluster(\\\"Ddtelvsraw\\\").database(\\\"LookupTables\\\").VS_Telemetry_Relea\
  ses_Func()\\r\\n                             |  where ChannelId in
  (\\\"VisualStudio.15.Preview\\\",\\\"VisualStudio.15.IntPreview\\\")
  \\r\\n                             | extend found =
  1\\r\\n                             | summarize by WillowInstallerVersion,
  found\\r\\n                          ) on $left.ExeVersion ==
  $right.WillowInstallerVersion\\r\\n    | where found == 1\\r\\n    | summarize
  Hits = count(), sHits = dcount(SessionId), dHits =dcount(MacAddressHash) by
  ErrorMessage =
  tostring(Properties[\\\"reserved.datamodel.action.resultsummary\\\"]),
  Type=EventName;   \\r\\n    let EngineUnhandledException =
  cluster('Ddtelvsraw').database('VS').RawEventsVS\\r\\n    | where
  AdvancedServerTimestampUtc > now() -
  daysToLookback\\r\\n    | where EventName == \\\"vs/setupengine/unhandledexce\
  ption\\\"\\r\\n    | where
  tostring(Properties[\\\"context.default.vs.setupengine.id\\\"]) contains
  \\\"preview\\\"\\r\\n    | extend Error = tostring(Properties[\\\"reserved.da\
  tamodel.fault.bucketparam7\\\"])\\r\\n    | extend  Description = tostring(Pr\
  operties[\\\"reserved.datamodel.fault.bucketparam6\\\"]) \\r\\n    | extend D\
  etails = tostring(Properties[\\\"reserved.datamodel.fault.description\\\"]) \
  \\r\\n    | parse Details with * \\\":\\\" * \\\": \\\" ErrorMessage
  \\\"\\\\n\\\" *\\r\\n    | extend ErrorMessage = iif (ErrorMessage contains
  \\\"Diskte yeterli yer yok.\\\", \\\"There is not enough space on the
  disk.\\\",\\r\\n                                iif(ErrorMessage contains
  \\\"There is not enough space on the disk\\\", \\\"There is not enough space
  on the disk.\\\",\\r\\n                                iif(ErrorMessage
  contains \\\"このコマンドを実行するための十分な記憶域がありません\\\", \\\"There is not enough space on
  the disk.\\\",\\r\\n                                iif(ErrorMessage contains
  \\\"Έγινε προσπάθεια εκτέλεσης μη εξουσιοδοτημένης ενέργειας.\\\",
  \\\"Attempted to perform an unauthorized
  operation.\\\",\\r\\n                                iif(ErrorMessage contains
  \\\"Attempted to perform an unauthorized operation.\\\", \\\"Attempted to
  perform an unauthorized
  operation.\\\",\\r\\n                                ErrorMessage)))))\\r\\n
      | summarize Hits = count(), sHits = dcount(SessionId), dHits
  =dcount(MacAddressHash) by ErrorMessage,
  Type=EventName;  \\r\\n    QueryProductError\\r\\n    | union
  InstallProductError,\\r\\n            PackageFailure,\\r\\n            //Faul\
  t,\\r\\n            EvaluateInstallPatametersError,\\r\\n            EndOpera\
  tionGetProductError,\\r\\n            CmdLineError,\\r\\n            JsCrash,\
  \\r\\n            Name,\\r\\n            EvaluateModifyParametersError,\\r\\n            \
  Exception,\\r\\n            CreateShortcutFailed,\\r\\n            ConfigErro\
  r,\\r\\n            BoostrapperError,\\r\\n            AppUpdateDownloadFinis\
  hedFailed,\\r\\n            EngineUnhandledException,\\r\\n            GetSur\
  veyConfigurationError,\\r\\n            DeleteShotcutFailed,\\r\\n            \
  UserDataWriteFailed,\\r\\n            GraphConstructionError,\\r\\n            \
  VsixInstallerFault,\\r\\n            SetupEngineFault,\\r\\n            LoadD\
  etailsPageError,\\r\\n            AppUninstallSelfFailed,\\r\\n            Op\
  enLogError,\\r\\n            BackgroundDownloaderUnhandledException,\\r\\n            \
  VSFeedbackError,\\r\\n            AppFinalizeFailed,\\r\\n            SearchF\
  ailedError,\\r\\n            StartServiceHubError\\r\\n    |top 1000 by dHits
  desc;\\r\\n}\",\"inputParameters\":[{\"name\":\"daysToLookback\",\"cslType\":\
  \"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\"name\":\"pre\
  viewVersion\",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\
  \"\"},{\"name\":\"previewVsVersion\",\"cslType\":\"string\",\"type\":\"System\
  .String\",\"docstring\":\"\"}]},{\"name\":\"Setup100_Issues_Preview_7days\",\
  \"docstring\":\"Return preview issues from last 7
  days.\",\"body\":\"{\\r\\n    Setup100_Issues_Preview(totimespan(\\\"7.00:00:\
  00\\\"),\\\"2.1\\\",\\\"16.1\\\")\\r\\n}\",\"inputParameters\":[]},{\"name\":\
  \"Setup100_PackageInstallEvents\",\"docstring\":\"Returns VS package install
  events.\",\"body\":\"{\\r\\n    cluster('Ddtelvsraw').database('VS').RawEvent\
  sVS\\r\\n    | where AdvancedServerTimestampUtc > startTime\\r\\n    | where
  ExeName == \\\"vs_installerservice\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | where EventName ==
  \\\"vs/setupengine/package-operation\\\"    \\r\\n    | where
  Properties[\\\"reserved.datamodel.action.type\\\"] == \\\"End\\\" \\r\\n    |
  where Properties[\\\"context.default.vs.setupengine.channelsid\\\"] ==
  channelId\\r\\n    | where Properties[\\\"vs.setupengine.operationtype\\\"] ==
  \\\"Install-Package\\\"    \\r\\n    | where GeoCountryRegionIso =~
  countryIso\\r\\n    | where
  isnotempty(Properties[\\\"context.default.vs.setupengine.componentid\\\"])\\r\
  \\n    | extend PackageId =
  tostring(Properties[\\\"vs.setupengine.uniquepackageid\\\"])\\r\\n    | extend
  PackageResult =
  tostring(Properties[\\\"vs.setupengine.install.resultdetails\\\"])\\r\\n    |
  extend DataModelActionResultReserved =
  tostring(Properties[\\\"reserved.datamodel.action.result\\\"])\\r\\n    |
  project PackageId, AdvancedServerTimestampUtc, DataModelActionResultReserved,
  GeoCountryRegionIso, OsVersion, PackageResult, MacAddressHash\\r\\n    //
  Ignore webdeploy package in US due to known failure on RS3.\\r\\n    | where
  not (GeoCountryRegionIso =~ \\\"us\\\" and PackageId startswith
  \\\"Microsoft.VisualStudio.WebDeploy.Msi\\\" and OsVersion startswith
  \\\"10.0.162\\\")\\r\\n         // Ignore NetFx 16389 failure.  This is
  tracked by bug 459028.\\r\\n    | where not (GeoCountryRegionIso =~ \\\"us\\\"
  and PackageId startswith \\\"Microsoft.Net.4.6.FullRedist\\\" and
  PackageResult == \\\"Unknown error (0x00004005)\\\")\\r\\n         // Ignore
  Win10SDK 15063 15605 failure since is scheduled to be fixed in 15.3\\r\\n    |
  where not (PackageId startswith \\\"Win10SDK_10.0.15063\\\" and PackageResult
  == \\\"There was a problem downloading your product.\\\")\\r\\n    | where
  DataModelActionResultReserved !=
  \\\"UserCancel\\\"   \\r\\n}\",\"inputParameters\":[{\"name\":\"channelId\",\
  \"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\
  \":\"countryIso\",\"cslType\":\"string\",\"type\":\"System.String\",\"docstri\
  ng\":\"\"},{\"name\":\"startTime\",\"cslType\":\"datetime\",\"type\":\"System\
  .DateTime\",\"docstring\":\"\"}]},{\"name\":\"Setup100_PackageInstallGoal\",\
  \"docstring\":\"Returns number of VS packages not meeting install success
  criteria.\",\"body\":\"{\\r\\n    let periodStart = now() -
  timePeriod;\\r\\n    cluster(\\\"Ddtelvsraw\\\").database(\\\"VS\\\").Setup10\
  0_PackageInstallEvents(channelId, countryIso, periodStart)\\r\\n    | where
  DataModelActionResultReserved != \\\"UserCancel\\\"\\r\\n    | summarize Total
  = dcount(MacAddressHash), Success = dcountif(MacAddressHash,
  DataModelActionResultReserved == \\\"Success\\\") by PackageId\\r\\n    |
  summarize Result = countif(Total > minEventCount and (Success * 100.0) / Total
  <
  minSuccessPercent)\\r\\n}\",\"inputParameters\":[{\"name\":\"channelId\",\"cs\
  lType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\
  \"countryIso\",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\
  \":\"\"},{\"name\":\"timePeriod\",\"cslType\":\"timespan\",\"type\":\"System.\
  TimeSpan\",\"docstring\":\"\"},{\"name\":\"minEventCount\",\"cslType\":\"int\
  \",\"type\":\"System.Int32\",\"docstring\":\"\"},{\"name\":\"minSuccessPercent\
  \",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\"}]},{\"name\
  \":\"Setup100_PackageInstallGoalDetails\",\"docstring\":\"Shows VS packages
  not meeting install success criteria.\",\"body\":\"{\\r\\n    let periodStart
  = now() - timePeriod;\\r\\n    Setup100_PackageInstallEvents(channelId,
  countryIso, periodStart)\\r\\n    | where DataModelActionResultReserved !=
  \\\"UserCancel\\\"\\r\\n    | summarize Total =
  dcount(MacAddressHash),\\r\\n                Success =
  dcountif(MacAddressHash, DataModelActionResultReserved == \\\"Success\\\") by
  PackageId\\r\\n    | extend SuccessPct = round((Success * 100.0) / Total,
  2)\\r\\n    | order by SuccessPct asc\\r\\n    | where          Total >
  minEventCount and          SuccessPct < minSuccessPercent\\r\\n    | join
  kind=leftouter\\r\\n    (\\r\\n        cluster('Ddtelvsraw').database('VS').R\
  awEventsVS\\r\\n        | where IsInternal == false\\r\\n        | where
  AdvancedServerTimestampUtc > periodStart\\r\\n        | where EventName ==
  \\\"vs/setupengine/packagefailure\\\"\\r\\n        | extend ReturnCode =
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam7\\\"])\\r\\n        \
  | extend gPackageId =
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam5\\\"])\\r\\n        \
  | extend ErrorCode =
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam7\\\"])\\r\\n        \
  | extend EngineVersion =
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam2\\\"])\\r\\n        \
  | extend p6 =
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam6\\\"])\\r\\n        \
  | extend InstallSessionId =
  tostring(Properties[\\\"context.default.vs.setupengine.sharedwillowinstallses\
  sionid\\\"])\\r\\n        | where GeoCountryRegionIso =~
  countryIso\\r\\n        | extend UniquePackageId =
  tostring(Properties[\\\"vs.setupengine.uniquepackageid\\\"])\\r\\n        |
  where p6 != \\\"DownloadPackage\\\"\\r\\n        | summarize Hits =
  count(),\\r\\n                    sHits =
  dcount(InstallSessionId),\\r\\n                    dHits =
  dcount(MacAddressHash) by gPackageId, ErrorCode, EngineVersion,
  UniquePackageId\\r\\n        | where sHits > 10\\r\\n    )\\r\\n    on
  $left.PackageId == $right.UniquePackageId\\r\\n    | project UniquePackageId =
  PackageId , Total, Success, SuccessPct, PackageId = gPackageId, ErrorCode,
  EngineVersion , Hits, sHits,
  dHits\\r\\n}\",\"inputParameters\":[{\"name\":\"channelId\",\"cslType\":\"str\
  ing\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\"countryIso\",\
  \"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\
  \":\"timePeriod\",\"cslType\":\"timespan\",\"type\":\"System.TimeSpan\",\"doc\
  string\":\"\"},{\"name\":\"minEventCount\",\"cslType\":\"int\",\"type\":\"Sys\
  tem.Int32\",\"docstring\":\"\"},{\"name\":\"minSuccessPercent\",\"cslType\":\
  \"int\",\"type\":\"System.Int32\",\"docstring\":\"\"}]},{\"name\":\"Setup100_\
  PayloadDownloadEvents\",\"docstring\":\"Returns VS package download
  events.\",\"body\":\"{\\r\\n    cluster('Ddtelvsraw').database('VS').RawEvent\
  sVS\\r\\n    | where AdvancedServerTimestampUtc > startTime\\r\\n    | where
  ExeName == \\\"vs_installerservice\\\"\\r\\n    | where IsInternal ==
  false\\r\\n    | where EventName ==
  \\\"vs/setupengine/package-operation\\\"\\r\\n    | where
  Properties[\\\"reserved.datamodel.action.type\\\"] == \\\"End\\\" \\r\\n    |
  where Properties[\\\"context.default.vs.setupengine.channelsid\\\"] ==
  channelId\\r\\n    | where Properties[\\\"vs.setupengine.operationtype\\\"] ==
  \\\"Download-Package\\\"\\r\\n    | where GeoCountryRegionIso =~
  countryIso\\r\\n    | where
  isnotempty(Properties[\\\"context.default.vs.setupengine.componentid\\\"])\\r\
  \\n    | extend PackageId =
  tostring(Properties[\\\"vs.setupengine.uniquepackageid\\\"])\\r\\n    | extend
  PayloadUrl =
  tostring(Properties[\\\"vs.setupengine.download-url\\\"])\\r\\n    | extend
  DataModelActionResultReserved =
  tostring(Properties[\\\"reserved.datamodel.action.result\\\"])\\r\\n    |
  where DataModelActionResultReserved != \\\"UserCancel\\\"\\r\\n    | project
  PackageId, PayloadUrl, AdvancedServerTimestampUtc,
  DataModelActionResultReserved,
  MacAddressHash;\\r\\n}\",\"inputParameters\":[{\"name\":\"channelId\",\"cslTy\
  pe\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\"co\
  untryIso\",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\
  \"},{\"name\":\"startTime\",\"cslType\":\"datetime\",\"type\":\"System.DateTi\
  me\",\"docstring\":\"\"}]},{\"name\":\"Setup100_PayloadDownloadGoal\",\"docst\
  ring\":\"Returns number of VS payloads not meeting download success
  criteria.\",\"body\":\"{\\r\\n    let periodStart = now() -
  timePeriod;\\r\\n    Setup100_PayloadDownloadEvents(channelId, countryIso,
  periodStart)\\r\\n    | summarize Total = dcount(MacAddressHash), Success =
  dcountif(MacAddressHash, DataModelActionResultReserved == \\\"Success\\\") by
  PackageId, PayloadUrl\\r\\n    | summarize Result = countif(Total >=
  minEventCount and (Success * 100.0) / Total <
  minSuccessPercent)\\r\\n}\",\"inputParameters\":[{\"name\":\"channelId\",\"cs\
  lType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\
  \"countryIso\",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\
  \":\"\"},{\"name\":\"timePeriod\",\"cslType\":\"timespan\",\"type\":\"System.\
  TimeSpan\",\"docstring\":\"\"},{\"name\":\"minEventCount\",\"cslType\":\"int\
  \",\"type\":\"System.Int32\",\"docstring\":\"\"},{\"name\":\"minSuccessPercent\
  \",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\"}]},{\"name\
  \":\"Setup100_PayloadDownloadGoalDetails\",\"docstring\":\"Shows VS payloads
  not meeting download success criteria.\",\"body\":\"{\\r\\n    let periodStart
  = now() - timePeriod;\\r\\n    Setup100_PayloadDownloadEvents(channelId,
  countryIso, periodStart)\\r\\n    | summarize Total =
  dcount(MacAddressHash),\\r\\n\\t\\t\\t\\tSuccess = dcountif(MacAddressHash,
  DataModelActionResultReserved == \\\"Success\\\")          \\r\\n\\t\\t\\tby
  PackageId, PayloadUrl\\r\\n    | extend SuccessPct = round((Success * 100.0) /
  Total, 2)\\r\\n    | where\\r\\n        Total > minEventCount
  and\\r\\n        SuccessPct < minSuccessPercent\\r\\n    | join kind=
  leftouter
  (  cluster('Ddtelvsraw').database('VS').RawEventsVS\\r\\n                                \
  | where AdvancedServerTimestampUtc >
  periodStart\\r\\n                                | where EventName ==
  \\\"vs/setupengine/packagefailure\\\" \\r\\n                                |
  where IsInternal ==
  false                                \\r\\n                                |
  extend fPackageId = tostring(Properties[\\\"vs.setupengine.packageid\\\"])
  \\r\\n                                | extend ReturnCode =
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam7\\\"])\\r\\n                                \
  | extend Operation_P6 =
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam6\\\"])                                \
  \\r\\n                                | where Operation_P6 ==
  \\\"DownloadPackage\\\"\\r\\n                                | where
  GeoCountryRegionIso =~ countryIso\\r\\n                                |
  extend Description =
  tostring(Properties[\\\"reserved.datamodel.fault.description\\\"])\\r\\n                                \
  | extend UniquePackageId =
  tostring(Properties[\\\"vs.setupengine.uniquepackageid\\\"])\\r\\n                                \
  | summarize sHits = dcount(SessionId), dHits = dcount(MacAddressHash)  by
  fPackageId, ReturnCode, Description,
  UniquePackageId\\r\\n                           ) on $left.PackageId ==
  $right.UniquePackageId\\r\\n     | project UniquePackageId = PackageId,
  PayloadUrl, Total, Success, SuccessPct, PackageId = fPackageId, Description,
  sHits, dHits\\r\\n     | order by SuccessPct
  asc\\r\\n}\",\"inputParameters\":[{\"name\":\"channelId\",\"cslType\":\"string\
  \",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\"countryIso\",\"\
  cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\
  \"timePeriod\",\"cslType\":\"timespan\",\"type\":\"System.TimeSpan\",\"docstr\
  ing\":\"\"},{\"name\":\"minEventCount\",\"cslType\":\"int\",\"type\":\"System\
  .Int32\",\"docstring\":\"\"},{\"name\":\"minSuccessPercent\",\"cslType\":\"int\
  \",\"type\":\"System.Int32\",\"docstring\":\"\"}]},{\"name\":\"Setup100_Produ\
  ctOperationEvents\",\"docstring\":\"Returns VS product operation
  events.\",\"body\":\"{\\r\\n    cluster('Ddtelvsraw').database('VS').RawEvent\
  sVS\\r\\n    | where AdvancedServerTimestampUtc > startTime\\r\\n    | where
  IsInternal == false\\r\\n    | extend DataModelActionType =
  tostring(Properties[\\\"reserved.datamodel.action.type\\\"])\\r\\n    | extend
  DataModelActionResultReserved =
  tostring(Properties[\\\"reserved.datamodel.action.result\\\"])\\r\\n    |
  where DataModelActionType == \\\"End\\\"\\r\\n    | where EventName ==
  \\\"vs/willow/install-product\\\"\\r\\n    | where GeoCountryRegionIso =~
  countryIso\\r\\n    | where Properties[\\\"vs.willow.channelid\\\"] ==
  channelId\\r\\n    | where Properties[\\\"vs.willow.operationname\\\"] ==
  operationName\\r\\n    | extend ErrorCode =
  tostring(Properties[\\\"vs.willow.errorcode\\\"])\\r\\n    | where ErrorCode
  !in (\\\"OperationCanceledError\\\",
  \\\"ServiceUpdateRequireError\\\")\\r\\n    | extend FailedPackages =
  tostring(Properties[\\\"vs.willow.failedpackageids\\\"])\\r\\n    | project
  AdvancedServerTimestampUtc, DataModelActionResultReserved, ErrorCode,
  FailedPackages, MacAddressHash, OsVersion    \\r\\n    // Ignore webdeploy
  package in US due to known failure on RS3.    \\r\\n    | where not
  (countryIso == \\\"US\\\" and FailedPackages ==
  \\\"Microsoft.VisualStudio.WebDeploy.Msi\\\" and OsVersion startswith
  \\\"10.0.162\\\");\\r\\n}\",\"inputParameters\":[{\"name\":\"channelId\",\"cs\
  lType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\
  \"countryIso\",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\
  \":\"\"},{\"name\":\"operationName\",\"cslType\":\"string\",\"type\":\"System\
  .String\",\"docstring\":\"\"},{\"name\":\"startTime\",\"cslType\":\"datetime\
  \",\"type\":\"System.DateTime\",\"docstring\":\"\"}]},{\"name\":\"Setup100_Pr\
  oductOperationGoal\",\"docstring\":\"Returns VS product operation success
  rate.\",\"body\":\"{\\r\\n    let periodStart = now() -
  lookbackPeriod;\\r\\n    Setup100_ProductOperationEvents(channelId,
  countryIso, operationName, periodStart)\\r\\n    | summarize Total =
  dcount(MacAddressHash), Success = dcountif(MacAddressHash,
  DataModelActionResultReserved == \\\"Success\\\")\\r\\n    | extend Result =
  iff(Total >= minEventCount, Success * 100.0 / Total,
  100.0)\\r\\n}\",\"inputParameters\":[{\"name\":\"channelId\",\"cslType\":\"st\
  ring\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\"countryIso\
  \",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"n\
  ame\":\"operationName\",\"cslType\":\"string\",\"type\":\"System.String\",\"d\
  ocstring\":\"\"},{\"name\":\"minEventCount\",\"cslType\":\"int\",\"type\":\"S\
  ystem.Int32\",\"docstring\":\"\"},{\"name\":\"lookbackPeriod\",\"cslType\":\"\
  timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"}]},{\"name\":\"Set\
  up100_ProductOperationGoalDetails\",\"docstring\":\"Returns VS product
  operation success rate.\",\"body\":\"{\\r\\n    let periodStart = now() -
  lookbackPeriod;    \\r\\n    let Events =
  cluster('Ddtelvsraw').database('VS').RawEventsVS\\r\\n    | where
  AdvancedServerTimestampUtc > periodStart\\r\\n    | extend
  DataModelActionResultReserved =
  tostring(Properties[\\\"reserved.datamodel.action.type\\\"])\\r\\n    | where
  IsInternal == false;\\r\\n    Events\\r\\n    | where EventName ==
  \\\"vs/willow/install-product\\\"\\r\\n    | where
  DataModelActionResultReserved == \\\"End\\\"\\r\\n    | where
  Properties[\\\"vs.willow.channelid\\\"] == channelId    \\r\\n    | where
  Properties[\\\"vs.willow.operationname\\\"] == operationName\\r\\n    | where
  tostring(Properties[\\\"reserved.datamodel.action.result\\\"]) ==
  \\\"Failure\\\"\\r\\n    | extend ErrorMessage =
  tostring(Properties[\\\"vs.willow.errormessage\\\"])\\r\\n    | extend
  FailedPackageIds =
  tostring(Properties[\\\"vs.willow.failedpackageids\\\"])\\r\\n    | parse
  ErrorMessage with GeneralException \\\": \\\" GeneralError \\\"\\\\n\\\"
  *\\r\\n    | parse ErrorMessage with
  \\\"Microsoft.VisualStudio.Setup.PackageFailureException: \\\" PackageError
  \\\"\\\\n\\\" *\\r\\n    | extend ReportErrorMessage =
  iif(isempty(PackageError), GeneralError, PackageError) \\r\\n    | extend
  ReportErrorMessage = iif(isempty(ReportErrorMessage), ErrorMessage,
  ReportErrorMessage) \\r\\n    | extend ReportException =
  iif(isempty(PackageError), GeneralException, \\\"PackageFailureException\\\")
  \\r\\n    | extend ReportException = iif(isempty(ReportException),
  \\\"Unknown\\\", ReportException) \\r\\n    | where GeoCountryRegionIso =~
  countryIso\\r\\n    | parse ReportErrorMessage with MessageToKeep \\\";\\\"
  *  // If there are mutliple package report failures, take the first
  one\\r\\n    | extend ReportErrorMessage = iif(isempty(MessageToKeep),
  ReportErrorMessage, MessageToKeep)\\r\\n    | parse FailedPackageIds with
  mPackageId \\\",\\\" *  // If there are mutliple package report failures, take
  the first one\\r\\n    | extend ReportErrorMessage = iif(ReportErrorMessage
  contains 'Недостаточно места на диске.', \\\"There is not enough space on the
  disk.\\\",\\r\\n                                    iif(ReportErrorMessage
  contains \\\"磁盘空间不足。\\\", \\\"There is not enough space on the
  disk.\\\",\\r\\n                                    iif(ReportErrorMessage
  contains \\\"디스크 공간이 부족합니다.\\\", \\\"There is not enough space on the
  disk.\\\",\\r\\n                                    iif(ReportException ==
  \\\"System.NullReferenceException\\\", \\\"Object reference not set to an
  instance of an
  object.\\\",                                \\r\\n                                    \
  iif(ReportErrorMessage contains \\\"There is not enough space on the
  disk.\\\", \\\"There is not enough space on the disk.\\\",
  ReportErrorMessage)))))\\r\\n    | extend InstallSessionId =
  tostring(Properties[\\\"vs.willow.installsessionid\\\"])\\r\\n    | join
  kind=leftouter
  (\\r\\n                            Events\\r\\n                            |
  where EventName ==
  \\\"vs/setupengine/packagefailure\\\"\\r\\n                            | where
  GeoCountryRegionIso =~ countryIso\\r\\n                            | extend
  PackageId =
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam5\\\"])\\r\\n                            \
  | extend ResultSummary =
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam8\\\"])\\r\\n                            \
  | extend Operation_P7 =
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam7\\\"])\\r\\n                            \
  | extend ReturnCode_P6 =
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam6\\\"])\\r\\n                            \
  | extend PackageFailureMessage = strcat(PackageId, \\\"_\\\", Operation_P7,
  \\\"_\\\",
  ReturnCode_P6)                        \\r\\n                            |
  project PackageId, PackageFailureMessage, SessionId
  \\r\\n                          ) on SessionId\\r\\n    | extend
  ReportErrorMessage = iif(isempty(PackageFailureMessage), ReportErrorMessage,
  PackageFailureMessage)\\r\\n    | summarize dCount = dcount(MacAddressHash) by
  ReportErrorMessage \\r\\n    | order by dCount
  desc\\r\\n}\",\"inputParameters\":[{\"name\":\"channelId\",\"cslType\":\"stri\
  ng\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\"countryIso\",\
  \"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\
  \":\"operationName\",\"cslType\":\"string\",\"type\":\"System.String\",\"docs\
  tring\":\"\"},{\"name\":\"minEventCount\",\"cslType\":\"int\",\"type\":\"Syst\
  em.Int32\",\"docstring\":\"\"},{\"name\":\"lookbackPeriod\",\"cslType\":\"tim\
  espan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"}]},{\"name\":\"Setup1\
  00_Reboot\",\"docstring\":\"Return reboot information per
  release\",\"body\":\"{\\r\\ncluster(\\\"DDTelInsights\\\").database(\\\"DDTel\
  Insights\\\").SetupWillowInstallProductMerged\\r\\n| where ServerTimestampUtc
  > ago(90d)\\r\\n| where IsInternal == false\\r\\n| where FriendlyProductId in
  (\\\"Community\\\",\\\"Professional\\\",\\\"Enterprise\\\")\\r\\n| extend
  OperationName = iif(OperationName == \\\"update\\\",
  iif(substring(AppVersionUpdateTo,0,4) == substring(AppVersionUpdateFrom,0,4),
  \\\"minorUpdate\\\",\\\"majorUpdate\\\"),OperationName)\\r\\n| summarize dHits
  = dcount(MachineId) by AppVersion, ChannelId, RebootType, OperationName\\r\\n|
  join kind=inner (
  cluster(\\\"Ddtelvsraw\\\").database(\\\"LookupTables\\\").VS_Telemetry_Relea\
  ses_Func()\\r\\n                        | where ReleaseScope contains
  \\\"Public\\\"\\r\\n                        | where ChannelId in
  (\\\"VisualStudio.15.Preview\\\",\\\"VisualStudio.15.Release\\\",\\\"VisualSt\
  udio.16.Preview\\\",\\\"VisualStudio.16.Release\\\")\\r\\n                        \
  | distinct ManifestVersion, ReleaseDate, ChannelId, ProductDisplayVersion
  \\r\\n                        | order by ManifestVersion
  desc\\r\\n                  ) on $left.AppVersion == $right.ManifestVersion,
  ChannelId\\r\\n| where ReleaseDate > ago(90d)\\r\\n| summarize Total =
  sum(dHits),\\r\\n            Reboots=sumif(dHits, RebootType contains
  \\\"Reboot\\\"), \\r\\n            Pct_Reboots = round(sumif(dHits, RebootType
  contains \\\"Reboot\\\") * 100.0 / sum(dHits), 2)\\r\\n          by
  AppVersion, ChannelId, ProductDisplayVersion ,
  OperationName\\r\\n}\",\"inputParameters\":[]},{\"name\":\"Setup100_Reliabili\
  ty\",\"docstring\":\"Return failures per release\",\"body\":\"{\\r\\nlet
  publicversions =
  cluster(\\\"Ddtelvsraw\\\").database(\\\"LookupTables\\\").VS_Telemetry_Relea\
  ses_Func() \\r\\n                        | where ReleaseScope contains
  \\\"Public\\\"\\r\\n                        | where ChannelShortName in
  (\\\"Release\\\",\\\"Preview\\\")\\r\\n                        | distinct
  ManifestVersion, ReleaseDate, ChannelId, ProductDisplayVersion
  \\r\\n                        | order by ManifestVersion desc;\\r\\n\\r\\n//
  Public curated data \\r\\nlet publicCuratedReleases =
  cluster(\\\"DDTelInsights\\\").database(\\\"DDTelInsights\\\").SetupWillowIns\
  tallProductMerged\\r\\n| where AppVersion in (publicversions) \\r\\n| where
  IsInternal == 0\\r\\n| extend OperationName = iif(OperationName ==
  \\\"update\\\", iif(substring(AppVersionUpdateTo,0,4) ==
  substring(AppVersionUpdateFrom,0,4),
  \\\"minorUpdate\\\",\\\"majorUpdate\\\"),OperationName)\\r\\n| where
  GeneralReportResult !in (\\\"ServiceUpdateRequireError\\\",
  \\\"Cancel\\\",\\\"Block\\\",\\\"MissingEnd\\\")\\r\\n| project
  InstallSessionId, GeneralReportResult, AppVersion, ChannelId,
  OperationName;\\r\\n\\r\\n// Public realtime data \\r\\nlet
  publicRealTimeReleases =
  cluster(\\\"DDTelvsraw\\\").database(\\\"VS\\\").RawEventsVS\\r\\n| where
  EventName == \\\"vs/willow/install-product\\\"\\r\\n| where
  Properties[\\\"reserved.datamodel.action.type\\\"] == \\\"End\\\"\\r\\n| where
  IsInternal == false\\r\\n| extend AppVersion =
  tostring(Properties[\\\"vs.willow.appversion\\\"])\\r\\n| extend OperationName
  = tostring(Properties [\\\"vs.willow.operationname\\\"])\\r\\n| extend
  GeneralReportResult = tostring(Properties[\\\"vs.willow.operationresult\\\"])
  \\r\\n| extend InstallSessionId =
  tostring(Properties[\\\"context.default.vs.willow.installsessionid\\\"])\\r\\\
  n| extend AppVersionUpdateTo =
  tostring(Properties[\\\"vs.willow.appversionupdateto\\\"])\\r\\n| extend
  AppVersionUpdateFrom =
  tostring(Properties[\\\"vs.willow.appversionupdatefrom\\\"])\\r\\n| extend
  HasCoreFailure =
  tostring(Properties[\\\"vs.willow.hascorepackagefailures\\\"])\\r\\n| extend
  HasFailedPackageIds =
  isnotempty(Properties[\\\"vs.willow.failedpackageids\\\"]) \\r\\n| where
  AppVersion in (publicversions) \\r\\n| extend OperationName =
  iif(OperationName == \\\"update\\\", iif(substring(AppVersionUpdateTo,0,4) ==
  substring(AppVersionUpdateFrom,0,4),
  \\\"minorUpdate\\\",\\\"majorUpdate\\\"),OperationName)\\r\\n| extend
  GeneralReportResult = iif(GeneralReportResult == \\\"RebootRequired\\\",
  \\r\\n                                    iif(HasCoreFailure == \\\"true\\\",
  \\\"Failure\\\",
  \\r\\n                                    iif(HasFailedPackageIds == true,
  \\\"Warning\\\", \\\"Success\\\")), GeneralReportResult)   \\r\\n| where
  GeneralReportResult in (\\\"Success\\\", \\\"Warning\\\",
  \\\"Failure\\\")\\r\\n| project InstallSessionId, GeneralReportResult,
  AppVersion, ChannelId, OperationName;\\r\\n\\r\\n// Agregate public
  data\\r\\nlet publicReleases = publicCuratedReleases | union
  publicRealTimeReleases\\r\\n| summarize sHits =
  dcount(InstallSessionId),             \\r\\n            sSuccessHits =
  dcountif(InstallSessionId, GeneralReportResult ==
  \\\"Success\\\"),\\r\\n            sSuccessPct =
  round(dcountif(InstallSessionId, GeneralReportResult == \\\"Success\\\") *
  100.0 / dcount(InstallSessionId),2),\\r\\n            sFailureHits =
  dcountif(InstallSessionId, GeneralReportResult ==
  \\\"Failure\\\"),\\r\\n            sFailurePct =
  round(dcountif(InstallSessionId, GeneralReportResult == \\\"Failure\\\") *
  100.0 / dcount(InstallSessionId),2),\\r\\n            sWarningHits =
  dcountif(InstallSessionId, GeneralReportResult ==
  \\\"Warning\\\"),\\r\\n            sWarningPct =
  round(dcountif(InstallSessionId, GeneralReportResult == \\\"Warning\\\") *
  100.0 / dcount(InstallSessionId),2)\\r\\n       by AppVersion,
  OperationName\\r\\n| join kind=leftouter ( publicversions\\r\\n       ) on
  $left.AppVersion == $right.ManifestVersion\\r\\n| project
  ProductDisplayVersion, AppVersion, OperationName, ReleaseDate, ChannelId,
  sHits, sSuccessHits, sSuccessPct, sFailureHits, sFailurePct, sWarningHits,
  sWarningPct;\\r\\n\\r\\n\\r\\nlet dogfoodversionsdetails =
  cluster(\\\"Ddtelvsraw\\\").database(\\\"LookupTables\\\").VS_Telemetry_Relea\
  ses_Func()\\r\\n                        | where ReleaseScope =~
  \\\"dogfood\\\"\\r\\n                        | where ChannelShortName ==
  \\\"IntPreview\\\"\\r\\n                        | parse ProductDisplayVersion
  with ReleaseName \\\"[\\\" *\\r\\n                        | extend
  ProductDisplayVersion = ReleaseName\\r\\n                        | extend
  ReleaseDate = BuildDate\\r\\n                        | distinct
  ManifestVersion, ProductDisplayVersion,
  ChannelId\\r\\n                        | order by ManifestVersion
  desc;\\r\\nlet dogfoodreleasedate =
  cluster(\\\"Ddtelvsraw\\\").database(\\\"LookupTables\\\").VS_Telemetry_Relea\
  ses_Func()\\r\\n                        | where ReleaseScope =~
  \\\"dogfood\\\"\\r\\n                        | where ChannelShortName ==
  \\\"IntPreview\\\"\\r\\n                        | parse ProductDisplayVersion
  with ReleaseName \\\"[\\\" *\\r\\n                        | extend
  ProductDisplayVersion = ReleaseName\\r\\n                        | extend
  ReleaseDate = BuildDate\\r\\n                        | summarize
  argmax(ReleaseDate, *) by ProductDisplayVersion,
  ChannelId   \\r\\n                        | project ProductDisplayVersion,
  ChannelId, ReleaseDate = max_ReleaseDate;\\r\\nlet dogfoodversions =
  dogfoodversionsdetails \\r\\n                        | join kind=leftouter (
  dogfoodreleasedate ) on ProductDisplayVersion \\r\\n                        |
  project ManifestVersion, ProductDisplayVersion, ChannelId,
  ReleaseDate;\\r\\n\\r\\n// Public curated data \\r\\nlet
  dogfoodCuratedReleases =
  cluster(\\\"DDTelInsights\\\").database(\\\"DDTelInsights\\\").SetupWillowIns\
  tallProductMerged\\r\\n| where AppVersion in (dogfoodversions) \\r\\n| where
  ChannelId contains \\\"IntPreview\\\"\\r\\n| extend OperationName =
  iif(OperationName == \\\"update\\\", iif(substring(AppVersionUpdateTo,0,4) ==
  substring(AppVersionUpdateFrom,0,4),
  \\\"minorUpdate\\\",\\\"majorUpdate\\\"),OperationName)\\r\\n| where
  GeneralReportResult !in (\\\"ServiceUpdateRequireError\\\",
  \\\"Cancel\\\",\\\"Block\\\",\\\"MissingEnd\\\")\\r\\n| project
  InstallSessionId, GeneralReportResult, AppVersion, ChannelId,
  OperationName;\\r\\n\\r\\n// Public realtime data\\r\\nlet
  dogfoodRealTimeReleases =
  cluster(\\\"DDTelvsraw\\\").database(\\\"VS\\\").RawEventsVS\\r\\n| where
  EventName == \\\"vs/willow/install-product\\\"\\r\\n| where
  Properties[\\\"reserved.datamodel.action.type\\\"] == \\\"End\\\"\\r\\n| where
  IsInternal == false\\r\\n| extend AppVersion =
  tostring(Properties[\\\"vs.willow.appversion\\\"])\\r\\n| extend OperationName
  = tostring(Properties [\\\"vs.willow.operationname\\\"])\\r\\n| extend
  GeneralReportResult = tostring(Properties[\\\"vs.willow.operationresult\\\"])
  \\r\\n| extend InstallSessionId =
  tostring(Properties[\\\"context.default.vs.willow.installsessionid\\\"])\\r\\\
  n| extend AppVersionUpdateTo =
  tostring(Properties[\\\"vs.willow.appversionupdateto\\\"])\\r\\n| extend
  AppVersionUpdateFrom =
  tostring(Properties[\\\"vs.willow.appversionupdatefrom\\\"])\\r\\n| extend
  ChannelId = tostring(Properties[\\\"vs.willow.channelid\\\"])\\r\\n| extend
  HasCoreFailure =
  tostring(Properties[\\\"vs.willow.hascorepackagefailures\\\"])\\r\\n| extend
  HasFailedPackageIds =
  isnotempty(Properties[\\\"vs.willow.failedpackageids\\\"]) \\r\\n| where
  AppVersion in (dogfoodversions) \\r\\n| where ChannelId contains
  \\\"IntPreview\\\"\\r\\n| extend OperationName = iif(OperationName ==
  \\\"update\\\", iif(substring(AppVersionUpdateTo,0,4) ==
  substring(AppVersionUpdateFrom,0,4),
  \\\"minorUpdate\\\",\\\"majorUpdate\\\"),OperationName)\\r\\n| extend
  GeneralReportResult = iif(GeneralReportResult == \\\"RebootRequired\\\",
  \\r\\n                                    iif(HasCoreFailure == \\\"true\\\",
  \\\"Failure\\\",
  \\r\\n                                    iif(HasFailedPackageIds == true,
  \\\"Warning\\\", \\\"Success\\\")), GeneralReportResult)   \\r\\n| where
  GeneralReportResult in (\\\"Success\\\", \\\"Warning\\\",
  \\\"Failure\\\")\\r\\n| project InstallSessionId, GeneralReportResult,
  AppVersion, ChannelId, OperationName;\\r\\n\\r\\n// Agregate dpgfodd
  data\\r\\nlet dogfoodReleases = dogfoodCuratedReleases | union
  dogfoodRealTimeReleases\\r\\n| join kind=leftouter (
  dogfoodversions\\r\\n       ) on $left.AppVersion ==
  $right.ManifestVersion\\r\\n| summarize sHits =
  dcount(InstallSessionId),\\r\\n            sSuccessHits =
  dcountif(InstallSessionId, GeneralReportResult ==
  \\\"Success\\\"),\\r\\n            sSuccessPct =
  round(dcountif(InstallSessionId, GeneralReportResult == \\\"Success\\\") *
  100.0 / dcount(InstallSessionId),2),\\r\\n            sFailureHits =
  dcountif(InstallSessionId, GeneralReportResult ==
  \\\"Failure\\\"),\\r\\n            sFailurePct =
  round(dcountif(InstallSessionId, GeneralReportResult == \\\"Failure\\\") *
  100.0 / dcount(InstallSessionId),2),\\r\\n            sWarningHits =
  dcountif(InstallSessionId, GeneralReportResult ==
  \\\"Warning\\\"),\\r\\n            sWarningPct =
  round(dcountif(InstallSessionId, GeneralReportResult == \\\"Warning\\\") *
  100.0 / dcount(InstallSessionId),2)\\r\\n       by ProductDisplayVersion,
  ChannelId, OperationName, ReleaseDate;\\r\\n       \\r\\npublicReleases |
  union
  dogfoodReleases\\r\\n}\",\"inputParameters\":[]},{\"name\":\"Setup100_RemapEr\
  ror\",\"docstring\":\"Return a curated failure
  signature\",\"body\":\"{\\r\\n\\r\\ncluster(\\\"DDTelInsights\\\").database(\\\
  \"Playground\\\").SetupErrorRemapper\\r\\n    | extend updatedSignature =
  iif(FilterInSignature =~ signature,
  Title,\\r\\n                                    iif(signature contains
  FilterInSignature, Title ,signature))\\r\\n    | summarize hit = count() by
  updatedSignature\\r\\n    | project updatedSignature, hit\\r\\n    | order by
  hit asc
  \\r\\n}\",\"inputParameters\":[{\"name\":\"signature\",\"cslType\":\"string\",\
  \"type\":\"System.String\",\"docstring\":\"\"}]},{\"name\":\"Willow_CrashCount\
  \",\"docstring\":\"Returns the number of jscrash events by os/exe versions
  during the timespan\",\"body\":\"{\\r\\n    let minUploadTime = now() -
  timePeriod;\\r\\n    cluster('Ddtelvsraw').database('VS').RawEventsVS\\r\\n    \
  | where EventName == \\\"vs/willow/jscrash\\\"\\r\\n    | where
  AdvancedServerTimestampUtc >= minUploadTime\\r\\n    | summarize
  NumberOfCrashSessions = dcount(SessionId), NumberOfCrashMachines =
  dcount(MacAddressHash) by ExeVersion,
  OsVersion\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslType\":\
  \"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"}]},{\"name\":\"W\
  illow_MachineCountByExeVersion\",\"docstring\":\"Returns the number of
  machines per version \",\"body\":\"{\\r\\n    let minTime = now() -
  timePeriod;\\r\\n    cluster('Ddtelvsraw').database('VS').RawEventsVS\\r\\n  \
    | where EventName == \\\"vs/willow/apprun\\\" and tostring(Properties[\\\"r\
  eserved.datamodel.action.type\\\"]) == \\\"Start\\\"\\r\\n    | where Advance\
  dServerTimestampUtc >
  minTime\\r\\n    | summarize NumberOfMachines = dcount(MacAddressHash) by Exe\
  Version\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslType\":\"\
  timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"}]},{\"name\":\"Wil\
  low_CrashPercentagePerMachineByExeVersion\",\"docstring\":\"Returns the
  percent of machines crashing by exe
  version\",\"body\":\"{\\r\\n    let CrashesByExeVersion
  = Willow_CrashCount(timePeriod)\\r\\n    | summarize NumberOfCrashMachines
  = sum(NumberOfCrashMachines) by ExeVersion;\\r\\n    Willow_MachineCountByExe\
  Version(timePeriod)\\r\\n    | join kind = leftouter CrashesByExeVersion on E\
  xeVersion\\r\\n    | where ExeVersion
  != \\\"1.0.0\\\"\\r\\n    | where NumberOfMachines >=
  minMachines\\r\\n    | extend NumberOfCrashMachines = max_of(0, NumberOfCrash\
  Machines)\\r\\n    | extend CrashPercent = NumberOfCrashMachines * 100.0 /
  NumberOfMachines\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"csl\
  Type\":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\"name\
  \":\"minMachines\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\
  \":\"\"}]},{\"name\":\"Willow_SessionCountByExeAndOsVersion\",\"docstring\":\
  \"Returns the number of session starts by Willow and OS version during the
  timespan\",\"body\":\"{\\r\\n    let minUploadTime = now() -
  timePeriod;\\r\\n    cluster('Ddtelvsraw').database('VS').RawEventsVS\\r\\n    \
  | where EventName == \\\"vs/willow/apprun\\\" and
  tostring(Properties[\\\"reserved.datamodel.action.type\\\"]) ==
  \\\"Start\\\"\\r\\n    | where AdvancedServerTimestampUtc  >=
  minUploadTime\\r\\n    | summarize NumberOfSessions = dcount(SessionId),
  NumberOfMachines = dcount(MacAddressHash) by ExeVersion,
  OsVersion\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslType\":\
  \"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"}]},{\"name\":\"W\
  illow_SessionCountByExeVersion\",\"docstring\":\"Returns the number of session
  starts by Willow version during the
  timespan\",\"body\":\"{\\r\\n    Willow_SessionCountByExeAndOsVersion(timePer\
  iod)\\r\\n    | summarize NumberOfSessions = sum(NumberOfSessions),
  NumberOfMachines = sum(NumberOfMachines) by
  ExeVersion\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslType\":\
  \"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"}]},{\"name\":\"W\
  illow_CrashSessionPercentagesByWillowVersion\",\"docstring\":\"Returns the
  percentage of sessions with crash events by Willow
  version\",\"body\":\"{\\r\\n    let CrashesByExeVersion =
  Willow_CrashCount(timePeriod)\\r\\n    | summarize NumberOfCrashSessions =
  sum(NumberOfCrashSessions) by
  ExeVersion;\\r\\n    Willow_SessionCountByExeVersion(timePeriod)\\r\\n    |
  join kind = leftouter CrashesByExeVersion on ExeVersion\\r\\n    | where
  ExeVersion != \\\"1.0.0\\\"\\r\\n    | where NumberOfSessions >=
  minSessions\\r\\n    | extend NumberOfCrashSessions = max_of(0,
  NumberOfCrashSessions)\\r\\n    | extend CrashPercent = NumberOfCrashSessions
  * 100.0 /
  NumberOfSessions\\r\\n}\",\"inputParameters\":[{\"name\":\"minSessions\",\"cs\
  lType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\"},{\"name\":\"tim\
  ePeriod\",\"cslType\":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\
  \"\"}]},{\"name\":\"Willow_CrashSessionPercentagesByWillowAndOsVersion\",\"do\
  cstring\":\"Returns the percentage of sessions with crash events by Willow/Os
  versions\",\"body\":\"{\\r\\n    Willow_SessionCountByExeAndOsVersion(timePer\
  iod)\\r\\n    | join kind = leftouter Willow_CrashCount(timePeriod) on
  ExeVersion, OsVersion\\r\\n    | where ExeVersion != \\\"1.0.0\\\"\\r\\n    |
  where NumberOfSessions >= minSessions\\r\\n    | extend NumberOfCrashSessions
  = max_of(0, NumberOfCrashSessions)\\r\\n    | extend CrashPercent =
  NumberOfCrashSessions * 100.0 /
  NumberOfSessions\\r\\n}\",\"inputParameters\":[{\"name\":\"minSessions\",\"cs\
  lType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\"},{\"name\":\"tim\
  ePeriod\",\"cslType\":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\
  \"\"}]},{\"name\":\"Willow_CrashSessionsByWillowAndOsVersionGoalDetails\",\"d\
  ocstring\":\"Returns the Willow/Os versions that do not meet the success
  criteria for crashes during the
  timespan\",\"body\":\"{\\r\\n    Willow_CrashSessionPercentagesByWillowAndOsV\
  ersion(minSessions, timePeriod)\\r\\n    | where CrashPercent >
  maxCrashPercent\\r\\n}\",\"inputParameters\":[{\"name\":\"minSessions\",\"csl\
  Type\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\"},{\"name\":\"time\
  Period\",\"cslType\":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\
  \"\"},{\"name\":\"maxCrashPercent\",\"cslType\":\"real\",\"type\":\"System.Do\
  uble\",\"docstring\":\"\"}]},{\"name\":\"Willow_CrashSessionsByWillowAndOsVer\
  sionGoal\",\"docstring\":\"Returns the number Willow/Os versions that do not
  meet the success criteria for crashes during the
  timespan\",\"body\":\"{\\r\\n    Willow_CrashSessionsByWillowAndOsVersionGoal\
  Details(minSessions, timePeriod, maxCrashPercent)\\r\\n    | summarize Result
  =
  count()\\r\\n}\",\"inputParameters\":[{\"name\":\"minSessions\",\"cslType\":\
  \"int\",\"type\":\"System.Int32\",\"docstring\":\"\"},{\"name\":\"timePeriod\
  \",\"cslType\":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\
  \"name\":\"maxCrashPercent\",\"cslType\":\"real\",\"type\":\"System.Double\",\
  \"docstring\":\"\"}]},{\"name\":\"Willow_CrashSessionsByWillowVersionGoalDeta\
  ils\",\"docstring\":\"Returns the Willow versions that do not meet the success
  criteria for crashes during the
  timespan\",\"body\":\"{\\r\\n    Willow_CrashSessionPercentagesByWillowVersio\
  n(minSessions, timePeriod)\\r\\n    | where CrashPercent >
  maxCrashPercent\\r\\n}\",\"inputParameters\":[{\"name\":\"minSessions\",\"csl\
  Type\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\"},{\"name\":\"time\
  Period\",\"cslType\":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\
  \"\"},{\"name\":\"maxCrashPercent\",\"cslType\":\"real\",\"type\":\"System.Do\
  uble\",\"docstring\":\"\"}]},{\"name\":\"Willow_CrashSessionsByWillowVersionG\
  oal\",\"docstring\":\"Returns the number Willow versions that do not meet the
  success criteria for crashes during the
  timespan\",\"body\":\"{\\r\\n    Willow_CrashSessionsByWillowVersionGoalDetai\
  ls(minSessions, timePeriod, maxCrashPercent)\\r\\n    | summarize Result =
  count()\\r\\n}\",\"inputParameters\":[{\"name\":\"minSessions\",\"cslType\":\
  \"int\",\"type\":\"System.Int32\",\"docstring\":\"\"},{\"name\":\"timePeriod\
  \",\"cslType\":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\
  \"name\":\"maxCrashPercent\",\"cslType\":\"real\",\"type\":\"System.Double\",\
  \"docstring\":\"\"}]},{\"name\":\"Willow_InstallSessionCountByExeVersion\",\"\
  docstring\":\"Returns the number of install session starts by Willow version
  during the timespan\",\"body\":\"{\\r\\n    let minUploadTime = now() -
  timePeriod;\\r\\n    cluster('Ddtelvsraw').database('VS').RawEventsVS\\r\\n    \
  | where EventName == \\\"vs/willow/install-product\\\" and
  tostring(Properties[\\\"reserved.datamodel.action.type\\\"]) ==
  \\\"Start\\\"\\r\\n    | where AdvancedServerTimestampUtc >=
  minUploadTime\\r\\n    | summarize NumberOfInstallSessions =
  dcount(SessionId), NumberOfMachinesInstalling = dcount(MacAddressHash) by
  ExeVersion\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslType\":\
  \"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"}]},{\"name\":\"W\
  illow_UnresponsiveWindowCount\",\"docstring\":\"Returns the number of
  unresponsive events by Willow version during the
  timespan\",\"body\":\"{\\r\\n    let minUploadTime = now() -
  timePeriod;\\r\\n    cluster('Ddtelvsraw').database('VS').RawEventsVS\\r\\n    \
  | where EventName == \\\"vs/willow/browserwindow/unresponsive\\\"\\r\\n    |
  where AdvancedServerTimestampUtc >= minUploadTime\\r\\n    | summarize
  NumberOfUnresponsiveSessions = dcount(SessionId), NumberOfUnresponsiveMachines
  = dcount(MacAddressHash) by
  ExeVersion\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslType\":\
  \"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"}]},{\"name\":\"W\
  illow_UnresponsiveInstallPercentages\",\"docstring\":\"Returns the percentage
  of installs with unresponsive events by Willow
  version\",\"body\":\"{\\r\\n    Willow_InstallSessionCountByExeVersion(timePe\
  riod)\\r\\n    | join kind = leftouter Willow_UnresponsiveDuringOperationCoun\
  t(timePeriod) on ExeVersion\\r\\n    | where ExeVersion != \\\"1.0.0\\\"\\r\\\
  n    | where NumberOfInstallSessions >=
  minInstalls\\r\\n    | extend NumberOfUnresponsiveSessions = max_of(0, Number\
  OfUnresponsiveSessions)\\r\\n    | extend UnresponsivePercent = NumberOfUnres\
  ponsiveSessions * 100.0
  / NumberOfInstallSessions\\r\\n}\",\"inputParameters\":[{\"name\":\"minInstal\
  ls\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\"},{\"name\
  \":\"timePeriod\",\"cslType\":\"timespan\",\"type\":\"System.TimeSpan\",\"doc\
  string\":\"\"}]},{\"name\":\"Willow_UnresponsiveSessionPercentages\",\"docstr\
  ing\":\"Returns the percentage of sessions with unresponsive events by Willow
  version\",\"body\":\"{\\r\\n    Willow_SessionCountByExeVersion(timePeriod)\\r\
  \\n    | join kind = leftouter Willow_UnresponsiveWindowCount(timePeriod) on
  ExeVersion\\r\\n    | where ExeVersion != \\\"1.0.0\\\"\\r\\n    | where
  NumberOfSessions >= minSessions\\r\\n    | extend NumberOfUnresponsiveSessions
  = max_of(0, NumberOfUnresponsiveSessions)\\r\\n    | extend
  UnresponsivePercent = NumberOfUnresponsiveSessions * 100.0 /
  NumberOfSessions\\r\\n}\",\"inputParameters\":[{\"name\":\"minSessions\",\"cs\
  lType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\"},{\"name\":\"tim\
  ePeriod\",\"cslType\":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\
  \"\"}]},{\"name\":\"Willow_UnresponsiveSessionsGoalDetails\",\"docstring\":\"\
  Returns the Willow versions not meeting the unresponsive success criteria by
  number of
  sessions\",\"body\":\"{\\r\\n    Willow_UnresponsiveSessionPercentages(minSes\
  sions, timePeriod)\\r\\n    | where UnresponsivePercent >
  maxUnresponsivePercent\\r\\n}\",\"inputParameters\":[{\"name\":\"minSessions\
  \",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\"},{\"name\
  \":\"timePeriod\",\"cslType\":\"timespan\",\"type\":\"System.TimeSpan\",\"doc\
  string\":\"\"},{\"name\":\"maxUnresponsivePercent\",\"cslType\":\"real\",\"ty\
  pe\":\"System.Double\",\"docstring\":\"\"}]},{\"name\":\"Willow_UnresponsiveI\
  nstallsGoalDetails\",\"docstring\":\"Returns the details of the VSTelHealth
  unresponsive installs
  goal\",\"body\":\"{\\r\\n    Willow_UnresponsiveInstallPercentages(minMachine\
  s, timePeriod)\\r\\n    | join ( Willow_NthLatestVersion(n, releaseScope,
  channelId, true) ) on
  ExeVersion\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslType\":\
  \"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\"name\":\"min\
  Machines\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\"},{\
  \"name\":\"n\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\
  \"},{\"name\":\"releaseScope\",\"cslType\":\"string\",\"type\":\"System.String\
  \",\"docstring\":\"\"},{\"name\":\"channelId\",\"cslType\":\"string\",\"type\
  \":\"System.String\",\"docstring\":\"\"}]},{\"name\":\"Willow_UnresponsiveIns\
  tallsGoal\",\"docstring\":\"Returns the result of the VSTelHealth unresponsive
  installs
  goal\",\"body\":\"{\\r\\n    Willow_UnresponsiveInstallsGoalDetails(timePerio\
  d, minMachines, n, releaseScope, channelId)\\r\\n    | summarize Result =
  sum(UnresponsivePercent)\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\
  \",\"cslType\":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\
  \"name\":\"minMachines\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docs\
  tring\":\"\"},{\"name\":\"n\",\"cslType\":\"int\",\"type\":\"System.Int32\",\
  \"docstring\":\"\"},{\"name\":\"releaseScope\",\"cslType\":\"string\",\"type\
  \":\"System.String\",\"docstring\":\"\"},{\"name\":\"channelId\",\"cslType\":\
  \"string\",\"type\":\"System.String\",\"docstring\":\"\"}]},{\"name\":\"Willo\
  w_UnresponsiveSessionsGoal\",\"docstring\":\"Returns number of Willow versions
  not meeting the unresponsive sessions success
  criteria\",\"body\":\"{\\r\\n    Willow_UnresponsiveSessionsGoalDetails(minSe\
  ssions, timePeriod, maxUnresponsivePercent)\\r\\n    | summarize Result =
  countif(UnresponsivePercent >
  maxUnresponsivePercent)\\r\\n}\",\"inputParameters\":[{\"name\":\"minSessions\
  \",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\"},{\"name\
  \":\"timePeriod\",\"cslType\":\"timespan\",\"type\":\"System.TimeSpan\",\"doc\
  string\":\"\"},{\"name\":\"maxUnresponsivePercent\",\"cslType\":\"real\",\"ty\
  pe\":\"System.Double\",\"docstring\":\"\"}]},{\"name\":\"Willow_NthLatestVers\
  ion\",\"docstring\":\"Returns the n-th latest installer version from the
  channelId released with the given
  scope\",\"body\":\"{\\r\\n    cluster(\\\"Ddtelvsraw\\\").database(\\\"Lookup\
  Tables\\\").VS_Telemetry_Releases_Func()\\r\\n    | where ReleaseScope
  contains releaseScope and ChannelId =~ channelId\\r\\n    | extend IsRTW =
  ManifestVersion startswith \\\"15.0\\\"\\r\\n    | where IsRTW == false or
  IsRTW != excludeRTW\\r\\n    | summarize BuildDate = max(BuildDate) by
  WillowInstallerVersion\\r\\n    | top n by WillowInstallerVersion desc nulls
  last\\r\\n    | top 1 by WillowInstallerVersion asc nulls last \\r\\n    |
  project ExeVersion = tostring(WillowInstallerVersion)
  \\r\\n}\",\"inputParameters\":[{\"name\":\"n\",\"cslType\":\"int\",\"type\":\
  \"System.Int32\",\"docstring\":\"\"},{\"name\":\"releaseScope\",\"cslType\":\
  \"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\"channel\
  Id\",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\
  \"name\":\"excludeRTW\",\"cslType\":\"bool\",\"type\":\"System.SByte\",\"docs\
  tring\":\"\"}]},{\"name\":\"Setup100_MissingEnd\",\"docstring\":\"Return
  missing
  data\",\"body\":\"{\\r\\ncluster('Ddtelinsights').database('DDTelInsights').S\
  etupWillowInstallProductMerged \\r\\n| where ServerTimestampUtc > now(-90d)
  \\r\\n| where IsInternal == 0 \\r\\n| where ChannelId == channel\\r\\n| where
  ReleaseScope contains \\\"public\\\" \\r\\n| where OperationName ==
  \\\"install\\\" \\r\\n| where GeneralReportResult !in
  (\\\"Cancel\\\",\\\"Block\\\") \\r\\n| summarize totalHits =
  dcount(InstallSessionId)\\r\\n            , missingEndHits =
  dcountif(InstallSessionId\\r\\n            , GeneralReportResult =~
  \\\"Missingend\\\") \\r\\n    by bin(ServerTimestampUtc, 1d),
  EngineProductDisplayVersion \\r\\n| where totalHits >
  minHit\\r\\n}\",\"inputParameters\":[{\"name\":\"channel\",\"cslType\":\"stri\
  ng\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\"minHit\",\"cs\
  lType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\"}]},{\"name\":\"S\
  etup100_MissingEnd_Breakdown\",\"docstring\":\"Return failures per
  release\",\"body\":\"{\\r\\ncluster(\\\"DDTelInsights\\\").database(\\\"DDTel\
  Insights\\\").SetupWillowInstallProductMerged\\r\\n| where GeneralReportResult
  == \\\"MissingEnd\\\" \\r\\n| where OperationName == \\\"install\\\" \\r\\n|
  where IsInternal == false \\r\\n| summarize dHits =
  dcount(MacAddressHash)\\r\\n            , EngineNotStartedPct =
  round(dcountif(MacAddressHash, IsAbnormalShutdown == false and
  HasEngineOperationStart == 0 and HasEngineOperationEnd == 0) * 100.0 /
  dcount(MacAddressHash))\\r\\n            , EngineNotStarted =
  dcountif(MacAddressHash, IsAbnormalShutdown == false and
  HasEngineOperationStart == 0 and HasEngineOperationEnd ==
  0)\\r\\n            , EngineStartedPct = round(dcountif(MacAddressHash,
  IsAbnormalShutdown == false and HasEngineOperationStart == 1 and
  HasEngineOperationEnd == 0) * 100.0 /
  dcount(MacAddressHash))\\r\\n            , EngineStarted =
  dcountif(MacAddressHash, IsAbnormalShutdown == false and
  HasEngineOperationStart == 1 and HasEngineOperationEnd ==
  0)\\r\\n            , EngineEndedPct = round(dcountif(MacAddressHash,
  IsAbnormalShutdown == false and HasEngineOperationStart == 1 and
  HasEngineOperationEnd == 1) * 100.0 /
  dcount(MacAddressHash))\\r\\n            , EngineEnded =
  dcountif(MacAddressHash, IsAbnormalShutdown == false and
  HasEngineOperationStart == 1 and HasEngineOperationEnd ==
  1)\\r\\n            , ErrorStatePct = round(dcountif(MacAddressHash,
  HasEngineOperationStart == 0 and HasEngineOperationEnd == 1) * 100.0 /
  dcount(MacAddressHash))\\r\\n            , ErrorState =
  dcountif(MacAddressHash, HasEngineOperationStart == 0 and
  HasEngineOperationEnd == 1)\\r\\n            ,
  IsAbnormalShutdownBeforeEngineStartedPct = round(dcountif(MacAddressHash,
  IsAbnormalShutdown == true and HasEngineOperationStart == 0 and
  HasEngineOperationEnd == 0) * 100.0 /
  dcount(MacAddressHash))\\r\\n            ,
  IsAbnormalShutdownBeforeEngineStarted = dcountif(MacAddressHash,
  IsAbnormalShutdown == true and HasEngineOperationStart == 0 and
  HasEngineOperationEnd == 0)\\r\\n            ,
  IsAbnormalShutdownDuringInstallPct = round(dcountif(MacAddressHash,
  IsAbnormalShutdown == true and HasEngineOperationStart == 1 and
  HasEngineOperationEnd == 0) * 100.0 /
  dcount(MacAddressHash))\\r\\n            , IsAbnormalShutdownDuringInstall =
  dcountif(MacAddressHash, IsAbnormalShutdown == true and
  HasEngineOperationStart == 1 and HasEngineOperationEnd ==
  0)\\r\\n            , IsAbnormalShutdownAfterInstallPct =
  round(dcountif(MacAddressHash, IsAbnormalShutdown == true and
  HasEngineOperationStart == 1 and HasEngineOperationEnd == 1) * 100.0 /
  dcount(MacAddressHash))\\r\\n            , IsAbnormalShutdownAfterInstall =
  dcountif(MacAddressHash, IsAbnormalShutdown == true and
  HasEngineOperationStart == 1 and HasEngineOperationEnd == 1)\\r\\n      by
  AppVersion, ChannelId \\r\\n| join kind=leftouter (
  cluster(\\\"Ddtelvsraw\\\").database(\\\"LookupTables\\\").VS_Telemetry_Relea\
  ses_Func()                     \\r\\n                        | where
  ReleaseScope contains
  \\\"public\\\"                         \\r\\n                        | where
  ReleaseDate >
  datetime(\\\"12-12-2017\\\")                         \\r\\n                        \
  | project ManifestVersion, ChannelId, ProductDisplayVersion,
  WillowInstallerVersion                        \\r\\n                      ) on
  ChannelId, $left.AppVersion == $right.ManifestVersion \\r\\n| where
  isnotempty(ProductDisplayVersion) \\r\\n| project
  ProductDisplayVersion             \\r\\n            ,
  ChannelId             \\r\\n            ,
  AppVersion              \\r\\n            ,
  WillowInstallerVersion              \\r\\n            ,
  dHits              \\r\\n            , EngineNotStartedPct\\r\\n            ,
  EngineNotStarted\\r\\n            , EngineStartedPct\\r\\n            ,
  EngineStarted\\r\\n            , EngineEndedPct\\r\\n            ,
  EngineEnded\\r\\n            , ErrorStatePct\\r\\n            ,
  ErrorState\\r\\n            ,
  IsAbnormalShutdownBeforeEngineStartedPct\\r\\n            ,
  IsAbnormalShutdownBeforeEngineStarted\\r\\n            ,
  IsAbnormalShutdownDuringInstallPct\\r\\n            ,
  IsAbnormalShutdownDuringInstall\\r\\n            ,
  IsAbnormalShutdownAfterInstallPct\\r\\n            ,
  IsAbnormalShutdownAfterInstall\\r\\n}\",\"inputParameters\":[]},{\"name\":\"S\
  etup100_MissingEnd_Package\",\"docstring\":\"Return failures per
  release\",\"body\":\"{\\r\\ncluster(\\\"DDTelInsights\\\").database(\\\"DDTel\
  Insights\\\").SetupWillowInstallProductMerged  \\r\\n| where
  GeneralReportResult == \\\"MissingEnd\\\" \\r\\n| where
  HasEngineOperationStart == 1 and HasEngineOperationEnd == 0 \\r\\n| where
  isnotempty(LastPackageId)  \\r\\n| join kind=leftouter (
  cluster(\\\"Ddtelvsraw\\\").database(\\\"LookupTables\\\").VS_Telemetry_Relea\
  ses_Func()                     \\r\\n                        | where
  ReleaseScope contains
  \\\"public\\\"                         \\r\\n                        | where
  ReleaseDate > datetime(\\\"12-12-2017\\\") and ReleaseDate >
  now(-90d)                         \\r\\n                        | project
  ManifestVersion, ChannelId, ProductDisplayVersion,
  WillowInstallerVersion\\r\\n                      ) on ChannelId,
  $left.AppVersion == $right.ManifestVersion \\r\\n| where
  isnotempty(ProductDisplayVersion) \\r\\n| summarize dhits =
  dcount(MacAddressHash) by symbols = strcat(LastPackageId, \\\":\\\",
  LastPackageOperation), ProductDisplayVersion, ChannelId \\r\\n| order by dhits
  desc  \\r\\n| extend symbols_Hits = strcat(symbols, \\\" - \\\", dhits)
  \\r\\n| summarize top5List = makelist(symbols_Hits, 5) by
  ProductDisplayVersion,
  ChannelId\\r\\n}\",\"inputParameters\":[]},{\"name\":\"SetupEngine_Verificati\
  onFailure\",\"docstring\":\"Returns verification failure
  events.\",\"body\":\"{\\r\\n    let minUploadTime = now() -
  timePeriod;\\r\\n    cluster('Ddtelvsraw').database('VS').RawEventsVS\\r\\n    \
  | where AdvancedServerTimestampUtc >= minUploadTime\\r\\n    | where
  IsInternal == false\\r\\n    | where EventName ==
  \\\"vs/setupengine/package-operation\\\"\\r\\n    | where Properties contains
  message\\r\\n    | where
  tostring(Properties[\\\"vs.setupengine.operationtype\\\"]) ==
  \\\"Verify-Package\\\"\\r\\n    | where
  tostring(Properties[\\\"reserved.datamodel.action.result\\\"]) ==
  \\\"Failure\\\"\\r\\n}\",\"inputParameters\":[{\"name\":\"message\",\"cslType\
  \":\"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\"time\
  Period\",\"cslType\":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\
  \"\"}]},{\"name\":\"SetupEngine_VerificationFailure_Count\",\"docstring\":\"R\
  eturns the number of verification failure
  events.\",\"body\":\"{\\r\\n    SetupEngine_VerificationFailure(message,
  1h)\\r\\n    | summarize Result = count()
  \\r\\n}\",\"inputParameters\":[{\"name\":\"message\",\"cslType\":\"string\",\
  \"type\":\"System.String\",\"docstring\":\"\"}]},{\"name\":\"SetupEngine_Veri\
  ficationFailure_Diagnostic1\",\"docstring\":\"Returns distribution of
  verification failure
  events.\",\"body\":\"{\\r\\n    SetupEngine_VerificationFailure(message,
  1h)\\r\\n    | extend AffectedPackage =
  tostring(Properties[\\\"vs.setupengine.uniquepackageid\\\"])\\r\\n    | extend
  ProductVersion =
  tostring(Properties[\\\"context.default.vs.setupengine.productversion\\\"])\\r\
  \\n    | parse
  tostring(Properties[\\\"reserved.datamodel.action.resultsummary\\\"]) with *
  \\\"actual signer: \\\" ActualSigner\\r\\n    | summarize Count = count() by
  GeoCountryRegionIso, ActualSigner, AffectedPackage,
  ProductVersion\\r\\n}\",\"inputParameters\":[{\"name\":\"message\",\"cslType\
  \":\"string\",\"type\":\"System.String\",\"docstring\":\"\"}]},{\"name\":\"Se\
  tupEngine_VerificationFailure_Diagnostic2\",\"docstring\":\"Returns details of
  verification failure
  events.\",\"body\":\"{\\r\\n    SetupEngine_VerificationFailure(message,
  1h)\\r\\n    | extend AffectedPackage =
  tostring(Properties[\\\"vs.setupengine.uniquepackageid\\\"])\\r\\n    | parse
  tostring(Properties[\\\"reserved.datamodel.action.resultsummary\\\"]) with *
  \\\"actual signer: \\\" ActualSigner\\r\\n    | extend Result =
  tostring(Properties[\\\"reserved.datamodel.action.resultsummary\\\"])\\r\\n    \
  | project GeoCountryRegionIso, AffectedPackage, ActualSigner, OsVersion,
  Result\\r\\n}\",\"inputParameters\":[{\"name\":\"message\",\"cslType\":\"stri\
  ng\",\"type\":\"System.String\",\"docstring\":\"\"}]},{\"name\":\"Willow_Unre\
  sponsiveDuringOperationCount\",\"docstring\":\"Returns the count of
  unresponsive events occurring during an operation\",\"body\":\"{\\r\\n    let
  minUploadTime = now() -
  timePeriod;\\r\\n    cluster(\\\"Ddtelvsraw\\\").database(\\\"VS\\\").RawEven\
  tsVS\\r\\n    | where AdvancedServerTimestampUtc >= minUploadTime\\r\\n    |
  where EventName == \\\"vs/willow/browserwindow/unresponsive\\\"\\r\\n    |
  project UnresponsiveTime = ClientTimestampUtc, SessionId, MacAddressHash,
  UnresponsiveId = EventId, ExeVersion\\r\\n    | join
  (\\r\\n        RawEventsVS\\r\\n        | where AdvancedServerTimestampUtc >=
  minUploadTime\\r\\n        | where EventName ==
  \\\"vs/willow/install-product\\\"\\r\\n        | where
  tostring(Properties[\\\"reserved.datamodel.action.type\\\"]) ==
  \\\"Start\\\"\\r\\n        | project StartTime = ClientTimestampUtc,
  SessionId, MacAddressHash\\r\\n        | join
  (\\r\\n            RawEventsVS\\r\\n            | where
  AdvancedServerTimestampUtc >= minUploadTime\\r\\n            | where EventName
  == \\\"vs/willow/install-product\\\"\\r\\n            | where
  tostring(Properties[\\\"reserved.datamodel.action.type\\\"]) ==
  \\\"End\\\"\\r\\n            | project EndTime = ClientTimestampUtc,
  SessionId, MacAddressHash\\r\\n        ) on SessionId,
  MacAddressHash\\r\\n    ) on SessionId, MacAddressHash\\r\\n    | extend
  DuringOperation = iff(UnresponsiveTime > StartTime and UnresponsiveTime <
  EndTime, 1, 0)\\r\\n    | summarize DuringOperation = sum(DuringOperation) by
  SessionId, UnresponsiveId, ExeVersion\\r\\n    | extend DuringOperation =
  iff(DuringOperation > 0, true, false)\\r\\n    | where DuringOperation ==
  true\\r\\n    | summarize NumberOfUnresponsiveSessions = count() by
  ExeVersion\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslType\":\
  \"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"}]},{\"name\":\"W\
  illow_Crashes\",\"docstring\":\"Returns JSCrash events with common
  properties\",\"body\":\"{\\r\\n    let minUploadTime = now() -
  timeperiod;\\r\\n    cluster(\\\"Ddtelvsraw\\\").database(\\\"VS\\\").RawEven\
  tsVS\\r\\n    | where EventName == \\\"vs/willow/jscrash\\\"\\r\\n    | where
  AdvancedServerTimestampUtc >= minUploadTime\\r\\n    |
  project\\r\\n        SessionId,\\r\\n        MacAddressHash,\\r\\n        Exe\
  Version,\\r\\n        OsVersion,\\r\\n        Message =
  tostring(Properties[\\\"reserved.datamodel.fault.exception.message\\\"]),\\r\
  \\n        Stack =
  tostring(Properties[\\\"reserved.datamodel.fault.exception.stacktrace\\\"]),\
  \\r\\n        Param1 =
  tostring(Properties[\\\"datamodel.fault.bucketparam1\\\"]),\\r\\n        Para\
  m2 =
  tostring(Properties[\\\"datamodel.fault.bucketparam2\\\"]),\\r\\n        Para\
  m3 =
  tostring(Properties[\\\"datamodel.fault.bucketparam3\\\"]),\\r\\n        Para\
  m4 =
  tostring(Properties[\\\"datamodel.fault.bucketparam4\\\"]),\\r\\n        Para\
  m5 =
  tostring(Properties[\\\"datamodel.fault.bucketparam5\\\"]),\\r\\n        Para\
  m6 =
  tostring(Properties[\\\"datamodel.fault.bucketparam6\\\"])\\r\\n}\",\"inputPa\
  rameters\":[{\"name\":\"timeperiod\",\"cslType\":\"timespan\",\"type\":\"Syst\
  em.TimeSpan\",\"docstring\":\"\"}]},{\"name\":\"Willow_CrashesByStack\",\"doc\
  string\":\"Returns the number of jscrash events by os/exe versions during the
  timespan, bucketed by
  stack\",\"body\":\"{\\r\\n    Willow_Crashes(timeperiod)\\r\\n    | summarize
  SessionCount = dcount(SessionId), MachineCount = dcount(MacAddressHash) by
  Stack, ExeVersion,
  OsVersion\\r\\n}\",\"inputParameters\":[{\"name\":\"timeperiod\",\"cslType\":\
  \"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"}]},{\"name\":\"W\
  illow_ServicehubStartErrors\",\"docstring\":\"Returns servicehub start failure
  events with common properties\",\"body\":\"{\\r\\n    let minUploadTime =
  now() -
  timeperiod;\\r\\n    cluster(\\\"Ddtelvsraw\\\").database(\\\"VS\\\").RawEven\
  tsVS\\r\\n    | where AdvancedServerTimestampUtc >= minUploadTime\\r\\n    |
  where EventName == \\\"vs/willow/start-servicehub-error\\\"\\r\\n    |
  project\\r\\n        SessionId,\\r\\n        MacAddressHash,\\r\\n        Exe\
  Version,\\r\\n        OsVersion,\\r\\n        Message =
  tostring(Properties[\\\"reserved.datamodel.fault.exception.message\\\"]),\\r\
  \\n        Stack =
  tostring(Properties[\\\"reserved.datamodel.fault.exception.stacktrace\\\"]),\
  \\r\\n        Param1 =
  tostring(Properties[\\\"datamodel.fault.bucketparam1\\\"]),\\r\\n        Para\
  m2 =
  tostring(Properties[\\\"datamodel.fault.bucketparam2\\\"]),\\r\\n        Para\
  m3 =
  tostring(Properties[\\\"datamodel.fault.bucketparam3\\\"]),\\r\\n        Para\
  m4 =
  tostring(Properties[\\\"datamodel.fault.bucketparam4\\\"]),\\r\\n        Para\
  m5 =
  tostring(Properties[\\\"datamodel.fault.bucketparam5\\\"]),\\r\\n        Para\
  m6 =
  tostring(Properties[\\\"datamodel.fault.bucketparam6\\\"])\\r\\n}\",\"inputPa\
  rameters\":[{\"name\":\"timeperiod\",\"cslType\":\"timespan\",\"type\":\"Syst\
  em.TimeSpan\",\"docstring\":\"\"}]},{\"name\":\"Setup100_Failures_RealTime\",\
  \"docstring\":\"Return failures per release\",\"body\":\"{\\r\\nlet
  latestManifestVersion =
  cluster(\\\"Ddtelvsraw\\\").database(\\\"LookupTables\\\").VS_Telemetry_Relea\
  ses_Func() \\r\\n                        | where ChannelId ==
  channelId\\r\\n                        | where ReleaseScope contains
  \\\"public\\\"\\r\\n                        | summarize by ManifestVersion,
  ProductDisplayVersion \\r\\n                        | top 1 by
  ProductDisplayVersion desc\\r\\n                        | project
  ManifestVersion;\\r\\nlet bugs =
  cluster(\\\"DDTelInsights\\\").database(\\\"Playground\\\").SetupErrorToBugMa\
  pping\\r\\n    | where isempty(Ignore) and isnotempty(IssueId)\\r\\n    |
  extend IssueId = toint(IssueId)\\r\\n    | summarize bugId = any(IssueId) by
  errorMessage = tolower(replace(\\\"\\\\\\\\s*\\\", \\\"\\\",
  ErrorMessage));\\r\\nlet events = RawEventsVS \\r\\n| where EventName ==
  \\\"vs/willow/install-product\\\"\\r\\n| where
  tostring(Properties[\\\"reserved.datamodel.action.type\\\"]) ==
  \\\"End\\\"\\r\\n| where IsInternal == false\\r\\n| where
  tostring(Properties[\\\"vs.willow.appversion\\\"]) ==
  iif(isempty(manifestVersion), toscalar(latestManifestVersion),
  manifestVersion)\\r\\n| extend GeneralResult =
  tostring(Properties[\\\"reserved.datamodel.action.result\\\"])\\r\\n| extend
  FailedPackageIds =
  tostring(Properties[\\\"vs.willow.failedpackageids\\\"])\\r\\n| extend
  ErrorMessage = tostring(Properties[\\\"vs.willow.errormessage\\\"])\\r\\n|
  extend FailedPackageDetails =
  tostring(Properties[\\\"vs.willow.failedpackagedetails.1\\\"])\\r\\n| parse
  FailedPackageDetails with WillowReportError1 \\\",\\\" *\\r\\n| extend
  FailedPackageDetails  = iif(isempty(WillowReportError1), FailedPackageDetails
  , WillowReportError1)\\r\\n| parse ErrorMessage with ErrorMessage1 \\\";\\\"
  *\\r\\n| extend ErrorMessage = iif(isempty(ErrorMessage1), ErrorMessage,
  ErrorMessage1) \\r\\n| extend InstallSessionId =
  tostring(Properties[\\\"context.default.vs.willow.installsessionid\\\"])\\r\\\
  n| extend ErrorMessage = iif(ErrorMessage contains 'Недостаточно места на
  диске.', 'There is not enough space on the
  disk.',\\r\\n                                iif(ErrorMessage contains
  '磁盘空间不足。', 'There is not enough space on the
  disk.',\\r\\n                                iif(ErrorMessage contains
  '磁碟的空間不足。', 'There is not enough space on the
  disk.',\\r\\n                                iif(ErrorMessage contains
  'Espacio en disco insuficiente.', 'There is not enough space on the
  disk.',\\r\\n                                iif(ErrorMessage contains '디스크
  공간이 부족합니다.', 'There is not enough space on the
  disk.',\\r\\n                                iif(ErrorMessage contains
  '所指定的可執行檔不是這個作業系統平台的有效應用程式。', 'The specified executable is not a valid
  application for this OS
  platform.',\\r\\n                                iif(ErrorMessage contains 'تم
  إنهاء العملية، ولذلك فإن المعلومات المطلوبة غير متوفرة.', 'Process has exited,
  so the requested information is not
  available.',\\r\\n                                iif(ErrorMessage contains
  'Process has exited, so the requested information is not available.', 'Process
  has exited, so the requested information is not
  available.',\\r\\n                                iif(ErrorMessage contains
  'Microsoft.VisualStudio.Setup.ChannelsLockedException', 'Exception of type
  \\\\'Microsoft.VisualStudio.Setup.ChannelsLockedException\\\\' was
  thrown.',\\r\\n                                iif(ErrorMessage =~
  'System.NullReferenceException', 'Object reference not set to an instance of
  an object.',\\r\\n                                iif(ErrorMessage =~ 'لم يتم
  تعيين مرجع كائن لمثيل كائن.', 'Object reference not set to an instance of an
  object.',\\r\\n                                iif(ErrorMessage contains
  'There is not enough space on the disk.', 'There is not enough space on the
  disk.', ErrorMessage))))))))))))\\r\\n| parse ErrorMessage with \\\"Package
  '\\\" PackageId \\\"'\\\" *\\r\\n| project   InstallSessionId,
  \\r\\n                GeneralResult,
  \\r\\n                FailedPackageDetails,\\r\\n                PackageId,                \
  \\r\\n                ErrorMessage,
  \\r\\n                MacAddressHash;\\r\\nlet errors = events\\r\\n    |
  where GeneralResult in (\\\"Warning\\\", \\\"Failure\\\")\\r\\n;\\r\\nlet
  total = errors \\r\\n    | summarize totalMachines = dcount(MacAddressHash, 2)
  \\r\\n    | project key = 1, totalMachines;\\r\\nerrors\\r\\n    | join
  kind=leftouter \\r\\n     (
  cluster('Ddtelvsraw').database('VS').RawEventsVS\\r\\n        | where
  EventName == \\\"vs/setupengine/packagefailure\\\"\\r\\n        | where
  IsInternal == false\\r\\n        | extend PackageId =
  tostring(Properties[\\\"vs.setupengine.packageid\\\"])\\r\\n        | extend
  SharedWillowInstallSessionId =
  tostring(Properties[\\\"context.default.vs.setupengine.sharedwillowinstallses\
  sionid\\\"])\\r\\n        | extend ResultSummary =
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam8\\\"])\\r\\n        \
  | extend ErrorCode_P7 =
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam7\\\"])\\r\\n        \
  | extend Operation_P6 = iif(ErrorCode_P7 == \\\"-2146889721\\\", \\\"Install -
  Win10SDK\\\",
  tostring(Properties[\\\"reserved.datamodel.fault.bucketparam6\\\"]))\\r\\n        \
  | extend PackageFailureMessage = strcat(PackageId, \\\"_\\\", ErrorCode_P7,
  \\\"_\\\", Operation_P6)\\r\\n        | join kind=leftouter (
  \\r\\n                                cluster(\\\"DDTelInsights\\\").database(\
  \\\"Playground\\\").SetupErrorRemapper \\r\\n                              )
  \\r\\n                              on $left.ErrorCode_P7 ==
  $right.FilterInSignature\\r\\n        | extend PackageFailureMessage =
  iif(isempty(Title), PackageFailureMessage, Title)\\r\\n        |
  project   rPackageId = PackageId,
  \\r\\n                    rSharedWillowInstallSessionId =
  SharedWillowInstallSessionId, \\r\\n                    rPackageFailureMessage
  = PackageFailureMessage,\\r\\n                    rPackageErrorCode =
  ErrorCode_P7\\r\\n     ) on $left.PackageId == $right.rPackageId,
  $left.InstallSessionId == $right.rSharedWillowInstallSessionId\\r\\n| extend
  ReportErrorMessage = iif(isnotempty(FailedPackageDetails),
  FailedPackageDetails,
  \\r\\n                                iif(isnotempty(rPackageFailureMessage),
  rPackageFailureMessage, ErrorMessage))\\r\\n| parse FailedPackageDetails with
  * \\\"_\\\"  FailingErrorCode \\\"_\\\" *\\r\\n| parse FailedPackageDetails
  with * \\\"_\\\" * \\\"_\\\"  FailingErrorCode1 \\\"_\\\" *\\r\\n| parse
  FailedPackageDetails with * \\\"_\\\" * \\\"_\\\" * \\\"_\\\"
  FailingErrorCode2 \\\"_\\\" *\\r\\n| extend FailingErrorCode =
  iif(isempty(FailingErrorCode2),
  \\r\\n                                iif(isempty(FailingErrorCode1),
  FailingErrorCode, FailingErrorCode1)\\r\\n                                ,
  FailingErrorCode2)\\r\\n| join
  kind=leftouter\\r\\n                cluster(\\\"DDTelInsights\\\").database(\\\
  \"Playground\\\").SetupErrorRemapper\\r\\n    on $left.FailingErrorCode ==
  $right.FilterInSignature\\r\\n| extend ReportErrorMessage =
  iif(isnotempty(Title), Title,ReportErrorMessage) \\r\\n| extend
  ReportErrorCode = iif(isnotempty(FailingErrorCode), FailingErrorCode,
  iif(isnotempty(rPackageErrorCode), rPackageErrorCode, ErrorMessage))\\r\\n|
  summarize machineCount = dcount(MacAddressHash, 2) by errorMessage =
  ReportErrorMessage, operationResult = GeneralResult, errorCode =
  ReportErrorCode\\r\\n| extend errorMessageForJoin =
  tolower(replace(\\\"\\\\\\\\s*\\\", \\\"\\\", errorMessage))\\r\\n| where
  errorMessage != \\\"\\\"\\r\\n| extend key=1\\r\\n| join kind=inner total on
  key\\r\\n| extend percentageMachines = todouble(machineCount) / totalMachines
  * 100\\r\\n| join kind=leftouter bugs on $left.errorMessageForJoin ==
  $right.errorMessage\\r\\n| extend errorMessage = iif(errorMessage contains
  \\\"Underlying stream has closed\\\", \\\"The underlying stream has
  closed\\\", errorMessage)\\r\\n| extend errorCode = iif(errorCode contains
  \\\"Underlying stream has closed\\\", \\\"The underlying stream has
  closed\\\", errorCode)\\r\\n| project errorMessage, operationResult,
  machineCount, round(percentageMachines,2), bugId, errorCode\\r\\n| order by
  percentageMachines
  desc\\r\\n}\",\"inputParameters\":[{\"name\":\"manifestVersion\",\"cslType\":\
  \"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\"channel\
  Id\",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"}]},{\
  \"name\":\"Setup100_Reliability_Bootstrapper\",\"docstring\":\"Return
  bootstrapper reliability over
  time\",\"body\":\"{\\r\\n\\r\\ncluster(\\\"Ddtelinsights\\\").database(\\\"DD\
  TelInsights\\\").SetupBootStrapperApprunEvent \\r\\n| where ServerUpLoadTime >
  ago(30d)\\r\\n| where IsInternal == 0\\r\\n| where DataModelActionType ==
  \\\"End\\\"\\r\\n| where StartupType == \\\"Install\\\"\\r\\n| where ChannelId
  contains \\\"Release\\\"\\r\\n| where ExeVersion !startswith
  \\\"15.\\\"\\r\\n| summarize successHits = dcountif(MacAddressHash,
  GeneralReportResult == \\\"Success\\\"),\\r\\n            successPct =
  round(dcountif(MacAddressHash, GeneralReportResult == \\\"Success\\\") * 100.0
  / dcountif(MacAddressHash, GeneralReportResult in
  (\\\"Success\\\",\\\"Failure\\\")),2) \\r\\n      by bin(ServerUpLoadTime,
  1d)\\r\\n| project ServerUpLoadTime ,
  successPct\\r\\n\\r\\n}\",\"inputParameters\":[]},{\"name\":\"Willow_OptedOut\
  GoalDetails\",\"docstring\":\"Returns the count/percentage of users that opted
  out of sending telemetry\",\"body\":\"{\\r\\n    let minUploadTime = now() -
  timePeriod;\\r\\n    let OptInTable
  =\\r\\n        cluster('Ddtelvsraw').database('VS').RawEventsVS\\r\\n        |
  where EventName == \\\"vs/willow/app-start-opted-out\\\"\\r\\n        | where
  AdvancedServerTimestampUtc >= minUploadTime\\r\\n        | where ExeVersion !=
  \\\"1.0.0\\\"\\r\\n        | project OptedIn =
  iff(tostring(Properties[\\\"context.default.vs.core.user.isoptedin\\\"]) =~
  \\\"true\\\", true, false), MacAddressHash,
  ExeVersion;\\r\\n    OptInTable\\r\\n    | where OptedIn == false\\r\\n    |
  summarize OptedOutCount = dcount(MacAddressHash) by ExeVersion\\r\\n    | join
  (\\r\\n       OptInTable\\r\\n       | where OptedIn == true\\r\\n       |
  summarize OptedInCount = dcount(MacAddressHash) by ExeVersion\\r\\n    ) on
  ExeVersion\\r\\n    | extend TotalUsers = OptedInCount + OptedOutCount
  \\r\\n    | extend OptInPercent = round(OptedInCount * 100.00 / TotalUsers,
  2)\\r\\n    | sort by OptInPercent desc nulls
  last\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslType\":\"tim\
  espan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"}]},{\"name\":\"Willow\
  _OptedOutGoal\",\"docstring\":\"Returns the number of versions that have a
  percent of opted in users less than the
  goal\",\"body\":\"{\\r\\n    Willow_OptedOutGoalResultDetails(goal,
  timePeriod, minUsers)\\r\\n    | summarize Result =
  count()\\r\\n}\",\"inputParameters\":[{\"name\":\"goal\",\"cslType\":\"real\",\
  \"type\":\"System.Double\",\"docstring\":\"\"},{\"name\":\"timePeriod\",\"csl\
  Type\":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\"name\
  \":\"minUsers\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\
  \"}]},{\"name\":\"Willow_OptedOutGoalResultDetails\",\"docstring\":\"Returns
  the count/percentage of users that opted out of sending telemetry not meeting
  the
  goal\",\"body\":\"{\\r\\n    Willow_OptedOutGoalDetails(timePeriod)\\r\\n    |
  where OptInPercent < goal\\r\\n    | where TotalUsers >=
  minUsers\\r\\n}\",\"inputParameters\":[{\"name\":\"goal\",\"cslType\":\"real\
  \",\"type\":\"System.Double\",\"docstring\":\"\"},{\"name\":\"timePeriod\",\"\
  cslType\":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\"na\
  me\":\"minUsers\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\
  \"\"}]},{\"name\":\"VSTelemetryDashboards_DashboardReleases_VS\",\"docstring\
  \":\"Gets the recommended set of releases for VS dashboards, including:\\n1.
  The most recent preview version (ex. 16.7 Preview 4.0)\\n2. All (other) minor
  versions next most recent preview (ex. 16.7 Preview 3.x)\\n3. The most recent
  release version (ex. 16.6.2)\\n4. All older versions from the current release
  group (ex. 16.6.0, 16.6.1)\\n5. All versions from the previous release group
  (ex. 16.5.*)\\nFor each release the following columns are provided:\\no
  DashboardLabel -- for grouping results into the categories described above\\no
  BranchName\\no ExeVersion\\no ManifestId\\no DisplayVersion\\no
  ReleaseGroupLabel\",\"body\":\"{\\nlet allVersions =
  VS_Telemetry_Releases_Func();\\nlet releaseVersions = allVersions\\n| where
  ChannelShortName == \\\"Release\\\";\\nlet latestReleaseGroupLabel =
  releaseVersions\\n| top 1 by parse_version(ReleaseGroupLabel)\\n| project
  ReleaseGroupLabel;\\nlet previousReleaseGroupLabel = releaseVersions\\n| where
  ReleaseGroupLabel != toscalar(latestReleaseGroupLabel)\\n| top 1 by
  parse_version(ReleaseGroupLabel)\\n| project ReleaseGroupLabel;\\nlet
  latestReleaseVersion = releaseVersions \\n| where ReleaseGroupLabel ==
  toscalar(latestReleaseGroupLabel)\\n| top 1 by parse_version(VsVersion)\\n|
  project ProductDisplayVersion; \\nlet previousRelease = releaseVersions \\n|
  where ReleaseGroupLabel == toscalar(previousReleaseGroupLabel)\\n| project
  DashboardLabel = strcat(ReleaseGroupLabel, \\\".*\\\"), VsBranch, VsVersion,
  ProductManifestId, ProductDisplayVersion, ReleaseGroupLabel;\\nlet
  currentReleaseOlder = releaseVersions \\n| where ReleaseGroupLabel ==
  toscalar(latestReleaseGroupLabel)\\n| where ProductDisplayVersion !=
  toscalar(latestReleaseVersion)\\n| project DashboardLabel =
  strcat(ReleaseGroupLabel, \\\" (Older)\\\"), VsBranch, VsVersion,
  ProductManifestId, ProductDisplayVersion, ReleaseGroupLabel;\\nlet
  latestRelease = releaseVersions \\n| top 1 by parse_version(VsVersion)\\n|
  project DashboardLabel = ProductDisplayVersion, VsBranch, VsVersion,
  ProductManifestId, ProductDisplayVersion, ReleaseGroupLabel;\\nlet
  previewVersions = allVersions\\n| where ChannelShortName == \\\"Preview\\\"
  \\n| where ReleaseDate > ago(180d)\\n| extend PreviewMajorVersion =
  substring(ProductDisplayVersion, 0, strlen(ProductDisplayVersion) - 2);\\nlet
  latestTwoPreviews = previewVersions\\n| top 2 by
  parse_version(VsVersion);\\nlet latestPreview = latestTwoPreviews\\n| top 1 by
  parse_version(VsVersion)\\n| project DashboardLabel = ProductDisplayVersion,
  VsBranch, VsVersion, ProductManifestId, ProductDisplayVersion,
  ReleaseGroupLabel, PreviewMajorVersion;\\nlet
  latestPreviewProductDisplayVersion = latestPreview\\n| project
  ProductDisplayVersion;\\nlet latestPreviewMajorVersion = latestPreview\\n|
  project PreviewMajorVersion;\\nlet previousPreviewMajorVersion =
  latestTwoPreviews\\n| where ProductDisplayVersion !=
  toscalar(latestPreviewProductDisplayVersion)\\n| project
  PreviewMajorVersion;\\nlet previousPreviewWithoutDashboardLabel =
  previewVersions\\n| where PreviewMajorVersion ==
  toscalar(previousPreviewMajorVersion)\\n| where ProductDisplayVersion !=
  toscalar(latestPreviewProductDisplayVersion)\\n| project PreviewMajorVersion,
  VsBranch, VsVersion, ProductManifestId, ProductDisplayVersion,
  ReleaseGroupLabel;\\nlet previousPreviewCount =
  previousPreviewWithoutDashboardLabel\\n| summarize count();\\nlet
  previousPreview = previousPreviewWithoutDashboardLabel\\n| extend
  DashboardLabel = iif(toscalar(previousPreviewCount) ==
  1,\\n                              ProductDisplayVersion,\\n                              \
  strcat(PreviewMajorVersion, iif(toscalar(latestPreviewMajorVersion) ==
  toscalar(previousPreviewMajorVersion),\\n                                                              \
  \\\"
  (Older)\\\",\\n                                                              \
  \\\".*\\\")))\\n| project-away PreviewMajorVersion;\\nunion previousRelease,
  currentReleaseOlder, latestRelease, previousPreview, latestPreview\\n| project
  DashboardLabel, BranchName=toupper(VsBranch), ExeVersion=VsVersion,
  ManifestId=ProductManifestId, DisplayVersion=ProductDisplayVersion,
  ReleaseGroupLabel;\\n}\",\"inputParameters\":[]},{\"name\":\"VSTelemetryDashb\
  oards_LatestPreviewVersion_VS\",\"docstring\":\"Gets the most recent VS
  preview version (ex. 15.8.0 Preview 1.1)\\nThe following columns are
  provided:\\no DashboardLabel -- for grouping results into the categories
  described above\\no BranchName\\no ExeVersion\\no ManifestId\\no
  DisplayVersion\\no
  ReleaseGroupLabel\",\"body\":\"{\\r\\nVS_Telemetry_Releases_Func()\\r\\n|
  where ChannelShortName == \\\"Preview\\\"\\r\\n| top 1 by
  ProductDisplayVersion\\r\\n| project DashboardLabel = ProductDisplayVersion,
  BranchName=toupper(VsBranch), ExeVersion=VsVersion,
  ManifestId=ProductManifestId, DisplayVersion=ProductDisplayVersion,
  ReleaseGroupLabel;\\r\\n}\",\"inputParameters\":[]},{\"name\":\"VSTelemetryDa\
  shboards_LatestReleaseVersion_VS\",\"docstring\":\"Gets the most recent VS
  release version (ex. 15.7.4)\\nThe following columns are provided:\\no
  DashboardLabel -- for grouping results into the categories described above\\no
  BranchName\\no ExeVersion\\no ManifestId\\no DisplayVersion\\no
  ReleaseGroupLabel\",\"body\":\"{\\r\\nVS_Telemetry_Releases_Func()\\r\\n|
  where ChannelShortName == \\\"Release\\\"\\r\\n| top 1 by
  ProductDisplayVersion\\r\\n| project DashboardLabel = ProductDisplayVersion,
  BranchName=toupper(VsBranch), ExeVersion=VsVersion,
  ManifestId=ProductManifestId, DisplayVersion=ProductDisplayVersion,
  ReleaseGroupLabel;\\r\\n}\",\"inputParameters\":[]},{\"name\":\"Willow_CrashG\
  oalDetails\",\"docstring\":\"Returns the details for the VSTelHealth crash
  goal
  metric\",\"body\":\"{\\r\\n    Willow_CrashPercentagePerMachineByExeVersion(t\
  imePeriod, minMachines)\\r\\n    | join ( Willow_NthLatestVersion(n,
  releaseScope, channelId, true) ) on
  ExeVersion\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslType\":\
  \"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\"name\":\"min\
  Machines\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\"},{\
  \"name\":\"n\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\
  \"},{\"name\":\"releaseScope\",\"cslType\":\"string\",\"type\":\"System.String\
  \",\"docstring\":\"\"},{\"name\":\"channelId\",\"cslType\":\"string\",\"type\
  \":\"System.String\",\"docstring\":\"\"}]},{\"name\":\"Willow_CrashGoal\",\"d\
  ocstring\":\"Returns the result for the VSTelHealth crash goal
  metric\",\"body\":\"{\\r\\n    Willow_CrashGoalDetails(timePeriod,
  minMachines, n, releaseScope, channelId)\\r\\n    | summarize Result =
  sum(CrashPercent)\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cs\
  lType\":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\"name\
  \":\"minMachines\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\
  \":\"\"},{\"name\":\"n\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docs\
  tring\":\"\"},{\"name\":\"releaseScope\",\"cslType\":\"string\",\"type\":\"Sy\
  stem.String\",\"docstring\":\"\"},{\"name\":\"channelId\",\"cslType\":\"string\
  \",\"type\":\"System.String\",\"docstring\":\"\"}]},{\"name\":\"Willow_CrashG\
  oalDiagQuery2\",\"docstring\":\"Returns the results for the crash goal
  diagnostic query two\",\"body\":\"{\\r\\n    Willow_NthLatestVersion(n,
  releaseScope, channelId, true)\\r\\n    | join ( RawEventsVS | where EventName
  == 'vs/willow/jscrash' and AdvancedServerTimestampUtc >= now() - timePeriod )
  on ExeVersion\\r\\n    | project CrashType =
  tostring(Properties['vs.willow.resultdetails']), Stack =
  tostring(Properties['vs.willow.stack']), SessionId, MacAddressHash,
  ExeVersion\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslType\":\
  \"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\"name\":\"n\",\
  \"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\"},{\"name\":\
  \"releaseScope\",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\
  \":\"\"},{\"name\":\"channelId\",\"cslType\":\"string\",\"type\":\"System.Str\
  ing\",\"docstring\":\"\"}]},{\"name\":\"Willow_UnresponsiveGoalDetails\",\"do\
  cstring\":\"Returns the details of the VSTelHealth unresponsive sessions
  goal\",\"body\":\"{\\r\\n    Willow_UnresponsiveSessionPercentages(minMachine\
  s, timePeriod)\\r\\n    | join ( Willow_NthLatestVersion(n, releaseScope,
  channelId, true) ) on
  ExeVersion\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslType\":\
  \"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\"name\":\"min\
  Machines\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\"},{\
  \"name\":\"n\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\
  \"},{\"name\":\"releaseScope\",\"cslType\":\"string\",\"type\":\"System.String\
  \",\"docstring\":\"\"},{\"name\":\"channelId\",\"cslType\":\"string\",\"type\
  \":\"System.String\",\"docstring\":\"\"}]},{\"name\":\"Willow_UnresponsiveGoal\
  \",\"docstring\":\"Returns the result of the VSTelHealth unresponsive sessions
  goal\",\"body\":\"{\\r\\n    Willow_UnresponsiveGoalDetails(timePeriod,
  minMachines, n, releaseScope, channelId)\\r\\n    | summarize Result =
  sum(UnresponsivePercent)\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\
  \",\"cslType\":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\
  \"name\":\"minMachines\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docs\
  tring\":\"\"},{\"name\":\"n\",\"cslType\":\"int\",\"type\":\"System.Int32\",\
  \"docstring\":\"\"},{\"name\":\"releaseScope\",\"cslType\":\"string\",\"type\
  \":\"System.String\",\"docstring\":\"\"},{\"name\":\"channelId\",\"cslType\":\
  \"string\",\"type\":\"System.String\",\"docstring\":\"\"}]},{\"name\":\"Willo\
  w_CrashesByStackGoalDetails\",\"docstring\":\"Returns the details of the
  VSTelHealth crashes by stack
  goal\",\"body\":\"{\\r\\n    Willow_NthLatestVersion(n, releaseScope,
  channelId, true)\\r\\n    | join kind = leftouter
  (\\r\\n        Willow_CrashesByStack(timePeriod)\\r\\n        | where Stack
  !contains \\\"ENOSPC\\\" // don't alert on out of diskspace
  errors\\r\\n        | summarize SessionCount = sum(SessionCount), MachineCount
  = sum(MachineCount) by Stack, ExeVersion\\r\\n        | join kind=leftouter
  Willow_SessionCountByExeVersion(timePeriod) on ExeVersion \\r\\n        |
  where NumberOfMachines >= minMachines\\r\\n        | extend SessionPercent =
  round(SessionCount * 100.00 / NumberOfSessions, 2), MachinePercent =
  round(MachineCount * 100.00 / NumberOfMachines, 2)\\r\\n        | extend
  IsOverThreshold = (SessionPercent >= maxSessionPercent or MachinePercent >=
  maxMachinePercent)\\r\\n    ) on
  ExeVersion\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslType\":\
  \"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\"name\":\"min\
  Machines\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\"},{\
  \"name\":\"maxSessionPercent\",\"cslType\":\"real\",\"type\":\"System.Double\
  \",\"docstring\":\"\"},{\"name\":\"maxMachinePercent\",\"cslType\":\"real\",\
  \"type\":\"System.Double\",\"docstring\":\"\"},{\"name\":\"n\",\"cslType\":\"\
  int\",\"type\":\"System.Int32\",\"docstring\":\"\"},{\"name\":\"releaseScope\
  \",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"n\
  ame\":\"channelId\",\"cslType\":\"string\",\"type\":\"System.String\",\"docst\
  ring\":\"\"}]},{\"name\":\"Willow_CrashesByStackGoal\",\"docstring\":\"Returns
  the result of the VSTelHealth crashes by stack
  goal\",\"body\":\"{\\r\\n    Willow_CrashesByStackGoalDetails(timePeriod,
  minMachines, maxSessionPercent, maxMachinePercent, n, releaseScope,
  channelId)\\r\\n    | where IsOverThreshold == true\\r\\n    | summarize
  Result = count()\\r\\n    | project Result = max_of(0,
  Result)\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslType\":\"\
  timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\"name\":\"minMa\
  chines\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\"},{\
  \"name\":\"maxSessionPercent\",\"cslType\":\"real\",\"type\":\"System.Double\
  \",\"docstring\":\"\"},{\"name\":\"maxMachinePercent\",\"cslType\":\"real\",\
  \"type\":\"System.Double\",\"docstring\":\"\"},{\"name\":\"n\",\"cslType\":\"\
  int\",\"type\":\"System.Int32\",\"docstring\":\"\"},{\"name\":\"releaseScope\
  \",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"n\
  ame\":\"channelId\",\"cslType\":\"string\",\"type\":\"System.String\",\"docst\
  ring\":\"\"}]},{\"name\":\"Willow_ServicehubFailuresGoalDetails\",\"docstring\
  \":\"Returns the details of VSTelHealth Servicehub failures
  goal\",\"body\":\"{\\r\\n    Willow_NthLatestVersion(n, releaseScope,
  channelId, true)\\r\\n    | join kind = leftouter
  (\\r\\n        Willow_ServicehubStartErrors(timePeriod)\\r\\n        |
  summarize SessionCount = dcount(SessionId), MachineCount =
  dcount(MacAddressHash) by ExeVersion\\r\\n        | join
  Willow_SessionCountByExeVersion(timePeriod) on ExeVersion\\r\\n        |
  extend MachineFailurePercentage = round(MachineCount * 100.0 /
  NumberOfMachines, 2)\\r\\n        | where NumberOfMachines >
  minMachines\\r\\n    ) on
  ExeVersion\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslType\":\
  \"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\"name\":\"min\
  Machines\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\"},{\
  \"name\":\"n\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\
  \"},{\"name\":\"releaseScope\",\"cslType\":\"string\",\"type\":\"System.String\
  \",\"docstring\":\"\"},{\"name\":\"channelId\",\"cslType\":\"string\",\"type\
  \":\"System.String\",\"docstring\":\"\"}]},{\"name\":\"Willow_ServicehubFailu\
  resGoal\",\"docstring\":\"Returns the result of VSTelHealth Servicehub
  failures
  goal\",\"body\":\"{\\r\\n    Willow_ServicehubFailuresGoalDetails(timePeriod,
  minMachines, n, releaseScope, channelId)\\r\\n    | project Result =
  max_of(0.0,
  MachineFailurePercentage)\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\
  \",\"cslType\":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\
  \"name\":\"minMachines\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docs\
  tring\":\"\"},{\"name\":\"n\",\"cslType\":\"int\",\"type\":\"System.Int32\",\
  \"docstring\":\"\"},{\"name\":\"releaseScope\",\"cslType\":\"string\",\"type\
  \":\"System.String\",\"docstring\":\"\"},{\"name\":\"channelId\",\"cslType\":\
  \"string\",\"type\":\"System.String\",\"docstring\":\"\"}]},{\"name\":\"Failu\
  reAnalysis_AntiVirus\",\"docstring\":\"Breakdown by
  AntiVirus\",\"body\":\"{\\r\\nlet rawResult =
  cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").SetupWillowIns\
  tallProductMerged \\r\\n| where ServerTimestampUtc > ago(4d)\\r\\n| where
  FailedPackageDetails contains failureSignature\\r\\n| distinct MacAddressHash,
  MachineId\\r\\n| join kind=leftouter (
  cluster(\\\"Ddtelvsraw\\\").database(\\\"VS\\\").RawEventsVS  \\r\\n                        \
  | where AdvancedServerTimestampUtc > ago(4d)\\r\\n                        |
  where EventName == \\\"vs/core/antivirus\\\"\\r\\n                        |
  extend v1 =
  Properties[\\\"vs.core.antivirus.antivirus0\\\"]\\r\\n                        \
  | extend v2 =
  Properties[\\\"vs.core.antivirus.antivirus1\\\"]\\r\\n                        \
  | extend v3 =
  Properties[\\\"vs.core.antivirus.antivirus2\\\"]\\r\\n                        \
  | distinct MacAddressHash, tostring(v1), tostring(v2), tostring(v3),
  MachineId\\r\\n                      ) on MacAddressHash, MachineId\\r\\n|
  summarize dcount(MacAddressHash) by v1, v2, v3;\\r\\nlet virus1 = rawResult
  \\r\\n             | summarize x = make_list(v1)\\r\\n             | mv-expand
  with_itemindex=Index  x \\r\\n             | summarize hits = count(x) by
  tostring(x)\\r\\n             | where isnotempty(x);\\r\\nlet virus2 =
  rawResult \\r\\n             | summarize x = make_list(v2)\\r\\n             |
  mv-expand with_itemindex=Index  x \\r\\n             | summarize hits =
  count(x) by tostring(x)\\r\\n             | where isnotempty(x);\\r\\nlet
  virus3 = rawResult \\r\\n             | summarize x =
  make_list(v3)\\r\\n             | mv-expand with_itemindex=Index  x
  \\r\\n             | summarize hits = count(x) by
  tostring(x)\\r\\n             | where isnotempty(x);\\r\\nvirus1 \\r\\n| union
  virus2\\r\\n| union virus3\\r\\n| summarize sum(hits) by
  x\\r\\n}\",\"inputParameters\":[{\"name\":\"failureSignature\",\"cslType\":\"\
  string\",\"type\":\"System.String\",\"docstring\":\"\"}]},{\"name\":\"Failure\
  Analysis_Country\",\"docstring\":\"Breakdown by
  Country\",\"body\":\"{\\r\\ncluster(\\\"Ddtelinsights\\\").database(\\\"DDTel\
  Insights\\\").SetupWillowInstallProductMerged \\r\\n| where ServerTimestampUtc
  > ago(4d)\\r\\n| where FailedPackageDetails contains failureSignature\\r\\n|
  summarize dcount(MacAddressHash) by
  GeoCountryRegion\\r\\n}\",\"inputParameters\":[{\"name\":\"failureSignature\",\
  \"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"}]},{\"na\
  me\":\"Willow_DeveloperNews_CertErrorPercentage\",\"docstring\":\"Returns the
  percentage of errors by ExeVersion that are certificate
  errors.\",\"body\":\"{\\r\\n    let minUploadTime = now() -
  timePeriod;\\r\\n    cluster('Ddtelvsraw').database('VS').RawEventsVS\\r\\n    \
  | where EventName ==
  \\\"vs/willow/developernews/update-feed-error\\\"\\r\\n    | where
  AdvancedServerTimestampUtc >= minUploadTime\\r\\n    | extend isCertError =
  tostring(Properties[\\\"vs.willow.iscerterror\\\"])\\r\\n    | summarize
  certErrorCount = countif(isCertError == \\\"true\\\"), TotalErrors = count()
  by ExeVersion\\r\\n    | summarize total = sum(TotalErrors), certCount =
  sum(certErrorCount) by ExeVersion\\r\\n    | project ExeVersion, certCount,
  total, certErrorPercent = (certCount * 100.0 / iff(total == 0, 1, total))
  \\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslType\":\"timespan\
  \",\"type\":\"System.TimeSpan\",\"docstring\":\"\"}]},{\"name\":\"Willow_Deve\
  loperNews_CertErrorGoal\",\"docstring\":\"Returns the  developer news cert
  error percentage for given
  version\",\"body\":\"{\\r\\n    Willow_DeveloperNews_CertErrorPercentage(time\
  Period) \\r\\n    | join Willow_NthLatestVersion(n, releaseScope, channelId,
  true) on ExeVersion\\r\\n    | join
  Willow_MachineCountByExeVersion(timePeriod) on ExeVersion\\r\\n    | project
  Result = iff(NumberOfMachines > minMachines, certErrorPercent,
  0.00)\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslType\":\"ti\
  mespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\"name\":\"minMach\
  ines\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\"},{\"n\
  ame\":\"n\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\"}\
  ,{\"name\":\"releaseScope\",\"cslType\":\"string\",\"type\":\"System.String\",\
  \"docstring\":\"\"},{\"name\":\"channelId\",\"cslType\":\"string\",\"type\":\
  \"System.String\",\"docstring\":\"\"}]},{\"name\":\"Willow_DeveloperNews_Succ\
  essDetails\",\"docstring\":\"Returns the developer news success and failure
  details as per Exe version and OSVersion.\",\"body\":\"{\\r\\n    let
  minUploadTime = now() - timePeriod;\\r\\n    let dataTable =
  cluster('Ddtelvsraw').database('VS').RawEventsVS\\r\\n        | where
  EventName == \\\"vs/willow/developernews/update-feed\\\"\\r\\n        | where
  AdvancedServerTimestampUtc >= minUploadTime\\r\\n        | extend result =
  iff(tostring(Properties[\\\"reserved.datamodel.action.result\\\"]) ==
  \\\"Success\\\", \\\"success\\\" , \\\"failure\\\")\\r\\n        | summarize
  counts = count() by result, ExeVersion,
  OsVersion;  \\r\\n    dataTable\\r\\n    | summarize success = sumif(counts,
  result == \\\"success\\\"), total = sum(counts) by ExeVersion,
  OsVersion\\r\\n    | project ExeVersion, OsVersion, success, failure = (total
  - success),
  total\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslType\":\"ti\
  mespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"}]},{\"name\":\"Willo\
  w_DeveloperNews_SuccessPercentage\",\"docstring\":\"Returns the developer news
  success
  percentage.\",\"body\":\"{\\r\\n    Willow_DeveloperNews_SuccessDetails(timeP\
  eriod) \\r\\n    | summarize success = sum(success), failure = sum(failure),
  total = sum(total) by ExeVersion\\r\\n    | project ExeVersion, success,
  failure, total, SuccessPercent = (success * 100.0 / iff(total == 0, 1,
  total));\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslType\":\
  \"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"}]},{\"name\":\"W\
  illow_DeveloperNews_SuccessGoal\",\"docstring\":\"Returns the  developer news
  success percentage for given
  version\",\"body\":\"{\\r\\n    Willow_DeveloperNews_SuccessPercentage(timePe\
  riod) \\r\\n    | join Willow_NthLatestVersion(n, releaseScope, channelId,
  true) on ExeVersion\\r\\n    | join
  Willow_MachineCountByExeVersion(timePeriod) on ExeVersion\\r\\n    | project
  Result = iff(NumberOfMachines > minMachines, SuccessPercent,
  100.00)\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslType\":\"\
  timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\"name\":\"minMa\
  chines\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\"},{\
  \"name\":\"n\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\
  \"},{\"name\":\"releaseScope\",\"cslType\":\"string\",\"type\":\"System.String\
  \",\"docstring\":\"\"},{\"name\":\"channelId\",\"cslType\":\"string\",\"type\
  \":\"System.String\",\"docstring\":\"\"}]},{\"name\":\"Setup100_Test\",\"docs\
  tring\":\"Return issues from last x days for
  preview.\",\"body\":\"{cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsig\
  hts\\\").DataModelFault| take
  1}\",\"inputParameters\":[{\"name\":\"daysToLookback\",\"cslType\":\"timespan\
  \",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\"name\":\"previewVersion\
  \",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"n\
  ame\":\"previewVsVersion\",\"cslType\":\"string\",\"type\":\"System.String\",\
  \"docstring\":\"\"}]},{\"name\":\"VS_ConfigExportFromVSErrorPercentage\",\"do\
  cstring\":\"Returns the percentage of failed .vsconfig
  exports.\",\"body\":\"{\\r\\n    let minUploadTime = now() -
  timePeriod;\\r\\n    cluster('ddtelvsraw').database('VS').RawEventsVS\\r\\n    \
  | where EventName startswith
  \\\"vs/setup/inproductacquisition/export-configuration\\\"\\r\\n    | where
  AdvancedServerTimestampUtc >= minUploadTime\\r\\n    | summarize
  SuccessfulExports = countif(EventName ==
  \\\"vs/setup/inproductacquisition/export-configuration\\\" and
  tostring(Properties[\\\"reserved.datamodel.action.type\\\"]) ==
  \\\"End\\\"),\\r\\n                FailedExports = countif(EventName ==
  \\\"vs/setup/inproductacquisition/export-configuration-error\\\")\\r\\n    |
  project Result = 100.0 * FailedExports / SuccessfulExports +
  FailedExports;\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslTy\
  pe\":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"}]},{\"name\
  \":\"VS_ConfigExportFromVSErrorStackDetails\",\"docstring\":\"Returns the
  stack details of failed .vsconfig exports.\",\"body\":\"{\\r\\n    let
  minUploadTime = now() -
  timePeriod;\\r\\n    cluster('ddtelvsraw').database('VS').RawEventsVS\\r\\n    \
  | where AdvancedServerTimestampUtc >= minUploadTime\\r\\n    | where EventName
  == \\\"vs/setup/inproductacquisition/export-configuration-error\\\"\\r\\n    |
  where
  isnotempty(tostring(Properties['reserved.datamodel.fault.exception.stacktrace\
  ']))\\r\\n    | project ExeVersion, Stack =
  tostring(Properties['reserved.datamodel.fault.exception.stacktrace'])\\r\\n}\
  \",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslType\":\"timespan\",\"t\
  ype\":\"System.TimeSpan\",\"docstring\":\"\"}]},{\"name\":\"VS_IDEUpdateCheck\
  ErrorDetail\",\"docstring\":\"Base function for returning update related error
  detail.\",\"body\":\"{\\r\\n    let minUploadTime = now() -
  timePeriod;\\r\\n    let updateEventName =
  strcat(\\\"vs/setup/inproductacquisition/updatedialog/\\\",
  updateOperationEventName);\\r\\n    cluster('ddtelvsraw').database('VS').RawE\
  ventsVS\\r\\n    | where ChannelId == channelId\\r\\n    | where
  AdvancedServerTimestampUtc >= minUploadTime\\r\\n    | where EventName ==
  updateEventName\\r\\n    | where
  tostring(Properties[\\\"reserved.datamodel.action.type\\\"]) ==
  \\\"End\\\"\\r\\n    | where
  tostring(Properties[\\\"reserved.datamodel.action.result\\\"]) ==
  \\\"Failure\\\"\\r\\n    | summarize by ExeVersion, ResultSummary =
  tostring(Properties[\\\"reserved.datamodel.action.resultsummary\\\"]),
  MacAddressHash;\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslT\
  ype\":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\"name\":\
  \"channelId\",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\
  \"\"},{\"name\":\"updateOperationEventName\",\"cslType\":\"string\",\"type\":\
  \"System.String\",\"docstring\":\"\"}]},{\"name\":\"VS_IDEUpdateCheckErrorPer\
  centage\",\"docstring\":\"Base function for returning percentage faliure of
  update check related operation.\",\"body\":\"{\\r\\n    let minUploadTime =
  now() - timePeriod;\\r\\n    let updateEventName =
  strcat(\\\"vs/setup/inproductacquisition/updatedialog/\\\",
  updateOperationEventName);\\r\\n    cluster('ddtelvsraw').database('VS').RawE\
  ventsVS\\r\\n    | where ChannelId == channelId\\r\\n    | where EventName ==
  updateEventName\\r\\n    | where AdvancedServerTimestampUtc >=
  minUploadTime\\r\\n    | summarize TotalOperations = dcountif(MacAddressHash,
  tostring(Properties[\\\"reserved.datamodel.action.type\\\"]) ==
  \\\"End\\\"),\\r\\n                FailedOperations = dcountif(MacAddressHash,
  tostring(Properties[\\\"reserved.datamodel.action.type\\\"]) == \\\"End\\\"
  and tostring(Properties[\\\"reserved.datamodel.action.result\\\"]) ==
  \\\"Failure\\\")\\r\\n    | project Result = max_of(0.0, 100.0 *
  FailedOperations /
  TotalOperations);\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cs\
  lType\":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\"name\
  \":\"channelId\",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\
  \":\"\"},{\"name\":\"updateOperationEventName\",\"cslType\":\"string\",\"type\
  \":\"System.String\",\"docstring\":\"\"}]},{\"name\":\"VS_IDEExternalUpdateCh\
  eckErrorDetail\",\"docstring\":\"Function for returning external update check
  related error detail.\",\"body\":\"{\\r\\n    let minUploadTime = now() -
  timePeriod;\\r\\n    cluster('ddtelvsraw').database('VS').RawEventsVS\\r\\n    \
  | where EventName ==
  \\\"vs/setup/inproductacquisition/manifestrefresh\\\"\\r\\n    | where
  ChannelId == channelId\\r\\n    | where parse_version(ExeVersion) >=
  parse_version(exeMinVersion)\\r\\n    | where AdvancedServerTimestampUtc >=
  minUploadTime\\r\\n    | where
  tostring(Properties[\\\"reserved.datamodel.action.type\\\"]) ==
  \\\"End\\\"\\r\\n    | where
  tobool(Properties[\\\"vs.setup.inproductacquisition.manifestupdate.isexternal\
  updatechecksuccessful\\\"]) == false\\r\\n    | extend ExceptionType =
  tostring(Properties[\\\"vs.setup.inproductacquisition.manifestupdate.external\
  checkexceptiontype\\\"])\\r\\n    | extend ExternalCheckExitCode =
  toint(Measures[\\\"vs.setup.inproductacquisition.manifestupdate.externalcheck\
  exitcode\\\"])\\r\\n    | where isnotempty(ExceptionType) or
  isnotempty(ExternalCheckExitCode)\\r\\n    | summarize by ExeVersion,
  ExternalCheckExitCode, ExceptionType, ExceptionMessage =
  tostring(Properties[\\\"vs.setup.inproductacquisition.manifestupdate.external\
  checkexceptionmessage\\\"]),
  MacAddressHash;\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslT\
  ype\":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\"name\":\
  \"channelId\",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\
  \"\"},{\"name\":\"exeMinVersion\",\"cslType\":\"string\",\"type\":\"System.St\
  ring\",\"docstring\":\"\"}]},{\"name\":\"VS_IDEExternalUpdateCheckErrorPercen\
  tage\",\"docstring\":\"Function for returning percentage failure of external
  update check operation.\",\"body\":\"{\\r\\n    let minUploadTime = now() -
  timePeriod;\\r\\n    cluster('ddtelvsraw').database('VS').RawEventsVS\\r\\n    \
  | where AdvancedServerTimestampUtc >= minUploadTime\\r\\n        and
  DataModelActionType == \\\"End\\\"\\r\\n        and EventName ==
  \\\"vs/setup/inproductacquisition/manifestrefresh\\\"\\r\\n        and
  ChannelId == channelId\\r\\n        and parse_version(ExeVersion) >=
  parse_version(exeMinVersion)\\r\\n    | extend IsExternalUpdateCheckSuccessful
  =
  tobool(Properties[\\\"vs.setup.inproductacquisition.manifestupdate.isexternal\
  updatechecksuccessful\\\"])\\r\\n    | extend ExternalCheckExceptionType =
  tostring(Properties[\\\"vs.setup.inproductacquisition.manifestupdate.external\
  checkexceptiontype\\\"])\\r\\n    | extend ExternalCheckExitCode =
  toint(Measures[\\\"vs.setup.inproductacquisition.manifestupdate.externalcheck\
  exitcode\\\"])\\r\\n    | summarize TotalOperations = dcountif(MacAddressHash,
  isnotempty(IsExternalUpdateCheckSuccessful)),\\r\\n                FailedOper\
  ations = dcountif(MacAddressHash, IsExternalUpdateCheckSuccessful == false and
  (isnotempty(ExternalCheckExceptionType) or
  isnotempty(ExternalCheckExitCode)))\\r\\n    | project Result = max_of(0.0,
  100.0 * FailedOperations /
  TotalOperations);\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cs\
  lType\":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\"name\
  \":\"channelId\",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\
  \":\"\"},{\"name\":\"exeMinVersion\",\"cslType\":\"string\",\"type\":\"System\
  .String\",\"docstring\":\"\"}]},{\"name\":\"VS_IDEInfiniteUpdateDetectDetail\
  \",\"docstring\":\"Function for returning infinite update detection
  detail.\",\"body\":\"{\\r\\n    cluster('ddtelvsraw').database('VS').RawEvent\
  sVS\\r\\n    | where AdvancedServerTimestampUtc > ago(timeAgo)\\r\\n    |
  where toint(split(ExeVersion, '.')[0]) != 15 // filter out dev 15 RTW
  bootstrapper.\\r\\n    | where parse_version(ExeVersion) >=
  parse_version(exeMinVersion)\\r\\n    | extend ChannelIdUsed =
  tostring(Properties[\\\"context.default.vs.setup.bootstrapper.commandline.res\
  ponsefile.channelid\\\"])\\r\\n    | where ChannelIdUsed ==
  channelId\\r\\n    | where EventName ==
  \\\"vs/setup/bootstrapper/app-run\\\"\\r\\n    | where
  tostring(Properties[\\\"reserved.datamodel.action.type\\\"]) ==
  \\\"End\\\"\\r\\n    | where
  tostring(Properties[\\\"reserved.datamodel.action.result\\\"]) ==
  \\\"Success\\\"\\r\\n    | where
  tostring(Properties[\\\"context.default.vs.setup.bootstrapper.commandline.sta\
  rtuptype\\\"]) == \\\"ClientUpdate\\\"\\r\\n    | project ClientTimestampUtc,
  MacAddressHash, UserId, SessionId, IsInternal, ExeVersion, UserAlias,
  ExeName\\r\\n    | join kind=inner (
  cluster('ddtelvsraw').database('VS').RawEventsVS\\r\\n                            \
  | where AdvancedServerTimestampUtc >
  ago(timeAgo)\\r\\n                            | where toint(split(ExeVersion,
  '.')[0]) != 15 // filter out dev 15 RTW
  bootstrapper.\\r\\n                            | where
  parse_version(ExeVersion) >=
  parse_version(exeMinVersion)\\r\\n                            | extend
  ChannelIdUsed =
  tostring(Properties[\\\"context.default.vs.setup.bootstrapper.commandline.res\
  ponsefile.channelid\\\"])\\r\\n                            | where
  ChannelIdUsed == channelId\\r\\n                            | where EventName
  == \\\"vs/setup/bootstrapper/app-run\\\"\\r\\n                            |
  where tostring(Properties[\\\"reserved.datamodel.action.type\\\"]) ==
  \\\"End\\\"\\r\\n                            | where
  tostring(Properties[\\\"reserved.datamodel.action.result\\\"]) ==
  \\\"Success\\\"\\r\\n                            | where
  tostring(Properties[\\\"context.default.vs.setup.bootstrapper.commandline.sta\
  rtuptype\\\"]) == \\\"ClientUpdate\\\"\\r\\n                            |
  project ClientTimestampUtc, MacAddressHash, UserId, SessionId,
  ExeName\\r\\n                        ) on MacAddressHash, UserId\\r\\n    |
  where SessionId != SessionId1\\r\\n    | extend diff = (ClientTimestampUtc1 -
  ClientTimestampUtc) / 1m\\r\\n    | where diff < 20 and diff > 0\\r\\n    |
  summarize by ExeVersion, IsInternal, MacAddressHash,
  ExeName;\\r\\n}\",\"inputParameters\":[{\"name\":\"timeAgo\",\"cslType\":\"ti\
  mespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\"name\":\"exeMinV\
  ersion\",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"\
  },{\"name\":\"channelId\",\"cslType\":\"string\",\"type\":\"System.String\",\
  \"docstring\":\"\"}]},{\"name\":\"VS_IDEInfiniteUpdateDetectCount\",\"docstri\
  ng\":\"Function for returning infinite update detection
  count.\",\"body\":\"{\\r\\n    VS_IDEInfiniteUpdateDetectDetail(timeAgo,
  exeMinVersion, channelId)\\r\\n    | summarize Result =
  count();\\r\\n}\",\"inputParameters\":[{\"name\":\"timeAgo\",\"cslType\":\"ti\
  mespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\"name\":\"exeMinV\
  ersion\",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"\
  },{\"name\":\"channelId\",\"cslType\":\"string\",\"type\":\"System.String\",\
  \"docstring\":\"\"}]},{\"name\":\"VSSetup_Dashboard_Features_VSConfigInfoBar\
  \",\"docstring\":\"Returns a view into the users seeing the .vsconfig info
  bar\",\"body\":\"{\\r\\n    cluster(\\\"DDtelvsraw\\\").database(\\\"VS\\\").\
  RawEventsVS\\r\\n    | where ExeVersion startswith majorVersion \\r\\n    |
  where EventName ==
  \\\"vs/setup/inproductacquisition/missingcomponentsinfobar/show-infobar\\\"\\r\
  \\n    |
  project\\r\\n        MacAddressHash,\\r\\n        UserId,\\r\\n        Advanc\
  edServerTimestampUtc,\\r\\n        ExeVersion,\\r\\n        UserAction =
  tostring(Properties[\\\"vs.setup.inproductacquisition.infobar.actionexecuted\\\
  \"]),\\r\\n        EventType =
  tostring(Properties[\\\"reserved.datamodel.action.type\\\"])\\r\\n    | where
  EventType == \\\"End\\\"\\r\\n    | extend UserAction =
  iff(isempty(UserAction), \\\"None\\\", UserAction)\\r\\n    | join kind =
  inner
  (\\r\\n        cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\")\
  .VS_Telemetry_Releases\\r\\n        | where ReleaseScope contains
  \\\"Public\\\"\\r\\n        | where VsVersion startswith
  majorVersion\\r\\n        | where ProductDisplayVersion !contains
  \\\"Preview\\\"\\r\\n        | where ProductDisplayVersion !contains
  \\\"RC\\\"\\r\\n        | project VsVersion, ProductDisplayVersion\\r\\n    )
  on $left.ExeVersion ==
  $right.VsVersion\\r\\n}\",\"inputParameters\":[{\"name\":\"majorVersion\",\"c\
  slType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"}]},{\"name\
  \":\"VSSetup_Dashboard_Features_VSConfigLoad\",\"docstring\":\"Returns a view
  into the users detecting if a .vsconfig is next to the
  solution\",\"body\":\"{\\r\\n    cluster(\\\"Ddtelvsraw\\\").database(\\\"VS\\\
  \").RawEventsVS\\r\\n    | where ExeVersion startswith majorVersion\\r\\n    |
  where EventName ==
  \\\"vs/setup/inproductacquisition/missingcomponenttracker/refresh-missingcomp\
  onents\\\"\\r\\n    |
  project\\r\\n        MacAddressHash,\\r\\n        UserId,\\r\\n        ExeVer\
  sion,\\r\\n        IsEnabled =
  Properties[\\\"vs.setup.inproductacquisition.missingcomponentstracker.ismissi\
  ngcomponentsenabled\\\"],\\r\\n        IsSlnOpen =
  Properties[\\\"vs.setup.inproductacquisition.missingcomponentstracker.issolut\
  ionopen\\\"],\\r\\n        HasVsConfig =
  Properties[\\\"vs.setup.inproductacquisition.missingcomponentstracker.solutio\
  nhasvsconfig\\\"],\\r\\n        HasMissingApplicableComps =
  Properties[\\\"vs.setup.inproductacquisition.missingcomponentstracker.hasmiss\
  ingapplicablecomponents\\\"],\\r\\n        HasMissingNonApplicableComps =
  Properties[\\\"vs.setup.inproductacquisition.missingcomponentstracker.hasmiss\
  ingnonapplicablecomponents\\\"],\\r\\n        HasUnkownComps =
  Properties[\\\"vs.setup.inproductacquisition.missingcomponentstracker.hasmiss\
  ingunknowncomponents\\\"]\\r\\n    | where IsEnabled =~ \\\"True\\\" and
  IsSlnOpen =~ \\\"True\\\" and HasVsConfig =~ \\\"True\\\"\\r\\n    | join kind
  = inner
  (\\r\\n        cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\")\
  .VS_Telemetry_Releases\\r\\n        | where ReleaseScope contains
  \\\"Public\\\"\\r\\n        | where VsVersion startswith majorVersion
  \\r\\n        | where ProductDisplayVersion !contains
  \\\"Preview\\\"\\r\\n        | where ProductDisplayVersion !contains
  \\\"RC\\\"\\r\\n        | project VsVersion, ProductDisplayVersion\\r\\n    )
  on $left.ExeVersion ==
  $right.VsVersion\\r\\n}\",\"inputParameters\":[{\"name\":\"majorVersion\",\"c\
  slType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"}]},{\"name\
  \":\"KoTest\",\"docstring\":\"Sample Kusto Orchestrator
  function\",\"body\":\"{ print RunTime = now(), StartTimeParamValue =
  startTime, EndTimeParamValue = endTime, 'test test
  test'}\",\"inputParameters\":[{\"name\":\"startTime\",\"cslType\":\"datetime\
  \",\"type\":\"System.DateTime\",\"docstring\":\"\"},{\"name\":\"endTime\",\"c\
  slType\":\"datetime\",\"type\":\"System.DateTime\",\"docstring\":\"\"}]},{\"n\
  ame\":\"FreshnessByShard\",\"docstring\":\"Get the \\\"Overall Latency\\\" KPI
  metric per
  shard\",\"body\":\"{\\r\\ncluster('Ddtelvsraw').database('VS').RawEventsVS\\r\
  \\n| where ingestion_time() > ago(36h)\\r\\n| extend shard=
  tostring(split(NovaProperties['Partition'], '-', 0)[0])\\r\\n| summarize
  (max(ingestion_time())-max(AdvancedServerTimestampUtc))/60/60 by
  bin(ingestion_time()-7h, 15m),
  shard\\r\\n}\",\"inputParameters\":[]},{\"name\":\"DailyCompletenessByDay7Day\
  VS\",\"docstring\":\"Get 7d \\\"Overall Completeness\\\" KPI
  metric\",\"body\":\"{\\r\\nlet partitionQuery = (_start:datetime,
  _product:string)\\r\\n{\\r\\nlet start=_start;\\r\\nlet end=start + 1d;
  \\r\\nlet NMSTABLE = (start:datetime, _product:string)
  {cluster('Novametrics').database('NovaMetricsProd').NovaMetricsBlob};
  \\r\\nlet nms_fr_input = NMSTABLE (start, _product)\\r\\n| where Pipe ==
  'Vortex' and JobType == 'Regular' and Component == 'InputBlob/NMSBeat' and
  Product == _product \\r\\n| summarize maxTime=max(ServerUtcDate) | project
  nms_fr_input=(now()-maxTime)/1m, dummy='dummy';\\r\\nlet a=NMSTABLE (start,
  _product)\\r\\n| where BlobCreatedTime>_start-10m and
  BlobCreatedTime<_start+1d | where Component == 'KustoData/NMSBeat' | order by
  BlobCreatedTime \\r\\n| serialize | extend id = row_number(); \\r\\nlet b
  =NMSTABLE(start, _product) | where BlobCreatedTime>_start-10m and
  BlobCreatedTime<_start+1d \\r\\n| where Component == 'KustoData/NMSBeat' |
  order by BlobCreatedTime | serialize | extend id = row_number() -1; \\r\\nlet
  nms_fr_kusto = a \\r\\n| join ( b ) on id | extend diff =
  datetime_diff('Second', BlobCreatedTime, BlobCreatedTime1)/60.0 | summarize
  max(diff) \\r\\n| project dummy='dummy', nms_fr_kusto = iff(isnull(max_diff),
  toreal(6), max_diff); NMSTABLE (start, _product)\\r\\n| where ServerUtcDate >=
  _start and ServerUtcDate <=_start+1d and Pipe == 'Vortex' and JobType ==
  'Regular' and Component == 'InputBlob' and Product == _product \\r\\n|
  summarize App = any(App) by BlobId | join kind = leftouter ( NMSTABLE (start,
  _product)\\r\\n| where ServerUtcDate >= _start-2h and Pipe == 'Vortex' and
  JobType == 'Regular' and Component == 'KustoData' and Product == _product
  \\r\\n| summarize App = any(App) by BlobId ) on BlobId \\r\\n| summarize
  InputBlobCount = count(BlobId), KustoBlobCount = countif(isnotempty(BlobId1)
  and isnotnull(BlobId1)) by Shard = App \\r\\n| summarize pct =
  min(iff(InputBlobCount == 0, toreal(100), toreal(KustoBlobCount) * 100.0 /
  toreal(InputBlobCount))) \\r\\n| extend dummy='dummy' | join kind= rightouter
  ( nms_fr_input ) on dummy | join kind= rightouter ( nms_fr_kusto ) on dummy
  \\r\\n| project CompletenessPercent = iff(nms_fr_input>20 or nms_fr_kusto>=6,
  'NaN', tostring(pct)), _start // if either nms value is unfresh, report
  unknown (nan). otherwise, report healthy (100) if no input blobs. otherwise,
  calculate the actual value.\\\",\\r\\n};\\r\\nunion hint.spread=100\\r\\n
  (partitionQuery(ago(6d), 'VisualStudio')),\\r\\n (partitionQuery(ago(5d),
  'VisualStudio')),\\r\\n (partitionQuery(ago(4d), 'VisualStudio')),\\r\\n
  (partitionQuery(ago(3d), 'VisualStudio')),\\r\\n (partitionQuery(ago(2d),
  'VisualStudio')),\\r\\n (partitionQuery(ago(1d),
  'VisualStudio'))\\r\\n}\",\"inputParameters\":[]},{\"name\":\"DailyCompletene\
  ssByDay7DayVSMetric\",\"docstring\":\"Get 7d \\\"Overall Completeness\\\" KPI
  metric\",\"body\":\"{\\r\\n    DailyCompletenessByDay7Day('VisualStudio')   \
  \\r\\n    | where todouble(CompletenessPercent) < 99\\r\\n    | extend
  today=startofday( now())\\r\\n    | where today != _start//current day will
  always be in progress and tracked in other
  metrics\\r\\n}\",\"inputParameters\":[]},{\"name\":\"GetDupePercent\",\"body\
  \":\"{\\n    RawEventsVS\\r\\n    | where AdvancedServerTimestampUtc >=
  datetime(2020-06-24 18:00:00.0000000) and AdvancedServerTimestampUtc <=
  datetime(2020-06-24 19:00:00.0000000)\\r\\n    | summarize count(),
  dcount(EventId)\\r\\n    | project NonDupePercent = dcount_EventId *
  100.0/count_\\r\\n}\",\"inputParameters\":[{\"name\":\"start\",\"cslType\":\"\
  datetime\",\"type\":\"System.DateTime\",\"docstring\":\"\"},{\"name\":\"end\",\
  \"cslType\":\"datetime\",\"type\":\"System.DateTime\",\"docstring\":\"\"}]},{\
  \"name\":\"KO_SRDY_RealTimeSetup\",\"docstring\":\"Realtime Setup Query
  Table\",\"body\":\"{\\r\\ncluster(\\\"Ddtelvsraw\\\").database('VS').RawEvent\
  sVS\\r\\n| where AdvancedServerTimestampUtc >= startTime and
  AdvancedServerTimestampUtc < endTime\\r\\n| where EventName ==
  'vs/willow/install-product'\\r\\n| extend UseMinnowWorkarounds = ExeName =~
  'setup' and parse_version(ExeVersion) < parse_version('2.8.1000.0')\\r\\n|
  extend ChannelId = tostring(Properties['vs.willow.channelid'])\\r\\n| extend
  ChannelId = iff(UseMinnowWorkarounds and isempty(ChannelId),
  tostring(Properties['context.default.vs.willow.channelid']), ChannelId)\\r\\n|
  extend InstallSessionId =
  tostring(Properties['vs.willow.installsessionid'])\\r\\n| extend
  InstallSessionId = iff(UseMinnowWorkarounds,
  tostring(Properties['context.default.vs.willow.activityid']),
  InstallSessionId)\\r\\n| extend DataModelActionTypeReserved =
  tostring(Properties['reserved.datamodel.action.type'])\\r\\n| extend
  OperationName = tostring(Properties['vs.willow.operationname'])\\r\\n| extend
  UpdateTo = tostring(Properties['vs.willow.appversionupdateto'])\\r\\n| extend
  UpdateFrom = tostring(Properties['vs.willow.appversionupdatefrom'])\\r\\n|
  extend VsVersion = iif(OperationName == 'update' and isnotempty(UpdateTo),
  UpdateTo, tostring(Properties['vs.willow.appversion']))\\r\\n| extend
  RebootType = tostring(Properties['vs.willow.reboottype'])\\r\\n| extend
  FailedWorkloads =
  tostring(Properties['vs.willow.failedworkloadids'])\\r\\n                            \
  | extend FailedWorkloads =
  iff(\\r\\n                                UseMinnowWorkarounds,\\r\\n                                \
  strcat(\\r\\n                                    tostring(Properties['vs.will\
  ow.failedcomponentids.0']),\\r\\n                                    tostring\
  (Properties['vs.willow.failedcomponentids.1']),\\r\\n                                    \
  tostring(Properties['vs.willow.failedcomponentids.2']),\\r\\n                                    \
  tostring(Properties['vs.willow.failedcomponentids.3']),\\r\\n                                    \
  tostring(Properties['vs.willow.failedcomponentids.4']),\\r\\n                                    \
  tostring(Properties['vs.willow.failedcomponentids.5']),\\r\\n                                    \
  tostring(Properties['vs.willow.failedcomponentids.6']),\\r\\n                                    \
  tostring(Properties['vs.willow.failedcomponentids.7']),\\r\\n                                    \
  tostring(Properties['vs.willow.failedcomponentids.8']),\\r\\n                                    \
  tostring(Properties['vs.willow.failedcomponentids.9'])),\\r\\n                                \
  FailedWorkloads)\\r\\n| extend VsInstallState =
  tostring(Properties['vs.willow.installstate'])\\r\\n                            \
  | extend InstanceState = VsInstallState\\r\\n                            |
  extend VsInstallState = iff(UseMinnowWorkarounds and InstanceState
  =~'Complete', 'Installed', InstanceState)\\r\\n                            |
  extend VsInstallState = iff(UseMinnowWorkarounds and InstanceState ==
  VsInstallState and (InstanceState contains 'Registered' and InstanceState
  contains 'Local' and InstanceState contains 'NoReboot'), 'Installed',
  VsInstallState)\\r\\n                            | extend VsInstallState =
  iff(UseMinnowWorkarounds and InstanceState == VsInstallState, 'Partial',
  VsInstallState)\\r\\n| extend DataModelExceptionTypeReserved =
  tostring(Properties['vs.willow.errorcode'])\\r\\n| extend ErrorMessage =
  tostring(Properties['vs.willow.errormessage'])\\r\\n                                \
  | extend ErrorMessage = iff(UseMinnowWorkarounds,
  tostring(Properties['reserved.datamodel.action.resultsummary']),
  ErrorMessage)\\r\\n| extend FailedPackageIds =
  iif(isempty(Properties['vs.willow.failedpackageids']),
  tostring(Properties['vs.willow.failedpackageidsv2']),
  tostring(Properties['vs.willow.failedpackageids']))\\r\\n                            \
  // Workaround: convert failedPackageDetails to
  failedPackageIds\\r\\n                            | extend FailedPackageIds =
  iff(UseMinnowWorkarounds,
  extract_all(\\r\\n                                '([^_]+)_[^_]+_[^_,]+,?',\\r\
  \\n                                strcat(\\r\\n                                    \
  Properties['vs.willow.failedpackagedetails.0'],\\r\\n                                    \
  Properties['vs.willow.failedpackagedetails.1'],\\r\\n                                    \
  Properties['vs.willow.failedpackagedetails.2'],\\r\\n                                    \
  Properties['vs.willow.failedpackagedetails.3'],\\r\\n                                    \
  Properties['vs.willow.failedpackagedetails.4'],\\r\\n                                    \
  Properties['vs.willow.failedpackagedetails.5'],\\r\\n                                    \
  Properties['vs.willow.failedpackagedetails.6'],\\r\\n                                    \
  Properties['vs.willow.failedpackagedetails.7'],\\r\\n                                    \
  Properties['vs.willow.failedpackagedetails.8'],\\r\\n                                    \
  Properties['vs.willow.failedpackagedetails.9'])),\\r\\n                                \
  FailedPackageIds)\\r\\n                            | extend FailedPackageIds =
  iff(UseMinnowWorkarounds, strcat_array(todynamic(FailedPackageIds), ','),
  FailedPackageIds)\\r\\n| extend DataModelActionResultReserved =
  iff(tostring(Properties['vs.willow.operationresult']) == 'Warning' and
  tostring(Properties['reserved.datamodel.action.result']) == 'Success',
  tostring(Properties['vs.willow.operationresult']),
  tostring(Properties['reserved.datamodel.action.result']))\\r\\n| extend Result
  = Properties['vs.willow.operationresult']\\r\\n| extend Result = iff(Result !=
  'RebootRequired', Result,
  iif(isnotempty(Properties['vs.willow.errormessage']), 'Warning',
  'Success'))\\r\\n| extend Result = iff(OperationName == 'uninstall',
  Properties['reserved.datamodel.action.result'], Result)\\r\\n| extend Result =
  iff(Result == 'UserCancel' or OperationName == 'UserCancel', 'Cancel',
  Result)\\r\\n| extend Result = iif(Result == 'Unknown' and
  isnotempty(Properties['vs.willow.errormessage']), 'Failure', Result)\\r\\n|
  extend Result = iff(UseMinnowWorkarounds and ErrorMessage startswith
  'Pre-check', 'Block', Result)\\r\\n                            | extend Result
  = iff(UseMinnowWorkarounds and ErrorMessage contains 'cancel', 'Cancel',
  Result)\\r\\n                            | extend Result =
  iff(UseMinnowWorkarounds and ErrorMessage contains 'Pipe Connection timed
  out', 'Block', Result)\\r\\n                            | extend Result =
  iff(UseMinnowWorkarounds and ErrorMessage has 'PackageFailureException',
  iff(VsInstallState =~'Partial', 'Failure', 'Warning'), Result)\\r\\n| extend
  ElapsedTimeMins =
  todouble(Measures['reserved.datamodel.action.durationinmilliseconds' ]) / 1000
  / 60\\r\\n| extend RebootType =
  tostring(Properties['vs.willow.reboottype'])\\r\\n| project
  DataModelActionTypeReserved, ServerDateUTC = bin(AdvancedServerTimestampUtc,
  1d), Date = bin(AdvancedServerTimestampUtc, 1d), InstallId = InstallSessionId,
  OperationName, \\r\\n   ExeVersion, UpdateTo, UpdateFrom, ChannelId,
  VsVersion, MacAddressHash, RebootType, DataModelActionResultReserved,
  ElapsedTimeMins, Result,\\r\\n   DataModelExceptionTypeReserved,
  VsInstallState, FailedWorkloads, FailedPackageIds, ErrorMessage,
  AdvancedServerTimestampUtc, IsInternal, UserAlias, BatchStartTime = startTime,
  BatchEndTime =
  endTime;\\r\\n}\",\"inputParameters\":[{\"name\":\"startTime\",\"cslType\":\"\
  datetime\",\"type\":\"System.DateTime\",\"docstring\":\"\"},{\"name\":\"endTi\
  me\",\"cslType\":\"datetime\",\"type\":\"System.DateTime\",\"docstring\":\"\"\
  }]},{\"name\":\"KO_SRDY_RealTimeSetupInternal\",\"docstring\":\"Realtime Setup
  Query Internal
  Table\",\"body\":\"{\\r\\ncluster(\\\"Ddtelvsraw\\\").database('VS').RawEvent\
  sVSInternal\\r\\n| where AdvancedServerTimestampUtc >= startTime and
  AdvancedServerTimestampUtc < endTime\\r\\n| where EventName ==
  'vs/willow/install-product'\\r\\n| extend UseMinnowWorkarounds = ExeName =~
  'setup' and parse_version(ExeVersion) < parse_version('2.8.1000.0')\\r\\n|
  extend ChannelId = tostring(Properties['vs.willow.channelid'])\\r\\n| extend
  ChannelId = iff(UseMinnowWorkarounds and isempty(ChannelId),
  tostring(Properties['context.default.vs.willow.channelid']), ChannelId)\\r\\n|
  extend InstallSessionId =
  tostring(Properties['vs.willow.installsessionid'])\\r\\n| extend
  InstallSessionId = iff(UseMinnowWorkarounds,
  tostring(Properties['context.default.vs.willow.activityid']),
  InstallSessionId)\\r\\n| extend DataModelActionTypeReserved =
  tostring(Properties['reserved.datamodel.action.type'])\\r\\n| extend
  OperationName = tostring(Properties['vs.willow.operationname'])\\r\\n| extend
  UpdateTo = tostring(Properties['vs.willow.appversionupdateto'])\\r\\n| extend
  UpdateFrom = tostring(Properties['vs.willow.appversionupdatefrom'])\\r\\n|
  extend VsVersion = iif(OperationName == 'update' and isnotempty(UpdateTo),
  UpdateTo, tostring(Properties['vs.willow.appversion']))\\r\\n| extend
  RebootType = tostring(Properties['vs.willow.reboottype'])\\r\\n| extend
  FailedWorkloads =
  tostring(Properties['vs.willow.failedworkloadids'])\\r\\n                            \
  | extend FailedWorkloads =
  iff(\\r\\n                                UseMinnowWorkarounds,\\r\\n                                \
  strcat(\\r\\n                                    tostring(Properties['vs.will\
  ow.failedcomponentids.0']),\\r\\n                                    tostring\
  (Properties['vs.willow.failedcomponentids.1']),\\r\\n                                    \
  tostring(Properties['vs.willow.failedcomponentids.2']),\\r\\n                                    \
  tostring(Properties['vs.willow.failedcomponentids.3']),\\r\\n                                    \
  tostring(Properties['vs.willow.failedcomponentids.4']),\\r\\n                                    \
  tostring(Properties['vs.willow.failedcomponentids.5']),\\r\\n                                    \
  tostring(Properties['vs.willow.failedcomponentids.6']),\\r\\n                                    \
  tostring(Properties['vs.willow.failedcomponentids.7']),\\r\\n                                    \
  tostring(Properties['vs.willow.failedcomponentids.8']),\\r\\n                                    \
  tostring(Properties['vs.willow.failedcomponentids.9'])),\\r\\n                                \
  FailedWorkloads)\\r\\n| extend VsInstallState =
  tostring(Properties['vs.willow.installstate'])\\r\\n                            \
  | extend InstanceState = VsInstallState\\r\\n                            |
  extend VsInstallState = iff(UseMinnowWorkarounds and InstanceState
  =~'Complete', 'Installed', InstanceState)\\r\\n                            |
  extend VsInstallState = iff(UseMinnowWorkarounds and InstanceState ==
  VsInstallState and (InstanceState contains 'Registered' and InstanceState
  contains 'Local' and InstanceState contains 'NoReboot'), 'Installed',
  VsInstallState)\\r\\n                            | extend VsInstallState =
  iff(UseMinnowWorkarounds and InstanceState == VsInstallState, 'Partial',
  VsInstallState)\\r\\n| extend DataModelExceptionTypeReserved =
  tostring(Properties['vs.willow.errorcode'])\\r\\n| extend ErrorMessage =
  tostring(Properties['vs.willow.errormessage'])\\r\\n                                \
  | extend ErrorMessage = iff(UseMinnowWorkarounds,
  tostring(Properties['reserved.datamodel.action.resultsummary']),
  ErrorMessage)\\r\\n| extend FailedPackageIds =
  iif(isempty(Properties['vs.willow.failedpackageids']),
  tostring(Properties['vs.willow.failedpackageidsv2']),
  tostring(Properties['vs.willow.failedpackageids']))\\r\\n                            \
  // Workaround: convert failedPackageDetails to
  failedPackageIds\\r\\n                            | extend FailedPackageIds =
  iff(UseMinnowWorkarounds,
  extract_all(\\r\\n                                '([^_]+)_[^_]+_[^_,]+,?',\\r\
  \\n                                strcat(\\r\\n                                    \
  Properties['vs.willow.failedpackagedetails.0'],\\r\\n                                    \
  Properties['vs.willow.failedpackagedetails.1'],\\r\\n                                    \
  Properties['vs.willow.failedpackagedetails.2'],\\r\\n                                    \
  Properties['vs.willow.failedpackagedetails.3'],\\r\\n                                    \
  Properties['vs.willow.failedpackagedetails.4'],\\r\\n                                    \
  Properties['vs.willow.failedpackagedetails.5'],\\r\\n                                    \
  Properties['vs.willow.failedpackagedetails.6'],\\r\\n                                    \
  Properties['vs.willow.failedpackagedetails.7'],\\r\\n                                    \
  Properties['vs.willow.failedpackagedetails.8'],\\r\\n                                    \
  Properties['vs.willow.failedpackagedetails.9'])),\\r\\n                                \
  FailedPackageIds)\\r\\n                            | extend FailedPackageIds =
  iff(UseMinnowWorkarounds, strcat_array(todynamic(FailedPackageIds), ','),
  FailedPackageIds)\\r\\n| extend DataModelActionResultReserved =
  iff(tostring(Properties['vs.willow.operationresult']) == 'Warning' and
  tostring(Properties['reserved.datamodel.action.result']) == 'Success',
  tostring(Properties['vs.willow.operationresult']),
  tostring(Properties['reserved.datamodel.action.result']))\\r\\n| extend Result
  = Properties['vs.willow.operationresult']\\r\\n| extend Result = iff(Result !=
  'RebootRequired', Result,
  iif(isnotempty(Properties['vs.willow.errormessage']), 'Warning',
  'Success'))\\r\\n| extend Result = iff(OperationName == 'uninstall',
  Properties['reserved.datamodel.action.result'], Result)\\r\\n| extend Result =
  iff(Result == 'UserCancel' or OperationName == 'UserCancel', 'Cancel',
  Result)\\r\\n| extend Result = iif(Result == 'Unknown' and
  isnotempty(Properties['vs.willow.errormessage']), 'Failure', Result)\\r\\n|
  extend Result = iff(UseMinnowWorkarounds and ErrorMessage startswith
  'Pre-check', 'Block', Result)\\r\\n                            | extend Result
  = iff(UseMinnowWorkarounds and ErrorMessage contains 'cancel', 'Cancel',
  Result)\\r\\n                            | extend Result =
  iff(UseMinnowWorkarounds and ErrorMessage contains 'Pipe Connection timed
  out', 'Block', Result)\\r\\n                            | extend Result =
  iff(UseMinnowWorkarounds and ErrorMessage has 'PackageFailureException',
  iff(VsInstallState =~'Partial', 'Failure', 'Warning'), Result)\\r\\n| extend
  ElapsedTimeMins =
  todouble(Measures['reserved.datamodel.action.durationinmilliseconds' ]) / 1000
  / 60\\r\\n| extend RebootType =
  tostring(Properties['vs.willow.reboottype'])\\r\\n| project
  DataModelActionTypeReserved, ServerDateUTC = bin(AdvancedServerTimestampUtc,
  1d), Date = bin(AdvancedServerTimestampUtc, 1d), InstallId = InstallSessionId,
  OperationName, \\r\\n   ExeVersion, UpdateTo, UpdateFrom, ChannelId,
  VsVersion, MacAddressHash, RebootType, DataModelActionResultReserved,
  ElapsedTimeMins, Result,\\r\\n   DataModelExceptionTypeReserved,
  VsInstallState, FailedWorkloads, FailedPackageIds, ErrorMessage,
  AdvancedServerTimestampUtc, IsInternal, UserAlias, BatchStartTime = startTime,
  BatchEndTime =
  endTime;\\r\\n}\",\"inputParameters\":[{\"name\":\"startTime\",\"cslType\":\"\
  datetime\",\"type\":\"System.DateTime\",\"docstring\":\"\"},{\"name\":\"endTi\
  me\",\"cslType\":\"datetime\",\"type\":\"System.DateTime\",\"docstring\":\"\"\
  }]},{\"name\":\"Willow_VersionToMinnow\",\"docstring\":\"Converts a Willow
  version to a Minnow
  version\",\"body\":\"{\\r\\n    cluster('Ddtelvsraw').database('VS').RawEvent\
  sVS\\r\\n    | where EventName == \\\"vs/willow/apprun\\\"\\r\\n    | where
  ExeName == \\\"setup\\\"\\r\\n    | project ExeVersion, WillowVersion =
  tostring(Properties[\\\"context.default.vs.willow.installerversion\\\"])\\r\\\
  n    | where WillowVersion == version\\r\\n    | take 1\\r\\n    | project
  ExeVersion;\\r\\n}\",\"inputParameters\":[{\"name\":\"version\",\"cslType\":\
  \"string\",\"type\":\"System.String\",\"docstring\":\"\"}]},{\"name\":\"Willo\
  w_Minnow_VersionPairs\",\"docstring\":\"Gets a table of all Minnow/Willow
  version
  pairs\",\"body\":\"{\\r\\n    cluster('Ddtelvsraw').database('VS').RawEventsVS\
  \\r\\n    | where EventName == \\\"vs/willow/apprun\\\"\\r\\n    | where
  ExeName == \\\"setup\\\"\\r\\n//     | where UserAlias !in (\\\"tydunkel\\\",
  \\\"menwang\\\", \\\"sknam\\\", \\\"dalimapa\\\", \\\"rpreece\\\")\\r\\n    |
  where Properties !has \\\"context.default.vs.setupengine.debug\\\"\\r\\n    |
  project MinnowVersion = ExeVersion, WillowVersion =
  tostring(Properties[\\\"context.default.vs.willow.installerversion\\\"])\\r\\\
  n    | where split(MinnowVersion, \\\".\\\")[0] == split(WillowVersion,
  \\\".\\\")[0] and split(MinnowVersion, \\\".\\\")[1] == split(WillowVersion,
  \\\".\\\")[1]\\r\\n    | summarize count() by MinnowVersion,
  WillowVersion\\r\\n    | summarize arg_max(count_, MinnowVersion) by
  WillowVersion\\r\\n    | project MinnowVersion,
  WillowVersion;\\r\\n}\",\"inputParameters\":[]},{\"name\":\"Minnow_Crashes\",\
  \"docstring\":\"Returns crash events with common
  properties\",\"body\":\"{\\r\\n    let minUploadTime = now() -
  timeperiod;\\r\\n    cluster(\\\"Ddtelvsraw\\\").database(\\\"VS\\\").RawEven\
  tsVS\\r\\n    | where EventName in (\\\"vs/setupengine/unhandledexception\\\",
  \\\"vs/setupengine/apprun-error\\\")\\r\\n    | where
  AdvancedServerTimestampUtc >= minUploadTime\\r\\n    | where ExeName ==
  \\\"setup\\\"\\r\\n    | where
  Properties[\\\"context.default.vs.willow.source\\\"] =~ \\\"WPF\\\"\\r\\n    |
  project\\r\\n        SessionId,\\r\\n        MacAddressHash,\\r\\n        Exe\
  Version,\\r\\n        WillowVersion =
  tostring(Properties[\\\"context.default.vs.willow.installerversion\\\"]),\\r\
  \\n        OsVersion,\\r\\n        Message =
  tostring(Properties[\\\"reserved.datamodel.fault.exception.message\\\"]),\\r\
  \\n        Stack =
  tostring(Properties[\\\"reserved.datamodel.fault.exception.stacktrace\\\"]),\
  \\r\\n        Param1 =
  tostring(Properties[\\\"datamodel.fault.bucketparam1\\\"]),\\r\\n        Para\
  m2 =
  tostring(Properties[\\\"datamodel.fault.bucketparam2\\\"]),\\r\\n        Para\
  m3 =
  tostring(Properties[\\\"datamodel.fault.bucketparam3\\\"]),\\r\\n        Para\
  m4 =
  tostring(Properties[\\\"datamodel.fault.bucketparam4\\\"]),\\r\\n        Para\
  m5 =
  tostring(Properties[\\\"datamodel.fault.bucketparam5\\\"]),\\r\\n        Para\
  m6 =
  tostring(Properties[\\\"datamodel.fault.bucketparam6\\\"])\\r\\n}\",\"inputPa\
  rameters\":[{\"name\":\"timeperiod\",\"cslType\":\"timespan\",\"type\":\"Syst\
  em.TimeSpan\",\"docstring\":\"\"}]},{\"name\":\"Minnow_CrashesByStack\",\"doc\
  string\":\"Returns the number of crash events by os/exe versions during the
  timespan, bucketed by
  stack\",\"body\":\"{\\r\\n    Minnow_Crashes(timeperiod)\\r\\n    | summarize
  SessionCount = dcount(SessionId), MachineCount = dcount(MacAddressHash) by
  Message, Stack, ExeVersion, WillowVersion,
  OsVersion\\r\\n}\",\"inputParameters\":[{\"name\":\"timeperiod\",\"cslType\":\
  \"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"}]},{\"name\":\"M\
  innow_SessionCountByExeVersion\",\"docstring\":\"Returns the number of session
  starts by exe version during the timespan\",\"body\":\"{\\r\\n    let
  minUploadTime = now() -
  timePeriod;\\r\\n    cluster('Ddtelvsraw').database('VS').RawEventsVS\\r\\n    \
  | where EventName == \\\"vs/willow/apprun\\\" and
  tostring(Properties[\\\"reserved.datamodel.action.type\\\"]) ==
  \\\"Start\\\"\\r\\n    | where AdvancedServerTimestampUtc  >=
  minUploadTime\\r\\n    | extend WillowVersion =
  tostring(Properties[\\\"context.default.vs.willow.installerversion\\\"])\\r\\\
  n    | summarize NumberOfSessions = dcount(SessionId), NumberOfMachines =
  dcount(MacAddressHash) by ExeVersion,
  WillowVersion\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslType\
  \":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"}]},{\"name\":\
  \"Minnow_CrashesByStackGoalDetails\",\"docstring\":\"Returns the details of
  the VSTelHealth crashes by stack
  goal\",\"body\":\"{\\r\\n    Willow_NthLatestVersion(n, releaseScope,
  channelId, true)\\r\\n    | join kind = leftouter
  (\\r\\n        Minnow_CrashesByStack(timePeriod)\\r\\n        | where Message
  !has \\\"There is not enough space on the disk.\\\"\\r\\n        | summarize
  SessionCount = sum(SessionCount), MachineCount = sum(MachineCount) by Stack,
  ExeVersion\\r\\n        | join kind=leftouter
  Minnow_SessionCountByExeVersion(timePeriod) on ExeVersion\\r\\n        | where
  NumberOfMachines >= minMachines\\r\\n        | extend SessionPercent =
  round(SessionCount * 100.00 / NumberOfSessions, 2), MachinePercent =
  round(MachineCount * 100.00 / NumberOfMachines, 2)\\r\\n        | extend
  IsOverThreshold = (SessionPercent >= maxSessionPercent or MachinePercent >=
  maxMachinePercent)\\r\\n    ) on ExeVersion\\r\\n    | project
  IsOverThreshold, Stack, ExeVersion = ExeVersion1, SessionCount, MachineCount,
  NumberOfSessions, NumberOfMachines, SessionPercent,
  MachinePercent\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslTy\
  pe\":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\"name\":\
  \"minMachines\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\
  \"},{\"name\":\"maxSessionPercent\",\"cslType\":\"real\",\"type\":\"System.Do\
  uble\",\"docstring\":\"\"},{\"name\":\"maxMachinePercent\",\"cslType\":\"real\
  \",\"type\":\"System.Double\",\"docstring\":\"\"},{\"name\":\"n\",\"cslType\":\
  \"int\",\"type\":\"System.Int32\",\"docstring\":\"\"},{\"name\":\"releaseScope\
  \",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"n\
  ame\":\"channelId\",\"cslType\":\"string\",\"type\":\"System.String\",\"docst\
  ring\":\"\"}]},{\"name\":\"Minnow_CrashesByStackGoal\",\"docstring\":\"Returns
  the result of the VSTelHealth crashes by stack
  goal\",\"body\":\"{\\r\\n    Willow_CrashesByStackGoalDetails(timePeriod,
  minMachines, maxSessionPercent, maxMachinePercent, n, releaseScope,
  channelId)\\r\\n    | where IsOverThreshold == true\\r\\n    | summarize
  Result = count()\\r\\n    | project Result = max_of(0,
  Result)\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslType\":\"\
  timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\"name\":\"minMa\
  chines\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\"},{\
  \"name\":\"maxSessionPercent\",\"cslType\":\"real\",\"type\":\"System.Double\
  \",\"docstring\":\"\"},{\"name\":\"maxMachinePercent\",\"cslType\":\"real\",\
  \"type\":\"System.Double\",\"docstring\":\"\"},{\"name\":\"n\",\"cslType\":\"\
  int\",\"type\":\"System.Int32\",\"docstring\":\"\"},{\"name\":\"releaseScope\
  \",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"n\
  ame\":\"channelId\",\"cslType\":\"string\",\"type\":\"System.String\",\"docst\
  ring\":\"\"}]},{\"name\":\"Minnow_CrashGoalDiagQuery2\",\"docstring\":\"Retur\
  ns the results for the crash goal diagnostic query
  two\",\"body\":\"{\\r\\n    Willow_NthLatestVersionV2(n, releaseScope,
  channelId, true)\\r\\n    | join kind=inner ( RawEventsVS | where EventName ==
  'vs/setupengine/unhandledexception' and AdvancedServerTimestampUtc >= now() -
  timePeriod | extend WillowVersion =
  tostring(Properties[\\\"context.default.vs.willow.installerversion\\\"])) on
  $left.ExeVersion == $right.WillowVersion\\r\\n    | project CrashType =
  tostring(Properties['vs.willow.resultdetails']), Stack =
  tostring(Properties['vs.willow.stack']), SessionId, MacAddressHash,
  ExeVersion,
  WillowVersion\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslType\
  \":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\"name\":\"n\
  \",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\"},{\"name\
  \":\"releaseScope\",\"cslType\":\"string\",\"type\":\"System.String\",\"docst\
  ring\":\"\"},{\"name\":\"channelId\",\"cslType\":\"string\",\"type\":\"System\
  .String\",\"docstring\":\"\"}]},{\"name\":\"Minnow_CrashGoal\",\"docstring\":\
  \"Returns the result for the VSTelHealth crash goal
  metric\",\"body\":\"{\\r\\n    Minnow_CrashGoalDetails(timePeriod,
  minMachines, n, releaseScope, channelId)\\r\\n    | summarize Result =
  sum(CrashPercent)\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cs\
  lType\":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\"name\
  \":\"minMachines\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\
  \":\"\"},{\"name\":\"n\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docs\
  tring\":\"\"},{\"name\":\"releaseScope\",\"cslType\":\"string\",\"type\":\"Sy\
  stem.String\",\"docstring\":\"\"},{\"name\":\"channelId\",\"cslType\":\"string\
  \",\"type\":\"System.String\",\"docstring\":\"\"}]},{\"name\":\"Minnow_CrashG\
  oalDetails\",\"docstring\":\"Returns the details for the VSTelHealth crash
  goal
  metric\",\"body\":\"{\\r\\n    Minnow_CrashPercentagePerMachineByExeVersion(t\
  imePeriod, minMachines)\\r\\n    | join ( Willow_NthLatestVersionV2(n,
  releaseScope, channelId, true) ) on $left.WillowVersion ==
  $right.ExeVersion\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cs\
  lType\":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\"name\
  \":\"minMachines\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\
  \":\"\"},{\"name\":\"n\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docs\
  tring\":\"\"},{\"name\":\"releaseScope\",\"cslType\":\"string\",\"type\":\"Sy\
  stem.String\",\"docstring\":\"\"},{\"name\":\"channelId\",\"cslType\":\"string\
  \",\"type\":\"System.String\",\"docstring\":\"\"}]},{\"name\":\"Minnow_CrashP\
  ercentagePerMachineByExeVersion\",\"docstring\":\"Returns the percent of
  machines crashing by exe version\",\"body\":\"{\\r\\n    let
  CrashesByExeVersion = Minnow_CrashCount(timePeriod)\\r\\n    | summarize
  NumberOfCrashMachines = sum(NumberOfCrashMachines) by ExeVersion,
  WillowVersion;\\r\\n    Minnow_MachineCountByExeVersion(timePeriod)\\r\\n    |
  join kind = leftouter CrashesByExeVersion on ExeVersion,
  WillowVersion\\r\\n    | where NumberOfMachines >= minMachines\\r\\n    |
  extend NumberOfCrashMachines = max_of(0, NumberOfCrashMachines)\\r\\n    |
  extend CrashPercent = NumberOfCrashMachines * 100.0 /
  NumberOfMachines\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"csl\
  Type\":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\"name\
  \":\"minMachines\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\
  \":\"\"}]},{\"name\":\"Minnow_CrashCount\",\"docstring\":\"Returns the number
  of unhandled exception events by os/exe versions during the
  timespan\",\"body\":\"{\\r\\n    Minnow_Crashes(timePeriod)\\r\\n    |
  summarize NumberOfCrashSessions = dcount(SessionId), NumberOfCrashMachines =
  dcount(MacAddressHash) by ExeVersion, WillowVersion,
  OsVersion\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslType\":\
  \"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"}]},{\"name\":\"M\
  innow_MachineCountByExeVersion\",\"docstring\":\"Returns the number of
  machines per version \",\"body\":\"{\\r\\n    let minTime = now() -
  timePeriod;\\r\\n    cluster('Ddtelvsraw').database('VS').RawEventsVS\\r\\n    \
  | where EventName == \\\"vs/willow/apprun\\\" and
  tostring(Properties[\\\"reserved.datamodel.action.type\\\"]) ==
  \\\"Start\\\"\\r\\n    | where ExeName  == \\\"setup\\\"\\r\\n    | where
  AdvancedServerTimestampUtc > minTime\\r\\n    | extend WillowVersion =
  tostring(Properties[\\\"context.default.vs.willow.installerversion\\\"])\\r\\\
  n    | summarize NumberOfMachines = dcount(MacAddressHash) by ExeVersion,
  WillowVersion\\r\\n}\",\"inputParameters\":[{\"name\":\"timePeriod\",\"cslType\
  \":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"}]},{\"name\":\
  \"Willow_NthLatestVersionV2\",\"docstring\":\"Returns the n-th latest
  installer version from the channelId released with the given
  scope\",\"body\":\"{\\r\\n    cluster(\\\"Ddtelvsraw\\\").database(\\\"Lookup\
  Tables\\\").VS_Telemetry_Releases_Func()\\r\\n    | where ReleaseScope
  contains releaseScope and ChannelId =~ channelId\\r\\n    | extend IsRTW =
  ManifestVersion startswith \\\"15.0\\\"\\r\\n    | where IsRTW == false or
  IsRTW != excludeRTW\\r\\n    | extend WillowInstallerVersionParsed =
  parse_version(WillowInstallerVersion)\\r\\n    | summarize BuildDate =
  max(BuildDate) by WillowInstallerVersionParsed,
  WillowInstallerVersion\\r\\n    | top n by WillowInstallerVersionParsed desc
  nulls last\\r\\n    | top 1 by WillowInstallerVersionParsed asc nulls last
  \\r\\n    | project ExeVersion = tostring(WillowInstallerVersion)
  \\r\\n}\",\"inputParameters\":[{\"name\":\"n\",\"cslType\":\"int\",\"type\":\
  \"System.Int32\",\"docstring\":\"\"},{\"name\":\"releaseScope\",\"cslType\":\
  \"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\"channel\
  Id\",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\
  \"name\":\"excludeRTW\",\"cslType\":\"bool\",\"type\":\"System.SByte\",\"docs\
  tring\":\"\"}]},{\"name\":\"Minnow_NthLatestVersionV2\",\"docstring\":\"Retur\
  ns the n-th latest installer version from the channelId released with the
  given
  scope\",\"body\":\"{\\r\\n    cluster(\\\"Ddtelvsraw\\\").database(\\\"Lookup\
  Tables\\\").VS_Telemetry_Releases_Func()\\r\\n    | where ReleaseScope
  contains releaseScope and ChannelId =~ channelId\\r\\n    | extend IsRTW =
  ManifestVersion startswith \\\"15.0\\\"\\r\\n    | where IsRTW == false or
  IsRTW != excludeRTW\\r\\n    | extend WillowInstallerVersionParsed =
  parse_version(WillowInstallerVersion)\\r\\n    | summarize BuildDate =
  max(BuildDate) by WillowInstallerVersionParsed,
  WillowInstallerVersion\\r\\n    | top n by WillowInstallerVersionParsed desc
  nulls last\\r\\n    | top 1 by WillowInstallerVersionParsed asc nulls last
  \\r\\n    | project ExeVersion = tostring(WillowInstallerVersion)\\r\\n    |
  join kind = inner
  (\\r\\n        cluster(\\\"Ddtelvsraw\\\").database(\\\"VS\\\").RawEventsVS\\r\
  \\n        | where ExeName == \\\"setup\\\"\\r\\n        | where EventName ==
  \\\"vs/willow/apprun\\\"\\r\\n        | project MinnowVersion = ExeVersion,
  WillowVersion =
  tostring(Properties[\\\"context.default.vs.willow.installerversion\\\"])\\r\\\
  n        | summarize count() by MinnowVersion, WillowVersion\\r\\n    ) on
  $left.ExeVersion == $right.WillowVersion\\r\\n    | top 1 by count_ desc nulls
  last\\r\\n    | project WillowVersion,
  MinnowVersion\\r\\n}\",\"inputParameters\":[{\"name\":\"n\",\"cslType\":\"int\
  \",\"type\":\"System.Int32\",\"docstring\":\"\"},{\"name\":\"releaseScope\",\
  \"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\
  \":\"channelId\",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\
  \":\"\"},{\"name\":\"excludeRTW\",\"cslType\":\"bool\",\"type\":\"System.SByte\
  \",\"docstring\":\"\"}]},{\"name\":\"Minnow_PrismCrashes\",\"docstring\":\"Re\
  turns the number of crashes for the installer over the
  timeperiod\",\"body\":\"{\\r\\n    cluster('ddtelvsraw.kusto.windows.net').da\
  tabase('VS').RawEventsVS\\r\\n    | where EventName in
  (\\\"vs/setupengine/unhandledexception\\\",
  \\\"vs/setupengine/apprun-error\\\")\\r\\n    | where
  AdvancedServerTimestampUtc > ago(timePeriod)\\r\\n    | where ExeName ==
  \\\"setup\\\"\\r\\n    | project ExeVersion, EventName, Properties,
  MacAddressHash, Measures\\r\\n    | join kind=inner
  (cluster('ddtelvsraw.kusto.windows.net').database('VS').Willow_NthLatestVersi\
  onV2(n, releaseType, channelId, true)) on ExeVersion\\r\\n    | extend
  FailureId = strcat(replace(\\\"/\\\", \\\".\\\", EventName), \\\"_\\\",
  Properties[\\\"reserved.datamodel.fault.bucketparam4\\\"], \\\"_\\\",
  Properties[\\\"reserved.datamodel.fault.bucketparam5\\\"], \\\"_\\\",
  Properties[\\\"reserved.datamodel.fault.bucketparam6\\\"], \\\"_\\\",
  \\\"0x\\\",
  tohex(toint(Measures[\\\"reserved.datamodel.fault.exception.errorcode\\\"])))\
  \\r\\n    | summarize Hits = dcount(MacAddressHash) by FailureId,
  ExeVersion\\r\\n    | extend EventTypeName =
  \\\"paramaterizeddatamodel\\\"\\r\\n    | extend FailureHash =
  toguid(hash_sha256(tolower(FailureId)))\\r\\n}\",\"inputParameters\":[{\"name\
  \":\"n\",\"cslType\":\"int\",\"type\":\"System.Int32\",\"docstring\":\"\"},{\
  \"name\":\"releaseType\",\"cslType\":\"string\",\"type\":\"System.String\",\"\
  docstring\":\"\"},{\"name\":\"channelId\",\"cslType\":\"string\",\"type\":\"S\
  ystem.String\",\"docstring\":\"\"},{\"name\":\"timePeriod\",\"cslType\":\"tim\
  espan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"}]},{\"name\":\"Comput\
  eSetupFailureId\",\"docstring\":\"Computes the failure hash of a fault
  event\",\"body\":\"{\\r\\n    strcat(replace(\\\"/\\\", \\\".\\\", eventName),
  \\\"_\\\", properties[\\\"reserved.datamodel.fault.bucketparam4\\\"],
  \\\"_\\\", properties[\\\"reserved.datamodel.fault.bucketparam5\\\"],
  \\\"_\\\", properties[\\\"reserved.datamodel.fault.bucketparam6\\\"],
  \\\"_\\\", \\\"0x\\\",
  tohex(toint(measures[\\\"reserved.datamodel.fault.exception.errorcode\\\"])))\
  \\r\\n}\",\"inputParameters\":[{\"name\":\"eventName\",\"cslType\":\"string\",\
  \"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\"properties\",\"csl\
  Type\":\"dynamic\",\"type\":\"System.Object\",\"docstring\":\"\"},{\"name\":\
  \"measures\",\"cslType\":\"dynamic\",\"type\":\"System.Object\",\"docstring\":\
  \"\"}]},{\"name\":\"GetvstelScraperDiff\",\"docstring\":\"Get catalog
  scraper\",\"body\":\"{\\r\\n//let start =
  make_datetime(\\\"2022-07-19T05:00:00.000Z\\\"); \\r\\nlet start =
  make_datetime(startTime);\\r\\nlet end = start + 15min;\\r\\nlet
  MeasuresProperty = RawEventsVSUnclassified  \\r\\n| where
  AdvancedServerTimestampUtc >= start  \\r\\n| where AdvancedServerTimestampUtc
  < end  \\r\\n| extend DataHandling = parse_json(DataHandling)\\r\\n| extend
  ingestTime = ingestion_time()\\r\\n| where tostring(DataHandling) contains
  \\\"unknown\\\"  \\r\\n| extend  MeasuresDataHandling =
  DataHandling[\\\"data\\\"][\\\"baseData\\\"][\\\"measurements\\\"]  \\r\\n|
  mv-expand MeasuresDataHandling  \\r\\n| extend property =
  tostring(MeasuresDataHandling)    \\r\\n| extend trimedPropertyStart =
  trim_start(\\\"{\\\", property)    \\r\\n| extend trimedPropertyEnd =
  trim_end(\\\"}\\\", trimedPropertyStart)    \\r\\n| extend result =
  split(trimedPropertyEnd, \\\":\\\")    \\r\\n| extend entityname = EventName,
  propertypath = \\\"$.Measures\\\", propertyname = tostring(result[0]), value =
  tostring(result[1])  \\r\\n| where value contains \\\"unknown\\\"\\r\\n|
  project entityname, propertypath, propertyname, EventId, ingestTime;\\r\\nlet
  MeasuresValues = RawEventsVSUnclassified  \\r\\n| where
  AdvancedServerTimestampUtc >= start  \\r\\n| where AdvancedServerTimestampUtc
  < end  \\r\\n|extend ingestTime = ingestion_time()\\r\\n| extend Measures =
  parse_json(Measures)  \\r\\n| mv-expand Measures  \\r\\n| extend property =
  tostring(Measures)    \\r\\n| extend trimedPropertyStart =
  trim_start(\\\"{\\\", property)    \\r\\n| extend trimedPropertyEnd =
  trim_end(\\\"}\\\", trimedPropertyStart)    \\r\\n| extend result =
  split(trimedPropertyEnd, \\\":\\\")    \\r\\n| extend entityname = EventName,
  propertypath = \\\"$.Measures\\\", propertyname = tostring(result[0]), Value =
  tostring(result[1])  \\r\\n| project entityname, propertypath, propertyname,
  EventId, ingestTime = ingestion_time(), Value;\\r\\nlet MeasuresRes =
  MeasuresProperty | join MeasuresValues on entityname, propertypath,
  propertyname, EventId\\r\\n| project  entityname, propertypath, propertyname,
  Value;\\r\\nlet PropertiesProperty = RawEventsVSUnclassified  \\r\\n| where
  AdvancedServerTimestampUtc >= start  \\r\\n| where AdvancedServerTimestampUtc
  < end  \\r\\n| extend DataHandling = parse_json(DataHandling)\\r\\n| extend
  ingestTime = ingestion_time()\\r\\n| where tostring(DataHandling) contains
  \\\"unknown\\\"  \\r\\n| extend  MeasuresDataHandling =
  DataHandling[\\\"data\\\"][\\\"baseData\\\"][\\\"properties\\\"]  \\r\\n|
  mv-expand MeasuresDataHandling  \\r\\n| extend property =
  tostring(MeasuresDataHandling)    \\r\\n| extend trimedPropertyStart =
  trim_start(\\\"{\\\", property)    \\r\\n| extend trimedPropertyEnd =
  trim_end(\\\"}\\\", trimedPropertyStart)    \\r\\n| extend result =
  split(trimedPropertyEnd, \\\":\\\")    \\r\\n| extend entityname = EventName,
  propertypath = \\\"$.Properties\\\", propertyname = tostring(result[0]), value
  = tostring(result[1])  \\r\\n| where value contains \\\"unknown\\\"\\r\\n|
  project entityname, propertypath, propertyname, EventId, ingestTime;\\r\\nlet
  PropertiesValues = RawEventsVSUnclassified  \\r\\n| where
  AdvancedServerTimestampUtc >= start  \\r\\n| where AdvancedServerTimestampUtc
  < end  \\r\\n|extend ingestTime = ingestion_time()\\r\\n| extend Properties =
  parse_json(Properties)  \\r\\n| mv-expand Properties  \\r\\n| extend property
  = tostring(Properties)    \\r\\n| extend trimedPropertyStart =
  trim_start(\\\"{\\\", property)    \\r\\n| extend trimedPropertyEnd =
  trim_end(\\\"}\\\", trimedPropertyStart)    \\r\\n| extend result =
  split(trimedPropertyEnd, \\\":\\\")    \\r\\n| extend entityname = EventName,
  propertypath = \\\"$.Properties\\\", propertyname = tostring(result[0]), Value
  = tostring(result[1])  \\r\\n| project entityname, propertypath, propertyname,
  EventId, ingestTime = ingestion_time(), Value;\\r\\nlet PropertiesRes =
  PropertiesProperty | join PropertiesValues on entityname, propertypath,
  propertyname, EventId\\r\\n| project  entityname, propertypath, propertyname,
  Value;\\r\\nlet blankRes = RawEventsVSUnclassified  \\r\\n| where
  AdvancedServerTimestampUtc >= start  \\r\\n| where AdvancedServerTimestampUtc
  < end\\r\\n| extend DataHandling = parse_json(DataHandling)\\r\\n| extend
  ingestTime = ingestion_time()\\r\\n| where tostring(DataHandling) contains
  \\\"unknown\\\"  \\r\\n| extend  MeasuresDataHandling =
  tostring(DataHandling[\\\"data\\\"][\\\"baseData\\\"][\\\"measurements\\\"]),
  PropertiesDataHandling =
  tostring(DataHandling[\\\"data\\\"][\\\"baseData\\\"][\\\"properties\\\"])   \
  \\r\\n| where MeasuresDataHandling != \\\"\\\" or PropertiesDataHandling !=
  \\\"\\\"\\r\\n| project entityname = EventName, propertypath = \\\"\\\",
  propertyname = \\\"(blank)\\\", Value = \\\"\\\";\\r\\nlet res = PropertiesRes
  | union MeasuresRes | union blankRes | project entityname, propertypath,
  propertyname =iff(propertyname == \\\"(blank)\\\",
  propertyname,  trim(\\\"\\\\\\\"\\\", propertyname)), Value =
  trim(\\\"\\\\\\\"\\\", Value);\\r\\nlet entityNameCounts = res | summarize
  count() by entityname; \\r\\nlet combinedData = res | summarize
  PropertyCountPerEntityName = count(), SampleValue = take_any(Value)  by
  entityname, propertypath, propertyname    \\r\\n| project entityname,
  propertypath, propertyname,PropertyCountPerEntityName,
  SampleValue;   \\r\\nlet comBinedData2 = combinedData | join kind=leftouter
  entityNameCounts on $left.entityname == $right.entityname  \\r\\n| project
  entityname, propertypath, propertyname, SampleValue,
  PropertyCountPerEntityName, EntityCount = count_; \\r\\nlet formatName =
  (name: string)  {    \\r\\n    let formatUUID = replace_regex(name,
  @\\\"[{(]?[0-9A-Fa-f]{8}[-]?([0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?\\\",
  \\\"    <UUID>\\\");    \\r\\n    let formatHEX = replace_regex(formatUUID,
  @\\\"0x([0-9a-fA-f]){8}\\\", \\\"<HEX>\\\");    \\r\\n     let formatHEX2 =
  replace_regex(formatHEX, @\\\"0x([0-9a-fA-f]){4}\\\",
  \\\"<HEX>\\\");    \\r\\n     replace_regex(formatHEX2,
  @\\\"([0-9])+(\\\\.*[0-9+])*\\\", \\\"<NUMBER>\\\");    \\r\\n };\\r\\nlet
  trimQuotation = (str: string)\\r\\n{\\r\\n   let trimedStart =
  trim_start(\\\"\\\\\\\"\\\", str);   \\r\\n   trim_end(\\\"\\\\\\\"\\\",
  trimedStart)   \\r\\n};\\r\\n let comBinedData3 = comBinedData2    \\r\\n |
  extend  entityname = formatName(entityname), propertyname =
  formatName(propertyname), SampleEntityName = entityname, SamplePropertyName =
  propertyname    \\r\\n | project entityname=trimQuotation(entityname),
  propertyname = trimQuotation(propertyname), SampleValue =
  trimQuotation(SampleValue), propertypath, SampleEntityName =
  trimQuotation(SampleEntityName), SamplePropertyName =
  trimQuotation(SamplePropertyName), EntityCount,
  PropertyCountPerEntityName;    \\r\\nlet generalizedData = comBinedData3 |
  summarize SampleValue = any(SampleValue), PropertyCount =
  sum(PropertyCountPerEntityName), EntityCount= sum(EntityCount) by
  entityname,propertyname, propertypath    \\r\\n| project entityname,
  propertyname, propertypath, SampleValue, PropertyCount, EntityCount;\\r\\nlet
  totalEntityCounts = toscalar(generalizedData | summarize TotalPropertyCount =
  sum(EntityCount) | take 1);    \\r\\nlet totalPropertyCounts = generalizedData
  | summarize TotalPropertyCount = sum(PropertyCount) by propertyname,
  propertypath    \\r\\n| project propertyname, propertypath,
  TotalPropertyCount;    \\r\\nlet totalPropertyCountsPerEntity =
  generalizedData | summarize TotalPropertyCountPerEntity = sum(PropertyCount)
  by entityname, propertyname, propertypath    \\r\\n| project entityname,
  propertyname, propertypath, TotalPropertyCountPerEntity;    \\r\\nlet
  generalizedData2 = generalizedData | extend TotalEntityCount =
  totalEntityCounts;\\r\\nlet generalizedData3 =generalizedData2| join
  kind=leftouter totalPropertyCounts  on $left.propertyname ==
  $right.propertyname and $left.propertypath == $right.propertypath    \\r\\n|
  join kind=leftouter totalPropertyCountsPerEntity on $left.propertyname ==
  $right.propertyname and $left.propertypath == $right.propertypath and
  $left.entityname == $right.entityname    \\r\\n| project entityname,
  propertyname, SampleValue, propertypath, EntityCount, PropertyCount,
  EntityPercentage = EntityCount*1.0 / totalEntityCounts, PropertyPercentage =
  PropertyCount*1.0/TotalPropertyCountPerEntity*100,  AbsolutePropertyPercentage
  = PropertyCount*1.0/TotalPropertyCount*100, AbsolutePropertyCount =
  TotalPropertyCount;    \\r\\nlet snapshot =
  cluster(\\\"https://ddtelinsights.kusto.windows.net\\\").database(\\\"DDTelIn\
  sights\\\").table(\\\"TelemetryCatalogViewSnapshot\\\")    \\r\\n| extend
  productcode = ProductCode, entityname = EntityName,  propertyname =
  PropertyName, owneralias = OwnerAlias, ishidden = IsHidden, commonproperty =
  CommonProperty, complete = Complete,  lastchangedby = LastChangedBy,
  propertypath = PropertyPath    \\r\\n| where productcode ==
  \\\"asimov.VisualStudio\\\"\\r\\n| project  productcode, propertyname,
  entityname, owneralias, ishidden, commonproperty, complete,
  lastchangedby,  propertypath;   \\r\\nlet productCode =
  \\\"asimov.VisualStudio\\\";    \\r\\nlet existingNonCommonProps = snapshot|
  where entityname != \\\"(blank)\\\" | distinct entityname, propertyname,
  propertypath;  \\r\\nlet existingCommonProps = snapshot| where entityname ==
  \\\"(blank)\\\" | distinct propertyname, propertypath; \\r\\nlet
  newFieldsPhase1 = generalizedData3 | join kind=leftouter
  existingNonCommonProps on $left.entityname == $right.entityname and
  $left.propertyname == $right.propertyname and $left.propertypath ==
  $right.propertypath   \\r\\n| join kind=leftouter existingCommonProps on
  $left.propertyname == $right.propertyname and $left.propertypath ==
  $right.propertypath   \\r\\n| extend  ExistingPropertyName = iff(propertyname1
  != \\\"(blank)\\\", propertyname1, propertyname2), ExistingPropertyPath =
  iff(propertypath1 !=\\\"\\\", propertypath1, propertypath2),entityname,
  propertyname, SampleValue, propertypath, EntityCount, PropertyCount,
  EntityPercentage, PropertyPercentage, AbsolutePropertyCount,
  AbsolutePropertyPercentage\\r\\n| project entityname, propertyname,
  SampleValue, propertypath, EntityCount, PropertyCount, EntityPercentage,
  PropertyPercentage, AbsolutePropertyCount, AbsolutePropertyPercentage,
  ExistingPropertyName, ExistingPropertyPath;\\r\\nlet newFieldsPhase2
  =newFieldsPhase1 | where ExistingPropertyName  == \\\"\\\" and
  ExistingPropertyPath == \\\"\\\"   \\r\\n| project entityname, propertyname,
  propertypath, SampleValue, EntityCount,PropertyCount, EntityPercentage,
  PropertyPercentage, AbsolutePropertyCount,
  AbsolutePropertyPercentage;   \\r\\nlet comBinedData4 =
  comBinedData3   \\r\\n| join kind=inner newFieldsPhase2 on $left.entityname ==
  $right.entityname and $left.propertyname == $right.propertyname and
  $left.propertypath == $right.propertypath   \\r\\n| project entityname,
  propertyname, propertypath, SampleEntityName, SamplePropertyName;   \\r\\nlet
  sampleNamesRanked1 = comBinedData4 |    \\r\\n    order by
  SampleEntityName   \\r\\n    | extend SampleEntityNameRank =
  row_rank(SampleEntityName)   \\r\\n    | project entityname, propertyname,
  propertypath, SampleEntityName, SamplePropertyName,
  SampleEntityNameRank;   \\r\\nlet sampleNamesRanked2 = comBinedData4
  |    \\r\\n    order by SampleEntityName   \\r\\n    | extend
  SamplePropertyRank = row_rank(SamplePropertyName)   \\r\\n    | project
  entityname, propertyname, propertypath, SampleEntityName, SamplePropertyName,
  SamplePropertyRank;   \\r\\nlet sampleNamesRanked = sampleNamesRanked1 | join
  kind=inner sampleNamesRanked2 on $left.entityname == $right.entityname
  and   \\r\\n$left.propertyname == $right.propertyname and $left.propertypath
  == $right.propertypath and $left.SampleEntityName == $right.SampleEntityName
  and $left.SamplePropertyName == $right.SamplePropertyName   \\r\\n| project
  entityname, propertyname, propertypath, SampleEntityName,
  SamplePropertyName,SampleEntityNameRank, SamplePropertyRank;   \\r\\nlet
  sampleEntityNames = sampleNamesRanked | project entityname, propertyname,
  propertypath, IsEntityNameRandom = false, SampleEntityNames =
  SampleEntityName;  \\r\\nlet samplePropertyNames = sampleNamesRanked | project
  entityname, propertyname, propertypath, IsPropertyNameRandom = false,
  SamplePropertyNames = SamplePropertyName;  \\r\\nlet finalData =
  newFieldsPhase2 | join kind=leftouter sampleEntityNames on $left.entityname ==
  $right.entityname and $left.propertyname == $right.propertyname and
  $left.propertypath == $right.propertypath  \\r\\n| join kind=leftouter
  samplePropertyNames on $left.entityname == $right.entityname and
  $left.propertyname == $right.propertyname and $left.propertypath ==
  $right.propertypath  \\r\\n| project ProductCode = productCode, EntityName =
  strcat(\\\"\\\\\\\"\\\", entityname, \\\"\\\\\\\"\\\"), PropertyName =
  propertyname, SampleValue,PropertyPath = propertypath, OwnerAlias =
  \\\"DEFAULTOWNERALIAS\\\", IsEntityNameRandom = FALSE, IsPropertyNameRandom =
  false, SampleEntityNames,SamplePropertyNames, EntityCount, PropertyCount,
  EntityPercentage,
  PropertyPercentage,AbsolutePropertyCount,AbsolutePropertyPercentage,
  CatalogHashId = hash_sha256(strcat(productCode, entityname, propertyname,
  propertypath));  \\r\\nfinalData\\r\\n}\",\"inputParameters\":[{\"name\":\"st\
  artTime\",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\
  \"}]},{\"name\":\"GetClassifiedFreshness\",\"docstring\":\"Freshness\",\"body\
  \":\"{\\r\\nRawEventsVS\\r\\n| extend gap = ingestion_time() -
  AdvancedServerTimestampUtc, binTime = bin(AdvancedServerTimestampUtc,
  1h)\\r\\n| where AdvancedServerTimestampUtc >= ago(7d)\\r\\n| summarize
  percentiles(gap, 50, 90, 95, 99) by binTime\\r\\n| project binTime,
  percentile_gap_50 = toint(percentile_gap_50/1min), percentile_gap_90 =
  toint(percentile_gap_90/1min), percentile_gap_95 =
  toint(percentile_gap_95/1min), percentile_gap_99 =
  toint(percentile_gap_99/1min\\r\\n)\\r\\n| where binTime != \\\"\\\"\\r\\n|
  order by binTime
  asc\\r\\n}\",\"inputParameters\":[]},{\"name\":\"GetUnclassifiedFreshness\",\
  \"docstring\":\"Freshness\",\"body\":\"{\\r\\nRawEventsVSUnclassified\\r\\n|
  extend gap = ingestion_time() - AdvancedServerTimestampUtc, binTime =
  bin(AdvancedServerTimestampUtc, 1h)\\r\\n| where AdvancedServerTimestampUtc >=
  ago(7d)\\r\\n| summarize percentiles(gap, 50, 90, 95, 99) by binTime\\r\\n|
  project binTime, percentile_gap_50 = toint(percentile_gap_50/1min),
  percentile_gap_90 = toint(percentile_gap_90/1min), percentile_gap_95 =
  toint(percentile_gap_95/1min), percentile_gap_99 =
  toint(percentile_gap_99/1min\\r\\n)\\r\\n| where binTime != \\\"\\\"\\r\\n|
  order by binTime
  asc\\r\\n}\",\"inputParameters\":[]},{\"name\":\"GetRawEventsVSFreshness\",\"\
  docstring\":\"GetFreshNess\",\"body\":\"{\\r\\n RawEventsVS\\r\\n | summarize
  ingestionTimeDiff = (now() - max(ingestion_time()))/1min, serverTimeDiff =
  (now() - max(AdvancedServerTimestampUtc))/1min\\r\\n
  }\",\"inputParameters\":[]},{\"name\":\"GetRawEventsVSUnclassifiedFreshness\",\
  \"docstring\":\"GetFreshNess\",\"body\":\"{\\r\\n
  RawEventsVSUnclassified\\r\\n | summarize ingestionTimeDiff = (now() -
  max(ingestion_time()))/1min, serverTimeDiff = (now() -
  max(AdvancedServerTimestampUtc))/1min\\r\\n
  }\",\"inputParameters\":[]},{\"name\":\"formatName\",\"docstring\":\"Format
  string for scraper\",\"body\":\"{\\r\\n    replace_regex(name,
  @\\\"[{(]?[0-9A-Fa-f]{8}[-]?([0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?\\\",
  \\\"<UUID>\\\");\\r\\n
  }\",\"inputParameters\":[{\"name\":\"name\",\"cslType\":\"string\",\"type\":\
  \"System.String\",\"docstring\":\"\"}]},{\"name\":\"GetCatalogEntities\",\"do\
  cstring\":\"Get entities from unclassified table\",\"body\":\"{\\nlet start =
  make_datetime(startTime);\\nlet end = start + interval;\\nlet rawInput =
  materialize(cluster(clusterName).database(databaseName).table(tableName)\\n|
  where column_ifexists(timeColumnName, ingestion_time())  >= start and
  column_ifexists(timeColumnName, ingestion_time()) < end\\n| project name =
  column_ifexists(entityName, \\\"blankName\\\"), GdprQuarantined);\\nlet
  performanceCounter = materialize(rawInput\\n| extend  performanceCounter =
  GdprQuarantined[\\\"performanceCounter\\\"]\\n| mv-expand
  performanceCounter\\n| extend performanceCounterName =
  bag_keys(performanceCounter)\\n| mv-expand performanceCounterName);\\nlet
  firstLevelPerformanceCounter = materialize(performanceCounter\\n| extend value
  = performanceCounter[tostring(performanceCounterName)]\\n| project  entityname
  = name, propertypath = \\\"(blank)\\\", propertyname =
  strcat(\\\"performanceCounter[<NUMBER>].\\\",
  tostring(performanceCounterName)), Value = tostring(value)\\n| where
  propertyname !endswith \\\"[<NUMBER>].\\\");\\nlet
  secondLevelPerformanceCounter = materialize(firstLevelPerformanceCounter\\n|
  extend jsonValue = parse_json(Value)\\n| extend type = gettype(jsonValue)\\n|
  where type == \\\"dictionary\\\"\\n| extend key = bag_keys(jsonValue)\\n|
  mv-expand key\\n| extend secondLevelValue = jsonValue[tostring(key)]\\n|
  project entityname, propertypath, propertyname = strcat(propertyname,
  \\\".\\\", tostring(key)), Value = tostring(secondLevelValue));\\nlet request
  = materialize(rawInput\\n| extend  requestBag =
  GdprQuarantined[\\\"request\\\"]\\n| project name, requestBag\\n| mv-expand
  requestBag\\n| extend requestName = bag_keys(requestBag)\\n| mv-expand
  requestName);\\nlet firstLevelRequest = materialize(request\\n| extend value =
  requestBag[tostring(requestName)]\\n| project  entityname = name, propertypath
  = \\\"(blank)\\\", propertyname = strcat(\\\"request[<NUMBER>].\\\",
  tostring(requestName)), Value = tostring(value)\\n| where propertyname
  !endswith \\\"[<NUMBER>].\\\");\\nlet secondLevelRequest =
  firstLevelRequest\\n| extend jsonValue = parse_json(Value)\\n| extend type =
  gettype(jsonValue)\\n| where type == \\\"dictionary\\\"\\n| extend key =
  bag_keys(jsonValue)\\n| mv-expand key\\n| extend secondLevelValue =
  jsonValue[tostring(key)]\\n| project entityname, propertypath, propertyname =
  strcat(propertyname, \\\".\\\", tostring(key)), Value =
  tostring(secondLevelValue);\\nlet device = rawInput\\n| extend deviceValue =
  GdprQuarantined[\\\"context\\\"][\\\"device\\\"]\\n| extend key =
  bag_keys(deviceValue)\\n| mv-expand key\\n| project entityname = name,
  propertypath=\\\"(blank)\\\", propertyname = strcat(\\\"context.device.\\\",
  tostring(key)), Value = tostring(deviceValue[tostring(key)])\\n| where
  propertyname != \\\"context.device.\\\";\\nlet Properties = rawInput\\n|
  project name, Properties= iff(dataSource ==
  '1',GdprQuarantined['data']['baseData']['properties'],
  GdprQuarantined['context']['custom']['dimensions'])\\n| mv-expand
  Properties\\n| extend key = bag_keys(Properties)\\n| mv-expand key\\n| extend
  entityname = name, propertypath = \\\"$.Properties\\\", propertyname =
  tostring(key), Value = tostring(Properties[tostring(key)]);\\nlet Measures =
  rawInput\\n| project name, Properties= iff(dataSource == '1',
  GdprQuarantined['data']['baseData']['measurements'],
  GdprQuarantined['context']['custom']['metrics'])\\n| mv-expand Properties\\n|
  extend key = bag_keys(Properties)\\n| mv-expand key\\n| extend entityname =
  name, propertypath = \\\"$.Measures\\\", propertyname = tostring(key), Value =
  tostring(Properties[tostring(key)]);\\nlet blankRule = rawInput\\n| project
  entityname = name, propertypath = \\\"\\\", propertyname = \\\"(blank)\\\",
  Value = \\\"\\\";\\nlet entities = firstLevelPerformanceCounter| union
  secondLevelPerformanceCounter| union device| union Properties | union
  Measures|union  blankRule | union Properties |union
  Measures;\\nentities\\n}\",\"inputParameters\":[{\"name\":\"productCode\",\"c\
  slType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\
  \"clusterName\",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\
  \":\"\"},{\"name\":\"databaseName\",\"cslType\":\"string\",\"type\":\"System.\
  String\",\"docstring\":\"\"},{\"name\":\"tableName\",\"cslType\":\"string\",\
  \"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\"startTime\",\"cslT\
  ype\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\"i\
  nterval\",\"cslType\":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\
  \"\"},{\"name\":\"timeColumnName\",\"cslType\":\"string\",\"type\":\"System.S\
  tring\",\"docstring\":\"\"},{\"name\":\"entityName\",\"cslType\":\"string\",\
  \"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\"dataSource\",\"csl\
  Type\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"}]},{\"name\":\
  \"GetCatalogEntitiesFromUnclassifiedTable\",\"docstring\":\"Get entities from
  unclassified table\",\"body\":\"{\\nlet start =
  make_datetime(startTime);\\nlet end = start + totimespan(interval);\\nlet
  rawInput =
  materialize(cluster(clusterName).database(databaseName).table(tableName)\\n|
  where column_ifexists(timeColumnName, ingestion_time())  >= start and
  column_ifexists(timeColumnName, ingestion_time()) < end\\n| project name =
  column_ifexists(entityName, \\\"blankName\\\"), GdprQuarantined\\n| where name
  != \\\"blankName\\\");\\nlet performanceCounter = rawInput\\n|
  extend  performanceCounter = GdprQuarantined[\\\"performanceCounter\\\"]\\n|
  mv-expand performanceCounter\\n| extend performanceCounterName =
  bag_keys(performanceCounter)\\n| mv-expand performanceCounterName;\\nlet
  firstLevelPerformanceCounter = performanceCounter\\n| extend value =
  performanceCounter[tostring(performanceCounterName)]\\n| project  entityname =
  name, propertypath = \\\"(blank)\\\", propertyname =
  strcat(\\\"performanceCounter[<NUMBER>].\\\",
  tostring(performanceCounterName)), Value = tostring(value)\\n| where
  propertyname !endswith \\\"[<NUMBER>].\\\";\\nlet
  secondLevelPerformanceCounter = firstLevelPerformanceCounter\\n| extend
  jsonValue = parse_json(Value)\\n| extend type = gettype(jsonValue)\\n| where
  type == \\\"dictionary\\\"\\n| extend key = bag_keys(jsonValue)\\n| mv-expand
  key\\n| extend secondLevelValue = jsonValue[tostring(key)]\\n| project
  entityname, propertypath, propertyname = strcat(propertyname, \\\".\\\",
  tostring(key)), Value = tostring(secondLevelValue);\\nlet request =
  rawInput\\n| extend  requestBag = GdprQuarantined[\\\"request\\\"]\\n| project
  name, requestBag\\n| mv-expand requestBag\\n| extend requestName =
  bag_keys(requestBag)\\n| mv-expand requestName;\\nlet firstLevelRequest =
  request\\n| extend value = requestBag[tostring(requestName)]\\n|
  project  entityname = name, propertypath = \\\"(blank)\\\", propertyname =
  strcat(\\\"request[<NUMBER>].\\\", tostring(requestName)), Value =
  tostring(value)\\n| where propertyname !endswith \\\"[<NUMBER>].\\\";\\nlet
  secondLevelRequest = firstLevelRequest\\n| extend jsonValue =
  parse_json(Value)\\n| extend type = gettype(jsonValue)\\n| where type ==
  \\\"dictionary\\\"\\n| extend key = bag_keys(jsonValue)\\n| mv-expand key\\n|
  extend secondLevelValue = jsonValue[tostring(key)]\\n| project entityname,
  propertypath, propertyname = strcat(propertyname, \\\".\\\", tostring(key)),
  Value = tostring(secondLevelValue);\\nlet Properties = rawInput\\n| project
  name, Properties= iff(dataSource ==
  '1',GdprQuarantined['data']['baseData']['properties'],
  GdprQuarantined['context']['custom']['dimensions'])\\n| mv-expand
  Properties\\n| extend key = bag_keys(Properties)\\n| where Properties !=
  \\\"\\\"\\n| mv-expand key\\n| extend entityname = name, propertypath =
  \\\"$.Properties\\\", propertyname = tostring(key), Value =
  tostring(Properties[tostring(key)]);\\nlet Measures = rawInput\\n| project
  name, Properties= iff(dataSource == '1',
  GdprQuarantined['data']['baseData']['measurements'],
  GdprQuarantined['context']['custom']['metrics'])\\n| mv-expand Properties\\n|
  extend key = bag_keys(Properties)\\n| mv-expand key\\n| where Properties !=
  \\\"\\\"\\n| extend entityname = name, propertypath = \\\"$.Measures\\\",
  propertyname = tostring(key), Value =
  tostring(Properties[tostring(key)]);\\nlet AIDSProperties = rawInput | project
  name, Properties = GdprQuarantined['Properties']\\n| extend key =
  bag_keys(Properties)\\n| mv-expand key\\n| where Properties != \\\"\\\"\\n|
  extend entityname = name, propertypath = \\\"$.Properties\\\", propertyname =
  tostring(key), Value = tostring(Properties[tostring(key)]);\\nlet
  AIDSMeasurements = rawInput | project name, Measurements =
  GdprQuarantined['Measurements']\\n| extend key = bag_keys(Measurements)\\n|
  mv-expand key\\n| where Measurements != \\\"\\\"\\n| extend entityname = name,
  propertypath = \\\"$.Measurements\\\", propertyname = tostring(key), Value =
  tostring(Measurements[tostring(key)]);\\nlet blankRule = rawInput\\n| project
  entityname = name, propertypath = \\\"\\\", propertyname = \\\"(blank)\\\",
  Value = \\\"\\\";\\nlet entities = firstLevelPerformanceCounter| union
  secondLevelPerformanceCounter| union Properties | union
  Measures|union  blankRule | union AIDSMeasurements | union
  AIDSProperties;\\nentities
  \\n}\",\"inputParameters\":[{\"name\":\"productCode\",\"cslType\":\"string\",\
  \"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\"clusterName\",\"cs\
  lType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\
  \"databaseName\",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\
  \":\"\"},{\"name\":\"tableName\",\"cslType\":\"string\",\"type\":\"System.Str\
  ing\",\"docstring\":\"\"},{\"name\":\"startTime\",\"cslType\":\"string\",\"ty\
  pe\":\"System.String\",\"docstring\":\"\"},{\"name\":\"interval\",\"cslType\":\
  \"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\"timeCol\
  umnName\",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\
  \"},{\"name\":\"entityName\",\"cslType\":\"string\",\"type\":\"System.String\
  \",\"docstring\":\"\"},{\"name\":\"dataSource\",\"cslType\":\"string\",\"type\
  \":\"System.String\",\"docstring\":\"\"}]},{\"name\":\"GetCatalogScraperDiff\
  \",\"docstring\":\"Get catalog scraper diff\",\"body\":\"{\\n   let entities =
  GetCatalogEntitiesFromUnclassifiedTable(productCode, clusterName,
  databaseName, tableName,startTime, interval, timeColumnName, entityName,
  dataSource);\\n   let combinedData = GetComBinedDataFromEntities(entities,
  productCode);\\n   GetCatalogScraperForEntities(combinedData,
  productCode)\\n}\",\"inputParameters\":[{\"name\":\"productCode\",\"cslType\":\
  \"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\"cluster\
  Name\",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\
  \"name\":\"databaseName\",\"cslType\":\"string\",\"type\":\"System.String\",\
  \"docstring\":\"\"},{\"name\":\"tableName\",\"cslType\":\"string\",\"type\":\
  \"System.String\",\"docstring\":\"\"},{\"name\":\"startTime\",\"cslType\":\"s\
  tring\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\"interval\",\
  \"cslType\":\"timespan\",\"type\":\"System.TimeSpan\",\"docstring\":\"\"},{\"\
  name\":\"timeColumnName\",\"cslType\":\"string\",\"type\":\"System.String\",\
  \"docstring\":\"\"},{\"name\":\"entityName\",\"cslType\":\"string\",\"type\":\
  \"System.String\",\"docstring\":\"\"},{\"name\":\"dataSource\",\"cslType\":\"\
  string\",\"type\":\"System.String\",\"docstring\":\"\"}]},{\"name\":\"GetCata\
  logScraperForEntities\",\"docstring\":\"Get catalog diff for specific
  entities\",\"body\":\"{\\nlet generalizedData = materialize(comBinedData |
  summarize SampleValue = any(SampleValue), PropertyCount =
  sum(PropertyCountPerEntityName), EntityCount= sum(EntityCount) by
  entityname,propertyname, propertypath    \\n| project entityname,
  propertyname, propertypath, SampleValue, PropertyCount, EntityCount);\\nlet
  totalEntityCounts = toscalar(generalizedData | summarize TotalPropertyCount =
  sum(EntityCount) | take 1);    \\nlet totalPropertyCounts = generalizedData |
  summarize TotalPropertyCount = sum(PropertyCount) by propertyname,
  propertypath    \\n| project propertyname, propertypath,
  TotalPropertyCount;    \\nlet totalPropertyCountsPerEntity = generalizedData |
  summarize TotalPropertyCountPerEntity = sum(PropertyCount) by entityname,
  propertyname, propertypath    \\n| project entityname, propertyname,
  propertypath, TotalPropertyCountPerEntity;    \\nlet generalizedData2 =
  generalizedData | extend TotalEntityCount = totalEntityCounts;\\nlet
  generalizedData3 =generalizedData2| join kind=leftouter
  totalPropertyCounts  on $left.propertyname == $right.propertyname and
  $left.propertypath == $right.propertypath    \\n| join kind=leftouter
  totalPropertyCountsPerEntity on $left.propertyname == $right.propertyname and
  $left.propertypath == $right.propertypath and $left.entityname ==
  $right.entityname    \\n| project entityname, propertyname, SampleValue,
  propertypath, EntityCount, PropertyCount, EntityPercentage = EntityCount*1.0 /
  totalEntityCounts, PropertyPercentage =
  PropertyCount*1.0/TotalPropertyCountPerEntity*100,  AbsolutePropertyPercentage
  = PropertyCount*1.0/TotalPropertyCount*100, AbsolutePropertyCount =
  TotalPropertyCount;    \\nlet snapshot =
  materialize(cluster(\\\"https://ddtelinsights.kusto.windows.net\\\").database(\
  \\\"DDTelInsights\\\").table(\\\"TelemetryCatalogViewSnapshot\\\")  \\n|
  extend productcode = ProductCode, entityname = EntityName,  propertyname =
  PropertyName, owneralias = OwnerAlias, ishidden = IsHidden, commonproperty =
  CommonProperty, complete = Complete,  lastchangedby = LastChangedBy,
  propertypath = PropertyPath    \\n| where productcode == productCode\\n|
  project  productcode, propertyname, entityname, owneralias, ishidden,
  commonproperty, complete, lastchangedby,  propertypath);\\nlet
  existingNonCommonProps = snapshot| where entityname != \\\"(blank)\\\" |
  distinct entityname, propertyname, propertypath;  \\nlet existingCommonProps =
  snapshot| where entityname == \\\"(blank)\\\" | distinct propertyname,
  propertypath; \\nlet newFieldsPhase1 = generalizedData3 | join kind=leftouter
  existingNonCommonProps on $left.entityname == $right.entityname and
  $left.propertyname == $right.propertyname and $left.propertypath ==
  $right.propertypath   \\n| join kind=leftouter existingCommonProps on
  $left.propertyname == $right.propertyname and $left.propertypath ==
  $right.propertypath   \\n| extend  ExistingPropertyName = iff(propertyname1 !=
  \\\"(blank)\\\", propertyname1, propertyname2), ExistingPropertyPath =
  iff(propertypath1 !=\\\"\\\", propertypath1, propertypath2),entityname,
  propertyname, SampleValue, propertypath, EntityCount, PropertyCount,
  EntityPercentage, PropertyPercentage, AbsolutePropertyCount,
  AbsolutePropertyPercentage\\n| project entityname, propertyname, SampleValue,
  propertypath, EntityCount, PropertyCount, EntityPercentage,
  PropertyPercentage, AbsolutePropertyCount, AbsolutePropertyPercentage,
  ExistingPropertyName, ExistingPropertyPath;\\nlet newFieldsPhase2
  =newFieldsPhase1 | where ExistingPropertyName  == \\\"\\\" or
  ExistingPropertyPath == \\\"\\\"   \\n| project entityname, propertyname,
  propertypath, SampleValue, EntityCount,PropertyCount, EntityPercentage,
  PropertyPercentage, AbsolutePropertyCount,
  AbsolutePropertyPercentage;   \\nlet comBinedData4 =
  materialize(comBinedData   \\n| join kind=inner newFieldsPhase2 on
  $left.entityname == $right.entityname and $left.propertyname ==
  $right.propertyname and $left.propertypath == $right.propertypath   \\n|
  project entityname, propertyname, propertypath, SampleEntityName,
  SamplePropertyName);   \\nlet sampleNamesRanked1 = comBinedData4
  |    \\n    order by SampleEntityName   \\n    | extend SampleEntityNameRank =
  row_rank(SampleEntityName)   \\n    | project entityname, propertyname,
  propertypath, SampleEntityName, SamplePropertyName,
  SampleEntityNameRank;   \\nlet sampleNamesRanked2 = comBinedData4
  |    \\n    order by SampleEntityName   \\n    | extend SamplePropertyRank =
  row_rank(SamplePropertyName)   \\n    | project entityname, propertyname,
  propertypath, SampleEntityName, SamplePropertyName,
  SamplePropertyRank;   \\nlet sampleNamesRanked =
  materialize(sampleNamesRanked1 | join kind=inner sampleNamesRanked2 on
  $left.entityname == $right.entityname and   \\n$left.propertyname ==
  $right.propertyname and $left.propertypath == $right.propertypath and
  $left.SampleEntityName == $right.SampleEntityName and $left.SamplePropertyName
  == $right.SamplePropertyName   \\n| project entityname, propertyname,
  propertypath, SampleEntityName, SamplePropertyName,SampleEntityNameRank,
  SamplePropertyRank);   \\nlet sampleEntityNames =
  materialize(sampleNamesRanked | project entityname, propertyname,
  propertypath, IsEntityNameRandom = false, SampleEntityNames =
  SampleEntityName);  \\nlet samplePropertyNames = materialize(sampleNamesRanked
  | project entityname, propertyname, propertypath, IsPropertyNameRandom =
  false, SamplePropertyNames = SamplePropertyName);  \\nlet finalData1
  =materialize(newFieldsPhase2 | join kind=leftouter sampleEntityNames on
  $left.entityname == $right.entityname and $left.propertyname ==
  $right.propertyname and $left.propertypath ==
  $right.propertypath);\\nfinalData1 | join kind=leftouter samplePropertyNames
  on $left.entityname == $right.entityname and $left.propertyname ==
  $right.propertyname and $left.propertypath == $right.propertypath\\n| project
  ProductCode = productCode, EntityName = entityname, PropertyName =
  propertyname, SampleValue,PropertyPath = propertypath, OwnerAlias =
  \\\"DEFAULTOWNERALIAS\\\", IsEntityNameRandom = FALSE, IsPropertyNameRandom =
  false, SampleEntityNames,SamplePropertyNames, EntityCount, PropertyCount,
  EntityPercentage,
  PropertyPercentage,AbsolutePropertyCount,AbsolutePropertyPercentage,
  CatalogHashId = hash_sha256(strcat(productCode, entityname, propertyname,
  propertypath));
  \\n}\",\"inputParameters\":[{\"name\":\"comBinedData\",\"columns\":[{\"name\":\
  \"entityname\",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\
  \":\"\"},{\"name\":\"propertyname\",\"cslType\":\"string\",\"type\":\"System.\
  String\",\"docstring\":\"\"},{\"name\":\"SampleValue\",\"cslType\":\"string\",\
  \"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\"propertypath\",\"c\
  slType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\
  \"SampleEntityName\",\"cslType\":\"string\",\"type\":\"System.String\",\"docs\
  tring\":\"\"},{\"name\":\"SamplePropertyName\",\"cslType\":\"string\",\"type\
  \":\"System.String\",\"docstring\":\"\"},{\"name\":\"EntityCount\",\"cslType\
  \":\"long\",\"type\":\"System.Int64\",\"docstring\":\"\"},{\"name\":\"Propert\
  yCountPerEntityName\",\"cslType\":\"long\",\"type\":\"System.Int64\",\"docstr\
  ing\":\"\"}]},{\"name\":\"productCode\",\"cslType\":\"string\",\"type\":\"Sys\
  tem.String\",\"docstring\":\"\"}]},{\"name\":\"GetScraperDiff\",\"docstring\":\
  \"Get catalog scraper\",\"body\":\"{\\r\\n//let start =
  make_datetime(\\\"2022-07-19T05:00:00.000Z\\\"); \\r\\nlet start =
  make_datetime(startTime);\\r\\nlet end = start + 60min;\\r\\nlet
  MeasuresProperty = RawEventsVSUnclassified  \\r\\n| where
  AdvancedServerTimestampUtc >= start  \\r\\n| where AdvancedServerTimestampUtc
  < end  \\r\\n| extend DataHandling = parse_json(DataHandling)\\r\\n| extend
  ingestTime = ingestion_time()\\r\\n| where tostring(DataHandling) contains
  \\\"unknown\\\"  \\r\\n| extend  MeasuresDataHandling =
  DataHandling[\\\"data\\\"][\\\"baseData\\\"][\\\"measurements\\\"]  \\r\\n|
  mv-expand MeasuresDataHandling  \\r\\n| extend property =
  tostring(MeasuresDataHandling)    \\r\\n| extend trimedPropertyStart =
  trim_start(\\\"{\\\", property)    \\r\\n| extend trimedPropertyEnd =
  trim_end(\\\"}\\\", trimedPropertyStart)    \\r\\n| extend result =
  split(trimedPropertyEnd, \\\":\\\")    \\r\\n| extend entityname = EventName,
  propertypath = \\\"$.Measures\\\", propertyname = tostring(result[0]), value =
  tostring(result[1])  \\r\\n| where value contains \\\"unknown\\\"\\r\\n|
  project entityname, propertypath, propertyname, EventId, ingestTime;\\r\\nlet
  MeasuresValues = RawEventsVSUnclassified  \\r\\n| where
  AdvancedServerTimestampUtc >= start  \\r\\n| where AdvancedServerTimestampUtc
  < end  \\r\\n|extend ingestTime = ingestion_time()\\r\\n| extend Measures =
  parse_json(Measures)  \\r\\n| mv-expand Measures  \\r\\n| extend property =
  tostring(Measures)    \\r\\n| extend trimedPropertyStart =
  trim_start(\\\"{\\\", property)    \\r\\n| extend trimedPropertyEnd =
  trim_end(\\\"}\\\", trimedPropertyStart)    \\r\\n| extend result =
  split(trimedPropertyEnd, \\\":\\\")    \\r\\n| extend entityname = EventName,
  propertypath = \\\"$.Measures\\\", propertyname = tostring(result[0]), Value =
  tostring(result[1])  \\r\\n| project entityname, propertypath, propertyname,
  EventId, ingestTime = ingestion_time(), Value;\\r\\nlet MeasuresRes =
  MeasuresProperty | join MeasuresValues on entityname, propertypath,
  propertyname, EventId\\r\\n| project  entityname, propertypath, propertyname,
  Value;\\r\\nlet PropertiesProperty = RawEventsVSUnclassified  \\r\\n| where
  AdvancedServerTimestampUtc >= start  \\r\\n| where AdvancedServerTimestampUtc
  < end  \\r\\n| extend DataHandling = parse_json(DataHandling)\\r\\n| extend
  ingestTime = ingestion_time()\\r\\n| where tostring(DataHandling) contains
  \\\"unknown\\\"  \\r\\n| extend  MeasuresDataHandling =
  DataHandling[\\\"data\\\"][\\\"baseData\\\"][\\\"properties\\\"]  \\r\\n|
  mv-expand MeasuresDataHandling  \\r\\n| extend property =
  tostring(MeasuresDataHandling)    \\r\\n| extend trimedPropertyStart =
  trim_start(\\\"{\\\", property)    \\r\\n| extend trimedPropertyEnd =
  trim_end(\\\"}\\\", trimedPropertyStart)    \\r\\n| extend result =
  split(trimedPropertyEnd, \\\":\\\")    \\r\\n| extend entityname = EventName,
  propertypath = \\\"$.Properties\\\", propertyname = tostring(result[0]), value
  = tostring(result[1])  \\r\\n| where value contains \\\"unknown\\\"\\r\\n|
  project entityname, propertypath, propertyname, EventId, ingestTime;\\r\\nlet
  PropertiesValues = RawEventsVSUnclassified  \\r\\n| where
  AdvancedServerTimestampUtc >= start  \\r\\n| where AdvancedServerTimestampUtc
  < end  \\r\\n|extend ingestTime = ingestion_time()\\r\\n| extend Properties =
  parse_json(Properties)  \\r\\n| mv-expand Properties  \\r\\n| extend property
  = tostring(Properties)    \\r\\n| extend trimedPropertyStart =
  trim_start(\\\"{\\\", property)    \\r\\n| extend trimedPropertyEnd =
  trim_end(\\\"}\\\", trimedPropertyStart)    \\r\\n| extend result =
  split(trimedPropertyEnd, \\\":\\\")    \\r\\n| extend entityname = EventName,
  propertypath = \\\"$.Properties\\\", propertyname = tostring(result[0]), Value
  = tostring(result[1])  \\r\\n| project entityname, propertypath, propertyname,
  EventId, ingestTime = ingestion_time(), Value;\\r\\nlet PropertiesRes =
  PropertiesProperty | join PropertiesValues on entityname, propertypath,
  propertyname, EventId\\r\\n| project  entityname, propertypath, propertyname,
  Value;\\r\\nlet blankRes = RawEventsVSUnclassified  \\r\\n| where
  AdvancedServerTimestampUtc >= start  \\r\\n| where AdvancedServerTimestampUtc
  < end\\r\\n| extend DataHandling = parse_json(DataHandling)\\r\\n| extend
  ingestTime = ingestion_time()\\r\\n| where tostring(DataHandling) contains
  \\\"unknown\\\"  \\r\\n| extend  MeasuresDataHandling =
  tostring(DataHandling[\\\"data\\\"][\\\"baseData\\\"][\\\"measurements\\\"]),
  PropertiesDataHandling =
  tostring(DataHandling[\\\"data\\\"][\\\"baseData\\\"][\\\"properties\\\"])   \
  \\r\\n| where MeasuresDataHandling != \\\"\\\" or PropertiesDataHandling !=
  \\\"\\\"\\r\\n| project entityname = EventName, propertypath = \\\"\\\",
  propertyname = \\\"(blank)\\\", Value = \\\"\\\";\\r\\nlet res = PropertiesRes
  | union MeasuresRes | union blankRes | project entityname, propertypath,
  propertyname =iff(propertyname == \\\"(blank)\\\",
  propertyname,  trim(\\\"\\\\\\\"\\\", propertyname)), Value =
  trim(\\\"\\\\\\\"\\\", Value);\\r\\nlet entityNameCounts = res | summarize
  count() by entityname; \\r\\nlet combinedData = res | summarize
  PropertyCountPerEntityName = count(), SampleValue = take_any(Value)  by
  entityname, propertypath, propertyname    \\r\\n| project entityname,
  propertypath, propertyname,PropertyCountPerEntityName,
  SampleValue;   \\r\\nlet comBinedData2 = combinedData | join kind=leftouter
  entityNameCounts on $left.entityname == $right.entityname  \\r\\n| project
  entityname, propertypath, propertyname, SampleValue,
  PropertyCountPerEntityName, EntityCount = count_; \\r\\nlet formatName =
  (name: string)  {    \\r\\n    let formatUUID = replace_regex(name,
  @\\\"[{(]?[0-9A-Fa-f]{8}[-]?([0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?\\\",
  \\\"    <UUID>\\\");    \\r\\n    let formatHEX = replace_regex(formatUUID,
  @\\\"0x([0-9a-fA-f]){8}\\\", \\\"<HEX>\\\");    \\r\\n     let formatHEX2 =
  replace_regex(formatHEX, @\\\"0x([0-9a-fA-f]){4}\\\",
  \\\"<HEX>\\\");    \\r\\n     replace_regex(formatHEX2,
  @\\\"([0-9])+(\\\\.*[0-9+])*\\\", \\\"<NUMBER>\\\");    \\r\\n };\\r\\nlet
  trimQuotation = (str: string)\\r\\n{\\r\\n   let trimedStart =
  trim_start(\\\"\\\\\\\"\\\", str);   \\r\\n   trim_end(\\\"\\\\\\\"\\\",
  trimedStart)   \\r\\n};\\r\\n let comBinedData3 = comBinedData2    \\r\\n |
  extend  entityname = formatName(entityname), propertyname =
  formatName(propertyname), SampleEntityName = entityname, SamplePropertyName =
  propertyname    \\r\\n | project entityname=trimQuotation(entityname),
  propertyname = trimQuotation(propertyname), SampleValue =
  trimQuotation(SampleValue), propertypath, SampleEntityName =
  trimQuotation(SampleEntityName), SamplePropertyName =
  trimQuotation(SamplePropertyName), EntityCount,
  PropertyCountPerEntityName;    \\r\\nlet generalizedData = comBinedData3 |
  summarize SampleValue = any(SampleValue), PropertyCount =
  sum(PropertyCountPerEntityName), EntityCount= sum(EntityCount) by
  entityname,propertyname, propertypath    \\r\\n| project entityname,
  propertyname, propertypath, SampleValue, PropertyCount, EntityCount;\\r\\nlet
  totalEntityCounts = toscalar(generalizedData | summarize TotalPropertyCount =
  sum(EntityCount) | take 1);    \\r\\nlet totalPropertyCounts = generalizedData
  | summarize TotalPropertyCount = sum(PropertyCount) by propertyname,
  propertypath    \\r\\n| project propertyname, propertypath,
  TotalPropertyCount;    \\r\\nlet totalPropertyCountsPerEntity =
  generalizedData | summarize TotalPropertyCountPerEntity = sum(PropertyCount)
  by entityname, propertyname, propertypath    \\r\\n| project entityname,
  propertyname, propertypath, TotalPropertyCountPerEntity;    \\r\\nlet
  generalizedData2 = generalizedData | extend TotalEntityCount =
  totalEntityCounts;\\r\\nlet generalizedData3 =generalizedData2| join
  kind=leftouter totalPropertyCounts  on $left.propertyname ==
  $right.propertyname and $left.propertypath == $right.propertypath    \\r\\n|
  join kind=leftouter totalPropertyCountsPerEntity on $left.propertyname ==
  $right.propertyname and $left.propertypath == $right.propertypath and
  $left.entityname == $right.entityname    \\r\\n| project entityname,
  propertyname, SampleValue, propertypath, EntityCount, PropertyCount,
  EntityPercentage = EntityCount*1.0 / totalEntityCounts, PropertyPercentage =
  PropertyCount*1.0/TotalPropertyCountPerEntity*100,  AbsolutePropertyPercentage
  = PropertyCount*1.0/TotalPropertyCount*100, AbsolutePropertyCount =
  TotalPropertyCount;    \\r\\nlet snapshot =
  cluster(\\\"https://ddtelinsights.kusto.windows.net\\\").database(\\\"DDTelIn\
  sights\\\").table(\\\"TelemetryCatalogViewSnapshot\\\")    \\r\\n| extend
  productcode = ProductCode, entityname = EntityName,  propertyname =
  PropertyName, owneralias = OwnerAlias, ishidden = IsHidden, commonproperty =
  CommonProperty, complete = Complete,  lastchangedby = LastChangedBy,
  propertypath = PropertyPath    \\r\\n| where productcode ==
  \\\"asimov.VisualStudio\\\"\\r\\n| project  productcode, propertyname,
  entityname, owneralias, ishidden, commonproperty, complete,
  lastchangedby,  propertypath;   \\r\\nlet productCode =
  \\\"asimov.VisualStudio\\\";    \\r\\nlet existingNonCommonProps = snapshot|
  where entityname != \\\"(blank)\\\" | distinct entityname, propertyname,
  propertypath;  \\r\\nlet existingCommonProps = snapshot| where entityname ==
  \\\"(blank)\\\" | distinct propertyname, propertypath; \\r\\nlet
  newFieldsPhase1 = generalizedData3 | join kind=leftouter
  existingNonCommonProps on $left.entityname == $right.entityname and
  $left.propertyname == $right.propertyname and $left.propertypath ==
  $right.propertypath   \\r\\n| join kind=leftouter existingCommonProps on
  $left.propertyname == $right.propertyname and $left.propertypath ==
  $right.propertypath   \\r\\n| extend  ExistingPropertyName = iff(propertyname1
  != \\\"(blank)\\\", propertyname1, propertyname2), ExistingPropertyPath =
  iff(propertypath1 !=\\\"\\\", propertypath1, propertypath2),entityname,
  propertyname, SampleValue, propertypath, EntityCount, PropertyCount,
  EntityPercentage, PropertyPercentage, AbsolutePropertyCount,
  AbsolutePropertyPercentage\\r\\n| project entityname, propertyname,
  SampleValue, propertypath, EntityCount, PropertyCount, EntityPercentage,
  PropertyPercentage, AbsolutePropertyCount, AbsolutePropertyPercentage,
  ExistingPropertyName, ExistingPropertyPath;\\r\\nlet newFieldsPhase2
  =newFieldsPhase1 | where ExistingPropertyName  == \\\"\\\" and
  ExistingPropertyPath == \\\"\\\"   \\r\\n| project entityname, propertyname,
  propertypath, SampleValue, EntityCount,PropertyCount, EntityPercentage,
  PropertyPercentage, AbsolutePropertyCount,
  AbsolutePropertyPercentage;   \\r\\nlet comBinedData4 =
  comBinedData3   \\r\\n| join kind=inner newFieldsPhase2 on $left.entityname ==
  $right.entityname and $left.propertyname == $right.propertyname and
  $left.propertypath == $right.propertypath   \\r\\n| project entityname,
  propertyname, propertypath, SampleEntityName, SamplePropertyName;   \\r\\nlet
  sampleNamesRanked1 = comBinedData4 |    \\r\\n    order by
  SampleEntityName   \\r\\n    | extend SampleEntityNameRank =
  row_rank(SampleEntityName)   \\r\\n    | project entityname, propertyname,
  propertypath, SampleEntityName, SamplePropertyName,
  SampleEntityNameRank;   \\r\\nlet sampleNamesRanked2 = comBinedData4
  |    \\r\\n    order by SampleEntityName   \\r\\n    | extend
  SamplePropertyRank = row_rank(SamplePropertyName)   \\r\\n    | project
  entityname, propertyname, propertypath, SampleEntityName, SamplePropertyName,
  SamplePropertyRank;   \\r\\nlet sampleNamesRanked = sampleNamesRanked1 | join
  kind=inner sampleNamesRanked2 on $left.entityname == $right.entityname
  and   \\r\\n$left.propertyname == $right.propertyname and $left.propertypath
  == $right.propertypath and $left.SampleEntityName == $right.SampleEntityName
  and $left.SamplePropertyName == $right.SamplePropertyName   \\r\\n| project
  entityname, propertyname, propertypath, SampleEntityName,
  SamplePropertyName,SampleEntityNameRank, SamplePropertyRank;   \\r\\nlet
  sampleEntityNames = sampleNamesRanked | project entityname, propertyname,
  propertypath, IsEntityNameRandom = false, SampleEntityNames =
  SampleEntityName;  \\r\\nlet samplePropertyNames = sampleNamesRanked | project
  entityname, propertyname, propertypath, IsPropertyNameRandom = false,
  SamplePropertyNames = SamplePropertyName;  \\r\\nlet finalData =
  newFieldsPhase2 | join kind=leftouter sampleEntityNames on $left.entityname ==
  $right.entityname and $left.propertyname == $right.propertyname and
  $left.propertypath == $right.propertypath  \\r\\n| join kind=leftouter
  samplePropertyNames on $left.entityname == $right.entityname and
  $left.propertyname == $right.propertyname and $left.propertypath ==
  $right.propertypath  \\r\\n| project ProductCode = productCode, EntityName =
  strcat(\\\"\\\\\\\"\\\", entityname, \\\"\\\\\\\"\\\"), PropertyName =
  propertyname, SampleValue,PropertyPath = propertypath, OwnerAlias =
  \\\"DEFAULTOWNERALIAS\\\", IsEntityNameRandom = FALSE, IsPropertyNameRandom =
  false, SampleEntityNames,SamplePropertyNames, EntityCount, PropertyCount,
  EntityPercentage,
  PropertyPercentage,AbsolutePropertyCount,AbsolutePropertyPercentage,
  CatalogHashId = hash_sha256(strcat(productCode, entityname, propertyname,
  propertypath));  \\r\\nfinalData\\r\\n}\",\"inputParameters\":[{\"name\":\"st\
  artTime\",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\
  \"}]},{\"name\":\"GettestvstelScraperDiff\",\"docstring\":\"Get catalog
  scraper\",\"body\":\"{\\r\\n//let start =
  make_datetime(\\\"2022-07-19T05:00:00.000Z\\\"); \\r\\nlet start =
  make_datetime(startTime);\\r\\nlet end = start + 15min;\\r\\nlet
  MeasuresProperty =
  cluster(\\\"https://ddtelvsrawedpprd.centralus.kusto.windows.net/\\\").databa\
  se(\\\"VS\\\").RawEventsVSUnclassified  \\r\\n| where
  AdvancedServerTimestampUtc >= start  \\r\\n| where AdvancedServerTimestampUtc
  < end  \\r\\n| extend DataHandling = parse_json(DataHandling)\\r\\n| extend
  ingestTime = ingestion_time()\\r\\n| where tostring(DataHandling) contains
  \\\"unknown\\\"  \\r\\n| extend  MeasuresDataHandling =
  DataHandling[\\\"data\\\"][\\\"baseData\\\"][\\\"measurements\\\"]  \\r\\n|
  mv-expand MeasuresDataHandling  \\r\\n| extend property =
  tostring(MeasuresDataHandling)    \\r\\n| extend trimedPropertyStart =
  trim_start(\\\"{\\\", property)    \\r\\n| extend trimedPropertyEnd =
  trim_end(\\\"}\\\", trimedPropertyStart)    \\r\\n| extend result =
  split(trimedPropertyEnd, \\\":\\\")    \\r\\n| extend entityname = EventName,
  propertypath = \\\"$.Measures\\\", propertyname = tostring(result[0]), value =
  tostring(result[1])  \\r\\n| where value contains \\\"unknown\\\"\\r\\n|
  project entityname, propertypath, propertyname, EventId, ingestTime;\\r\\nlet
  MeasuresValues =
  cluster(\\\"https://ddtelvsrawedpprd.centralus.kusto.windows.net/\\\").databa\
  se(\\\"VS\\\").RawEventsVSUnclassified  \\r\\n| where
  AdvancedServerTimestampUtc >= start  \\r\\n| where AdvancedServerTimestampUtc
  < end  \\r\\n|extend ingestTime = ingestion_time()\\r\\n| extend Measures =
  parse_json(Measures)  \\r\\n| mv-expand Measures  \\r\\n| extend property =
  tostring(Measures)    \\r\\n| extend trimedPropertyStart =
  trim_start(\\\"{\\\", property)    \\r\\n| extend trimedPropertyEnd =
  trim_end(\\\"}\\\", trimedPropertyStart)    \\r\\n| extend result =
  split(trimedPropertyEnd, \\\":\\\")    \\r\\n| extend entityname = EventName,
  propertypath = \\\"$.Measures\\\", propertyname = tostring(result[0]), Value =
  tostring(result[1])  \\r\\n| project entityname, propertypath, propertyname,
  EventId, ingestTime = ingestion_time(), Value;\\r\\nlet MeasuresRes =
  MeasuresProperty | join MeasuresValues on entityname, propertypath,
  propertyname, EventId\\r\\n| project  entityname, propertypath, propertyname,
  Value;\\r\\nlet PropertiesProperty =
  cluster(\\\"https://ddtelvsrawedpprd.centralus.kusto.windows.net/\\\").databa\
  se(\\\"VS\\\").RawEventsVSUnclassified  \\r\\n| where
  AdvancedServerTimestampUtc >= start  \\r\\n| where AdvancedServerTimestampUtc
  < end  \\r\\n| extend DataHandling = parse_json(DataHandling)\\r\\n| extend
  ingestTime = ingestion_time()\\r\\n| where tostring(DataHandling) contains
  \\\"unknown\\\"  \\r\\n| extend  MeasuresDataHandling =
  DataHandling[\\\"data\\\"][\\\"baseData\\\"][\\\"properties\\\"]  \\r\\n|
  mv-expand MeasuresDataHandling  \\r\\n| extend property =
  tostring(MeasuresDataHandling)    \\r\\n| extend trimedPropertyStart =
  trim_start(\\\"{\\\", property)    \\r\\n| extend trimedPropertyEnd =
  trim_end(\\\"}\\\", trimedPropertyStart)    \\r\\n| extend result =
  split(trimedPropertyEnd, \\\":\\\")    \\r\\n| extend entityname = EventName,
  propertypath = \\\"$.Properties\\\", propertyname = tostring(result[0]), value
  = tostring(result[1])  \\r\\n| where value contains \\\"unknown\\\"\\r\\n|
  project entityname, propertypath, propertyname, EventId, ingestTime;\\r\\nlet
  PropertiesValues =
  cluster(\\\"https://ddtelvsrawedpprd.centralus.kusto.windows.net/\\\").databa\
  se(\\\"VS\\\").RawEventsVSUnclassified  \\r\\n| where
  AdvancedServerTimestampUtc >= start  \\r\\n| where AdvancedServerTimestampUtc
  < end  \\r\\n|extend ingestTime = ingestion_time()\\r\\n| extend Properties =
  parse_json(Properties)  \\r\\n| mv-expand Properties  \\r\\n| extend property
  = tostring(Properties)    \\r\\n| extend trimedPropertyStart =
  trim_start(\\\"{\\\", property)    \\r\\n| extend trimedPropertyEnd =
  trim_end(\\\"}\\\", trimedPropertyStart)    \\r\\n| extend result =
  split(trimedPropertyEnd, \\\":\\\")    \\r\\n| extend entityname = EventName,
  propertypath = \\\"$.Properties\\\", propertyname = tostring(result[0]), Value
  = tostring(result[1])  \\r\\n| project entityname, propertypath, propertyname,
  EventId, ingestTime = ingestion_time(), Value;\\r\\nlet PropertiesRes =
  PropertiesProperty | join PropertiesValues on entityname, propertypath,
  propertyname, EventId\\r\\n| project  entityname, propertypath, propertyname,
  Value;\\r\\nlet blankRes =
  cluster(\\\"https://ddtelvsrawedpprd.centralus.kusto.windows.net/\\\").databa\
  se(\\\"VS\\\").RawEventsVSUnclassified  \\r\\n| where
  AdvancedServerTimestampUtc >= start  \\r\\n| where AdvancedServerTimestampUtc
  < end\\r\\n| extend DataHandling = parse_json(DataHandling)\\r\\n| extend
  ingestTime = ingestion_time()\\r\\n| where tostring(DataHandling) contains
  \\\"unknown\\\"  \\r\\n| extend  MeasuresDataHandling =
  tostring(DataHandling[\\\"data\\\"][\\\"baseData\\\"][\\\"measurements\\\"]),
  PropertiesDataHandling =
  tostring(DataHandling[\\\"data\\\"][\\\"baseData\\\"][\\\"properties\\\"])   \
  \\r\\n| where MeasuresDataHandling != \\\"\\\" or PropertiesDataHandling !=
  \\\"\\\"\\r\\n| project entityname = EventName, propertypath = \\\"\\\",
  propertyname = \\\"(blank)\\\", Value = \\\"\\\";\\r\\nlet res = PropertiesRes
  | union MeasuresRes | union blankRes | project entityname, propertypath,
  propertyname =iff(propertyname == \\\"(blank)\\\",
  propertyname,  trim(\\\"\\\\\\\"\\\", propertyname)), Value =
  trim(\\\"\\\\\\\"\\\", Value);\\r\\nlet entityNameCounts = res | summarize
  count() by entityname; \\r\\nlet combinedData = res | summarize
  PropertyCountPerEntityName = count(), SampleValue = take_any(Value)  by
  entityname, propertypath, propertyname    \\r\\n| project entityname,
  propertypath, propertyname,PropertyCountPerEntityName,
  SampleValue;   \\r\\nlet comBinedData2 = combinedData | join kind=leftouter
  entityNameCounts on $left.entityname == $right.entityname  \\r\\n| project
  entityname, propertypath, propertyname, SampleValue,
  PropertyCountPerEntityName, EntityCount = count_; \\r\\nlet formatName =
  (name: string)  {    \\r\\n    let formatUUID = replace_regex(name,
  @\\\"[{(]?[0-9A-Fa-f]{8}[-]?([0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?\\\",
  \\\"    <UUID>\\\");    \\r\\n    let formatHEX = replace_regex(formatUUID,
  @\\\"0x([0-9a-fA-f]){8}\\\", \\\"<HEX>\\\");    \\r\\n     let formatHEX2 =
  replace_regex(formatHEX, @\\\"0x([0-9a-fA-f]){4}\\\",
  \\\"<HEX>\\\");    \\r\\n     replace_regex(formatHEX2,
  @\\\"([0-9])+(\\\\.*[0-9+])*\\\", \\\"<NUMBER>\\\");    \\r\\n };\\r\\nlet
  trimQuotation = (str: string)\\r\\n{\\r\\n   let trimedStart =
  trim_start(\\\"\\\\\\\"\\\", str);   \\r\\n   trim_end(\\\"\\\\\\\"\\\",
  trimedStart)   \\r\\n};\\r\\n let comBinedData3 = comBinedData2    \\r\\n |
  extend  entityname = formatName(entityname), propertyname =
  formatName(propertyname), SampleEntityName = entityname, SamplePropertyName =
  propertyname    \\r\\n | project entityname=trimQuotation(entityname),
  propertyname = trimQuotation(propertyname), SampleValue =
  trimQuotation(SampleValue), propertypath, SampleEntityName =
  trimQuotation(SampleEntityName), SamplePropertyName =
  trimQuotation(SamplePropertyName), EntityCount,
  PropertyCountPerEntityName;    \\r\\nlet generalizedData = comBinedData3 |
  summarize SampleValue = any(SampleValue), PropertyCount =
  sum(PropertyCountPerEntityName), EntityCount= sum(EntityCount) by
  entityname,propertyname, propertypath    \\r\\n| project entityname,
  propertyname, propertypath, SampleValue, PropertyCount, EntityCount;\\r\\nlet
  totalEntityCounts = toscalar(generalizedData | summarize TotalPropertyCount =
  sum(EntityCount) | take 1);    \\r\\nlet totalPropertyCounts = generalizedData
  | summarize TotalPropertyCount = sum(PropertyCount) by propertyname,
  propertypath    \\r\\n| project propertyname, propertypath,
  TotalPropertyCount;    \\r\\nlet totalPropertyCountsPerEntity =
  generalizedData | summarize TotalPropertyCountPerEntity = sum(PropertyCount)
  by entityname, propertyname, propertypath    \\r\\n| project entityname,
  propertyname, propertypath, TotalPropertyCountPerEntity;    \\r\\nlet
  generalizedData2 = generalizedData | extend TotalEntityCount =
  totalEntityCounts;\\r\\nlet generalizedData3 =generalizedData2| join
  kind=leftouter totalPropertyCounts  on $left.propertyname ==
  $right.propertyname and $left.propertypath == $right.propertypath    \\r\\n|
  join kind=leftouter totalPropertyCountsPerEntity on $left.propertyname ==
  $right.propertyname and $left.propertypath == $right.propertypath and
  $left.entityname == $right.entityname    \\r\\n| project entityname,
  propertyname, SampleValue, propertypath, EntityCount, PropertyCount,
  EntityPercentage = EntityCount*1.0 / totalEntityCounts, PropertyPercentage =
  PropertyCount*1.0/TotalPropertyCountPerEntity*100,  AbsolutePropertyPercentage
  = PropertyCount*1.0/TotalPropertyCount*100, AbsolutePropertyCount =
  TotalPropertyCount;    \\r\\nlet snapshot =
  cluster(\\\"https://ddtelinsights.kusto.windows.net\\\").database(\\\"DDTelIn\
  sights\\\").table(\\\"TelemetryCatalogViewSnapshot\\\")    \\r\\n| extend
  productcode = ProductCode, entityname = EntityName,  propertyname =
  PropertyName, owneralias = OwnerAlias, ishidden = IsHidden, commonproperty =
  CommonProperty, complete = Complete,  lastchangedby = LastChangedBy,
  propertypath = PropertyPath    \\r\\n| where productcode ==
  \\\"asimov.VisualStudio\\\"\\r\\n| project  productcode, propertyname,
  entityname, owneralias, ishidden, commonproperty, complete,
  lastchangedby,  propertypath;   \\r\\nlet productCode =
  \\\"asimov.VisualStudio\\\";    \\r\\nlet existingNonCommonProps = snapshot|
  where entityname != \\\"(blank)\\\" | distinct entityname, propertyname,
  propertypath;  \\r\\nlet existingCommonProps = snapshot| where entityname ==
  \\\"(blank)\\\" | distinct propertyname, propertypath; \\r\\nlet
  newFieldsPhase1 = generalizedData3 | join kind=leftouter
  existingNonCommonProps on $left.entityname == $right.entityname and
  $left.propertyname == $right.propertyname and $left.propertypath ==
  $right.propertypath   \\r\\n| join kind=leftouter existingCommonProps on
  $left.propertyname == $right.propertyname and $left.propertypath ==
  $right.propertypath   \\r\\n| extend  ExistingPropertyName = iff(propertyname1
  != \\\"(blank)\\\", propertyname1, propertyname2), ExistingPropertyPath =
  iff(propertypath1 !=\\\"\\\", propertypath1, propertypath2),entityname,
  propertyname, SampleValue, propertypath, EntityCount, PropertyCount,
  EntityPercentage, PropertyPercentage, AbsolutePropertyCount,
  AbsolutePropertyPercentage\\r\\n| project entityname, propertyname,
  SampleValue, propertypath, EntityCount, PropertyCount, EntityPercentage,
  PropertyPercentage, AbsolutePropertyCount, AbsolutePropertyPercentage,
  ExistingPropertyName, ExistingPropertyPath;\\r\\nlet newFieldsPhase2
  =newFieldsPhase1 | where ExistingPropertyName  == \\\"\\\" and
  ExistingPropertyPath == \\\"\\\"   \\r\\n| project entityname, propertyname,
  propertypath, SampleValue, EntityCount,PropertyCount, EntityPercentage,
  PropertyPercentage, AbsolutePropertyCount,
  AbsolutePropertyPercentage;   \\r\\nlet comBinedData4 =
  comBinedData3   \\r\\n| join kind=inner newFieldsPhase2 on $left.entityname ==
  $right.entityname and $left.propertyname == $right.propertyname and
  $left.propertypath == $right.propertypath   \\r\\n| project entityname,
  propertyname, propertypath, SampleEntityName, SamplePropertyName;   \\r\\nlet
  sampleNamesRanked1 = comBinedData4 |    \\r\\n    order by
  SampleEntityName   \\r\\n    | extend SampleEntityNameRank =
  row_rank(SampleEntityName)   \\r\\n    | project entityname, propertyname,
  propertypath, SampleEntityName, SamplePropertyName,
  SampleEntityNameRank;   \\r\\nlet sampleNamesRanked2 = comBinedData4
  |    \\r\\n    order by SampleEntityName   \\r\\n    | extend
  SamplePropertyRank = row_rank(SamplePropertyName)   \\r\\n    | project
  entityname, propertyname, propertypath, SampleEntityName, SamplePropertyName,
  SamplePropertyRank;   \\r\\nlet sampleNamesRanked = sampleNamesRanked1 | join
  kind=inner sampleNamesRanked2 on $left.entityname == $right.entityname
  and   \\r\\n$left.propertyname == $right.propertyname and $left.propertypath
  == $right.propertypath and $left.SampleEntityName == $right.SampleEntityName
  and $left.SamplePropertyName == $right.SamplePropertyName   \\r\\n| project
  entityname, propertyname, propertypath, SampleEntityName,
  SamplePropertyName,SampleEntityNameRank, SamplePropertyRank;   \\r\\nlet
  sampleEntityNames = sampleNamesRanked | project entityname, propertyname,
  propertypath, IsEntityNameRandom = false, SampleEntityNames =
  SampleEntityName;  \\r\\nlet samplePropertyNames = sampleNamesRanked | project
  entityname, propertyname, propertypath, IsPropertyNameRandom = false,
  SamplePropertyNames = SamplePropertyName;  \\r\\nlet finalData =
  newFieldsPhase2 | join kind=leftouter sampleEntityNames on $left.entityname ==
  $right.entityname and $left.propertyname == $right.propertyname and
  $left.propertypath == $right.propertypath  \\r\\n| join kind=leftouter
  samplePropertyNames on $left.entityname == $right.entityname and
  $left.propertyname == $right.propertyname and $left.propertypath ==
  $right.propertypath  \\r\\n| project ProductCode = productCode, EntityName =
  strcat(\\\"\\\\\\\"\\\", entityname, \\\"\\\\\\\"\\\"), PropertyName =
  propertyname, SampleValue,PropertyPath = propertypath, OwnerAlias =
  \\\"DEFAULTOWNERALIAS\\\", IsEntityNameRandom = FALSE, IsPropertyNameRandom =
  false, SampleEntityNames,SamplePropertyNames, EntityCount, PropertyCount,
  EntityPercentage,
  PropertyPercentage,AbsolutePropertyCount,AbsolutePropertyPercentage,
  CatalogHashId = hash_sha256(strcat(productCode, entityname, propertyname,
  propertypath));  \\r\\nfinalData\\r\\n}\",\"inputParameters\":[{\"name\":\"st\
  artTime\",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\
  \"}]},{\"name\":\"GetComBinedDataFromEntities\",\"docstring\":\"Get catalog
  diff for specific entities\",\"body\":\"{\\r\\nlet entityNameCounts = res |
  summarize count() by entityname; \\r\\nlet combinedData = materialize(res |
  summarize PropertyCountPerEntityName = count(), SampleValue =
  take_any(Value)  by entityname, propertypath, propertyname    \\r\\n| project
  entityname, propertypath, propertyname,PropertyCountPerEntityName,
  SampleValue);   \\r\\nlet comBinedData2 = materialize(combinedData | join
  kind=leftouter entityNameCounts on $left.entityname ==
  $right.entityname  \\r\\n| project entityname, propertypath, propertyname,
  SampleValue, PropertyCountPerEntityName, EntityCount = count_); \\r\\nlet
  formatName = (name: string)  {    \\r\\n    let formatUUID =
  replace_regex(name,
  @\\\"[{(]?[0-9A-Fa-f]{8}[-]?([0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?\\\",
  \\\"    <UUID>\\\");    \\r\\n    let formatHEX = replace_regex(formatUUID,
  @\\\"0x([0-9a-fA-f]){8}\\\", \\\"<HEX>\\\");    \\r\\n     let formatHEX2 =
  replace_regex(formatHEX, @\\\"0x([0-9a-fA-f]){4}\\\",
  \\\"<HEX>\\\");    \\r\\n     replace_regex(formatHEX2,
  @\\\"([0-9])+(\\\\.*[0-9+])*\\\", \\\"<NUMBER>\\\");    \\r\\n };\\r\\nlet
  trimQuotation = (str: string)\\r\\n{\\r\\n   let trimedStart =
  trim_start(\\\"\\\\\\\"\\\", str);   \\r\\n   trim_end(\\\"\\\\\\\"\\\",
  trimedStart)   \\r\\n};\\r\\n comBinedData2    \\r\\n | extend  entityname =
  formatName(entityname), propertyname = formatName(propertyname),
  SampleEntityName = entityname, SamplePropertyName = propertyname    \\r\\n |
  project entityname=trimQuotation(entityname), propertyname =
  trimQuotation(propertyname), SampleValue = trimQuotation(SampleValue),
  propertypath, SampleEntityName = trimQuotation(SampleEntityName),
  SamplePropertyName = trimQuotation(SamplePropertyName), EntityCount,
  PropertyCountPerEntityName\\r\\n | summarize
  any(entityname,propertyname,SampleValue,propertypath,SampleEntityName,
  SamplePropertyName,EntityCount,PropertyCountPerEntityName) by entityname,
  propertyname, EntityCount, PropertyCountPerEntityName\\r\\n | project
  entityname,propertyname,SampleValue = any_SampleValue,propertypath=
  any_propertypath,SampleEntityName= any_SampleEntityName, SamplePropertyName =
  any_propertyname,EntityCount,PropertyCountPerEntityName\\r\\n}\",\"inputParam\
  eters\":[{\"name\":\"res\",\"columns\":[{\"name\":\"entityname\",\"cslType\":\
  \"string\",\"type\":\"System.String\",\"docstring\":\"\"},{\"name\":\"propert\
  ypath\",\"cslType\":\"string\",\"type\":\"System.String\",\"docstring\":\"\"}\
  ,{\"name\":\"propertyname\",\"cslType\":\"string\",\"type\":\"System.String\",\
  \"docstring\":\"\"},{\"name\":\"Value\",\"cslType\":\"string\",\"type\":\"Sys\
  tem.String\",\"docstring\":\"\"}]},{\"name\":\"productCode\",\"cslType\":\"st\
  ring\",\"type\":\"System.String\",\"docstring\":\"\"}]},{\"name\":\"GetComple\
  tenessDev\",\"docstring\":\"Compleness\",\"body\":\"{\\n let start
  =  bin(now(), 1h) - startTime;\\n let end = bin(now(), 1h) - startTime +
  1h;\\n cluster('ddtelvsraw').database('VS').RawEventsVS\\n| where
  AdvancedServerTimestampUtc >= start and AdvancedServerTimestampUtc < end\\n|
  where IsInternal == 1\\n| where TelemetryApiVersion startswith
  '16.4.56+3a6'\\nor TelemetryApiVersion startswith '16.4.60'\\nor
  TelemetryApiVersion startswith '16.4.55'\\n| where TelemetryApiVersion
  !startswith '16.4.50' and TelemetryApiVersion !startswith '16.4.52'\\n|
  summarize by EventId\\n| summarize cProd=count(), dummy=1\\n| join
  hint.strategy = shuffle
  kind=leftouter\\n(\\ncluster('ddtelvsrawedpdev.southcentralus').database(\\\"\
  VSDev\\\").RawEventsVS\\n| where AdvancedServerTimestampUtc >= start and
  AdvancedServerTimestampUtc < end\\n| where IsInternal == 1\\n| where
  TelemetryApiVersion startswith '16.4.56+3a6'\\nor TelemetryApiVersion
  startswith '16.4.60'\\nor TelemetryApiVersion startswith '16.4.55'\\n| where
  TelemetryApiVersion !startswith '16.4.50' and TelemetryApiVersion !startswith
  '16.4.52'\\n| summarize by EventId\\n| summarize cEDP=count() ,
  dummy=1\\n)\\non dummy\\n| project env=\\\"VSDev\\\", start, end, cEDP,
  cProd,  classifiedCompletenesspercent=cEDP/todouble(cProd)}\",\"inputParamete\
  rs\":[{\"name\":\"startTime\",\"cslType\":\"timespan\",\"type\":\"System.Time\
  Span\",\"docstring\":\"\"}]},{\"name\":\"GetCompletenessPPE\",\"docstring\":\
  \"Compleness\",\"body\":\"{\\n let start =  bin(now(), 1h) - startTime;\\n let
  end = bin(now(), 1h) - startTime + 1h;\\n
  cluster('ddtelvsraw').database('VS').RawEventsVS\\n| where
  AdvancedServerTimestampUtc >= start and AdvancedServerTimestampUtc < end\\n|
  where IsInternal == 1\\n| where TelemetryApiVersion startswith
  '16.4.56+3a6'\\nor TelemetryApiVersion startswith '16.4.60'\\nor
  TelemetryApiVersion startswith '16.4.55'\\n| where TelemetryApiVersion
  !startswith '16.4.50' and TelemetryApiVersion !startswith '16.4.52'\\n|
  summarize by EventId\\n| summarize cProd=count(), dummy=1\\n| join
  hint.strategy = shuffle
  kind=leftouter\\n(\\ncluster('ddtelvsrawedpppe.southcentralus').database(\\\"\
  VSPPE\\\").RawEventsVS\\n| where AdvancedServerTimestampUtc >= start and
  AdvancedServerTimestampUtc < end\\n| where IsInternal == 1\\n| where
  TelemetryApiVersion startswith '16.4.56+3a6'\\nor TelemetryApiVersion
  startswith '16.4.60'\\nor TelemetryApiVersion startswith '16.4.55'\\n| where
  TelemetryApiVersion !startswith '16.4.50' and TelemetryApiVersion !startswith
  '16.4.52'\\n| summarize by EventId\\n| summarize cEDP=count() ,
  dummy=1\\n)\\non dummy\\n| project env=\\\"VSPPE\\\", start, end, cEDP,
  cProd,  classifiedCompletenesspercent=cEDP/todouble(cProd)}\",\"inputParamete\
  rs\":[{\"name\":\"startTime\",\"cslType\":\"timespan\",\"type\":\"System.Time\
  Span\",\"docstring\":\"\"}]},{\"name\":\"GetCompletenessUncDev\",\"docstring\
  \":\"Compleness\",\"body\":\"{\\n let start =  bin(now(), 1h) - startTime;\\n
  let end = start + 1h;\\n
  cluster('ddtelvsraw').database('VS').RawEventsVSUnclassified\\n| where
  AdvancedServerTimestampUtc >= start and AdvancedServerTimestampUtc < end\\n|
  where IsInternal == 1\\n| where TelemetryApiVersion startswith
  '16.4.56+3a6'\\nor TelemetryApiVersion startswith '16.4.60'\\nor
  TelemetryApiVersion startswith '16.4.55'\\n| where TelemetryApiVersion
  !startswith '16.4.50' and TelemetryApiVersion !startswith '16.4.52'\\n|
  summarize by EventId\\n| summarize cProd=count(), dummy=1\\n| join
  kind=leftouter\\n(\\ncluster('ddtelvsrawedpdev.southcentralus').database(\\\"\
  VSDev\\\").RawEventsVSUnclassified\\n| where AdvancedServerTimestampUtc >=
  start and AdvancedServerTimestampUtc < end\\n| where IsInternal == 1\\n| where
  TelemetryApiVersion startswith '16.4.56+3a6'\\nor TelemetryApiVersion
  startswith '16.4.60'\\nor TelemetryApiVersion startswith '16.4.55'\\n| where
  TelemetryApiVersion !startswith '16.4.50' and TelemetryApiVersion !startswith
  '16.4.52'\\n| summarize by EventId\\n| summarize cEDP=count() ,
  dummy=1\\n)\\non dummy\\n| project env=\\\"VSDev\\\", start, end, cEDP,
  cProd,  unclassifiedCompletenesspercent=cEDP/todouble(cProd)\\n}\",\"inputPar\
  ameters\":[{\"name\":\"startTime\",\"cslType\":\"timespan\",\"type\":\"System\
  .TimeSpan\",\"docstring\":\"\"}]},{\"name\":\"GetCompletenessUncPPE\",\"docst\
  ring\":\"Compleness\",\"body\":\"{\\n let start =  bin(now(), 1h) -
  startTime;\\n let end = start + 1h;\\n
  cluster('ddtelvsraw').database('VS').RawEventsVSUnclassified\\n| where
  AdvancedServerTimestampUtc > start and AdvancedServerTimestampUtc < end\\n|
  where IsInternal == 1\\n| where TelemetryApiVersion startswith
  '16.4.56+3a6'\\nor TelemetryApiVersion startswith '16.4.60'\\nor
  TelemetryApiVersion startswith '16.4.55'\\n| where TelemetryApiVersion
  !startswith '16.4.50' and TelemetryApiVersion !startswith '16.4.52'\\n|
  summarize by EventId\\n| summarize cProd=count(), dummy=1\\n| join
  kind=leftouter\\n(\\ncluster('ddtelvsrawedpppe.southcentralus').database(\\\"\
  VSPPE\\\").RawEventsVSUnclassified\\n| where AdvancedServerTimestampUtc >
  start and AdvancedServerTimestampUtc < end\\n| where IsInternal == 1\\n| where
  TelemetryApiVersion startswith '16.4.56+3a6'\\nor TelemetryApiVersion
  startswith '16.4.60'\\nor TelemetryApiVersion startswith '16.4.55'\\n| where
  TelemetryApiVersion !startswith '16.4.50' and TelemetryApiVersion !startswith
  '16.4.52'\\n| summarize by EventId\\n| summarize cEDP=count() ,
  dummy=1\\n)\\non dummy\\n| project env=\\\"VSPPE\\\", start, end, cEDP,
  cProd,  unclassifiedCompletenesspercent=cEDP/todouble(cProd)}\",\"inputParame\
  ters\":[{\"name\":\"startTime\",\"cslType\":\"timespan\",\"type\":\"System.Ti\
  meSpan\",\"docstring\":\"\"}]},{\"name\":\"GetLatestCompleteness\",\"docstring\
  \":\"Compleness\",\"body\":\"{\\nGetCompletenessDev(0h)\\n|
  union\\nGetCompletenessDev(1h)\\n| union \\nGetCompletenessDev(2h)\\n| union
  \\nGetCompletenessDev(3h)\\n| union \\nGetCompletenessDev(4h)\\n| union
  \\nGetCompletenessDev(5h)\\n| union \\nGetCompletenessDev(6h)\\n| union
  \\nGetCompletenessDev(7h)\\n| union \\nGetCompletenessDev(8h)\\n| union
  \\nGetCompletenessDev(9h)\\n| union \\nGetCompletenessDev(10h)\\n| union
  \\nGetCompletenessDev(11h)\\n| union \\nGetCompletenessDev(12h)\\n| union
  \\nGetCompletenessDev(13h)\\n| union\\nGetCompletenessDev(14h)\\n| union
  \\nGetCompletenessDev(15h)\\n| union \\nGetCompletenessDev(16h)\\n| union
  \\nGetCompletenessDev(17h)\\n| union \\nGetCompletenessDev(18h)\\n| union
  \\nGetCompletenessDev(19h)\\n| union \\nGetCompletenessDev(20h)\\n| union
  \\nGetCompletenessDev(21h)\\n| union \\nGetCompletenessDev(22h)\\n| union
  \\nGetCompletenessDev(23h)\\n| union \\nGetCompletenessDev(24h)\\n| union
  \\nGetCompletenessPPE(0h)\\n| union\\nGetCompletenessPPE(1h)\\n| union
  \\nGetCompletenessPPE(2h)\\n| union \\nGetCompletenessPPE(3h)\\n| union
  \\nGetCompletenessPPE(4h)\\n| union \\nGetCompletenessPPE(5h)\\n| union
  \\nGetCompletenessPPE(6h)\\n| union \\nGetCompletenessPPE(7h)\\n| union
  \\nGetCompletenessPPE(8h)\\n| union \\nGetCompletenessPPE(9h)\\n| union
  \\nGetCompletenessPPE(10h)\\n| union \\nGetCompletenessPPE(11h)\\n| union
  \\nGetCompletenessPPE(12h)\\n| union \\nGetCompletenessPPE(13h)\\n|
  union\\nGetCompletenessPPE(14h)\\n| union \\nGetCompletenessPPE(15h)\\n| union
  \\nGetCompletenessPPE(16h)\\n| union \\nGetCompletenessPPE(17h)\\n| union
  \\nGetCompletenessPPE(18h)\\n| union \\nGetCompletenessPPE(19h)\\n| union
  \\nGetCompletenessPPE(20h)\\n| union \\nGetCompletenessPPE(21h)\\n| union
  \\nGetCompletenessPPE(22h)\\n| union \\nGetCompletenessPPE(23h)\\n| union
  \\nGetCompletenessPPE(24h)\\n|\\norder by start desc, env
  asc\\n}\",\"inputParameters\":[]},{\"name\":\"GetLatestUncCompleteness\",\"do\
  cstring\":\"Compleness\",\"body\":\"{\\nGetCompletenessUncDev(0h)\\n|
  union\\nGetCompletenessUncDev(1h)\\n| union \\nGetCompletenessUncDev(2h)\\n|
  union \\nGetCompletenessUncDev(3h)\\n| union \\nGetCompletenessUncDev(4h)\\n|
  union \\nGetCompletenessUncDev(5h)\\n| union \\nGetCompletenessUncDev(6h)\\n|
  union \\nGetCompletenessUncDev(7h)\\n| union \\nGetCompletenessUncDev(8h)\\n|
  union \\nGetCompletenessUncDev(9h)\\n| union \\nGetCompletenessUncDev(10h)\\n|
  union \\nGetCompletenessUncDev(11h)\\n| union
  \\nGetCompletenessUncDev(12h)\\n| union \\nGetCompletenessUncDev(13h)\\n|
  union\\nGetCompletenessUncDev(14h)\\n| union \\nGetCompletenessUncDev(15h)\\n|
  union \\nGetCompletenessUncDev(16h)\\n| union
  \\nGetCompletenessUncDev(17h)\\n| union \\nGetCompletenessUncDev(18h)\\n|
  union \\nGetCompletenessUncDev(19h)\\n| union
  \\nGetCompletenessUncDev(20h)\\n| union \\nGetCompletenessUncDev(21h)\\n|
  union \\nGetCompletenessUncDev(22h)\\n| union
  \\nGetCompletenessUncDev(23h)\\n| union \\nGetCompletenessUncDev(24h)\\n|
  union \\nGetCompletenessUncPPE(0h)\\n| union\\nGetCompletenessUncPPE(1h)\\n|
  union \\nGetCompletenessUncPPE(2h)\\n| union \\nGetCompletenessUncPPE(3h)\\n|
  union \\nGetCompletenessUncPPE(4h)\\n| union \\nGetCompletenessUncPPE(5h)\\n|
  union \\nGetCompletenessUncPPE(6h)\\n| union \\nGetCompletenessUncPPE(7h)\\n|
  union \\nGetCompletenessUncPPE(8h)\\n| union \\nGetCompletenessUncPPE(9h)\\n|
  union \\nGetCompletenessUncPPE(10h)\\n| union
  \\nGetCompletenessUncPPE(11h)\\n| union \\nGetCompletenessUncPPE(12h)\\n|union
  \\nGetCompletenessUncPPE(13h)\\n| union\\nGetCompletenessUncPPE(14h)\\n| union
  \\nGetCompletenessUncPPE(15h)\\n| union \\nGetCompletenessUncPPE(16h)\\n|
  union \\nGetCompletenessUncPPE(17h)\\n| union
  \\nGetCompletenessUncPPE(18h)\\n| union \\nGetCompletenessUncPPE(19h)\\n|
  union \\nGetCompletenessUncPPE(20h)\\n| union
  \\nGetCompletenessUncPPE(21h)\\n| union \\nGetCompletenessUncPPE(22h)\\n|
  union \\nGetCompletenessUncPPE(23h)\\n| union
  \\nGetCompletenessUncPPE(24h)\\n| order by start desc, env asc
  \\n}\",\"inputParameters\":[]},{\"name\":\"Automation_test_Steps\",\"docstring\
  \":\"test\",\"body\":\"{\\r\\ndatatable(Step:string, Description:string,
  Parameters:dynamic)\\r\\n[\\r\\n    \\\"NewAction\\\", \\\"Action
  description\\\",
  dynamic(null),\\r\\n]\\r\\n}\",\"inputParameters\":[]},{\"name\":\"Automation\
  _test_Transitions\",\"docstring\":\"test\",\"body\":\"{\\r\\ndatatable(Step:s\
  tring, NextStep:string)\\r\\n[\\r\\n    \\\"NewAction\\\",
  \\\"NewAction2\\\",\\r\\n]\\r\\n}\",\"inputParameters\":[]},{\"name\":\"DbgHR\
  esultToError\",\"docstring\":\"Converts an HResult value into the
  corresponding error text\",\"body\":\"{\\r\\n    let HResult = tohex(hr,
  8);\\r\\n    strcat(\\r\\n        case (\\r\\n            HResult ==
  \\\"00000000\\\", \\\"Success!\\\",\\r\\n            HResult ==
  \\\"80004003\\\", \\\"Null ref\\\",\\r\\n            HResult ==
  \\\"80040d42\\\", \\\"EnC not supported\\\",\\r\\n            HResult ==
  \\\"80040d43\\\", \\\"SuppressIldasmAttribute
  found\\\",\\r\\n            HResult == \\\"8007000b\\\", \\\"Bad image
  format\\\",\\r\\n            HResult == \\\"8007000e\\\", \\\"Out of
  memory\\\",\\r\\n            HResult == \\\"80070057\\\", \\\"Invalid
  argument\\\",\\r\\n            HResult == \\\"80131040\\\", \\\"Assembly
  manifest does not match reference\\\",\\r\\n            HResult ==
  \\\"80131047\\\", \\\"Invalid assembly name or
  codebase\\\",\\r\\n            HResult == \\\"80131500\\\", \\\"Generic
  exception\\\",\\r\\n            HResult == \\\"80131502\\\", \\\"Argument out
  of range\\\",\\r\\n            HResult == \\\"80131509\\\", \\\"Invalid
  operation\\\",\\r\\n            HResult == \\\"8013153b\\\", \\\"Operation
  cancelled\\\",\\r\\n            HResult == \\\"80131622\\\", \\\"Object
  disposed\\\",\\r\\n            HResult == \\\"80131c35\\\", \\\"Assembly
  missing metadata\\\",\\r\\n            HResult == \\\"8ede0009\\\", \\\"XAPI
  creator required\\\",\\r\\n            HResult == \\\"8ede0012\\\", \\\"XAPI
  remote closed\\\",\\r\\n            HResult == \\\"8ede0015\\\", \\\"XAPI
  object already exists\\\",\\r\\n            HResult == \\\"8ede0018\\\",
  \\\"XAPI data item not found\\\",\\r\\n            HResult ==
  \\\"92330010\\\", \\\"Invalid memory address\\\",\\r\\n            HResult ==
  \\\"92330093\\\", \\\"No debug
  info\\\",\\r\\n            \\\"Unknown\\\"\\r\\n        ),\\r\\n        \\\"
  (0x\\\", HResult,
  \\\")\\\")\\r\\n}\",\"inputParameters\":[{\"name\":\"hr\",\"cslType\":\"int\",\
  \"type\":\"System.Int32\",\"docstring\":\"\"}]}]},{\"name\":\"LookupTables\",\
  \"majorVersion\":12971,\"minorVersion\":0,\"tables\":[],\"functions\":[{\"name\
  \":\"VS_Telemetry_Releases_Func\",\"body\":\"{
  \\r\\n     cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").VS_\
  Telemetry_Releases\\r\\n    | extend UpdateDate = iif(isempty(UpdateDate),
  datetime(1/1/1900), UpdateDate) \\r\\n    | summarize
  argmax(UpdateDate,\\r\\n        ChannelShortName,     \\r\\n        ChannelId\
  ,     \\r\\n        VsVersion,     \\r\\n        VsBranch,\\r\\n        Build\
  Date, \\r\\n        ReleaseDate,
  \\r\\n        ReleaseScope,   \\r\\n        WillowInstallerVersion,     \\r\\\
  n        ManifestVersion,     \\r\\n        ReleaseGroupLabel,     \\r\\n        \
  ReleaseName,\\t   \\r\\n        BuildNumberMajorVersion,     \\r\\n        Pr\
  oductMilestone,
  \\r\\n        ProductDisplayVersion,\\r\\n        ProductSemanticVersion,\\r\
  \\n        RoadmapWitId) by ChannelManifestId, ProductManifestId\\r\\n    |
  extend ChannelShortName = max_UpdateDate_ChannelShortName\\r\\n    | extend
  ChannelId = max_UpdateDate_ChannelId\\r\\n    | extend VsVersion =
  max_UpdateDate_VsVersion\\r\\n    | extend VsBranch =
  max_UpdateDate_VsBranch\\r\\n    | extend BuildDate =
  max_UpdateDate_BuildDate\\r\\n    | extend ReleaseDate =
  max_UpdateDate_ReleaseDate\\r\\n    | extend ReleaseScope =
  max_UpdateDate_ReleaseScope\\r\\n    | extend WillowInstallerVersion =
  max_UpdateDate_WillowInstallerVersion\\r\\n    | extend ManifestVersion =
  max_UpdateDate_ManifestVersion\\r\\n    | extend ReleaseGroupLabel =
  max_UpdateDate_ReleaseGroupLabel\\r\\n    | extend ReleaseName =
  max_UpdateDate_ReleaseName\\r\\n    | extend BuildNumberMajorVersion =
  max_UpdateDate_BuildNumberMajorVersion\\r\\n    | extend ProductMilestone =
  max_UpdateDate_ProductMilestone\\r\\n    | extend ProductDisplayVersion =
  max_UpdateDate_ProductDisplayVersion \\r\\n    | extend ProductSemanticVersion
  = max_UpdateDate_ProductSemanticVersion\\r\\n    | extend RoadmapWitId =
  max_UpdateDate_RoadmapWitId  \\r\\n    | extend UpdateDate =
  max_UpdateDate    \\r\\n    | project \\r\\n       ChannelManifestId,
  \\r\\n       ProductManifestId,
  \\r\\n       ChannelShortName,  \\r\\n       ChannelId,
  \\r\\n       VsVersion, \\r\\n       VsBranch, \\r\\n       BuildDate,
  \\r\\n       ReleaseDate, \\r\\n       ReleaseScope,
  \\r\\n       WillowInstallerVersion, \\r\\n       ManifestVersion,
  \\r\\n       ReleaseGroupLabel,
  \\r\\n       ReleaseName,\\t   \\r\\n       ProductDisplayVersion,\\r\\n       \
  BuildNumberMajorVersion,
  \\r\\n       ProductMilestone,\\r\\n       ProductSemanticVersion,\\r\\n       \
  UpdateDate,\\r\\n       RoadmapWitId\\r\\n
  }\",\"inputParameters\":[]}]}]},\"clusterType\":\"Engine\"},\"prefixForTables\
  InAClusterDB:https://ddtelvsraw.kusto.windows.net:LookupTables\":{\"name\":\"\
  LookupTables\",\"majorVersion\":12971,\"minorVersion\":0,\"tables\":[],\"func\
  tions\":[{\"name\":\"VS_Telemetry_Releases_Func\",\"body\":\"{
  \\r\\n     cluster(\\\"Ddtelinsights\\\").database(\\\"DDTelInsights\\\").VS_\
  Telemetry_Releases\\r\\n    | extend UpdateDate = iif(isempty(UpdateDate),
  datetime(1/1/1900), UpdateDate) \\r\\n    | summarize
  argmax(UpdateDate,\\r\\n        ChannelShortName,     \\r\\n        ChannelId\
  ,     \\r\\n        VsVersion,     \\r\\n        VsBranch,\\r\\n        Build\
  Date, \\r\\n        ReleaseDate,
  \\r\\n        ReleaseScope,   \\r\\n        WillowInstallerVersion,     \\r\\\
  n        ManifestVersion,     \\r\\n        ReleaseGroupLabel,     \\r\\n        \
  ReleaseName,\\t   \\r\\n        BuildNumberMajorVersion,     \\r\\n        Pr\
  oductMilestone,
  \\r\\n        ProductDisplayVersion,\\r\\n        ProductSemanticVersion,\\r\
  \\n        RoadmapWitId) by ChannelManifestId, ProductManifestId\\r\\n    |
  extend ChannelShortName = max_UpdateDate_ChannelShortName\\r\\n    | extend
  ChannelId = max_UpdateDate_ChannelId\\r\\n    | extend VsVersion =
  max_UpdateDate_VsVersion\\r\\n    | extend VsBranch =
  max_UpdateDate_VsBranch\\r\\n    | extend BuildDate =
  max_UpdateDate_BuildDate\\r\\n    | extend ReleaseDate =
  max_UpdateDate_ReleaseDate\\r\\n    | extend ReleaseScope =
  max_UpdateDate_ReleaseScope\\r\\n    | extend WillowInstallerVersion =
  max_UpdateDate_WillowInstallerVersion\\r\\n    | extend ManifestVersion =
  max_UpdateDate_ManifestVersion\\r\\n    | extend ReleaseGroupLabel =
  max_UpdateDate_ReleaseGroupLabel\\r\\n    | extend ReleaseName =
  max_UpdateDate_ReleaseName\\r\\n    | extend BuildNumberMajorVersion =
  max_UpdateDate_BuildNumberMajorVersion\\r\\n    | extend ProductMilestone =
  max_UpdateDate_ProductMilestone\\r\\n    | extend ProductDisplayVersion =
  max_UpdateDate_ProductDisplayVersion \\r\\n    | extend ProductSemanticVersion
  = max_UpdateDate_ProductSemanticVersion\\r\\n    | extend RoadmapWitId =
  max_UpdateDate_RoadmapWitId  \\r\\n    | extend UpdateDate =
  max_UpdateDate    \\r\\n    | project \\r\\n       ChannelManifestId,
  \\r\\n       ProductManifestId,
  \\r\\n       ChannelShortName,  \\r\\n       ChannelId,
  \\r\\n       VsVersion, \\r\\n       VsBranch, \\r\\n       BuildDate,
  \\r\\n       ReleaseDate, \\r\\n       ReleaseScope,
  \\r\\n       WillowInstallerVersion, \\r\\n       ManifestVersion,
  \\r\\n       ReleaseGroupLabel,
  \\r\\n       ReleaseName,\\t   \\r\\n       ProductDisplayVersion,\\r\\n       \
  BuildNumberMajorVersion,
  \\r\\n       ProductMilestone,\\r\\n       ProductSemanticVersion,\\r\\n       \
  UpdateDate,\\r\\n       RoadmapWitId\\r\\n
  }\",\"inputParameters\":[]}]},\"CACHED_KUSTO-CONNECTIONS\":[{\"cluster\":\"ht\
  tps://ddtelvsraw.kusto.windows.net\",\"displayName\":\"ddtelvsraw\",\"id\":\"\
  https://ddtelvsraw.kusto.windows.net\",\"type\":\"azAuth\"}]}"
eamodio.gitlens: '{"gitlens:views:welcome:visible":true,"gitlens:synced:version":"15.0.3","gitlens:premium:subscription":{"v":1,"data":{"plan":{"actual":{"id":"free","name":"GitKraken","bundle":false,"cancelled":false,"trialReactivationCount":0,"startedOn":"2023-05-03T18:17:41.269Z"},"effective":{"id":"free","name":"GitKraken","bundle":false,"cancelled":false,"trialReactivationCount":0,"startedOn":"2023-05-03T18:17:41.269Z"}},"state":2,"previewTrial":{"startedOn":"2024-01-27T01:31:47.246Z","expiresOn":"2024-01-30T07:59:59.999Z"}}},"gitlens:version":"15.0.3","gitlens:plus:migratedAuthentication":true,"gitlens:repoVisibility":[["c:/Users/vivlim/git/vivlim_notebooks",{"visibility":"private","timestamp":1689982875085,"remotesHash":"devdiv.visualstudio.com/DefaultCollection/Personal/_git/vivlim_notebooks"}],["c:/Users/vivlim/git/vs-green-intellicode",{"visibility":"private","timestamp":1694673419296,"remotesHash":"dev.azure.com/devdiv/DevDiv/_git/vs-green-intellicode"}],["c:/Users/vivlim/git/Pythia",{"visibility":"private","timestamp":1694673851435,"remotesHash":"devdiv.visualstudio.com/DefaultCollection/DevDiv/_git/Pythia"}],["c:/Users/vivlim/git/vs-green",{"visibility":"private","timestamp":1695090895264,"remotesHash":"dev.azure.com/devdiv/DevDiv/_git/vs-green"}],["c:/Users/vivlim/git/BlingFire",{"visibility":"public","timestamp":1695762755183,"remotesHash":"github.com/leti367/BlingFire"}],["c:/Users/vivlim/git/IntelliCode-VS",{"visibility":"private","timestamp":1698868050639,"remotesHash":"devdiv.visualstudio.com/DefaultCollection/DevDiv/_git/IntelliCode-VS"}],["c:/Users/vivlim/git/copilot-vs",{"visibility":"private","timestamp":1700172536410,"remotesHash":"github.com/github/copilot-vs"}],["c:/Users/vivlim/git/conversations-2",{"visibility":"private","timestamp":1700603559740,"remotesHash":"devdiv.visualstudio.com/DefaultCollection/DevDiv/_git/VisualStudio.Conversations"}],["c:/Users/vivlim/git/VisualStudio.Conversations",{"visibility":"private","timestamp":1704230842580,"remotesHash":"devdiv.visualstudio.com/DefaultCollection/DevDiv/_git/VisualStudio.Conversations"}],["c:/Users/vivlim/git/vivlim",{"visibility":"private","timestamp":1705034941792,"remotesHash":"dev.azure.com/devdiv/Personal/_git/vivlim"}],["d:/vivlim/vs/VisualStudio.Conversations",{"visibility":"private","timestamp":1706310589620,"remotesHash":"devdiv.visualstudio.com/DefaultCollection/DevDiv/_git/VisualStudio.Conversations"}],["c:/Users/vivlim/git_nondevdrive/IntelliCode-VS",{"visibility":"private","timestamp":1706313014764,"remotesHash":"devdiv.visualstudio.com/DefaultCollection/DevDiv/_git/IntelliCode-VS"}],["d:/IntelliCode-VS",{"visibility":"private","timestamp":1706313030731,"remotesHash":"devdiv.visualstudio.com/DefaultCollection/DevDiv/_git/IntelliCode-VS"}],["d:/VSCopilot%20Internal%20Tools",{"visibility":"private","timestamp":1706320338422,"remotesHash":"dev.azure.com/devdiv/InternalTools/_git/VSCopilot.InternalTools"}],["d:/VisualStudio.Conversations/test/TestCases/Assets/OrchardCore",{"visibility":"public","timestamp":1706320338987,"remotesHash":"github.com/OrchardCMS/OrchardCore"}],["d:/VisualStudio.Conversations/test/TestCases/Assets/CMake",{"visibility":"public","timestamp":1707262902934,"remotesHash":"github.com/Kitware/CMake"}],["d:/VisualStudio.Conversations/test/TestCases/Assets/endless-sky",{"visibility":"public","timestamp":1707262902996,"remotesHash":"github.com/endless-sky/endless-sky"}],["d:/conversations-2",{"visibility":"public","timestamp":1707441534406,"remotesHash":"github.com/AArnott/Library.Template"}],["d:/conversations-2/test/TestCases/Assets/OrchardCore",{"visibility":"public","timestamp":1707441537674,"remotesHash":"github.com/OrchardCMS/OrchardCore"}],["d:/conversations-2/test/TestCases/Assets/CMake",{"visibility":"public","timestamp":1707441537812,"remotesHash":"github.com/Kitware/CMake"}],["d:/conversations-2/test/TestCases/Assets/endless-sky",{"visibility":"public","timestamp":1707441537830,"remotesHash":"github.com/endless-sky/endless-sky"}],["d:/conversations-2/test/TestCases/Assets/vs-validation",{"visibility":"public","timestamp":1707441537883,"remotesHash":"github.com/microsoft/vs-validation"}],["d:/VisualStudio.Conversations/test/TestCases/Assets/PowerToys",{"visibility":"public","timestamp":1707768115018,"remotesHash":"github.com/microsoft/PowerToys"}],["d:/VisualStudio.Conversations/test/TestCases/Assets/blazor-samples",{"visibility":"public","timestamp":1707768118666,"remotesHash":"github.com/dotnet/blazor-samples"}],["d:/VisualStudio.Conversations/test/TestCases/Assets/command-line-api",{"visibility":"public","timestamp":1707768120556,"remotesHash":"github.com/dotnet/command-line-api"}],["d:/VisualStudio.Conversations/test/TestCases/Assets/dotnet-try",{"visibility":"public","timestamp":1707768120622,"remotesHash":"github.com/dotnet/try"}],["d:/VisualStudio.Conversations/test/TestCases/Assets/eShopOnWeb",{"visibility":"public","timestamp":1707768123069,"remotesHash":"github.com/dotnet-architecture/eShopOnWeb"}],["d:/VisualStudio.Conversations/test/TestCases/Assets/vs-validation",{"visibility":"public","timestamp":1707768123070,"remotesHash":"github.com/microsoft/vs-validation"}],["d:/vs-green-intellicode",{"visibility":"private","timestamp":1709082254556,"remotesHash":"dev.azure.com/devdiv/DevDiv/_git/vs-green-intellicode"}],["d:/msvc",{"visibility":"private","timestamp":1709097178435,"remotesHash":"dev.azure.com/devdiv/DevDiv/_git/msvc"}],["d:/vivlim",{"visibility":"private","timestamp":1709150478903,"remotesHash":"dev.azure.com/devdiv/Personal/_git/vivlim"}],["d:/vivlim_notebooks",{"visibility":"private","timestamp":1709286416886,"remotesHash":"devdiv.visualstudio.com/DefaultCollection/Personal/_git/vivlim_notebooks"}],["d:/Pythia",{"visibility":"private","timestamp":1709681078845,"remotesHash":"devdiv.visualstudio.com/DefaultCollection/DevDiv/_git/Pythia"}],["d:/Microsoft.VisualStudio.Internal.MicroBuild",{"visibility":"private","timestamp":1709768916052,"remotesHash":"dev.azure.com/devdiv/DevDiv/_git/Microsoft.VisualStudio.Internal.MicroBuild"}],["d:/vs-green-server",{"visibility":"private","timestamp":1709769298858,"remotesHash":"devdiv.visualstudio.com/DefaultCollection/DevDiv/_git/vs-green-server"}],["d:/Library.Template",{"visibility":"public","timestamp":1709854369168,"remotesHash":"github.com/AArnott/Library.Template"}],["d:/PythiaCompose",{"visibility":"private","timestamp":1709865245528,"remotesHash":"devdiv.visualstudio.com/DefaultCollection/DevDiv/_git/PythiaCompose"}],["d:/git/PythiaCompose",{"visibility":"private","timestamp":1709866020834,"remotesHash":"devdiv.visualstudio.com/DefaultCollection/DevDiv/_git/PythiaCompose"}],["d:/GlazeWM",{"visibility":"public","timestamp":1709868712634,"remotesHash":"github.com/glazerdesktop/GlazeWM"}],["d:/git/vs-green-intellicode/repos/IntelliCode-VS",{"visibility":"private","timestamp":1709941315787,"remotesHash":"devdiv.visualstudio.com/DefaultCollection/DevDiv/_git/IntelliCode-VS"}],["d:/git/vs-green-intellicode/repos/Pythia",{"visibility":"private","timestamp":1709941325737,"remotesHash":"devdiv.visualstudio.com/DefaultCollection/DevDiv/_git/Pythia"}],["d:/git/vs-green-intellicode/repos/PythiaCompose",{"visibility":"private","timestamp":1709941333303,"remotesHash":"devdiv.visualstudio.com/DefaultCollection/DevDiv/_git/PythiaCompose"}],["d:/git/vs-green-intellicode/e2e/repos/IntelliCode-VS",{"visibility":"private","timestamp":1709968295971,"remotesHash":"devdiv.visualstudio.com/DefaultCollection/DevDiv/_git/IntelliCode-VS"}],["d:/git/vs-green-intellicode/e2e/repos/Pythia",{"visibility":"private","timestamp":1709968323630,"remotesHash":"devdiv.visualstudio.com/DefaultCollection/DevDiv/_git/Pythia"}],["d:/git/vs-green-intellicode-2",{"visibility":"private","timestamp":1710292200255,"remotesHash":"dev.azure.com/devdiv/DevDiv/_git/vs-green-intellicode"}],["d:/vs-streamjsonrpc",{"visibility":"public","timestamp":1710455856371,"remotesHash":"github.com/microsoft/vs-streamjsonrpc"}],["d:/git/intellicode-docs",{"visibility":"public","timestamp":1710530527300,"remotesHash":"github.com/MicrosoftDocs/intellicode"}],["d:/roslyn",{"visibility":"public","timestamp":1710809598294,"remotesHash":"github.com/dotnet/roslyn"}],["c:/Users/vivlim/scoop/buckets/extras",{"visibility":"public","timestamp":1711138993876,"remotesHash":"github.com/ScoopInstaller/Extras"}],["d:/git/vscode-vsce",{"visibility":"public","timestamp":1711517271767,"remotesHash":"github.com/vivlimmsft/vscode-vsce"}],["d:/git/lazygit-for-vscode",{"visibility":"public","timestamp":1711572716420,"remotesHash":"github.com/vivlim/lazygit-for-vscode"}],["d:/git/2048ish",{"visibility":"public","timestamp":1711579189815,"remotesHash":"github.com/vivlimmsft/2048ish"}],["d:/DeepMergeCore",{"visibility":"private","timestamp":1711693918719,"remotesHash":"devdiv.visualstudio.com/DefaultCollection/InternalTools/_git/DeepMergeCore"}],["c:/Users/vivlim/git/DeepMergeCore",{"visibility":"private","timestamp":1712189233040,"remotesHash":"devdiv.visualstudio.com/DefaultCollection/InternalTools/_git/DeepMergeCore"}],["d:/git/copilot-log-viewer",{"visibility":"private","timestamp":1713564685664,"remotesHash":"dev.azure.com/devdiv/DevDiv/_git/copilot-log-viewer"}],["d:/conversations-3",{"visibility":"public","timestamp":1714169939997,"remotesHash":"github.com/AArnott/Library.Template"}],["d:/IntelliCode-VS2",{"visibility":"private","timestamp":1714428220991,"remotesHash":"devdiv.visualstudio.com/DefaultCollection/DevDiv/_git/IntelliCode-VS"}],["d:/git/vs-green-intellicode",{"visibility":"private","timestamp":1714443543249,"remotesHash":"dev.azure.com/devdiv/DevDiv/_git/vs-green-intellicode"}],["d:/git/vs-green-intellicode/e2e/repos/PythiaCompose",{"visibility":"private","timestamp":1714443661623,"remotesHash":"devdiv.visualstudio.com/DefaultCollection/DevDiv/_git/PythiaCompose"}],["c:/Users/vivlim/git/DeepPrompt-RAG-VS",{"visibility":"private","timestamp":1714451001670,"remotesHash":"devdiv.visualstudio.com/DefaultCollection/DevDiv/_git/DeepPrompt-RAG-VS"}],["d:/vs-green",{"visibility":"private","timestamp":1714505421295,"remotesHash":"dev.azure.com/devdiv/DevDiv/_git/vs-green"}],["d:/IntelliCode-VSCode",{"visibility":"private","timestamp":1714514909528,"remotesHash":"devdiv.visualstudio.com/DefaultCollection/DevDiv/_git/IntelliCode-VSCode"}],["d:/git/vivlim",{"visibility":"private","timestamp":1714778910013,"remotesHash":"dev.azure.com/devdiv/Personal/_git/vivlim"}],["d:/conversations-3/test/TestCases/Assets/PowerToys",{"visibility":"public","timestamp":1715660499486,"remotesHash":"github.com/microsoft/PowerToys"}],["d:/IntelliCode-VS3",{"visibility":"private","timestamp":1715990214634,"remotesHash":"devdiv.visualstudio.com/DefaultCollection/DevDiv/_git/IntelliCode-VS"}]],"gitlens:usages":{"lineHistoryView:shown":{"count":18,"firstUsedAt":1683164104064,"lastUsedAt":1710556659735},"workspaceView:shown":{"count":1,"firstUsedAt":1691695700059,"lastUsedAt":1700708946368},"fileHistoryView:shown":{"count":24,"firstUsedAt":1691698836260,"lastUsedAt":1715990375286},"searchAndCompareView:shown":{"count":21,"firstUsedAt":1691698836260,"lastUsedAt":1715990375287},"commitsView:shown":{"count":46,"firstUsedAt":1692317824062,"lastUsedAt":1715993064447},"graphView:shown":{"count":0,"firstUsedAt":1706319352925,"lastUsedAt":1706319352925},"commitDetailsView:shown":{"count":2,"firstUsedAt":1706319352936,"lastUsedAt":1710459338371},"timelineView:shown":{"count":1,"firstUsedAt":1707427756672,"lastUsedAt":1710459338382},"stashesView:shown":{"count":20,"firstUsedAt":1709778705059,"lastUsedAt":1715211942213},"timelineWebview:shown":{"count":1,"firstUsedAt":1710459322418,"lastUsedAt":1710459322467}}}'
egomobile.vscode-powertools: '{"vscptLastKnownVersion":"0.67.4","egoPTKnownApps":{"apps":["data-url-converter","password-generator"],"lastCheck":"2024-05-20T00:00:00.000Z","store":"https://egomobile.github.io/vscode-powertools/apps/store.json"}}'
everettjf.filter-line: '{"history":{"inputStr":["CSharpCodeChunkSourceService I]
  Finished","CSharpCodeChunkSourceService I] Number of"]}}'
GitHub.copilot: '{"installedVersion":"1.194.885"}'
GitHub.copilot-chat: '{"VSCode.ABExp.FeatureData":{"features":["account-aa","config.editor.experimental.asyncTokenization","config.python.analysis.addImport.heuristics","config.python.analysis.perfReporting","copilotchat.notebookPackages","copilotchat.notebookPriorities","copilotchat.renameSuggestionsDelayBeforeFetch","copilotchat.summarizedDocument.useScoreFunctioncf","copilotchat.useCodeSearch","livesharecontinuousaa","portForwardingServiceEnabled-development","portForwardingServiceEnabled-production","portForwardingServiceEnabled-staging","shouldUseGrpcService","testtv"],"assignmentContext":"vsliv368:30146709;vspor879:30202332;vspor708:30202333;vspor363:30204092;tftest:31042121;vsaa593:30376534;c4g48928:30535728;asynctok:30898717;c771b703:30959264;pythonait:30973460;01bff139:31013167;pythonprt:31036556;impr_priority:31052045;26j00206:31048877;","configs":[{"Id":"vscode","Parameters":{"account-aa":true,"config.editor.experimental.asyncTokenization":true,"config.python.analysis.addImport.heuristics":true,"config.python.analysis.perfReporting":true,"copilotchat.notebookPackages":true,"copilotchat.notebookPriorities":true,"copilotchat.renameSuggestionsDelayBeforeFetch":350,"copilotchat.summarizedDocument.useScoreFunction":false,"copilotchat.useCodeSearch":true,"livesharecontinuousaa":true,"portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true,"testtv":true}}]},"commandEmbeddings-version-remote":"1711239040574","commandEmbeddings-version":"1.88","settingEmbeddings-version-remote":"1711239050725","settingEmbeddings-version":"1.88"}'
ms-azure-devops.azure-pipelines: '{"doNotAskAgain1ESPTSchema":true}'
ms-azuretools.vscode-azureresourcegroups: '{"VSCode.ABExp.FeatureData":{"features":["account-aa","config.editor.experimental.asyncTokenization","config.python.analysis.addImport.heuristics","config.python.analysis.perfReportingcf","config.typescript.tsserver.experimental.useVsCodeWatchercf","copilotchat.renameSuggestionsDelayBeforeFetch","copilotchat.summarizedDocument.useScoreFunctioncf","CppTools1","livesharecontinuousaa","mindaroBinariesVersion","portForwardingServiceEnabled-development","portForwardingServiceEnabled-production","portForwardingServiceEnabled-staging","shouldUseGrpcService","testtv"],"assignmentContext":"vsliv368:30146709;vspor879:30202332;vspor708:30202333;vspor363:30204092;tftest:31042121;binariesv615:30325510;vsaa593:30376534;c4g48928:30535728;asynctok:30898717;cppperfnew:31000557;pythonait:31006305;01bff139:31013167;fchga941:31046352;pythonprc:31047982;26j00206:31048877;","configs":[{"Id":"vscode","Parameters":{"account-aa":true,"config.editor.experimental.asyncTokenization":true,"config.python.analysis.addImport.heuristics":true,"config.python.analysis.perfReporting":false,"config.typescript.tsserver.experimental.useVsCodeWatcher":false,"copilotchat.renameSuggestionsDelayBeforeFetch":350,"copilotchat.summarizedDocument.useScoreFunction":false,"CppTools1":true,"livesharecontinuousaa":true,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true,"testtv":true}}]}}'
ms-azuretools.vscode-docker: '{"VSCode.ABExp.FeatureData":{"features":["account-aa","config.editor.experimental.asyncTokenization","copilotchat.renameSuggestionsDelayBeforeFetch","livesharecontinuousaa","mindaroBinariesVersion","portForwardingServiceEnabled-development","portForwardingServiceEnabled-production","portForwardingServiceEnabled-staging","shouldUseGrpcService","vscode-docker.aatest"],"assignmentContext":"vsliv368:30146709;vscode-docker_aaflight:30153983;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593:30376534;c4g48928:30535728;asynctok:30898717;01bff139:31013167;","configs":[{"Id":"vscode","Parameters":{"account-aa":true,"config.editor.experimental.asyncTokenization":true,"copilotchat.renameSuggestionsDelayBeforeFetch":350,"livesharecontinuousaa":true,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true,"vscode-docker.aatest":true}}]},"isRegistryMigrated":true,"vscode-docker.activity.overallnoedit":{"lastSession":1714505413170,"currentMonthSessions":3,"totalSessions":13},"vscode-docker.activity.overall":{"lastSession":1714505414556,"currentMonthSessions":3,"totalSessions":13}}'
ms-dotnettools.vscode-dotnet-runtime: "{\"releases\":\"{\\r\\n    \\\"$schema\\\
  \":
  \\\"https://json.schemastore.org/dotnet-releases-index.json\\\",\\r\\n    \\\
  \"releases-index\\\": [\\r\\n      {\\r\\n            \\\"channel-version\\\":
  \\\"8.0\\\",\\r\\n            \\\"latest-release\\\":
  \\\"8.0.0-preview.7\\\",\\r\\n            \\\"latest-release-date\\\":
  \\\"2023-08-08\\\",\\r\\n            \\\"security\\\":
  false,\\r\\n            \\\"latest-runtime\\\":
  \\\"8.0.0-preview.7.23375.6\\\",\\r\\n            \\\"latest-sdk\\\":
  \\\"8.0.100-preview.7.23376.3\\\",\\r\\n            \\\"product\\\":
  \\\".NET\\\",\\r\\n            \\\"release-type\\\" :
  \\\"lts\\\",\\r\\n            \\\"support-phase\\\":
  \\\"preview\\\",\\r\\n            \\\"eol-date\\\":
  null,\\r\\n            \\\"releases.json\\\":
  \\\"https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/8.0/relea\
  ses.json\\\"\\r\\n        },\\r\\n          {\\r\\n            \\\"channel-ve\
  rsion\\\": \\\"7.0\\\",\\r\\n            \\\"latest-release\\\":
  \\\"7.0.10\\\",\\r\\n            \\\"latest-release-date\\\":
  \\\"2023-08-08\\\",\\r\\n            \\\"security\\\":
  true,\\r\\n            \\\"latest-runtime\\\":
  \\\"7.0.10\\\",\\r\\n            \\\"latest-sdk\\\":
  \\\"7.0.400\\\",\\r\\n            \\\"product\\\":
  \\\".NET\\\",\\r\\n            \\\"release-type\\\" :
  \\\"sts\\\",\\r\\n            \\\"support-phase\\\":
  \\\"active\\\",\\r\\n            \\\"eol-date\\\":
  \\\"2024-05-24\\\",\\r\\n            \\\"releases.json\\\":
  \\\"https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/7.0/relea\
  ses.json\\\"\\r\\n        },\\r\\n        {\\r\\n            \\\"channel-vers\
  ion\\\": \\\"6.0\\\",\\r\\n            \\\"latest-release\\\":
  \\\"6.0.21\\\",\\r\\n            \\\"latest-release-date\\\":
  \\\"2023-08-08\\\",\\r\\n            \\\"security\\\":
  true,\\r\\n            \\\"latest-runtime\\\":
  \\\"6.0.21\\\",\\r\\n            \\\"latest-sdk\\\":
  \\\"6.0.413\\\",\\r\\n            \\\"product\\\":
  \\\".NET\\\",\\r\\n            \\\"release-type\\\" :
  \\\"lts\\\",\\r\\n            \\\"support-phase\\\":
  \\\"active\\\",\\r\\n            \\\"eol-date\\\":
  \\\"2024-11-12\\\",\\r\\n            \\\"releases.json\\\":
  \\\"https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/6.0/relea\
  ses.json\\\"\\r\\n        },\\r\\n        {\\r\\n            \\\"channel-vers\
  ion\\\": \\\"5.0\\\",\\r\\n            \\\"latest-release\\\":
  \\\"5.0.17\\\",\\r\\n            \\\"latest-release-date\\\":
  \\\"2022-05-10\\\",\\r\\n            \\\"security\\\":
  true,\\r\\n            \\\"latest-runtime\\\":
  \\\"5.0.17\\\",\\r\\n            \\\"latest-sdk\\\":
  \\\"5.0.408\\\",\\r\\n            \\\"product\\\":
  \\\".NET\\\",\\r\\n            \\\"release-type\\\" :
  \\\"sts\\\",\\r\\n            \\\"support-phase\\\":
  \\\"eol\\\",\\r\\n            \\\"eol-date\\\":\\\"2022-05-10\\\",\\r\\n            \
  \\\"releases.json\\\":
  \\\"https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/5.0/relea\
  ses.json\\\"\\r\\n        },\\r\\n        {\\r\\n            \\\"channel-vers\
  ion\\\": \\\"3.1\\\",\\r\\n            \\\"latest-release\\\":
  \\\"3.1.32\\\",\\r\\n            \\\"latest-release-date\\\":
  \\\"2022-12-13\\\",\\r\\n            \\\"security\\\":
  true,\\r\\n            \\\"latest-runtime\\\":
  \\\"3.1.32\\\",\\r\\n            \\\"latest-sdk\\\":
  \\\"3.1.426\\\",\\r\\n            \\\"product\\\": \\\".NET
  Core\\\",\\r\\n            \\\"release-type\\\" :
  \\\"lts\\\",\\r\\n            \\\"support-phase\\\":
  \\\"eol\\\",\\r\\n            \\\"eol-date\\\":
  \\\"2022-12-13\\\",\\r\\n            \\\"releases.json\\\":
  \\\"https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/3.1/relea\
  ses.json\\\"\\r\\n        },\\r\\n        {\\r\\n            \\\"channel-vers\
  ion\\\": \\\"3.0\\\",\\r\\n            \\\"latest-release\\\":
  \\\"3.0.3\\\",\\r\\n            \\\"latest-release-date\\\":
  \\\"2020-02-18\\\",\\r\\n            \\\"security\\\":
  false,\\r\\n            \\\"latest-runtime\\\":
  \\\"3.0.3\\\",\\r\\n            \\\"latest-sdk\\\":
  \\\"3.0.103\\\",\\r\\n            \\\"product\\\": \\\".NET
  Core\\\",\\r\\n            \\\"release-type\\\" :
  \\\"sts\\\",\\r\\n            \\\"support-phase\\\":
  \\\"eol\\\",\\r\\n            \\\"eol-date\\\":
  \\\"2020-03-03\\\",\\r\\n            \\\"releases.json\\\":
  \\\"https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/3.0/relea\
  ses.json\\\"\\r\\n        },\\r\\n        {\\r\\n            \\\"channel-vers\
  ion\\\": \\\"2.1\\\",\\r\\n            \\\"latest-release\\\":
  \\\"2.1.30\\\",\\r\\n            \\\"latest-release-date\\\":
  \\\"2021-08-19\\\",\\r\\n            \\\"security\\\":
  true,\\r\\n            \\\"latest-runtime\\\":
  \\\"2.1.30\\\",\\r\\n            \\\"latest-sdk\\\":
  \\\"2.1.818\\\",\\r\\n            \\\"product\\\": \\\".NET
  Core\\\",\\r\\n            \\\"release-type\\\" :
  \\\"lts\\\",\\r\\n            \\\"support-phase\\\":
  \\\"eol\\\",\\r\\n            \\\"eol-date\\\":
  \\\"2021-08-21\\\",\\r\\n            \\\"releases.json\\\":
  \\\"https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/2.1/relea\
  ses.json\\\"\\r\\n        },\\r\\n        {\\r\\n            \\\"channel-vers\
  ion\\\": \\\"2.2\\\",\\r\\n            \\\"latest-release\\\":
  \\\"2.2.8\\\",\\r\\n            \\\"latest-release-date\\\":
  \\\"2019-11-19\\\",\\r\\n            \\\"security\\\":
  true,\\r\\n            \\\"latest-runtime\\\":
  \\\"2.2.8\\\",\\r\\n            \\\"latest-sdk\\\":
  \\\"2.2.207\\\",\\r\\n            \\\"product\\\": \\\".NET
  Core\\\",\\r\\n            \\\"release-type\\\" :
  \\\"sts\\\",\\r\\n            \\\"support-phase\\\":
  \\\"eol\\\",\\r\\n            \\\"eol-date\\\":
  \\\"2019-12-23\\\",\\r\\n            \\\"releases.json\\\":
  \\\"https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/2.2/relea\
  ses.json\\\"\\r\\n          },\\r\\n        {\\r\\n            \\\"channel-ve\
  rsion\\\": \\\"2.0\\\",\\r\\n            \\\"latest-release\\\":
  \\\"2.0.9\\\",\\r\\n            \\\"latest-release-date\\\":\\\"2018-07-10\\\
  \",\\r\\n            \\\"security\\\":
  true,\\r\\n            \\\"latest-runtime\\\":
  \\\"2.0.9\\\",\\r\\n            \\\"latest-sdk\\\":
  \\\"2.1.202\\\",\\r\\n            \\\"product\\\": \\\".NET
  Core\\\",\\r\\n            \\\"release-type\\\" :
  \\\"sts\\\",\\r\\n            \\\"support-phase\\\":
  \\\"eol\\\",\\r\\n            \\\"eol-date\\\":
  \\\"2018-10-01\\\",\\r\\n            \\\"releases.json\\\":
  \\\"https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/2.0/relea\
  ses.json\\\"\\r\\n        },\\r\\n        {\\r\\n            \\\"channel-vers\
  ion\\\": \\\"1.1\\\",\\r\\n            \\\"latest-release\\\":
  \\\"1.1.13\\\",\\r\\n            \\\"latest-release-date\\\":
  \\\"2019-05-14\\\",\\r\\n            \\\"security\\\":
  true,\\r\\n            \\\"latest-runtime\\\":
  \\\"1.1.13\\\",\\r\\n            \\\"latest-sdk\\\":
  \\\"1.1.14\\\",\\r\\n            \\\"product\\\": \\\".NET
  Core\\\",\\r\\n            \\\"release-type\\\" :
  \\\"lts\\\",\\r\\n            \\\"support-phase\\\":
  \\\"eol\\\",\\r\\n            \\\"eol-date\\\":
  \\\"2019-06-27\\\",\\r\\n            \\\"releases.json\\\":
  \\\"https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/1.1/relea\
  ses.json\\\"\\r\\n        },\\r\\n        {\\r\\n            \\\"channel-vers\
  ion\\\": \\\"1.0\\\",\\r\\n            \\\"latest-release\\\":
  \\\"1.0.16\\\",\\r\\n            \\\"latest-release-date\\\":
  \\\"2019-05-14\\\",\\r\\n            \\\"security\\\":
  true,\\r\\n            \\\"latest-runtime\\\":
  \\\"1.0.16\\\",\\r\\n            \\\"latest-sdk\\\":
  \\\"1.1.14\\\",\\r\\n            \\\"product\\\": \\\".NET
  Core\\\",\\r\\n            \\\"release-type\\\" :
  \\\"lts\\\",\\r\\n            \\\"support-phase\\\":
  \\\"eol\\\",\\r\\n            \\\"eol-date\\\":
  \\\"2019-06-27\\\",\\r\\n            \\\"releases.json\\\":
  \\\"https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/1.0/relea\
  ses.json\\\"\\r\\n        }\\r\\n    ]\\r\\n}\\r\\n\",\"installing\":[],\"dot\
  net-installps1\":\"#\\r\\n# Copyright (c) .NET Foundation and contributors.
  All rights reserved.\\r\\n# Licensed under the MIT license. See LICENSE file
  in the project root for full license
  information.\\r\\n#\\r\\n\\r\\n<#\\r\\n.SYNOPSIS\\r\\n    Installs dotnet
  cli\\r\\n.DESCRIPTION\\r\\n    Installs dotnet cli. If dotnet installation
  already exists in the given directory\\r\\n    it will update it only if the
  requested version differs from the one already installed.\\r\\n\\r\\n    Note
  that the intended use of this script is for Continuous Integration (CI)
  scenarios, where:\\r\\n    - The SDK needs to be installed without user
  interaction and without admin rights.\\r\\n    - The SDK installation doesn't
  need to persist across multiple CI runs.\\r\\n    To set up a development
  environment or to run apps, use installers rather than this script. Visit
  https://dotnet.microsoft.com/download to get the
  installer.\\r\\n\\r\\n.PARAMETER Channel\\r\\n    Default:
  LTS\\r\\n    Download from the Channel specified. Possible values:\\r\\n    -
  STS - the most recent Standard Term Support release\\r\\n    - LTS - the most
  recent Long Term Support release\\r\\n    - 2-part version in a format A.B -
  represents a specific release\\r\\n          examples: 2.0, 1.0\\r\\n    -
  3-part version in a format A.B.Cxx - represents a specific SDK
  release\\r\\n          examples: 5.0.1xx, 5.0.2xx\\r\\n          Supported
  since 5.0 release\\r\\n    Warning: Value \\\"Current\\\" is deprecated for
  the Channel parameter. Use \\\"STS\\\" instead.\\r\\n    Note: The version
  parameter overrides the channel parameter when any version other than 'latest'
  is used.\\r\\n.PARAMETER Quality\\r\\n    Download the latest build of
  specified quality in the channel. The possible values are: daily, signed,
  validated, preview, GA.\\r\\n    Works only in combination with channel. Not
  applicable for STS and LTS channels and will be ignored if those channels are
  used. \\r\\n    For SDK use channel in A.B.Cxx format: using quality together
  with channel in A.B format is not supported.\\r\\n    Supported since 5.0
  release.\\r\\n    Note: The version parameter overrides the channel parameter
  when any version other than 'latest' is used, and therefore overrides the
  quality.     \\r\\n.PARAMETER Version\\r\\n    Default:
  latest\\r\\n    Represents a build version on specific channel. Possible
  values:\\r\\n    - latest - the latest build on specific channel\\r\\n    -
  3-part version in a format A.B.C - represents specific version of
  build\\r\\n          examples: 2.0.0-preview2-006120, 1.1.0\\r\\n.PARAMETER
  Internal\\r\\n    Download internal builds. Requires providing credentials via
  -FeedCredential parameter.\\r\\n.PARAMETER FeedCredential\\r\\n    Token to
  access Azure feed. Used as a query string to append to the Azure
  feed.\\r\\n    This parameter typically is not specified.\\r\\n.PARAMETER
  InstallDir\\r\\n    Default:
  %LocalAppData%\\\\Microsoft\\\\dotnet\\r\\n    Path to where to install
  dotnet. Note that binaries will be placed directly in a given
  directory.\\r\\n.PARAMETER Architecture\\r\\n    Default: <auto> - this value
  represents currently running OS architecture\\r\\n    Architecture of dotnet
  binaries to be installed.\\r\\n    Possible values are: <auto>, amd64, x64,
  x86, arm64, arm\\r\\n.PARAMETER SharedRuntime\\r\\n    This parameter is
  obsolete and may be removed in a future version of this script.\\r\\n    The
  recommended alternative is '-Runtime dotnet'.\\r\\n    Installs just the
  shared runtime bits, not the entire SDK.\\r\\n.PARAMETER
  Runtime\\r\\n    Installs just a shared runtime, not the entire
  SDK.\\r\\n    Possible values:\\r\\n        - dotnet     - the
  Microsoft.NETCore.App shared runtime\\r\\n        - aspnetcore - the
  Microsoft.AspNetCore.App shared runtime\\r\\n        - windowsdesktop - the
  Microsoft.WindowsDesktop.App shared runtime\\r\\n.PARAMETER DryRun\\r\\n    If
  set it will not perform installation but instead display what command line to
  use to consistently install\\r\\n    currently requested version of dotnet
  cli. In example if you specify version 'latest' it will display a
  link\\r\\n    with specific version so that this command can be used
  deterministicly in a build script.\\r\\n    It also displays binaries location
  if you prefer to install or download it yourself.\\r\\n.PARAMETER
  NoPath\\r\\n    By default this script will set environment variable PATH for
  the current process to the binaries folder inside installation
  folder.\\r\\n    If set it will display binaries location but not set any
  environment variable.\\r\\n.PARAMETER Verbose\\r\\n    Displays diagnostics
  information.\\r\\n.PARAMETER AzureFeed\\r\\n    Default:
  https://dotnetcli.azureedge.net/dotnet\\r\\n    For internal use
  only.\\r\\n    Allows using a different storage to download SDK archives
  from.\\r\\n    This parameter is only used if $NoCdn is false.\\r\\n.PARAMETER
  UncachedFeed\\r\\n    For internal use only.\\r\\n    Allows using a different
  storage to download SDK archives from.\\r\\n    This parameter is only used if
  $NoCdn is true.\\r\\n.PARAMETER ProxyAddress\\r\\n    If set, the installer
  will use the proxy when making web requests\\r\\n.PARAMETER
  ProxyUseDefaultCredentials\\r\\n    Default: false\\r\\n    Use default
  credentials, when using proxy address.\\r\\n.PARAMETER
  ProxyBypassList\\r\\n    If set with ProxyAddress, will provide the list of
  comma separated urls that will bypass the proxy\\r\\n.PARAMETER
  SkipNonVersionedFiles\\r\\n    Default: false\\r\\n    Skips installing
  non-versioned files if they already exist, such as dotnet.exe.\\r\\n.PARAMETER
  NoCdn\\r\\n    Disable downloading from the Azure CDN, and use the uncached
  feed directly.\\r\\n.PARAMETER JSonFile\\r\\n    Determines the SDK version
  from a user specified global.json file\\r\\n    Note: global.json must have a
  value for 'SDK:Version'\\r\\n.PARAMETER DownloadTimeout\\r\\n    Determines
  timeout duration in seconds for dowloading of the SDK file\\r\\n    Default:
  1200 seconds (20
  minutes)\\r\\n#>\\r\\n[cmdletbinding()]\\r\\nparam(\\r\\n   [string]$Channel=\
  \\\"LTS\\\",\\r\\n   [string]$Quality,\\r\\n   [string]$Version=\\\"Latest\\\
  \",\\r\\n   [switch]$Internal,\\r\\n   [string]$JSonFile,\\r\\n   [Alias('i')\
  ][string]$InstallDir=\\\"<auto>\\\",\\r\\n   [string]$Architecture=\\\"<auto>\
  \\\",\\r\\n   [string]$Runtime,\\r\\n   [Obsolete(\\\"This parameter may be
  removed in a future version of this script. The recommended alternative is
  '-Runtime
  dotnet'.\\\")]\\r\\n   [switch]$SharedRuntime,\\r\\n   [switch]$DryRun,\\r\\n   \
  [switch]$NoPath,\\r\\n   [string]$AzureFeed,\\r\\n   [string]$UncachedFeed,\\r\
  \\n   [string]$FeedCredential,\\r\\n   [string]$ProxyAddress,\\r\\n   [switch\
  ]$ProxyUseDefaultCredentials,\\r\\n   [string[]]$ProxyBypassList=@(),\\r\\n   \
  [switch]$SkipNonVersionedFiles,\\r\\n   [switch]$NoCdn,\\r\\n   [int]$Downloa\
  dTimeout=1200\\r\\n)\\r\\n\\r\\nSet-StrictMode -Version
  Latest\\r\\n$ErrorActionPreference=\\\"Stop\\\"\\r\\n$ProgressPreference=\\\"\
  SilentlyContinue\\\"\\r\\n\\r\\nfunction Say($str) {\\r\\n    try
  {\\r\\n        Write-Host \\\"dotnet-install:
  $str\\\"\\r\\n    }\\r\\n    catch {\\r\\n        # Some platforms cannot
  utilize Write-Host (Azure Functions, for instance). Fall back to
  Write-Output\\r\\n        Write-Output \\\"dotnet-install:
  $str\\\"\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction Say-Warning($str)
  {\\r\\n    try {\\r\\n        Write-Warning \\\"dotnet-install:
  $str\\\"\\r\\n    }\\r\\n    catch {\\r\\n        # Some platforms cannot
  utilize Write-Warning (Azure Functions, for instance). Fall back to
  Write-Output\\r\\n        Write-Output \\\"dotnet-install: Warning:
  $str\\\"\\r\\n    }\\r\\n}\\r\\n\\r\\n# Writes a line with error style
  settings.\\r\\n# Use this function to show a human-readable comment along with
  an exception.\\r\\nfunction Say-Error($str) {\\r\\n    try {\\r\\n        #
  Write-Error is quite oververbose for the purpose of the function, let's write
  one line with error style
  settings.\\r\\n        $Host.UI.WriteErrorLine(\\\"dotnet-install:
  $str\\\")\\r\\n    }\\r\\n    catch {\\r\\n        Write-Output
  \\\"dotnet-install: Error: $str\\\"\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction
  Say-Verbose($str) {\\r\\n    try {\\r\\n        Write-Verbose
  \\\"dotnet-install: $str\\\"\\r\\n    }\\r\\n    catch {\\r\\n        # Some
  platforms cannot utilize Write-Verbose (Azure Functions, for instance). Fall
  back to Write-Output\\r\\n        Write-Output \\\"dotnet-install:
  $str\\\"\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction Measure-Action($name, $block)
  {\\r\\n    $time = Measure-Command $block\\r\\n    $totalSeconds =
  $time.TotalSeconds\\r\\n    Say-Verbose \\\"⏱ Action '$name' took
  $totalSeconds seconds\\\"\\r\\n}\\r\\n\\r\\nfunction
  Say-Invocation($Invocation) {\\r\\n    $command =
  $Invocation.MyCommand;\\r\\n    $args = (($Invocation.BoundParameters.Keys |
  foreach { \\\"-$_ `\\\"$($Invocation.BoundParameters[$_])`\\\"\\\" }) -join
  \\\" \\\")\\r\\n    Say-Verbose \\\"$command
  $args\\\"\\r\\n}\\r\\n\\r\\nfunction
  Invoke-With-Retry([ScriptBlock]$ScriptBlock,
  [System.Threading.CancellationToken]$cancellationToken =
  [System.Threading.CancellationToken]::None, [int]$MaxAttempts = 3,
  [int]$SecondsBetweenAttempts = 1) {\\r\\n    $Attempts =
  0\\r\\n    $local:startTime = $(get-date)\\r\\n\\r\\n    while ($true)
  {\\r\\n        try {\\r\\n            return &
  $ScriptBlock\\r\\n        }\\r\\n        catch
  {\\r\\n            $Attempts++\\r\\n            if (($Attempts -lt
  $MaxAttempts) -and -not $cancellationToken.IsCancellationRequested)
  {\\r\\n                Start-Sleep
  $SecondsBetweenAttempts\\r\\n            }\\r\\n            else
  {\\r\\n                $local:elapsedTime = $(get-date) -
  $local:startTime\\r\\n                if (($local:elapsedTime.TotalSeconds -
  $DownloadTimeout) -gt 0 -and -not $cancellationToken.IsCancellationRequested)
  {\\r\\n                    throw New-Object System.TimeoutException(\\\"Failed
  to reach the server: connection timeout: default timeout is $DownloadTimeout
  second(s)\\\");\\r\\n                }\\r\\n                throw;\\r\\n            \
  }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction
  Get-Machine-Architecture() {\\r\\n    Say-Invocation
  $MyInvocation\\r\\n\\r\\n    # On PS x86, PROCESSOR_ARCHITECTURE reports x86
  even on x64 systems.\\r\\n    # To get the correct architecture, we need to
  use PROCESSOR_ARCHITEW6432.\\r\\n    # PS x64 doesn't define this, so we fall
  back to PROCESSOR_ARCHITECTURE.\\r\\n    # Possible values: amd64, x64, x86,
  arm64, arm\\r\\n    if( $ENV:PROCESSOR_ARCHITEW6432 -ne $null )
  {\\r\\n        return
  $ENV:PROCESSOR_ARCHITEW6432\\r\\n    }\\r\\n\\r\\n    try
  {        \\r\\n        if( ((Get-CimInstance -ClassName
  CIM_OperatingSystem).OSArchitecture) -like \\\"ARM*\\\")
  {\\r\\n            if( [Environment]::Is64BitOperatingSystem
  )\\r\\n            {\\r\\n                return
  \\\"arm64\\\"\\r\\n            }  \\r\\n            return
  \\\"arm\\\"\\r\\n        }\\r\\n    }\\r\\n    catch {\\r\\n        # Machine
  doesn't support Get-CimInstance\\r\\n    }\\r\\n\\r\\n    return
  $ENV:PROCESSOR_ARCHITECTURE\\r\\n}\\r\\n\\r\\nfunction
  Get-CLIArchitecture-From-Architecture([string]$Architecture)
  {\\r\\n    Say-Invocation $MyInvocation\\r\\n\\r\\n    if ($Architecture -eq
  \\\"<auto>\\\") {\\r\\n        $Architecture =
  Get-Machine-Architecture\\r\\n    }\\r\\n\\r\\n    switch
  ($Architecture.ToLowerInvariant()) {\\r\\n        { ($_ -eq \\\"amd64\\\") -or
  ($_ -eq \\\"x64\\\") } { return \\\"x64\\\" }\\r\\n        { $_ -eq
  \\\"x86\\\" } { return \\\"x86\\\" }\\r\\n        { $_ -eq \\\"arm\\\" } {
  return \\\"arm\\\" }\\r\\n        { $_ -eq \\\"arm64\\\" } { return
  \\\"arm64\\\" }\\r\\n        default { throw \\\"Architecture '$Architecture'
  not supported. If you think this is a bug, report it at
  https://github.com/dotnet/install-scripts/issues\\\"
  }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction ValidateFeedCredential([string]
  $FeedCredential)\\r\\n{\\r\\n    if ($Internal -and
  [string]::IsNullOrWhitespace($FeedCredential)) {\\r\\n        $message =
  \\\"Provide credentials via -FeedCredential parameter.\\\"\\r\\n        if
  ($DryRun) {\\r\\n            Say-Warning \\\"$message\\\"\\r\\n        } else
  {\\r\\n            throw
  \\\"$message\\\"\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    #FeedCredential
  should start with \\\"?\\\", for it to be added to the end of the
  link.\\r\\n    #adding \\\"?\\\" at the beginning of the FeedCredential if
  needed.\\r\\n    if ((![string]::IsNullOrWhitespace($FeedCredential)) -and
  ($FeedCredential[0] -ne '?')) {\\r\\n        $FeedCredential = \\\"?\\\" +
  $FeedCredential\\r\\n    }\\r\\n\\r\\n    return
  $FeedCredential\\r\\n}\\r\\nfunction Get-NormalizedQuality([string]$Quality)
  {\\r\\n    Say-Invocation $MyInvocation\\r\\n\\r\\n    if
  ([string]::IsNullOrEmpty($Quality)) {\\r\\n        return
  \\\"\\\"\\r\\n    }\\r\\n\\r\\n    switch ($Quality) {\\r\\n        {
  @(\\\"daily\\\", \\\"signed\\\", \\\"validated\\\", \\\"preview\\\") -contains
  $_ } { return $Quality.ToLowerInvariant() }\\r\\n        #ga quality is
  available without specifying quality, so normalizing it to
  empty\\r\\n        { $_ -eq \\\"ga\\\" } { return \\\"\\\"
  }\\r\\n        default { throw \\\"'$Quality' is not a supported value for
  -Quality option. Supported values are: daily, signed, validated, preview, ga.
  If you think this is a bug, report it at
  https://github.com/dotnet/install-scripts/issues.\\\"
  }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction
  Get-NormalizedChannel([string]$Channel) {\\r\\n    Say-Invocation
  $MyInvocation\\r\\n\\r\\n    if ([string]::IsNullOrEmpty($Channel))
  {\\r\\n        return \\\"\\\"\\r\\n    }\\r\\n\\r\\n    if
  ($Channel.Contains(\\\"Current\\\")) {\\r\\n        Say-Warning 'Value
  \\\"Current\\\" is deprecated for -Channel option. Use \\\"STS\\\"
  instead.'\\r\\n    }\\r\\n\\r\\n    if ($Channel.StartsWith('release/'))
  {\\r\\n        Say-Warning 'Using branch name with -Channel option is no
  longer supported with newer releases. Use -Quality option with a channel in
  X.Y format instead, such as \\\"-Channel 5.0 -Quality
  Daily.\\\"'\\r\\n    }\\r\\n\\r\\n    switch ($Channel) {\\r\\n        { $_
  -eq \\\"lts\\\" } { return \\\"LTS\\\" }\\r\\n        { $_ -eq \\\"sts\\\" } {
  return \\\"STS\\\" }\\r\\n        { $_ -eq \\\"current\\\" } { return
  \\\"STS\\\" }\\r\\n        default { return $Channel.ToLowerInvariant()
  }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction
  Get-NormalizedProduct([string]$Runtime) {\\r\\n    Say-Invocation
  $MyInvocation\\r\\n\\r\\n    switch ($Runtime) {\\r\\n        { $_ -eq
  \\\"dotnet\\\" } { return \\\"dotnet-runtime\\\" }\\r\\n        { $_ -eq
  \\\"aspnetcore\\\" } { return \\\"aspnetcore-runtime\\\" }\\r\\n        { $_
  -eq \\\"windowsdesktop\\\" } { return \\\"windowsdesktop-runtime\\\"
  }\\r\\n        { [string]::IsNullOrEmpty($_) } { return \\\"dotnet-sdk\\\"
  }\\r\\n        default { throw \\\"'$Runtime' is not a supported value for
  -Runtime option, supported values are: dotnet, aspnetcore, windowsdesktop. If
  you think this is a bug, report it at
  https://github.com/dotnet/install-scripts/issues.\\\"
  }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n# The version text returned from the
  feeds is a 1-line or 2-line string:\\r\\n# For the SDK and the dotnet runtime
  (2 lines):\\r\\n# Line 1: # commit_hash\\r\\n# Line 2: # 4-part version\\r\\n#
  For the aspnetcore runtime (1 line):\\r\\n# Line 1: # 4-part
  version\\r\\nfunction
  Get-Version-From-LatestVersion-File-Content([string]$VersionText)
  {\\r\\n    Say-Invocation $MyInvocation\\r\\n\\r\\n    $Data = -split
  $VersionText\\r\\n\\r\\n    $VersionInfo = @{\\r\\n        CommitHash = $(if
  ($Data.Count -gt 1) { $Data[0] })\\r\\n        Version = $Data[-1] # last line
  is always the version number.\\r\\n    }\\r\\n    return
  $VersionInfo\\r\\n}\\r\\n\\r\\nfunction Load-Assembly([string] $Assembly)
  {\\r\\n    try {\\r\\n        Add-Type -Assembly $Assembly |
  Out-Null\\r\\n    }\\r\\n    catch {\\r\\n        # On Nano Server, Powershell
  Core Edition is used.  Add-Type is unable to resolve base class assemblies
  because they are not GAC'd.\\r\\n        # Loading the base class assemblies
  is not unnecessary as the types will automatically get
  resolved.\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction GetHTTPResponse([Uri] $Uri,
  [bool]$HeaderOnly, [bool]$DisableRedirect,
  [bool]$DisableFeedCredential)\\r\\n{\\r\\n    $cts = New-Object
  System.Threading.CancellationTokenSource\\r\\n\\r\\n    $downloadScript =
  {\\r\\n\\r\\n        $HttpClient = $null\\r\\n\\r\\n        try
  {\\r\\n            # HttpClient is used vs Invoke-WebRequest in order to
  support Nano Server which doesn't support the Invoke-WebRequest
  cmdlet.\\r\\n            Load-Assembly -Assembly
  System.Net.Http\\r\\n\\r\\n            if(-not $ProxyAddress)
  {\\r\\n                try {\\r\\n                    # Despite no proxy being
  explicitly specified, we may still be behind a default
  proxy\\r\\n                    $DefaultProxy =
  [System.Net.WebRequest]::DefaultWebProxy;\\r\\n                    if($Defaul\
  tProxy -and (-not $DefaultProxy.IsBypassed($Uri)))
  {\\r\\n                        if ($null -ne $DefaultProxy.GetProxy($Uri))
  {\\r\\n                            $ProxyAddress =
  $DefaultProxy.GetProxy($Uri).OriginalString\\r\\n                        }
  else {\\r\\n                            $ProxyAddress =
  $null\\r\\n                        }\\r\\n                        $ProxyUseDe\
  faultCredentials = $true\\r\\n                    }\\r\\n                }
  catch {\\r\\n                    # Eat the exception and move forward as the
  above code is an attempt\\r\\n                    #    at resolving the
  DefaultProxy that may not have been a
  problem.\\r\\n                    $ProxyAddress =
  $null\\r\\n                    Say-Verbose(\\\"Exception ignored:
  $_.Exception.Message - moving
  forward...\\\")\\r\\n                }\\r\\n            }\\r\\n\\r\\n            \
  $HttpClientHandler = New-Object
  System.Net.Http.HttpClientHandler\\r\\n            if($ProxyAddress)
  {\\r\\n                $HttpClientHandler.Proxy =  New-Object
  System.Net.WebProxy -Property
  @{\\r\\n                    Address=$ProxyAddress;\\r\\n                    U\
  seDefaultCredentials=$ProxyUseDefaultCredentials;\\r\\n                    By\
  passList =
  $ProxyBypassList;\\r\\n                }\\r\\n            }       \\r\\n            \
  if
  ($DisableRedirect)\\r\\n            {\\r\\n                $HttpClientHandler\
  .AllowAutoRedirect = $false\\r\\n            }\\r\\n            $HttpClient =
  New-Object System.Net.Http.HttpClient -ArgumentList
  $HttpClientHandler\\r\\n\\r\\n            # Default timeout for HttpClient is
  100s.  For a 50 MB download this assumes 500 KB/s average, any less will time
  out\\r\\n            # Defaulting to 20 minutes allows it to work over much
  slower connections.\\r\\n            $HttpClient.Timeout = New-TimeSpan
  -Seconds $DownloadTimeout\\r\\n\\r\\n            if
  ($HeaderOnly){\\r\\n                $completionOption =
  [System.Net.Http.HttpCompletionOption]::ResponseHeadersRead\\r\\n            }\
  \\r\\n            else {\\r\\n                $completionOption =
  [System.Net.Http.HttpCompletionOption]::ResponseContentRead\\r\\n            }\
  \\r\\n\\r\\n            if ($DisableFeedCredential)
  {\\r\\n                $UriWithCredential =
  $Uri\\r\\n            }\\r\\n            else
  {\\r\\n                $UriWithCredential =
  \\\"${Uri}${FeedCredential}\\\"\\r\\n            }\\r\\n\\r\\n            $Ta\
  sk = $HttpClient.GetAsync(\\\"$UriWithCredential\\\",
  $completionOption).ConfigureAwait(\\\"false\\\");\\r\\n            $Response =
  $Task.GetAwaiter().GetResult();\\r\\n\\r\\n            if (($null -eq
  $Response) -or ((-not $HeaderOnly) -and (-not
  ($Response.IsSuccessStatusCode)))) {\\r\\n                # The feed
  credential is potentially sensitive info. Do not log FeedCredential to console
  output.\\r\\n                $DownloadException = [System.Exception]
  \\\"Unable to download $Uri.\\\"\\r\\n\\r\\n                if ($null -ne
  $Response)
  {\\r\\n                    $DownloadException.Data[\\\"StatusCode\\\"] = [int]
  $Response.StatusCode\\r\\n                    $DownloadException.Data[\\\"Err\
  orMessage\\\"] = \\\"Unable to download $Uri. Returned HTTP status code: \\\"
  +
  $DownloadException.Data[\\\"StatusCode\\\"]\\r\\n\\r\\n                    if
  (404 -eq [int]
  $Response.StatusCode)\\r\\n                    {\\r\\n                        \
  $cts.Cancel()\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                \
  throw $DownloadException\\r\\n            }\\r\\n\\r\\n            return
  $Response\\r\\n        }\\r\\n        catch
  [System.Net.Http.HttpRequestException] {\\r\\n            $DownloadException =
  [System.Exception] \\\"Unable to download $Uri.\\\"\\r\\n\\r\\n            #
  Pick up the exception message and inner exceptions' messages if they
  exist\\r\\n            $CurrentException =
  $PSItem.Exception\\r\\n            $ErrorMsg = $CurrentException.Message +
  \\\"`r`n\\\"\\r\\n            while ($CurrentException.InnerException)
  {\\r\\n              $CurrentException =
  $CurrentException.InnerException\\r\\n              $ErrorMsg +=
  $CurrentException.Message +
  \\\"`r`n\\\"\\r\\n            }\\r\\n\\r\\n            # Check if there is an
  issue concerning TLS.\\r\\n            if ($ErrorMsg -like \\\"*SSL/TLS*\\\")
  {\\r\\n                $ErrorMsg += \\\"Ensure that TLS 1.2 or higher is
  enabled to use this
  script.`r`n\\\"\\r\\n            }\\r\\n\\r\\n            $DownloadException.\
  Data[\\\"ErrorMessage\\\"] = $ErrorMsg\\r\\n            throw
  $DownloadException\\r\\n        }\\r\\n        finally {\\r\\n             if
  ($null -ne $HttpClient)
  {\\r\\n                $HttpClient.Dispose()\\r\\n            }\\r\\n        }\
  \\r\\n    }\\r\\n\\r\\n    try {\\r\\n        return Invoke-With-Retry
  $downloadScript
  $cts.Token\\r\\n    }\\r\\n    finally\\r\\n    {\\r\\n        if ($null -ne
  $cts)\\r\\n        {\\r\\n            $cts.Dispose()\\r\\n        }\\r\\n    }\
  \\r\\n}\\r\\n\\r\\nfunction
  Get-Version-From-LatestVersion-File([string]$AzureFeed, [string]$Channel)
  {\\r\\n    Say-Invocation $MyInvocation\\r\\n\\r\\n    $VersionFileUrl =
  $null\\r\\n    if ($Runtime -eq \\\"dotnet\\\") {\\r\\n        $VersionFileUrl
  =
  \\\"$AzureFeed/Runtime/$Channel/latest.version\\\"\\r\\n    }\\r\\n    elseif
  ($Runtime -eq \\\"aspnetcore\\\") {\\r\\n        $VersionFileUrl =
  \\\"$AzureFeed/aspnetcore/Runtime/$Channel/latest.version\\\"\\r\\n    }\\r\\\
  n    elseif ($Runtime -eq \\\"windowsdesktop\\\")
  {\\r\\n        $VersionFileUrl =
  \\\"$AzureFeed/WindowsDesktop/$Channel/latest.version\\\"\\r\\n    }\\r\\n    \
  elseif (-not $Runtime) {\\r\\n        $VersionFileUrl =
  \\\"$AzureFeed/Sdk/$Channel/latest.version\\\"\\r\\n    }\\r\\n    else
  {\\r\\n        throw \\\"Invalid value for
  `$Runtime\\\"\\r\\n    }\\r\\n\\r\\n    Say-Verbose \\\"Constructed
  latest.version URL: $VersionFileUrl\\\"\\r\\n\\r\\n    try
  {\\r\\n        $Response = GetHTTPResponse -Uri
  $VersionFileUrl\\r\\n    }\\r\\n    catch {\\r\\n        Say-Verbose
  \\\"Failed to download latest.version
  file.\\\"\\r\\n        throw\\r\\n    }\\r\\n    $StringContent =
  $Response.Content.ReadAsStringAsync().Result\\r\\n\\r\\n    switch
  ($Response.Content.Headers.ContentType) {\\r\\n        { ($_ -eq
  \\\"application/octet-stream\\\") } { $VersionText = $StringContent
  }\\r\\n        { ($_ -eq \\\"text/plain\\\") } { $VersionText = $StringContent
  }\\r\\n        { ($_ -eq \\\"text/plain; charset=UTF-8\\\") } { $VersionText =
  $StringContent }\\r\\n        default { throw
  \\\"``$Response.Content.Headers.ContentType`` is an unknown .version file
  content type.\\\" }\\r\\n    }\\r\\n\\r\\n    $VersionInfo =
  Get-Version-From-LatestVersion-File-Content $VersionText\\r\\n\\r\\n    return
  $VersionInfo\\r\\n}\\r\\n\\r\\nfunction
  Parse-Jsonfile-For-Version([string]$JSonFile) {\\r\\n    Say-Invocation
  $MyInvocation\\r\\n\\r\\n    If (-Not (Test-Path $JSonFile))
  {\\r\\n        throw \\\"Unable to find
  '$JSonFile'\\\"\\r\\n    }\\r\\n    try {\\r\\n        $JSonContent =
  Get-Content($JSonFile) -Raw | ConvertFrom-Json | Select-Object -expand
  \\\"sdk\\\" -ErrorAction SilentlyContinue\\r\\n    }\\r\\n    catch
  {\\r\\n        Say-Error \\\"Json file unreadable:
  '$JSonFile'\\\"\\r\\n        throw\\r\\n    }\\r\\n    if ($JSonContent)
  {\\r\\n        try {\\r\\n            $JSonContent.PSObject.Properties |
  ForEach-Object {\\r\\n                $PropertyName =
  $_.Name\\r\\n                if ($PropertyName -eq \\\"version\\\")
  {\\r\\n                    $Version =
  $_.Value\\r\\n                    Say-Verbose \\\"Version =
  $Version\\\"\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        \
  catch {\\r\\n            Say-Error \\\"Unable to parse the SDK node in
  '$JSonFile'\\\"\\r\\n            throw\\r\\n        }\\r\\n    }\\r\\n    else
  {\\r\\n        throw \\\"Unable to find the SDK node in
  '$JSonFile'\\\"\\r\\n    }\\r\\n    If ($Version -eq $null)
  {\\r\\n        throw \\\"Unable to find the SDK:version node in
  '$JSonFile'\\\"\\r\\n    }\\r\\n    return $Version\\r\\n}\\r\\n\\r\\nfunction
  Get-Specific-Version-From-Version([string]$AzureFeed, [string]$Channel,
  [string]$Version, [string]$JSonFile) {\\r\\n    Say-Invocation
  $MyInvocation\\r\\n\\r\\n    if (-not $JSonFile) {\\r\\n        if
  ($Version.ToLowerInvariant() -eq \\\"latest\\\")
  {\\r\\n            $LatestVersionInfo = Get-Version-From-LatestVersion-File
  -AzureFeed $AzureFeed -Channel $Channel\\r\\n            return
  $LatestVersionInfo.Version\\r\\n        }\\r\\n        else
  {\\r\\n            return $Version \\r\\n        }\\r\\n    }\\r\\n    else
  {\\r\\n        return Parse-Jsonfile-For-Version
  $JSonFile\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction
  Get-Download-Link([string]$AzureFeed, [string]$SpecificVersion,
  [string]$CLIArchitecture) {\\r\\n    Say-Invocation
  $MyInvocation\\r\\n\\r\\n    # If anything fails in this lookup it will
  default to $SpecificVersion\\r\\n    $SpecificProductVersion =
  Get-Product-Version -AzureFeed $AzureFeed -SpecificVersion
  $SpecificVersion\\r\\n\\r\\n    if ($Runtime -eq \\\"dotnet\\\")
  {\\r\\n        $PayloadURL =
  \\\"$AzureFeed/Runtime/$SpecificVersion/dotnet-runtime-$SpecificProductVersio\
  n-win-$CLIArchitecture.zip\\\"\\r\\n    }\\r\\n    elseif ($Runtime -eq
  \\\"aspnetcore\\\") {\\r\\n        $PayloadURL =
  \\\"$AzureFeed/aspnetcore/Runtime/$SpecificVersion/aspnetcore-runtime-$Specif\
  icProductVersion-win-$CLIArchitecture.zip\\\"\\r\\n    }\\r\\n    elseif
  ($Runtime -eq \\\"windowsdesktop\\\") {\\r\\n        # The windows desktop
  runtime is part of the core runtime layout prior to
  5.0\\r\\n        $PayloadURL =
  \\\"$AzureFeed/Runtime/$SpecificVersion/windowsdesktop-runtime-$SpecificProdu\
  ctVersion-win-$CLIArchitecture.zip\\\"\\r\\n        if ($SpecificVersion
  -match '^(\\\\d+)\\\\.(.*)$')\\r\\n        {\\r\\n            $majorVersion =
  [int]$Matches[1]\\r\\n            if ($majorVersion -ge
  5)\\r\\n            {\\r\\n                $PayloadURL =
  \\\"$AzureFeed/WindowsDesktop/$SpecificVersion/windowsdesktop-runtime-$Specif\
  icProductVersion-win-$CLIArchitecture.zip\\\"\\r\\n            }\\r\\n        \
  }\\r\\n    }\\r\\n    elseif (-not $Runtime) {\\r\\n        $PayloadURL =
  \\\"$AzureFeed/Sdk/$SpecificVersion/dotnet-sdk-$SpecificProductVersion-win-$C\
  LIArchitecture.zip\\\"\\r\\n    }\\r\\n    else {\\r\\n        throw
  \\\"Invalid value for `$Runtime\\\"\\r\\n    }\\r\\n\\r\\n    Say-Verbose
  \\\"Constructed primary named payload URL:
  $PayloadURL\\\"\\r\\n\\r\\n    return $PayloadURL,
  $SpecificProductVersion\\r\\n}\\r\\n\\r\\nfunction
  Get-LegacyDownload-Link([string]$AzureFeed, [string]$SpecificVersion,
  [string]$CLIArchitecture) {\\r\\n    Say-Invocation
  $MyInvocation\\r\\n\\r\\n    if (-not $Runtime) {\\r\\n        $PayloadURL =
  \\\"$AzureFeed/Sdk/$SpecificVersion/dotnet-dev-win-$CLIArchitecture.$Specific\
  Version.zip\\\"\\r\\n    }\\r\\n    elseif ($Runtime -eq \\\"dotnet\\\")
  {\\r\\n        $PayloadURL =
  \\\"$AzureFeed/Runtime/$SpecificVersion/dotnet-win-$CLIArchitecture.$Specific\
  Version.zip\\\"\\r\\n    }\\r\\n    else {\\r\\n        return
  $null\\r\\n    }\\r\\n\\r\\n    Say-Verbose \\\"Constructed legacy named
  payload URL: $PayloadURL\\\"\\r\\n\\r\\n    return
  $PayloadURL\\r\\n}\\r\\n\\r\\nfunction Get-Product-Version([string]$AzureFeed,
  [string]$SpecificVersion, [string]$PackageDownloadLink)
  {\\r\\n    Say-Invocation $MyInvocation\\r\\n\\r\\n    # Try to get the
  version number, using the productVersion.txt file located next to the
  installer file.\\r\\n    $ProductVersionTxtURLs = (Get-Product-Version-Url
  $AzureFeed $SpecificVersion $PackageDownloadLink -Flattened
  $true),\\r\\n                             (Get-Product-Version-Url $AzureFeed
  $SpecificVersion $PackageDownloadLink -Flattened
  $false)\\r\\n    \\r\\n    Foreach ($ProductVersionTxtURL in
  $ProductVersionTxtURLs) {\\r\\n        Say-Verbose \\\"Checking for the
  existence of $ProductVersionTxtURL\\\"\\r\\n\\r\\n        try
  {\\r\\n            $productVersionResponse =
  GetHTTPResponse($productVersionTxtUrl)\\r\\n\\r\\n            if
  ($productVersionResponse.StatusCode -eq 200)
  {\\r\\n                $productVersion =
  $productVersionResponse.Content.ReadAsStringAsync().Result.Trim()\\r\\n                \
  if ($productVersion -ne
  $SpecificVersion)\\r\\n                {\\r\\n                    Say
  \\\"Using alternate version $productVersion found in
  $ProductVersionTxtURL\\\"\\r\\n                }\\r\\n                return
  $productVersion\\r\\n            }\\r\\n            else
  {\\r\\n                Say-Verbose \\\"Got StatusCode
  $($productVersionResponse.StatusCode) when trying to get productVersion.txt at
  $productVersionTxtUrl.\\\"\\r\\n            }\\r\\n        }
  \\r\\n        catch {\\r\\n            Say-Verbose \\\"Could not read
  productVersion.txt at $productVersionTxtUrl (Exception:
  '$($_.Exception.Message)'. )\\\"\\r\\n        }\\r\\n    }\\r\\n\\r\\n    #
  Getting the version number with productVersion.txt has failed. Try parsing the
  download link for a version number.\\r\\n    if
  ([string]::IsNullOrEmpty($PackageDownloadLink))\\r\\n    {\\r\\n        Say-V\
  erbose \\\"Using the default value '$SpecificVersion' as the product
  version.\\\"\\r\\n        return
  $SpecificVersion\\r\\n    }\\r\\n\\r\\n    $productVersion =
  Get-ProductVersionFromDownloadLink $PackageDownloadLink
  $SpecificVersion\\r\\n    return $productVersion\\r\\n}\\r\\n\\r\\nfunction
  Get-Product-Version-Url([string]$AzureFeed, [string]$SpecificVersion,
  [string]$PackageDownloadLink, [bool]$Flattened) {\\r\\n    Say-Invocation
  $MyInvocation\\r\\n\\r\\n    $majorVersion=$null\\r\\n    if ($SpecificVersion
  -match '^(\\\\d+)\\\\.(.*)') {\\r\\n        $majorVersion = $Matches[1]
  -as[int]\\r\\n    }\\r\\n\\r\\n    $pvFileName='productVersion.txt'\\r\\n    \
  if($Flattened) {\\r\\n        if(-not $Runtime)
  {\\r\\n            $pvFileName='sdk-productVersion.txt'\\r\\n        }\\r\\n        \
  elseif($Runtime -eq \\\"dotnet\\\")
  {\\r\\n            $pvFileName='runtime-productVersion.txt'\\r\\n        }\\r\
  \\n        else
  {\\r\\n            $pvFileName=\\\"$Runtime-productVersion.txt\\\"\\r\\n        \
  }\\r\\n    }\\r\\n\\r\\n    if ([string]::IsNullOrEmpty($PackageDownloadLink))
  {\\r\\n        if ($Runtime -eq \\\"dotnet\\\")
  {\\r\\n            $ProductVersionTxtURL =
  \\\"$AzureFeed/Runtime/$SpecificVersion/$pvFileName\\\"\\r\\n        }\\r\\n        \
  elseif ($Runtime -eq \\\"aspnetcore\\\")
  {\\r\\n            $ProductVersionTxtURL =
  \\\"$AzureFeed/aspnetcore/Runtime/$SpecificVersion/$pvFileName\\\"\\r\\n        \
  }\\r\\n        elseif ($Runtime -eq \\\"windowsdesktop\\\")
  {\\r\\n            # The windows desktop runtime is part of the core runtime
  layout prior to 5.0\\r\\n            $ProductVersionTxtURL =
  \\\"$AzureFeed/Runtime/$SpecificVersion/$pvFileName\\\"\\r\\n            if
  ($majorVersion -ne $null -and $majorVersion -ge 5)
  {\\r\\n                $ProductVersionTxtURL =
  \\\"$AzureFeed/WindowsDesktop/$SpecificVersion/$pvFileName\\\"\\r\\n            \
  }\\r\\n        }\\r\\n        elseif (-not $Runtime)
  {\\r\\n            $ProductVersionTxtURL =
  \\\"$AzureFeed/Sdk/$SpecificVersion/$pvFileName\\\"\\r\\n        }\\r\\n        \
  else {\\r\\n            throw \\\"Invalid value '$Runtime' specified for
  `$Runtime\\\"\\r\\n        }\\r\\n    }\\r\\n    else
  {\\r\\n        $ProductVersionTxtURL = $PackageDownloadLink.Substring(0,
  $PackageDownloadLink.LastIndexOf(\\\"/\\\"))  +
  \\\"/$pvFileName\\\"\\r\\n    }\\r\\n\\r\\n    Say-Verbose \\\"Constructed
  productVersion link: $ProductVersionTxtURL\\\"\\r\\n\\r\\n    return
  $ProductVersionTxtURL\\r\\n}\\r\\n\\r\\nfunction
  Get-ProductVersionFromDownloadLink([string]$PackageDownloadLink,
  [string]$SpecificVersion)\\r\\n{\\r\\n    Say-Invocation
  $MyInvocation\\r\\n\\r\\n    #product specific version follows the product
  name\\r\\n    #for filename 'dotnet-sdk-3.1.404-win-x64.zip': the product
  version is 3.1.400\\r\\n    $filename =
  $PackageDownloadLink.Substring($PackageDownloadLink.LastIndexOf(\\\"/\\\") +
  1)\\r\\n    $filenameParts = $filename.Split('-')\\r\\n    if
  ($filenameParts.Length -gt 2)\\r\\n    {\\r\\n        $productVersion =
  $filenameParts[2]\\r\\n        Say-Verbose \\\"Extracted product version
  '$productVersion' from download link
  '$PackageDownloadLink'.\\\"\\r\\n    }\\r\\n    else
  {\\r\\n        Say-Verbose \\\"Using the default value '$SpecificVersion' as
  the product version.\\\"\\r\\n        $productVersion =
  $SpecificVersion\\r\\n    }\\r\\n    return $productVersion
  \\r\\n}\\r\\n\\r\\nfunction Get-User-Share-Path() {\\r\\n    Say-Invocation
  $MyInvocation\\r\\n\\r\\n    $InstallRoot =
  $env:DOTNET_INSTALL_DIR\\r\\n    if (!$InstallRoot)
  {\\r\\n        $InstallRoot =
  \\\"$env:LocalAppData\\\\Microsoft\\\\dotnet\\\"\\r\\n    }\\r\\n    return
  $InstallRoot\\r\\n}\\r\\n\\r\\nfunction
  Resolve-Installation-Path([string]$InstallDir) {\\r\\n    Say-Invocation
  $MyInvocation\\r\\n\\r\\n    if ($InstallDir -eq \\\"<auto>\\\")
  {\\r\\n        return Get-User-Share-Path\\r\\n    }\\r\\n    return
  $InstallDir\\r\\n}\\r\\n\\r\\nfunction
  Is-Dotnet-Package-Installed([string]$InstallRoot,
  [string]$RelativePathToPackage, [string]$SpecificVersion)
  {\\r\\n    Say-Invocation $MyInvocation\\r\\n\\r\\n    $DotnetPackagePath =
  Join-Path -Path $InstallRoot -ChildPath $RelativePathToPackage | Join-Path
  -ChildPath $SpecificVersion\\r\\n    Say-Verbose
  \\\"Is-Dotnet-Package-Installed:
  DotnetPackagePath=$DotnetPackagePath\\\"\\r\\n    return Test-Path
  $DotnetPackagePath -PathType Container\\r\\n}\\r\\n\\r\\nfunction
  Get-Absolute-Path([string]$RelativeOrAbsolutePath) {\\r\\n    # Too much
  spam\\r\\n    # Say-Invocation $MyInvocation\\r\\n\\r\\n    return
  $ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath($Rela\
  tiveOrAbsolutePath)\\r\\n}\\r\\n\\r\\nfunction
  Get-Path-Prefix-With-Version($path) {\\r\\n    # example path with regex:
  shared/1.0.0-beta-12345/somepath\\r\\n    $match = [regex]::match($path,
  \\\"/\\\\d+\\\\.\\\\d+[^/]+/\\\")\\r\\n    if ($match.Success)
  {\\r\\n        return $entry.FullName.Substring(0, $match.Index +
  $match.Length)\\r\\n    }\\r\\n\\r\\n    return
  $null\\r\\n}\\r\\n\\r\\nfunction
  Get-List-Of-Directories-And-Versions-To-Unpack-From-Dotnet-Package([System.IO\
  .Compression.ZipArchive]$Zip, [string]$OutPath) {\\r\\n    Say-Invocation
  $MyInvocation\\r\\n\\r\\n    $ret = @()\\r\\n    foreach ($entry in
  $Zip.Entries) {\\r\\n        $dir = Get-Path-Prefix-With-Version
  $entry.FullName\\r\\n        if ($null -ne $dir) {\\r\\n            $path =
  Get-Absolute-Path $(Join-Path -Path $OutPath -ChildPath
  $dir)\\r\\n            if (-Not (Test-Path $path -PathType Container))
  {\\r\\n                $ret +=
  $dir\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    $ret = $ret |
  Sort-Object | Get-Unique\\r\\n\\r\\n    $values = ($ret | foreach { \\\"$_\\\"
  }) -join \\\";\\\"\\r\\n    Say-Verbose \\\"Directories to unpack:
  $values\\\"\\r\\n\\r\\n    return $ret\\r\\n}\\r\\n\\r\\n# Example zip content
  and extraction algorithm:\\r\\n# Rule: files if extracted are always being
  extracted to the same relative path locally\\r\\n#
  .\\\\\\r\\n#       a.exe   # file does not exist locally,
  extract\\r\\n#       b.dll   # file exists locally, override only if
  $OverrideFiles set\\r\\n#       aaa\\\\    # same rules as for
  files\\r\\n#           ...\\r\\n#       abc\\\\1.0.0\\\\  # directory contains
  version and exists locally\\r\\n#           ...     # do not extract content
  under versioned part\\r\\n#       abc\\\\asd\\\\    # same rules as for
  files\\r\\n#            ...\\r\\n#       def\\\\ghi\\\\1.0.1\\\\  # directory
  contains version and does not exist locally\\r\\n#           ...         #
  extract content\\r\\nfunction Extract-Dotnet-Package([string]$ZipPath,
  [string]$OutPath) {\\r\\n    Say-Invocation
  $MyInvocation\\r\\n\\r\\n    Load-Assembly -Assembly
  System.IO.Compression.FileSystem\\r\\n    Set-Variable -Name Zip\\r\\n    try
  {\\r\\n        $Zip =
  [System.IO.Compression.ZipFile]::OpenRead($ZipPath)\\r\\n\\r\\n        $Direc\
  toriesToUnpack =
  Get-List-Of-Directories-And-Versions-To-Unpack-From-Dotnet-Package -Zip $Zip
  -OutPath $OutPath\\r\\n\\r\\n        foreach ($entry in $Zip.Entries)
  {\\r\\n            $PathWithVersion = Get-Path-Prefix-With-Version
  $entry.FullName\\r\\n            if (($null -eq $PathWithVersion) -Or
  ($DirectoriesToUnpack -contains $PathWithVersion))
  {\\r\\n                $DestinationPath = Get-Absolute-Path $(Join-Path -Path
  $OutPath -ChildPath $entry.FullName)\\r\\n                $DestinationDir =
  Split-Path -Parent
  $DestinationPath\\r\\n                $OverrideFiles=$OverrideNonVersionedFil\
  es -Or (-Not (Test-Path $DestinationPath))\\r\\n                if ((-Not
  $DestinationPath.EndsWith(\\\"\\\\\\\")) -And $OverrideFiles)
  {\\r\\n                    New-Item -ItemType Directory -Force -Path
  $DestinationDir |
  Out-Null\\r\\n                    [System.IO.Compression.ZipFileExtensions]::\
  ExtractToFile($entry, $DestinationPath,
  $OverrideNonVersionedFiles)\\r\\n                }\\r\\n            }\\r\\n        \
  }\\r\\n    }\\r\\n    catch\\r\\n    {\\r\\n        Say-Error \\\"Failed to
  extract package. Exception:
  $_\\\"\\r\\n        throw;\\r\\n    }\\r\\n    finally {\\r\\n        if
  ($null -ne $Zip)
  {\\r\\n            $Zip.Dispose()\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\\
  nfunction DownloadFile($Source, [string]$OutPath) {\\r\\n    if ($Source
  -notlike \\\"http*\\\") {\\r\\n        #  Using System.IO.Path.GetFullPath to
  get the current directory\\r\\n        #    does not work in this context -
  $pwd gives the current directory\\r\\n        if
  (![System.IO.Path]::IsPathRooted($Source)) {\\r\\n            $Source =
  $(Join-Path -Path $pwd -ChildPath $Source)\\r\\n        }\\r\\n        $Source
  = Get-Absolute-Path $Source\\r\\n        Say \\\"Copying file from $Source to
  $OutPath\\\"\\r\\n        Copy-Item $Source
  $OutPath\\r\\n        return\\r\\n    }\\r\\n\\r\\n    $Stream =
  $null\\r\\n\\r\\n    try {\\r\\n        $Response = GetHTTPResponse -Uri
  $Source\\r\\n        $Stream =
  $Response.Content.ReadAsStreamAsync().Result\\r\\n        $File =
  [System.IO.File]::Create($OutPath)\\r\\n        $Stream.CopyTo($File)\\r\\n        \
  $File.Close()\\r\\n    }\\r\\n    finally {\\r\\n        if ($null -ne
  $Stream)
  {\\r\\n            $Stream.Dispose()\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\
  \\nfunction SafeRemoveFile($Path) {\\r\\n    try {\\r\\n        if (Test-Path
  $Path) {\\r\\n            Remove-Item $Path\\r\\n            Say-Verbose
  \\\"The temporary file `\\\"$Path`\\\" was
  removed.\\\"\\r\\n        }\\r\\n        else\\r\\n        {\\r\\n            \
  Say-Verbose \\\"The temporary file `\\\"$Path`\\\" does not exist, therefore
  is not
  removed.\\\"\\r\\n        }\\r\\n    }\\r\\n    catch\\r\\n    {\\r\\n        \
  Say-Warning \\\"Failed to remove the temporary file: `\\\"$Path`\\\", remove
  it manually.\\\"\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction
  Prepend-Sdk-InstallRoot-To-Path([string]$InstallRoot) {\\r\\n    $BinPath =
  Get-Absolute-Path $(Join-Path -Path $InstallRoot -ChildPath
  \\\"\\\")\\r\\n    if (-Not $NoPath) {\\r\\n        $SuffixedBinPath =
  \\\"$BinPath;\\\"\\r\\n        if (-Not $env:path.Contains($SuffixedBinPath))
  {\\r\\n            Say \\\"Adding to current process PATH: `\\\"$BinPath`\\\".
  Note: This change will not be visible if PowerShell was run as a child
  process.\\\"\\r\\n            $env:path = $SuffixedBinPath +
  $env:path\\r\\n        } else {\\r\\n            Say-Verbose \\\"Current
  process PATH already contains
  `\\\"$BinPath`\\\"\\\"\\r\\n        }\\r\\n    }\\r\\n    else
  {\\r\\n        Say \\\"Binaries of dotnet can be found in
  $BinPath\\\"\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction
  PrintDryRunOutput($Invocation, $DownloadLinks)\\r\\n{\\r\\n    Say \\\"Payload
  URLs:\\\"\\r\\n    \\r\\n    for ($linkIndex=0; $linkIndex -lt
  $DownloadLinks.count; $linkIndex++) {\\r\\n        Say \\\"URL #$linkIndex -
  $($DownloadLinks[$linkIndex].type):
  $($DownloadLinks[$linkIndex].downloadLink)\\\"\\r\\n    }\\r\\n    $Repeatabl\
  eCommand = \\\".\\\\$ScriptName -Version `\\\"$SpecificVersion`\\\"
  -InstallDir `\\\"$InstallRoot`\\\" -Architecture
  `\\\"$CLIArchitecture`\\\"\\\"\\r\\n    if ($Runtime -eq \\\"dotnet\\\")
  {\\r\\n       $RepeatableCommand+=\\\" -Runtime
  `\\\"dotnet`\\\"\\\"\\r\\n    }\\r\\n    elseif ($Runtime -eq
  \\\"aspnetcore\\\") {\\r\\n       $RepeatableCommand+=\\\" -Runtime
  `\\\"aspnetcore`\\\"\\\"\\r\\n    }\\r\\n\\r\\n    foreach ($key in
  $Invocation.BoundParameters.Keys) {\\r\\n        if (-not
  (@(\\\"Architecture\\\",\\\"Channel\\\",\\\"DryRun\\\",\\\"InstallDir\\\",\\\
  \"Runtime\\\",\\\"SharedRuntime\\\",\\\"Version\\\",\\\"Quality\\\",\\\"FeedC\
  redential\\\") -contains $key)) {\\r\\n            $RepeatableCommand+=\\\"
  -$key
  `\\\"$($Invocation.BoundParameters[$key])`\\\"\\\"\\r\\n        }\\r\\n    }\
  \\r\\n    if ($Invocation.BoundParameters.Keys -contains
  \\\"FeedCredential\\\") {\\r\\n        $RepeatableCommand+=\\\"
  -FeedCredential `\\\"<feedCredential>`\\\"\\\"\\r\\n    }\\r\\n    Say
  \\\"Repeatable invocation: $RepeatableCommand\\\"\\r\\n    if
  ($SpecificVersion -ne $EffectiveVersion)\\r\\n    {\\r\\n        Say \\\"NOTE:
  Due to finding a version manifest with this runtime, it would actually install
  with version '$EffectiveVersion'\\\"\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction
  Get-AkaMSDownloadLink([string]$Channel, [string]$Quality, [bool]$Internal,
  [string]$Product, [string]$Architecture) {\\r\\n    Say-Invocation
  $MyInvocation \\r\\n\\r\\n    #quality is not supported for LTS or STS
  channel\\r\\n    if (![string]::IsNullOrEmpty($Quality) -and (@(\\\"LTS\\\",
  \\\"STS\\\") -contains $Channel)) {\\r\\n        $Quality =
  \\\"\\\"\\r\\n        Say-Warning \\\"Specifying quality for STS or LTS
  channel is not supported, the quality will be
  ignored.\\\"\\r\\n    }\\r\\n    Say-Verbose \\\"Retrieving primary payload
  URL from aka.ms link for channel: '$Channel', quality: '$Quality' product:
  '$Product', os: 'win', architecture: '$Architecture'.\\\"
  \\r\\n   \\r\\n    #construct aka.ms link\\r\\n    $akaMsLink =
  \\\"https://aka.ms/dotnet\\\"\\r\\n    if ($Internal)
  {\\r\\n        $akaMsLink += \\\"/internal\\\"\\r\\n    }\\r\\n    $akaMsLink
  += \\\"/$Channel\\\"\\r\\n    if (-not [string]::IsNullOrEmpty($Quality))
  {\\r\\n        $akaMsLink +=\\\"/$Quality\\\"\\r\\n    }\\r\\n    $akaMsLink
  +=\\\"/$Product-win-$Architecture.zip\\\"\\r\\n    Say-Verbose  \\\"Construct\
  ed aka.ms link:
  '$akaMsLink'.\\\"\\r\\n    $akaMsDownloadLink=$null\\r\\n\\r\\n    for
  ($maxRedirections = 9; $maxRedirections -ge 0;
  $maxRedirections--)\\r\\n    {\\r\\n        #get HTTP
  response\\r\\n        #do not pass credentials as a part of the $akaMsLink and
  do not apply credentials in the GetHTTPResponse
  function\\r\\n        #otherwise the redirect link would have credentials as
  well\\r\\n        #it would result in applying credentials twice to the
  resulting link and thus breaking it, and in echoing credentials to the output
  as a part of redirect link\\r\\n        $Response= GetHTTPResponse -Uri
  $akaMsLink -HeaderOnly $true -DisableRedirect $true -DisableFeedCredential
  $true\\r\\n        Say-Verbose \\\"Received
  response:`n$Response\\\"\\r\\n\\r\\n        if
  ([string]::IsNullOrEmpty($Response)) {\\r\\n            Say-Verbose \\\"The
  link '$akaMsLink' is not valid: failed to get redirect location. The resource
  is not available.\\\"\\r\\n            return
  $null\\r\\n        }\\r\\n\\r\\n        #if HTTP code is 301 (Moved
  Permanently), the redirect link exists\\r\\n        if  ($Response.StatusCode
  -eq 301)\\r\\n        {\\r\\n            try
  {\\r\\n                $akaMsDownloadLink =
  $Response.Headers.GetValues(\\\"Location\\\")[0]\\r\\n\\r\\n                if
  ([string]::IsNullOrEmpty($akaMsDownloadLink))
  {\\r\\n                    Say-Verbose \\\"The link '$akaMsLink' is not valid:
  server returned 301 (Moved Permanently), but the headers do not contain the
  redirect location.\\\"\\r\\n                    return
  $null\\r\\n                }\\r\\n\\r\\n                Say-Verbose \\\"The
  redirect location retrieved: '$akaMsDownloadLink'.\\\"\\r\\n                #
  This may yet be a link to another redirection. Attempt to retrieve the page
  again.\\r\\n                $akaMsLink =
  $akaMsDownloadLink\\r\\n                continue\\r\\n            }\\r\\n            \
  catch {\\r\\n                Say-Verbose \\\"The link '$akaMsLink' is not
  valid: failed to get redirect location.\\\"\\r\\n                return
  $null\\r\\n            }\\r\\n        }\\r\\n        elseif
  ((($Response.StatusCode -lt 300) -or ($Response.StatusCode -ge 400)) -and
  (-not
  [string]::IsNullOrEmpty($akaMsDownloadLink)))\\r\\n        {\\r\\n            \
  # Redirections have ended.\\r\\n            return
  $akaMsDownloadLink\\r\\n        }\\r\\n\\r\\n        Say-Verbose \\\"The link
  '$akaMsLink' is not valid: failed to retrieve the redirection
  location.\\\"\\r\\n        return $null\\r\\n    }\\r\\n\\r\\n    Say-Verbose
  \\\"Aka.ms links have redirected more than the maximum allowed redirections.
  This may be caused by a cyclic redirection of aka.ms
  links.\\\"\\r\\n    return $null\\r\\n\\r\\n}\\r\\n\\r\\nfunction
  Get-AkaMsLink-And-Version([string] $NormalizedChannel, [string]
  $NormalizedQuality, [bool] $Internal, [string] $ProductName, [string]
  $Architecture) {\\r\\n    $AkaMsDownloadLink = Get-AkaMSDownloadLink -Channel
  $NormalizedChannel -Quality $NormalizedQuality -Internal $Internal -Product
  $ProductName -Architecture $Architecture\\r\\n   \\r\\n    if
  ([string]::IsNullOrEmpty($AkaMsDownloadLink)){\\r\\n        if (-not
  [string]::IsNullOrEmpty($NormalizedQuality)) {\\r\\n            # if quality
  is specified - exit with error - there is no fallback
  approach\\r\\n            Say-Error \\\"Failed to locate the latest version in
  the channel '$NormalizedChannel' with '$NormalizedQuality' quality for
  '$ProductName', os: 'win', architecture:
  '$Architecture'.\\\"\\r\\n            Say-Error \\\"Refer to:
  https://aka.ms/dotnet-os-lifecycle for information on .NET Core
  support.\\\"\\r\\n            throw \\\"aka.ms link resolution
  failure\\\"\\r\\n        }\\r\\n        Say-Verbose \\\"Falling back to
  latest.version file approach.\\\"\\r\\n        return ($null, $null,
  $null)\\r\\n    }\\r\\n    else {\\r\\n        Say-Verbose \\\"Retrieved
  primary named payload URL from aka.ms link:
  '$AkaMsDownloadLink'.\\\"\\r\\n        Say-Verbose  \\\"Downloading using
  legacy url will not be attempted.\\\"\\r\\n\\r\\n        #get version from the
  path\\r\\n        $pathParts = $AkaMsDownloadLink.Split('/')\\r\\n        if
  ($pathParts.Length -ge 2) { \\r\\n            $SpecificVersion =
  $pathParts[$pathParts.Length - 2]\\r\\n            Say-Verbose \\\"Version:
  '$SpecificVersion'.\\\"\\r\\n        }\\r\\n        else
  {\\r\\n            Say-Error \\\"Failed to extract the version from download
  link '$AkaMsDownloadLink'.\\\"\\r\\n            return ($null, $null,
  $null)\\r\\n        }\\r\\n\\r\\n        #retrieve effective (product)
  version\\r\\n        $EffectiveVersion = Get-Product-Version -SpecificVersion
  $SpecificVersion -PackageDownloadLink
  $AkaMsDownloadLink\\r\\n        Say-Verbose \\\"Product version:
  '$EffectiveVersion'.\\\"\\r\\n\\r\\n        return ($AkaMsDownloadLink,
  $SpecificVersion, $EffectiveVersion);\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction
  Get-Feeds-To-Use()\\r\\n{\\r\\n    $feeds =
  @(\\r\\n    \\\"https://dotnetcli.azureedge.net/dotnet\\\",\\r\\n    \\\"http\
  s://dotnetbuilds.azureedge.net/public\\\"\\r\\n    )\\r\\n\\r\\n    if (-not
  [string]::IsNullOrEmpty($AzureFeed)) {\\r\\n        $feeds =
  @($AzureFeed)\\r\\n    }\\r\\n\\r\\n    if ($NoCdn) {\\r\\n        $feeds =
  @(\\r\\n        \\\"https://dotnetcli.blob.core.windows.net/dotnet\\\",\\r\\n        \
  \\\"https://dotnetbuilds.blob.core.windows.net/public\\\"\\r\\n        )\\r\\n\
  \\r\\n        if (-not [string]::IsNullOrEmpty($UncachedFeed))
  {\\r\\n            $feeds =
  @($UncachedFeed)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return
  $feeds\\r\\n}\\r\\n\\r\\nfunction Resolve-AssetName-And-RelativePath([string]
  $Runtime) {\\r\\n    \\r\\n    if ($Runtime -eq \\\"dotnet\\\")
  {\\r\\n        $assetName = \\\".NET Core
  Runtime\\\"\\r\\n        $dotnetPackageRelativePath =
  \\\"shared\\\\Microsoft.NETCore.App\\\"\\r\\n    }\\r\\n    elseif ($Runtime
  -eq \\\"aspnetcore\\\") {\\r\\n        $assetName = \\\"ASP.NET Core
  Runtime\\\"\\r\\n        $dotnetPackageRelativePath =
  \\\"shared\\\\Microsoft.AspNetCore.App\\\"\\r\\n    }\\r\\n    elseif
  ($Runtime -eq \\\"windowsdesktop\\\") {\\r\\n        $assetName = \\\".NET
  Core Windows Desktop Runtime\\\"\\r\\n        $dotnetPackageRelativePath =
  \\\"shared\\\\Microsoft.WindowsDesktop.App\\\"\\r\\n    }\\r\\n    elseif
  (-not $Runtime) {\\r\\n        $assetName = \\\".NET Core
  SDK\\\"\\r\\n        $dotnetPackageRelativePath =
  \\\"sdk\\\"\\r\\n    }\\r\\n    else {\\r\\n        throw \\\"Invalid value
  for `$Runtime\\\"\\r\\n    }\\r\\n\\r\\n    return ($assetName,
  $dotnetPackageRelativePath)\\r\\n}\\r\\n\\r\\nfunction
  Prepare-Install-Directory {\\r\\n    New-Item -ItemType Directory -Force -Path
  $InstallRoot | Out-Null\\r\\n\\r\\n    $installDrive = $((Get-Item
  $InstallRoot -Force).PSDrive.Name);\\r\\n    $diskInfo =
  $null\\r\\n    try{\\r\\n        $diskInfo = Get-PSDrive -Name
  $installDrive\\r\\n    }\\r\\n    catch{\\r\\n        Say-Warning \\\"Failed
  to check the disk space. Installation will continue, but it may fail if you do
  not have enough disk space.\\\"\\r\\n    }\\r\\n    \\r\\n    if ( ($null -ne
  $diskInfo) -and ($diskInfo.Free / 1MB -le 100)) {\\r\\n        throw \\\"There
  is not enough disk space on drive
  ${installDrive}:\\\"\\r\\n    }\\r\\n}\\r\\n\\r\\nSay-Verbose \\\"Note that
  the intended use of this script is for Continuous Integration (CI) scenarios,
  where:\\\"\\r\\nSay-Verbose \\\"- The SDK needs to be installed without user
  interaction and without admin rights.\\\"\\r\\nSay-Verbose \\\"- The SDK
  installation doesn't need to persist across multiple CI
  runs.\\\"\\r\\nSay-Verbose \\\"To set up a development environment or to run
  apps, use installers rather than this script. Visit
  https://dotnet.microsoft.com/download to get the
  installer.`r`n\\\"\\r\\n\\r\\nif ($SharedRuntime -and (-not $Runtime))
  {\\r\\n    $Runtime =
  \\\"dotnet\\\"\\r\\n}\\r\\n\\r\\n$OverrideNonVersionedFiles =
  !$SkipNonVersionedFiles\\r\\n\\r\\nMeasure-Action \\\"Product discovery\\\"
  {\\r\\n    $script:CLIArchitecture = Get-CLIArchitecture-From-Architecture
  $Architecture\\r\\n    $script:NormalizedQuality = Get-NormalizedQuality
  $Quality\\r\\n    Say-Verbose \\\"Normalized quality:
  '$NormalizedQuality'\\\"\\r\\n    $script:NormalizedChannel =
  Get-NormalizedChannel $Channel\\r\\n    Say-Verbose \\\"Normalized channel:
  '$NormalizedChannel'\\\"\\r\\n    $script:NormalizedProduct =
  Get-NormalizedProduct $Runtime\\r\\n    Say-Verbose \\\"Normalized product:
  '$NormalizedProduct'\\\"\\r\\n    $script:FeedCredential =
  ValidateFeedCredential $FeedCredential\\r\\n}\\r\\n\\r\\n$InstallRoot =
  Resolve-Installation-Path $InstallDir\\r\\nSay-Verbose \\\"InstallRoot:
  $InstallRoot\\\"\\r\\n$ScriptName =
  $MyInvocation.MyCommand.Name\\r\\n($assetName, $dotnetPackageRelativePath) =
  Resolve-AssetName-And-RelativePath -Runtime $Runtime\\r\\n\\r\\n$feeds =
  Get-Feeds-To-Use\\r\\n$DownloadLinks = @()\\r\\n\\r\\nif
  ($Version.ToLowerInvariant() -ne \\\"latest\\\" -and -not
  [string]::IsNullOrEmpty($Quality)) {\\r\\n    throw \\\"Quality and Version
  options are not allowed to be specified simultaneously. See https://
  learn.microsoft.com/dotnet/core/tools/dotnet-install-script#options for
  details.\\\"\\r\\n}\\r\\n\\r\\n# aka.ms links can only be used if the user did
  not request a specific version via the command line or a global.json
  file.\\r\\nif ([string]::IsNullOrEmpty($JSonFile) -and ($Version -eq
  \\\"latest\\\")) {\\r\\n    ($DownloadLink, $SpecificVersion,
  $EffectiveVersion) = Get-AkaMsLink-And-Version $NormalizedChannel
  $NormalizedQuality $Internal $NormalizedProduct
  $CLIArchitecture\\r\\n    \\r\\n    if ($null -ne $DownloadLink)
  {\\r\\n        $DownloadLinks += New-Object PSObject -Property
  @{downloadLink=\\\"$DownloadLink\\\";specificVersion=\\\"$SpecificVersion\\\"\
  ;effectiveVersion=\\\"$EffectiveVersion\\\";type='aka.ms'}\\r\\n        Say-V\
  erbose \\\"Generated aka.ms link $DownloadLink with version
  $EffectiveVersion\\\"\\r\\n        \\r\\n        if (-Not $DryRun)
  {\\r\\n            Say-Verbose \\\"Checking if the version $EffectiveVersion
  is already installed\\\"\\r\\n            if (Is-Dotnet-Package-Installed
  -InstallRoot $InstallRoot -RelativePathToPackage $dotnetPackageRelativePath
  -SpecificVersion
  $EffectiveVersion)\\r\\n            {\\r\\n                Say \\\"$assetName
  with version '$EffectiveVersion' is already
  installed.\\\"\\r\\n                Prepend-Sdk-InstallRoot-To-Path
  -InstallRoot
  $InstallRoot\\r\\n                return\\r\\n            }\\r\\n        }\\r\
  \\n    }\\r\\n}\\r\\n\\r\\n# Primary and legacy links cannot be used if a
  quality was specified.\\r\\n# If we already have an aka.ms link, no need to
  search the blob feeds.\\r\\nif ([string]::IsNullOrEmpty($NormalizedQuality)
  -and 0 -eq $DownloadLinks.count)\\r\\n{\\r\\n    foreach ($feed in $feeds)
  {\\r\\n        try {\\r\\n            $SpecificVersion =
  Get-Specific-Version-From-Version -AzureFeed $feed -Channel $Channel -Version
  $Version -JSonFile $JSonFile\\r\\n            $DownloadLink, $EffectiveVersion
  = Get-Download-Link -AzureFeed $feed -SpecificVersion $SpecificVersion
  -CLIArchitecture $CLIArchitecture\\r\\n            $LegacyDownloadLink =
  Get-LegacyDownload-Link -AzureFeed $feed -SpecificVersion $SpecificVersion
  -CLIArchitecture
  $CLIArchitecture\\r\\n            \\r\\n            $DownloadLinks +=
  New-Object PSObject -Property
  @{downloadLink=\\\"$DownloadLink\\\";specificVersion=\\\"$SpecificVersion\\\"\
  ;effectiveVersion=\\\"$EffectiveVersion\\\";type='primary'}\\r\\n            \
  Say-Verbose \\\"Generated primary link $DownloadLink with version
  $EffectiveVersion\\\"\\r\\n    \\r\\n            if (-not
  [string]::IsNullOrEmpty($LegacyDownloadLink))
  {\\r\\n                $DownloadLinks += New-Object PSObject -Property
  @{downloadLink=\\\"$LegacyDownloadLink\\\";specificVersion=\\\"$SpecificVersi\
  on\\\";effectiveVersion=\\\"$EffectiveVersion\\\";type='legacy'}\\r\\n                \
  Say-Verbose \\\"Generated legacy link $LegacyDownloadLink with version
  $EffectiveVersion\\\"\\r\\n            }\\r\\n    \\r\\n            if (-Not
  $DryRun) {\\r\\n                Say-Verbose \\\"Checking if the version
  $EffectiveVersion is already installed\\\"\\r\\n                if
  (Is-Dotnet-Package-Installed -InstallRoot $InstallRoot -RelativePathToPackage
  $dotnetPackageRelativePath -SpecificVersion
  $EffectiveVersion)\\r\\n                {\\r\\n                    Say
  \\\"$assetName with version '$EffectiveVersion' is already
  installed.\\\"\\r\\n                    Prepend-Sdk-InstallRoot-To-Path
  -InstallRoot
  $InstallRoot\\r\\n                    return\\r\\n                }\\r\\n            \
  }\\r\\n        }\\r\\n        catch\\r\\n        {\\r\\n            Say-Verbo\
  se \\\"Failed to acquire download links from feed $feed. Exception:
  $_\\\"\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nif ($DownloadLinks.count
  -eq 0) {\\r\\n    throw \\\"Failed to resolve the exact version
  number.\\\"\\r\\n}\\r\\n\\r\\nif ($DryRun) {\\r\\n    PrintDryRunOutput
  $MyInvocation $DownloadLinks\\r\\n    return\\r\\n}\\r\\n\\r\\nMeasure-Action
  \\\"Installation directory preparation\\\" { Prepare-Install-Directory
  }\\r\\n\\r\\n$ZipPath =
  [System.IO.Path]::combine([System.IO.Path]::GetTempPath(),
  [System.IO.Path]::GetRandomFileName())\\r\\nSay-Verbose \\\"Zip path:
  $ZipPath\\\"\\r\\n\\r\\n$DownloadSucceeded = $false\\r\\n$DownloadedLink =
  $null\\r\\n$ErrorMessages = @()\\r\\n\\r\\nforeach ($link in
  $DownloadLinks)\\r\\n{\\r\\n    Say-Verbose \\\"Downloading
  `\\\"$($link.type)`\\\" link $($link.downloadLink)\\\"\\r\\n\\r\\n    try
  {\\r\\n        Measure-Action \\\"Package download\\\" { DownloadFile -Source
  $link.downloadLink -OutPath $ZipPath }\\r\\n        Say-Verbose \\\"Download
  succeeded.\\\"\\r\\n        $DownloadSucceeded =
  $true\\r\\n        $DownloadedLink =
  $link\\r\\n        break\\r\\n    }\\r\\n    catch {\\r\\n        $StatusCode
  = $null\\r\\n        $ErrorMessage = $null\\r\\n\\r\\n        if
  ($PSItem.Exception.Data.Contains(\\\"StatusCode\\\"))
  {\\r\\n            $StatusCode =
  $PSItem.Exception.Data[\\\"StatusCode\\\"]\\r\\n        }\\r\\n    \\r\\n        \
  if ($PSItem.Exception.Data.Contains(\\\"ErrorMessage\\\"))
  {\\r\\n            $ErrorMessage =
  $PSItem.Exception.Data[\\\"ErrorMessage\\\"]\\r\\n        } else
  {\\r\\n            $ErrorMessage =
  $PSItem.Exception.Message\\r\\n        }\\r\\n\\r\\n        Say-Verbose
  \\\"Download failed with status code $StatusCode. Error message:
  $ErrorMessage\\\"\\r\\n        $ErrorMessages += \\\"Downloading from
  `\\\"$($link.type)`\\\" link has failed with error:`nUri:
  $($link.downloadLink)`nStatusCode: $StatusCode`nError:
  $ErrorMessage\\\"\\r\\n    }\\r\\n\\r\\n    # This link failed. Clean up
  before trying the next one.\\r\\n    SafeRemoveFile -Path
  $ZipPath\\r\\n}\\r\\n\\r\\nif (-not $DownloadSucceeded) {\\r\\n    foreach
  ($ErrorMessage in $ErrorMessages) {\\r\\n        Say-Error
  $ErrorMessages\\r\\n    }\\r\\n\\r\\n    throw \\\"Could not find
  `\\\"$assetName`\\\" with version =
  $($DownloadLinks[0].effectiveVersion)`nRefer to:
  https://aka.ms/dotnet-os-lifecycle for information on .NET
  support\\\"\\r\\n}\\r\\n\\r\\nSay \\\"Extracting the
  archive.\\\"\\r\\nMeasure-Action \\\"Package extraction\\\" {
  Extract-Dotnet-Package -ZipPath $ZipPath -OutPath $InstallRoot
  }\\r\\n\\r\\n#  Check if the SDK version is installed; if not, fail the
  installation.\\r\\n$isAssetInstalled = $false\\r\\n\\r\\n# if the version
  contains \\\"RTM\\\" or \\\"servicing\\\"; check if a 'release-type' SDK
  version is installed.\\r\\nif ($DownloadedLink.effectiveVersion -Match
  \\\"rtm\\\" -or $DownloadedLink.effectiveVersion -Match \\\"servicing\\\")
  {\\r\\n    $ReleaseVersion =
  $DownloadedLink.effectiveVersion.Split(\\\"-\\\")[0]\\r\\n    Say-Verbose
  \\\"Checking installation: version =
  $ReleaseVersion\\\"\\r\\n    $isAssetInstalled = Is-Dotnet-Package-Installed
  -InstallRoot $InstallRoot -RelativePathToPackage $dotnetPackageRelativePath
  -SpecificVersion $ReleaseVersion\\r\\n}\\r\\n\\r\\n#  Check if the SDK version
  is installed.\\r\\nif (!$isAssetInstalled) {\\r\\n    Say-Verbose \\\"Checking
  installation: version =
  $($DownloadedLink.effectiveVersion)\\\"\\r\\n    $isAssetInstalled =
  Is-Dotnet-Package-Installed -InstallRoot $InstallRoot -RelativePathToPackage
  $dotnetPackageRelativePath -SpecificVersion
  $DownloadedLink.effectiveVersion\\r\\n}\\r\\n\\r\\n# Version verification
  failed. More likely something is wrong either with the downloaded content or
  with the verification algorithm.\\r\\nif (!$isAssetInstalled)
  {\\r\\n    Say-Error \\\"Failed to verify the version of installed
  `\\\"$assetName`\\\".`nInstallation source:
  $($DownloadedLink.downloadLink).`nInstallation location: $InstallRoot.`nReport
  the bug at
  https://github.com/dotnet/install-scripts/issues.\\\"\\r\\n    throw
  \\\"`\\\"$assetName`\\\" with version = $($DownloadedLink.effectiveVersion)
  failed to install with an unknown error.\\\"\\r\\n}\\r\\n\\r\\nSafeRemoveFile
  -Path $ZipPath\\r\\n\\r\\nMeasure-Action \\\"Setting up shell environment\\\"
  { Prepend-Sdk-InstallRoot-To-Path -InstallRoot $InstallRoot }\\r\\n\\r\\nSay
  \\\"Note that the script does not resolve dependencies during
  installation.\\\"\\r\\nSay \\\"To check the list of dependencies, go to
  https://learn.microsoft.com/dotnet/core/install/windows#dependencies\\\"\\r\\\
  nSay \\\"Installed version is $($DownloadedLink.effectiveVersion)\\\"\\r\\nSay
  \\\"Installation finished\\\"\\r\\n# SIG # Begin signature block\\r\\n#
  MIInvwYJKoZIhvcNAQcCoIInsDCCJ6wCAQExDzANBglghkgBZQMEAgEFADB5Bgor\\r\\n#
  BgEEAYI3AgEEoGswaTA0BgorBgEEAYI3AgEeMCYCAwEAAAQQH8w7YFlLCE63JNLG\\r\\n#
  KX7zUQIBAAIBAAIBAAIBAAIBADAxMA0GCWCGSAFlAwQCAQUABCBhfTi3SRn7+vyy\\r\\n#
  uCXKPjhiawegWZ493EcaOEycbgkZcKCCDXYwggX0MIID3KADAgECAhMzAAACy7d1\\r\\n#
  OfsCcUI2AAAAAALLMA0GCSqGSIb3DQEBCwUAMH4xCzAJBgNVBAYTAlVTMRMwEQYD\\r\\n#
  VQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNy\\r\\n#
  b3NvZnQgQ29ycG9yYXRpb24xKDAmBgNVBAMTH01pY3Jvc29mdCBDb2RlIFNpZ25p\\r\\n#
  bmcgUENBIDIwMTEwHhcNMjIwNTEyMjA0NTU5WhcNMjMwNTExMjA0NTU5WjB0MQsw\\r\\n#
  CQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9u\\r\\n#
  ZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMR4wHAYDVQQDExVNaWNy\\r\\n#
  b3NvZnQgQ29ycG9yYXRpb24wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIB\\r\\n#
  AQC3sN0WcdGpGXPZIb5iNfFB0xZ8rnJvYnxD6Uf2BHXglpbTEfoe+mO//oLWkRxA\\r\\n#
  wppditsSVOD0oglKbtnh9Wp2DARLcxbGaW4YanOWSB1LyLRpHnnQ5POlh2U5trg4\\r\\n#
  3gQjvlNZlQB3lL+zrPtbNvMA7E0Wkmo+Z6YFnsf7aek+KGzaGboAeFO4uKZjQXY5\\r\\n#
  RmMzE70Bwaz7hvA05jDURdRKH0i/1yK96TDuP7JyRFLOvA3UXNWz00R9w7ppMDcN\\r\\n#
  lXtrmbPigv3xE9FfpfmJRtiOZQKd73K72Wujmj6/Su3+DBTpOq7NgdntW2lJfX3X\\r\\n#
  a6oe4F9Pk9xRhkwHsk7Ju9E/AgMBAAGjggFzMIIBbzAfBgNVHSUEGDAWBgorBgEE\\r\\n#
  AYI3TAgBBggrBgEFBQcDAzAdBgNVHQ4EFgQUrg/nt/gj+BBLd1jZWYhok7v5/w4w\\r\\n#
  RQYDVR0RBD4wPKQ6MDgxHjAcBgNVBAsTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEW\\r\\n#
  MBQGA1UEBRMNMjMwMDEyKzQ3MDUyODAfBgNVHSMEGDAWgBRIbmTlUAXTgqoXNzci\\r\\n#
  tW2oynUClTBUBgNVHR8ETTBLMEmgR6BFhkNodHRwOi8vd3d3Lm1pY3Jvc29mdC5j\\r\\n#
  b20vcGtpb3BzL2NybC9NaWNDb2RTaWdQQ0EyMDExXzIwMTEtMDctMDguY3JsMGEG\\r\\n#
  CCsGAQUFBwEBBFUwUzBRBggrBgEFBQcwAoZFaHR0cDovL3d3dy5taWNyb3NvZnQu\\r\\n#
  Y29tL3BraW9wcy9jZXJ0cy9NaWNDb2RTaWdQQ0EyMDExXzIwMTEtMDctMDguY3J0\\r\\n#
  MAwGA1UdEwEB/wQCMAAwDQYJKoZIhvcNAQELBQADggIBAJL5t6pVjIRlQ8j4dAFJ\\r\\n#
  ZnMke3rRHeQDOPFxswM47HRvgQa2E1jea2aYiMk1WmdqWnYw1bal4IzRlSVf4czf\\r\\n#
  zx2vjOIOiaGllW2ByHkfKApngOzJmAQ8F15xSHPRvNMmvpC3PFLvKMf3y5SyPJxh\\r\\n#
  922TTq0q5epJv1SgZDWlUlHL/Ex1nX8kzBRhHvc6D6F5la+oAO4A3o/ZC05OOgm4\\r\\n#
  EJxZP9MqUi5iid2dw4Jg/HvtDpCcLj1GLIhCDaebKegajCJlMhhxnDXrGFLJfX8j\\r\\n#
  7k7LUvrZDsQniJZ3D66K+3SZTLhvwK7dMGVFuUUJUfDifrlCTjKG9mxsPDllfyck\\r\\n#
  4zGnRZv8Jw9RgE1zAghnU14L0vVUNOzi/4bE7wIsiRyIcCcVoXRneBA3n/frLXvd\\r\\n#
  jDsbb2lpGu78+s1zbO5N0bhHWq4j5WMutrspBxEhqG2PSBjC5Ypi+jhtfu3+x76N\\r\\n#
  mBvsyKuxx9+Hm/ALnlzKxr4KyMR3/z4IRMzA1QyppNk65Ui+jB14g+w4vole33M1\\r\\n#
  pVqVckrmSebUkmjnCshCiH12IFgHZF7gRwE4YZrJ7QjxZeoZqHaKsQLRMp653beB\\r\\n#
  fHfeva9zJPhBSdVcCW7x9q0c2HVPLJHX9YCUU714I+qtLpDGrdbZxD9mikPqL/To\\r\\n#
  /1lDZ0ch8FtePhME7houuoPcMIIHejCCBWKgAwIBAgIKYQ6Q0gAAAAAAAzANBgkq\\r\\n#
  hkiG9w0BAQsFADCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24x\\r\\n#
  EDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv\\r\\n#
  bjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5\\r\\n#
  IDIwMTEwHhcNMTEwNzA4MjA1OTA5WhcNMjYwNzA4MjEwOTA5WjB+MQswCQYDVQQG\\r\\n#
  EwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwG\\r\\n#
  A1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQg\\r\\n#
  Q29kZSBTaWduaW5nIFBDQSAyMDExMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIIC\\r\\n#
  CgKCAgEAq/D6chAcLq3YbqqCEE00uvK2WCGfQhsqa+laUKq4BjgaBEm6f8MMHt03\\r\\n#
  a8YS2AvwOMKZBrDIOdUBFDFC04kNeWSHfpRgJGyvnkmc6Whe0t+bU7IKLMOv2akr\\r\\n#
  rnoJr9eWWcpgGgXpZnboMlImEi/nqwhQz7NEt13YxC4Ddato88tt8zpcoRb0Rrrg\\r\\n#
  OGSsbmQ1eKagYw8t00CT+OPeBw3VXHmlSSnnDb6gE3e+lD3v++MrWhAfTVYoonpy\\r\\n#
  4BI6t0le2O3tQ5GD2Xuye4Yb2T6xjF3oiU+EGvKhL1nkkDstrjNYxbc+/jLTswM9\\r\\n#
  sbKvkjh+0p2ALPVOVpEhNSXDOW5kf1O6nA+tGSOEy/S6A4aN91/w0FK/jJSHvMAh\\r\\n#
  dCVfGCi2zCcoOCWYOUo2z3yxkq4cI6epZuxhH2rhKEmdX4jiJV3TIUs+UsS1Vz8k\\r\\n#
  A/DRelsv1SPjcF0PUUZ3s/gA4bysAoJf28AVs70b1FVL5zmhD+kjSbwYuER8ReTB\\r\\n#
  w3J64HLnJN+/RpnF78IcV9uDjexNSTCnq47f7Fufr/zdsGbiwZeBe+3W7UvnSSmn\\r\\n#
  Eyimp31ngOaKYnhfsi+E11ecXL93KCjx7W3DKI8sj0A3T8HhhUSJxAlMxdSlQy90\\r\\n#
  lfdu+HggWCwTXWCVmj5PM4TasIgX3p5O9JawvEagbJjS4NaIjAsCAwEAAaOCAe0w\\r\\n#
  ggHpMBAGCSsGAQQBgjcVAQQDAgEAMB0GA1UdDgQWBBRIbmTlUAXTgqoXNzcitW2o\\r\\n#
  ynUClTAZBgkrBgEEAYI3FAIEDB4KAFMAdQBiAEMAQTALBgNVHQ8EBAMCAYYwDwYD\\r\\n#
  VR0TAQH/BAUwAwEB/zAfBgNVHSMEGDAWgBRyLToCMZBDuRQFTuHqp8cx0SOJNDBa\\r\\n#
  BgNVHR8EUzBRME+gTaBLhklodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpL2Ny\\r\\n#
  bC9wcm9kdWN0cy9NaWNSb29DZXJBdXQyMDExXzIwMTFfMDNfMjIuY3JsMF4GCCsG\\r\\n#
  AQUFBwEBBFIwUDBOBggrBgEFBQcwAoZCaHR0cDovL3d3dy5taWNyb3NvZnQuY29t\\r\\n#
  L3BraS9jZXJ0cy9NaWNSb29DZXJBdXQyMDExXzIwMTFfMDNfMjIuY3J0MIGfBgNV\\r\\n#
  HSAEgZcwgZQwgZEGCSsGAQQBgjcuAzCBgzA/BggrBgEFBQcCARYzaHR0cDovL3d3\\r\\n#
  dy5taWNyb3NvZnQuY29tL3BraW9wcy9kb2NzL3ByaW1hcnljcHMuaHRtMEAGCCsG\\r\\n#
  AQUFBwICMDQeMiAdAEwAZQBnAGEAbABfAHAAbwBsAGkAYwB5AF8AcwB0AGEAdABl\\r\\n#
  AG0AZQBuAHQALiAdMA0GCSqGSIb3DQEBCwUAA4ICAQBn8oalmOBUeRou09h0ZyKb\\r\\n#
  C5YR4WOSmUKWfdJ5DJDBZV8uLD74w3LRbYP+vj/oCso7v0epo/Np22O/IjWll11l\\r\\n#
  hJB9i0ZQVdgMknzSGksc8zxCi1LQsP1r4z4HLimb5j0bpdS1HXeUOeLpZMlEPXh6\\r\\n#
  I/MTfaaQdION9MsmAkYqwooQu6SpBQyb7Wj6aC6VoCo/KmtYSWMfCWluWpiW5IP0\\r\\n#
  wI/zRive/DvQvTXvbiWu5a8n7dDd8w6vmSiXmE0OPQvyCInWH8MyGOLwxS3OW560\\r\\n#
  STkKxgrCxq2u5bLZ2xWIUUVYODJxJxp/sfQn+N4sOiBpmLJZiWhub6e3dMNABQam\\r\\n#
  ASooPoI/E01mC8CzTfXhj38cbxV9Rad25UAqZaPDXVJihsMdYzaXht/a8/jyFqGa\\r\\n#
  J+HNpZfQ7l1jQeNbB5yHPgZ3BtEGsXUfFL5hYbXw3MYbBL7fQccOKO7eZS/sl/ah\\r\\n#
  XJbYANahRr1Z85elCUtIEJmAH9AAKcWxm6U/RXceNcbSoqKfenoi+kiVH6v7RyOA\\r\\n#
  9Z74v2u3S5fi63V4GuzqN5l5GEv/1rMjaHXmr/r8i+sLgOppO6/8MO0ETI7f33Vt\\r\\n#
  Y5E90Z1WTk+/gFcioXgRMiF670EKsT/7qMykXcGhiJtXcVZOSEXAQsmbdlsKgEhr\\r\\n#
  /Xmfwb1tbWrJUnMTDXpQzTGCGZ8wghmbAgEBMIGVMH4xCzAJBgNVBAYTAlVTMRMw\\r\\n#
  EQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVN\\r\\n#
  aWNyb3NvZnQgQ29ycG9yYXRpb24xKDAmBgNVBAMTH01pY3Jvc29mdCBDb2RlIFNp\\r\\n#
  Z25pbmcgUENBIDIwMTECEzMAAALLt3U5+wJxQjYAAAAAAsswDQYJYIZIAWUDBAIB\\r\\n#
  BQCgga4wGQYJKoZIhvcNAQkDMQwGCisGAQQBgjcCAQQwHAYKKwYBBAGCNwIBCzEO\\r\\n#
  MAwGCisGAQQBgjcCARUwLwYJKoZIhvcNAQkEMSIEIFmuaTXYQ37AFvsEol24fdW+\\r\\n#
  nRqHcc1fr+VQVdqhXc/vMEIGCisGAQQBgjcCAQwxNDAyoBSAEgBNAGkAYwByAG8A\\r\\n#
  cwBvAGYAdKEagBhodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20wDQYJKoZIhvcNAQEB\\r\\n#
  BQAEggEAjY5XW5Ly7TJ1OTbeIR98xU+2dmtw7L71ws+ICnQCGhj2xJDUK+5yrTfO\\r\\n#
  8C98l/P4ynFi33Dl8z2YElqUCuqEXbiCzz06lIL4NuibC5DV/X80ZmICR/NYd2v1\\r\\n#
  ww7IH+7dpsHAowBBindCYpVwQ3Ea3kDWgsjPAinAysFFushSOnNWFvrF6vi2smrs\\r\\n#
  smbrAAhEhSfLd1Pxxdw73hQ0YjM/D3F3opaybMQ0blpHhOaqtbiyYzvk0doIzBEc\\r\\n#
  trSH4NDIc3yLNj5VbjSczpexE+hyQNY4xCtwco4bVtXhONUihv08AIKR8+sIaI7A\\r\\n#
  mM/SWrrwGYSSSxydKqDei7biKG4jDqGCFykwghclBgorBgEEAYI3AwMBMYIXFTCC\\r\\n#
  FxEGCSqGSIb3DQEHAqCCFwIwghb+AgEDMQ8wDQYJYIZIAWUDBAIBBQAwggFZBgsq\\r\\n#
  hkiG9w0BCRABBKCCAUgEggFEMIIBQAIBAQYKKwYBBAGEWQoDATAxMA0GCWCGSAFl\\r\\n#
  AwQCAQUABCB6Hzt2gUb/WZK8fvVnOocriE4rYr6mscZi3gZnBCpiigIGZBr2iMZU\\r\\n#
  GBMyMDIzMDMzMTE1MjEwNi41MTZaMASAAgH0oIHYpIHVMIHSMQswCQYDVQQGEwJV\\r\\n#
  UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UE\\r\\n#
  ChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMS0wKwYDVQQLEyRNaWNyb3NvZnQgSXJl\\r\\n#
  bGFuZCBPcGVyYXRpb25zIExpbWl0ZWQxJjAkBgNVBAsTHVRoYWxlcyBUU1MgRVNO\\r\\n#
  OjA4NDItNEJFNi1DMjlBMSUwIwYDVQQDExxNaWNyb3NvZnQgVGltZS1TdGFtcCBT\\r\\n#
  ZXJ2aWNloIIReDCCBycwggUPoAMCAQICEzMAAAGybkADf26plJIAAQAAAbIwDQYJ\\r\\n#
  KoZIhvcNAQELBQAwfDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24x\\r\\n#
  EDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv\\r\\n#
  bjEmMCQGA1UEAxMdTWljcm9zb2Z0IFRpbWUtU3RhbXAgUENBIDIwMTAwHhcNMjIw\\r\\n#
  OTIwMjAyMjAxWhcNMjMxMjE0MjAyMjAxWjCB0jELMAkGA1UEBhMCVVMxEzARBgNV\\r\\n#
  BAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jv\\r\\n#
  c29mdCBDb3Jwb3JhdGlvbjEtMCsGA1UECxMkTWljcm9zb2Z0IElyZWxhbmQgT3Bl\\r\\n#
  cmF0aW9ucyBMaW1pdGVkMSYwJAYDVQQLEx1UaGFsZXMgVFNTIEVTTjowODQyLTRC\\r\\n#
  RTYtQzI5QTElMCMGA1UEAxMcTWljcm9zb2Z0IFRpbWUtU3RhbXAgU2VydmljZTCC\\r\\n#
  AiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAMqiZTIde/lQ4rC+Bml5f/Wu\\r\\n#
  q/xKTxrfbG23HofmQ+qZAN4GyO73PF3y9OAfpt7Qf2jcldWOGUB+HzBuwllYyP3f\\r\\n#
  x4MY8zvuAuB37FvoytnNC2DKnVrVlHOVcGUL9CnmhDNMA2/nskjIf2IoiG9J0qLY\\r\\n#
  r8duvHdQJ9Li2Pq9guySb9mvUL60ogslCO9gkh6FiEDwMrwUr8Wja6jFpUTny8tg\\r\\n#
  0N0cnCN2w4fKkp5qZcbUYFYicLSb/6A7pHCtX6xnjqwhmJoib3vkKJyVxbuFLRhV\\r\\n#
  XxH95b0LHeNhifn3jvo2j+/4QV10jEpXVW+iC9BsTtR69xvTjU51ZgP7BR4YDEWq\\r\\n#
  7JsylSOv5B5THTDXRf184URzFhTyb8OZQKY7mqMh7c8J8w1sEM4XDUF2UZNy829N\\r\\n#
  VCzG2tfdEXZaHxF8RmxpQYBxyhZwY1rotuIS+gfN2eq+hkAT3ipGn8/KmDwDtzAb\\r\\n#
  nfuXjApgeZqwgcYJ8pDJ+y/xU6ouzJz1Bve5TTihkiA7wQsQe6R60Zk9dPdNzw0M\\r\\n#
  K5niRzuQZAt4GI96FhjhlUWcUZOCkv/JXM/OGu/rgSplYwdmPLzzfDtXyuy/GCU5\\r\\n#
  I4l08g6iifXypMgoYkkceOAAz4vx1x0BOnZWfI3fSwqNUvoN7ncTT+MB4Vpvf1QB\\r\\n#
  ppjBAQUuvui6eCG0MCVNAgMBAAGjggFJMIIBRTAdBgNVHQ4EFgQUmfIngFzZEZlP\\r\\n#
  kjDOVluBSDDaanEwHwYDVR0jBBgwFoAUn6cVXQBeYl2D9OXSZacbUzUZ6XIwXwYD\\r\\n#
  VR0fBFgwVjBUoFKgUIZOaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9j\\r\\n#
  cmwvTWljcm9zb2Z0JTIwVGltZS1TdGFtcCUyMFBDQSUyMDIwMTAoMSkuY3JsMGwG\\r\\n#
  CCsGAQUFBwEBBGAwXjBcBggrBgEFBQcwAoZQaHR0cDovL3d3dy5taWNyb3NvZnQu\\r\\n#
  Y29tL3BraW9wcy9jZXJ0cy9NaWNyb3NvZnQlMjBUaW1lLVN0YW1wJTIwUENBJTIw\\r\\n#
  MjAxMCgxKS5jcnQwDAYDVR0TAQH/BAIwADAWBgNVHSUBAf8EDDAKBggrBgEFBQcD\\r\\n#
  CDAOBgNVHQ8BAf8EBAMCB4AwDQYJKoZIhvcNAQELBQADggIBANxHtu3FzIabaDbW\\r\\n#
  qswdKBlAhKXRCN+5CSMiv2TYa4i2QuWIm+99piwAhDhADfbqor1zyLi95Y6GQnvI\\r\\n#
  WUgdeC7oL1ZtZye92zYK+EIfwYZmhS+CH4infAzUvscHZF3wlrJUfPUIDGVP0lCY\\r\\n#
  Vse9mguvG0dqkY4ayQPEHOvJubgZZaOdg/N8dInd6fGeOc+0DoGzB+LieObJ2Q0A\\r\\n#
  tEt3XN3iX8Cp6+dZTX8xwE/LvhRwPpb/+nKshO7TVuvenwdTwqB/LT6CNPaElwFe\\r\\n#
  KxKrqRTPMbHeg+i+KnBLfwmhEXsMg2s1QX7JIxfvT96md0eiMjiMEO22LbOzmLMN\\r\\n#
  d3LINowAnRBAJtX+3/e390B9sMGMHp+a1V+hgs62AopBl0p/00li30DN5wEQ5If3\\r\\n#
  5Zk7b/T6pEx6rJUDYCti7zCbikjKTanBnOc99zGMlej5X+fC/k5ExUCrOs3/VzGR\\r\\n#
  CZt5LvVQSdWqq/QMzTEmim4sbzASK9imEkjNtZZyvC1CsUcD1voFktld4mKMjE+u\\r\\n#
  DEV3IddD+DrRk94nVzNPSuZXewfVOnXHSeqG7xM3V7fl2aL4v1OhL2+JwO1Tx3B0\\r\\n#
  irO1O9qbNdJk355bntd1RSVKgM22KFBHnoL7Js7pRhBiaKmVTQGoOb+j1Qa7q+ci\\r\\n#
  xGo48Vh9k35BDsJS/DLoXFSPDl4mMIIHcTCCBVmgAwIBAgITMwAAABXF52ueAptJ\\r\\n#
  mQAAAAAAFTANBgkqhkiG9w0BAQsFADCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgT\\r\\n#
  Cldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29m\\r\\n#
  dCBDb3Jwb3JhdGlvbjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNh\\r\\n#
  dGUgQXV0aG9yaXR5IDIwMTAwHhcNMjEwOTMwMTgyMjI1WhcNMzAwOTMwMTgzMjI1\\r\\n#
  WjB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH\\r\\n#
  UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQD\\r\\n#
  Ex1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAxMDCCAiIwDQYJKoZIhvcNAQEB\\r\\n#
  BQADggIPADCCAgoCggIBAOThpkzntHIhC3miy9ckeb0O1YLT/e6cBwfSqWxOdcjK\\r\\n#
  NVf2AX9sSuDivbk+F2Az/1xPx2b3lVNxWuJ+Slr+uDZnhUYjDLWNE893MsAQGOhg\\r\\n#
  fWpSg0S3po5GawcU88V29YZQ3MFEyHFcUTE3oAo4bo3t1w/YJlN8OWECesSq/XJp\\r\\n#
  rx2rrPY2vjUmZNqYO7oaezOtgFt+jBAcnVL+tuhiJdxqD89d9P6OU8/W7IVWTe/d\\r\\n#
  vI2k45GPsjksUZzpcGkNyjYtcI4xyDUoveO0hyTD4MmPfrVUj9z6BVWYbWg7mka9\\r\\n#
  7aSueik3rMvrg0XnRm7KMtXAhjBcTyziYrLNueKNiOSWrAFKu75xqRdbZ2De+JKR\\r\\n#
  Hh09/SDPc31BmkZ1zcRfNN0Sidb9pSB9fvzZnkXftnIv231fgLrbqn427DZM9itu\\r\\n#
  qBJR6L8FA6PRc6ZNN3SUHDSCD/AQ8rdHGO2n6Jl8P0zbr17C89XYcz1DTsEzOUyO\\r\\n#
  ArxCaC4Q6oRRRuLRvWoYWmEBc8pnol7XKHYC4jMYctenIPDC+hIK12NvDMk2ZItb\\r\\n#
  oKaDIV1fMHSRlJTYuVD5C4lh8zYGNRiER9vcG9H9stQcxWv2XFJRXRLbJbqvUAV6\\r\\n#
  bMURHXLvjflSxIUXk8A8FdsaN8cIFRg/eKtFtvUeh17aj54WcmnGrnu3tz5q4i6t\\r\\n#
  AgMBAAGjggHdMIIB2TASBgkrBgEEAYI3FQEEBQIDAQABMCMGCSsGAQQBgjcVAgQW\\r\\n#
  BBQqp1L+ZMSavoKRPEY1Kc8Q/y8E7jAdBgNVHQ4EFgQUn6cVXQBeYl2D9OXSZacb\\r\\n#
  UzUZ6XIwXAYDVR0gBFUwUzBRBgwrBgEEAYI3TIN9AQEwQTA/BggrBgEFBQcCARYz\\r\\n#
  aHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9Eb2NzL1JlcG9zaXRvcnku\\r\\n#
  aHRtMBMGA1UdJQQMMAoGCCsGAQUFBwMIMBkGCSsGAQQBgjcUAgQMHgoAUwB1AGIA\\r\\n#
  QwBBMAsGA1UdDwQEAwIBhjAPBgNVHRMBAf8EBTADAQH/MB8GA1UdIwQYMBaAFNX2\\r\\n#
  VsuP6KJcYmjRPZSQW9fOmhjEMFYGA1UdHwRPME0wS6BJoEeGRWh0dHA6Ly9jcmwu\\r\\n#
  bWljcm9zb2Z0LmNvbS9wa2kvY3JsL3Byb2R1Y3RzL01pY1Jvb0NlckF1dF8yMDEw\\r\\n#
  LTA2LTIzLmNybDBaBggrBgEFBQcBAQROMEwwSgYIKwYBBQUHMAKGPmh0dHA6Ly93\\r\\n#
  d3cubWljcm9zb2Z0LmNvbS9wa2kvY2VydHMvTWljUm9vQ2VyQXV0XzIwMTAtMDYt\\r\\n#
  MjMuY3J0MA0GCSqGSIb3DQEBCwUAA4ICAQCdVX38Kq3hLB9nATEkW+Geckv8qW/q\\r\\n#
  XBS2Pk5HZHixBpOXPTEztTnXwnE2P9pkbHzQdTltuw8x5MKP+2zRoZQYIu7pZmc6\\r\\n#
  U03dmLq2HnjYNi6cqYJWAAOwBb6J6Gngugnue99qb74py27YP0h1AdkY3m2CDPVt\\r\\n#
  I1TkeFN1JFe53Z/zjj3G82jfZfakVqr3lbYoVSfQJL1AoL8ZthISEV09J+BAljis\\r\\n#
  9/kpicO8F7BUhUKz/AyeixmJ5/ALaoHCgRlCGVJ1ijbCHcNhcy4sa3tuPywJeBTp\\r\\n#
  kbKpW99Jo3QMvOyRgNI95ko+ZjtPu4b6MhrZlvSP9pEB9s7GdP32THJvEKt1MMU0\\r\\n#
  sHrYUP4KWN1APMdUbZ1jdEgssU5HLcEUBHG/ZPkkvnNtyo4JvbMBV0lUZNlz138e\\r\\n#
  W0QBjloZkWsNn6Qo3GcZKCS6OEuabvshVGtqRRFHqfG3rsjoiV5PndLQTHa1V1QJ\\r\\n#
  sWkBRH58oWFsc/4Ku+xBZj1p/cvBQUl+fpO+y/g75LcVv7TOPqUxUYS8vwLBgqJ7\\r\\n#
  Fx0ViY1w/ue10CgaiQuPNtq6TPmb/wrpNPgkNWcr4A245oyZ1uEi6vAnQj0llOZ0\\r\\n#
  dFtq0Z4+7X6gMTN9vMvpe784cETRkPHIqzqKOghif9lwY1NNje6CbaUFEMFxBmoQ\\r\\n#
  tB1VM1izoXBm8qGCAtQwggI9AgEBMIIBAKGB2KSB1TCB0jELMAkGA1UEBhMCVVMx\\r\\n#
  EzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoT\\r\\n#
  FU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEtMCsGA1UECxMkTWljcm9zb2Z0IElyZWxh\\r\\n#
  bmQgT3BlcmF0aW9ucyBMaW1pdGVkMSYwJAYDVQQLEx1UaGFsZXMgVFNTIEVTTjow\\r\\n#
  ODQyLTRCRTYtQzI5QTElMCMGA1UEAxMcTWljcm9zb2Z0IFRpbWUtU3RhbXAgU2Vy\\r\\n#
  dmljZaIjCgEBMAcGBSsOAwIaAxUAjhJ+EeySRfn2KCNsjn9cF9AUSTqggYMwgYCk\\r\\n#
  fjB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH\\r\\n#
  UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQD\\r\\n#
  Ex1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAxMDANBgkqhkiG9w0BAQUFAAIF\\r\\n#
  AOfRUdUwIhgPMjAyMzAzMzEyMDM0MjlaGA8yMDIzMDQwMTIwMzQyOVowdDA6Bgor\\r\\n#
  BgEEAYRZCgQBMSwwKjAKAgUA59FR1QIBADAHAgEAAgIKJDAHAgEAAgIRLzAKAgUA\\r\\n#
  59KjVQIBADA2BgorBgEEAYRZCgQCMSgwJjAMBgorBgEEAYRZCgMCoAowCAIBAAID\\r\\n#
  B6EgoQowCAIBAAIDAYagMA0GCSqGSIb3DQEBBQUAA4GBAJlOESCa/uRR1x6GunE8\\r\\n#
  K/WgHWTpSE31EITDOfTMvDcF4ptngCS5aOc4gfzmhNNehWfP6EOrgoSQzJYZ4YCh\\r\\n#
  fYbHNMk56f18sq8t7y2hgR7KixcEo/4HVzeSdaOclHNc4Gn7kCGpMvpT3Xz9Lzc7\\r\\n#
  UKWDZ0zkNKnbS8TZLNueVQwfMYIEDTCCBAkCAQEwgZMwfDELMAkGA1UEBhMCVVMx\\r\\n#
  EzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoT\\r\\n#
  FU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEmMCQGA1UEAxMdTWljcm9zb2Z0IFRpbWUt\\r\\n#
  U3RhbXAgUENBIDIwMTACEzMAAAGybkADf26plJIAAQAAAbIwDQYJYIZIAWUDBAIB\\r\\n#
  BQCgggFKMBoGCSqGSIb3DQEJAzENBgsqhkiG9w0BCRABBDAvBgkqhkiG9w0BCQQx\\r\\n#
  IgQgXhJRuHCXk3arJvifIY3DBe9Ce9EmlP1y6U4XkgL31DkwgfoGCyqGSIb3DQEJ\\r\\n#
  EAIvMYHqMIHnMIHkMIG9BCBTeM485+E+t4PEVieUoFKX7PVyLo/nzu+htJPCG04+\\r\\n#
  NTCBmDCBgKR+MHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAw\\r\\n#
  DgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24x\\r\\n#
  JjAkBgNVBAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAyMDEwAhMzAAABsm5A\\r\\n#
  A39uqZSSAAEAAAGyMCIEIGGWlnNnYHrB5HguWG0/nJd/WvSrCogze+QCpenu3IM5\\r\\n#
  MA0GCSqGSIb3DQEBCwUABIICADVOLTuNxeEnBOfZpb7Nv4uf91W/Ho5i99zenDSJ\\r\\n#
  x5QHVs+bKXmgc3a7/SSsliAT3zygHc7cH4zARbCZePLTivByKmeG08Ka35eyR+FK\\r\\n#
  awSNrI/X+eVIC6nw/egCwviBC1NAG8jHGkuScbHeiiGajvS6lp3ORML7UexMuE4w\\r\\n#
  9SEumoghljCLZMwCSvw+3WxhQoBEZroR8u+PID2RdD0vi85FjKPWcZZijVLqHeFi\\r\\n#
  TnuFqwRCLTV0MV+dDCbjwXneIqV+AVlnqb9iDMr3ZhISlRcy9XJNpY5vQBj/wqUW\\r\\n#
  vefrmpdz0LNkdtXYThPkyl3mha2KsoQi5SA9zSjlAjFgY3ppmXvi3Frbfqk+iL+f\\r\\n#
  l/Qc4+B71jG4t28lTWKteJiHqo+6AUXK2rlAl0d74yvhO6N8lMMtXhdJc8JABYn1\\r\\n#
  v2/KKZn5RvPFF8QP7Ac1saIe1+gUFNcsYOLaMm/xl8E6kefWwZnm5Rhm606g1AC/\\r\\n#
  N5Wo08aAs0ymTPH91dEbmOURXLbA3vCyG7kbfgnhCs/j7oQHWaFDzEYuXDIA4ICT\\r\\n#
  dxPUTltbq3OWdp0PAS8JSEKPQFaOoQEnPa4adrXWxMvOmel8IGqJiQ+BPOaLQG64\\r\\n#
  Qu2tMkH/5szb1fsEnCe8SJmy5ESF+kmpnLBtJ17Y9o+9nJHF5ddFmvzy+LUaIqDN\\r\\n#
  cOfH\\r\\n# SIG # End signature
  block\\r\\n\",\"installed\":[\"7.0.5\",\"6.0.16\",\"7.0.7\",\"7.0.8\",\"7.0.9\
  \",\"7.0.10\",\"8.0.2~x64\",\"8.0.3~x64\"]}"
ms-dotnettools.vscodeintellicode-csharp: "{}"
ms-python.debugpy: '{"PYTHON_GLOBAL_STORAGE_KEYS":[{"key":"PYTHON_EXTENSION_GLOBAL_STORAGE_KEYS","defaultValue":[]}]}'
ms-python.python: '{"VSCode.ABExp.FeatureData":{"features":["account-aa","config.editor.experimental.asyncTokenization","config.mypy-type-checker.preferDaemoncf","config.python.analysis.addImport.heuristics","config.python.analysis.enablePytestExtra","config.python.analysis.gotoDefinitionInStringLiteral","config.python.analysis.persistAllIndices","config.python.createEnvironment.contentButton","config.python.createEnvironment.trigger","livesharecontinuousaa","pythonaa","pythonRecommendTensorboardExt","pythonREPLSmartSend","pythonTerminalEnvVarActivation","pythonTestAdapter","regionCommentDiagnostics","vsaat"],"assignmentContext":"vsliv368:30146709;vspyt267:30556891;vsaa593:30376534;py29gd2263:30899288;962ge761:30959799;pythongtdpath:30769146;pythonidxpt:30866567;pythonnoceb:30805159;asynctok:30898717;pythontestfixt:30902429;pythonregdiag2:30936856;pyreplss1:30897532;pythonmypyd1:30879173;pythoncet0:30885854;pythontbext0:30951920;pythonait:31006305;vstestt:31010881;","configs":[{"Id":"vscode","Parameters":{"account-aa":true,"config.editor.experimental.asyncTokenization":true,"config.mypy-type-checker.preferDaemon":false,"config.python.analysis.addImport.heuristics":true,"config.python.analysis.enablePytestExtra":true,"config.python.analysis.gotoDefinitionInStringLiteral":true,"config.python.analysis.persistAllIndices":true,"config.python.createEnvironment.contentButton":"hide","config.python.createEnvironment.trigger":"prompt","livesharecontinuousaa":true,"pythonaa":true,"pythonRecommendTensorboardExt":true,"pythonREPLSmartSend":true,"pythonTerminalEnvVarActivation":true,"pythonTestAdapter":true,"regionCommentDiagnostics":true,"vsaat":true}}]},"preferredGlobalPyInterpreter":{"id":"C:\\USERS\\VIVLIM\\SCOOP\\APPS\\PYTHON\\3.12.1\\PYTHON.EXE","sysPrefix":"C:\\Users\\vivlim\\scoop\\apps\\python\\3.12.1","envType":"Global","envName":"","envPath":"","path":"C:\\Users\\vivlim\\scoop\\apps\\python\\3.12.1\\python.exe","architecture":3,"sysVersion":"3.12.2
  (tags/v3.12.2:6abddd9, Feb  6 2024, 21:26:36) [MSC v.1937 64 bit
  (AMD64)]","version":{"raw":"3.12.2","major":3,"minor":12,"patch":2,"build":[],"prerelease":["final","0"]},"displayName":"Python
  3.12.2 64-bit","detailedDisplayName":"Python 3.12.2
  64-bit"},"isRemoteGlobalSettingCopiedKey":true,"pylanceDefaultPromptMemento":true,"PYTHON_WAS_DISCOVERY_TRIGGERED_C:\\USERS\\VIVLIM\\GIT\\VIVLIM_NOTEBOOKS":true,"remoteWorkspaceFolderKeysForWhichTheCopyIsDone_Key":["D:\\GIT\\COPILOT-LOG-VIEWER","C:\\USERS\\VIVLIM\\GIT\\DEEPMERGECORE","D:\\DEEPMERGECORE","D:\\GIT\\2048ISH","C:\\USERS\\VIVLIM\\GIT\\MASTODON-ARCHIVE","D:\\SCRATCH\\MASTODON-ARCHIVE","D:\\INTELLICODE-VS3","C:\\USERS\\VIVLIM\\GIT\\PYTHIA","C:\\USERS\\VIVLIM\\GIT\\VIVLIM_NOTEBOOKS"],"PYTHON_WAS_DISCOVERY_TRIGGERED_C:\\USERS\\VIVLIM\\GIT\\PYTHIA":true,"PYTHON_WAS_DISCOVERY_TRIGGERED_D:\\INTELLICODE-VS3":true,"PYTHON_WAS_DISCOVERY_TRIGGERED_D:\\SCRATCH\\MASTODON-ARCHIVE":true,"autoSelectionInterpretersQueriedOnce":true,"SHELL_INTEGRATION_WORKING_KEY_powershell":true,"PYTHON_WAS_DISCOVERY_TRIGGERED_C:\\USERS\\VIVLIM\\GIT\\MASTODON-ARCHIVE":true,"WORKSPACE_FOLDER_INTERPRETER_PATH_C:\\USERS\\VIVLIM\\GIT\\MASTODON-ARCHIVE":"C:\\Users\\vivlim\\scoop\\apps\\python\\3.12.1\\python.exe","PYTHON_WAS_DISCOVERY_TRIGGERED_D:\\GIT\\2048ISH":true,"PYTHON_WAS_DISCOVERY_TRIGGERED_D:\\DEEPMERGECORE":true,"remoteWorkspaceKeysForWhichTheCopyIsDone_Key":["1711693905179"],"PYTHON_GLOBAL_STORAGE_KEYS":[{"key":"PYTHON_WAS_DISCOVERY_TRIGGERED_D:\\GIT\\COPILOT-LOG-VIEWER","defaultValue":false},{"key":"WORKSPACE_FOLDER_INTERPRETER_PATH_D:\\GIT\\COPILOT-LOG-VIEWER"},{"key":"PYTHON_ENV_INFO_CACHEv2","defaultValue":[]},{"key":"PYTHON_WAS_DISCOVERY_TRIGGERED_C:\\USERS\\VIVLIM\\GIT\\DEEPMERGECORE","defaultValue":false},{"key":"WORKSPACE_FOLDER_INTERPRETER_PATH_C:\\USERS\\VIVLIM\\GIT\\DEEPMERGECORE"},{"key":"TERMINAL_ENV_COLLECTION_PROMPT_KEY","defaultValue":true},{"key":"WORKSPACE_FOLDER_INTERPRETER_PATH_D:\\DEEPMERGECORE"},{"key":"remoteWorkspaceKeysForWhichTheCopyIsDone_Key","defaultValue":[]},{"key":"PYTHON_WAS_DISCOVERY_TRIGGERED_D:\\DEEPMERGECORE","defaultValue":false},{"key":"PYTHON_WAS_DISCOVERY_TRIGGERED_D:\\GIT\\2048ISH","defaultValue":false},{"key":"WORKSPACE_INTERPRETER_PATH_1711693905179"},{"key":"WORKSPACE_FOLDER_INTERPRETER_PATH_D:\\GIT\\2048ISH"},{"key":"PYTHON_WAS_DISCOVERY_TRIGGERED_C:\\USERS\\VIVLIM\\GIT\\MASTODON-ARCHIVE","defaultValue":false},{"key":"SHELL_INTEGRATION_WORKING_KEY_other"},{"key":"WORKSPACE_FOLDER_INTERPRETER_PATH_C:\\USERS\\VIVLIM\\GIT\\MASTODON-ARCHIVE"},{"key":"autoSelectionInterpretersQueriedOnce"},{"key":"PYTHON_WAS_DISCOVERY_TRIGGERED_D:\\SCRATCH\\MASTODON-ARCHIVE","defaultValue":false},{"key":"SHELL_INTEGRATION_WORKING_KEY_powershell"},{"key":"WORKSPACE_FOLDER_INTERPRETER_PATH_D:\\SCRATCH\\MASTODON-ARCHIVE"},{"key":"PYTHON_WAS_DISCOVERY_TRIGGERED_D:\\INTELLICODE-VS3","defaultValue":false},{"key":"WORKSPACE_FOLDER_INTERPRETER_PATH_D:\\INTELLICODE-VS3"},{"key":"PYTHON_WAS_DISCOVERY_TRIGGERED_C:\\USERS\\VIVLIM\\GIT\\PYTHIA","defaultValue":false},{"key":"WORKSPACE_FOLDER_INTERPRETER_PATH_C:\\USERS\\VIVLIM\\GIT\\PYTHIA"},{"key":"VSCode.ABExp.FeatureData","defaultValue":{"features":[]}},{"key":"isRemoteGlobalSettingCopiedKey","defaultValue":false},{"key":"remoteWorkspaceFolderKeysForWhichTheCopyIsDone_Key","defaultValue":[]},{"key":"PYTHON_WAS_DISCOVERY_TRIGGERED_C:\\USERS\\VIVLIM\\GIT\\VIVLIM_NOTEBOOKS","defaultValue":false},{"key":"PYTHON_ENV_INFO_CACHE","defaultValue":[]},{"key":"PYTHON_EXTENSION_GLOBAL_STORAGE_KEYS","defaultValue":[]},{"key":"PythonTensorBoardWebviewPreferredViewGroup","defaultValue":-1},{"key":"WORKSPACE_FOLDER_INTERPRETER_PATH_C:\\USERS\\VIVLIM\\GIT\\VIVLIM_NOTEBOOKS"},{"key":"preferredGlobalPyInterpreter"}],"PYTHON_ENV_INFO_CACHE":[{"name":"","location":"","kind":"global-other","executable":{"filename":"C:\\Users\\vivlim\\scoop\\apps\\python\\3.12.1\\python.exe","sysPrefix":"C:\\Users\\vivlim\\scoop\\apps\\python\\3.12.1","ctime":1711432154637,"mtime":1707257452000},"display":"Python
  3.12.2
  64-bit","version":{"major":3,"minor":12,"micro":2,"release":{"level":"final","serial":0},"sysVersion":"3.12.2
  (tags/v3.12.2:6abddd9, Feb  6 2024, 21:26:36) [MSC v.1937 64 bit
  (AMD64)]"},"arch":3,"distro":{"org":""},"source":[],"id":"C:\\USERS\\VIVLIM\\SCOOP\\APPS\\PYTHON\\3.12.1\\PYTHON.EXE","detailedDisplayName":"Python
  3.12.2
  64-bit"},{"name":"","location":"","kind":"global-other","executable":{"filename":"C:\\Users\\vivlim\\scoop\\apps\\python\\current\\python.exe","sysPrefix":"C:\\Users\\vivlim\\scoop\\apps\\python\\current","ctime":1711432154637,"mtime":1707257452000},"display":"Python
  3.12.2
  64-bit","version":{"major":3,"minor":12,"micro":2,"release":{"level":"final","serial":0},"sysVersion":"3.12.2
  (tags/v3.12.2:6abddd9, Feb  6 2024, 21:26:36) [MSC v.1937 64 bit
  (AMD64)]"},"arch":3,"distro":{"org":""},"source":[],"id":"C:\\USERS\\VIVLIM\\SCOOP\\APPS\\PYTHON\\CURRENT\\PYTHON.EXE","detailedDisplayName":"Python
  3.12.2
  64-bit"}],"PYTHON_WAS_DISCOVERY_TRIGGERED_C:\\USERS\\VIVLIM\\GIT\\DEEPMERGECORE":true,"PYTHON_WAS_DISCOVERY_TRIGGERED_D:\\GIT\\COPILOT-LOG-VIEWER":true,"PYTHON_ENV_INFO_CACHEv2":[{"name":"","location":"","kind":"global-other","executable":{"filename":"C:\\Users\\vivlim\\scoop\\apps\\python\\3.12.1\\python.exe","sysPrefix":"C:\\Users\\vivlim\\scoop\\apps\\python\\3.12.1","ctime":1713564820478,"mtime":1712674262000},"display":"Python
  3.12.3
  64-bit","version":{"major":3,"minor":12,"micro":3,"release":{"level":"final","serial":0},"sysVersion":"3.12.3
  (tags/v3.12.3:f6650f9, Apr  9 2024, 14:05:25) [MSC v.1938 64 bit
  (AMD64)]"},"arch":3,"distro":{"org":"PythonCore","defaultDisplayName":"Python
  3.12 (64-bit)"},"source":["path env var","windows
  registry"],"id":"C:\\USERS\\VIVLIM\\SCOOP\\APPS\\PYTHON\\3.12.1\\PYTHON.EXE","detailedDisplayName":"Python
  3.12.3
  64-bit"},{"name":"","location":"","kind":"global-other","executable":{"filename":"C:\\Users\\vivlim\\scoop\\apps\\python\\current\\python.exe","sysPrefix":"C:\\Users\\vivlim\\scoop\\apps\\python\\current","ctime":1713564820478,"mtime":1712674262000},"display":"Python
  3.12.3
  64-bit","version":{"major":3,"minor":12,"micro":3,"release":{"level":"final","serial":0},"sysVersion":"3.12.3
  (tags/v3.12.3:f6650f9, Apr  9 2024, 14:05:25) [MSC v.1938 64 bit
  (AMD64)]"},"arch":3,"distro":{"org":""},"source":[],"id":"C:\\USERS\\VIVLIM\\SCOOP\\APPS\\PYTHON\\CURRENT\\PYTHON.EXE","detailedDisplayName":"Python
  3.12.3 64-bit"}]}'
ms-python.vscode-pylance: '{"VSCode.ABExp.FeatureData":{"features":["account-aa","config.editor.experimental.asyncTokenization","config.mypy-type-checker.preferDaemoncf","config.python.analysis.enablePytestExtra","config.python.analysis.gotoDefinitionInStringLiteral","config.python.analysis.persistAllIndices","config.python.createEnvironment.contentButton","config.python.createEnvironment.trigger","livesharecontinuousaa","pythonaa","pythonRecommendTensorboardExt","pythonREPLSmartSend","pythonTerminalEnvVarActivation","pythonTestAdapter","regionCommentDiagnostics"],"assignmentContext":"vsliv368:30146709;vspyt267:30556891;vsaa593:30376534;py29gd2263:30899288;962ge761:30959799;pythongtdpath:30769146;pythonidxpt:30866567;pythonnoceb:30805159;asynctok:30898717;pythontestfixt:30902429;pythonregdiag2:30936856;pyreplss1:30897532;pythonmypyd1:30879173;pythoncet0:30885854;pythontbext0:30951920;","configs":[{"Id":"vscode","Parameters":{"account-aa":true,"config.editor.experimental.asyncTokenization":true,"config.mypy-type-checker.preferDaemon":false,"config.python.analysis.enablePytestExtra":true,"config.python.analysis.gotoDefinitionInStringLiteral":true,"config.python.analysis.persistAllIndices":true,"config.python.createEnvironment.contentButton":"hide","config.python.createEnvironment.trigger":"prompt","livesharecontinuousaa":true,"pythonaa":true,"pythonRecommendTensorboardExt":true,"pythonREPLSmartSend":true,"pythonTerminalEnvVarActivation":true,"pythonTestAdapter":true,"regionCommentDiagnostics":true}}]}}'
ms-toolsai.datawrangler: '{"VSCode.ABExp.FeatureData":{"features":["account-aa","config.dataWrangler.experiments.useJupyterProposedAPI","config.editor.experimental.asyncTokenization","copilotchat.renameSuggestionsDelayBeforeFetch","copilotchat.summarizedDocument.useScoreFunctioncf","DataViewerContribution","livesharecontinuousaa","mindaroBinariesVersion","portForwardingServiceEnabled-development","portForwardingServiceEnabled-production","portForwardingServiceEnabled-staging","shouldUseGrpcService","testtv"],"assignmentContext":"vsliv368:30146709;vspor879:30202332;vspor708:30202333;vspor363:30204092;tftest:31042121;binariesv615:30325510;vsaa593:30376534;c4g48928:30535728;asynctok:30898717;dsvsc020:30976470;01bff139:31013167;dwnewjupyter:31046869;26j00206:31048877;","configs":[{"Id":"vscode","Parameters":{"account-aa":true,"config.dataWrangler.experiments.useJupyterProposedAPI":true,"config.editor.experimental.asyncTokenization":true,"copilotchat.renameSuggestionsDelayBeforeFetch":350,"copilotchat.summarizedDocument.useScoreFunction":false,"DataViewerContribution":true,"livesharecontinuousaa":true,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true,"testtv":true}}]}}'
ms-toolsai.jupyter: '{"JupyterDetectionTelemetrySentMementoKey":true,"CACHE_KEY_FOR_JUPYTER_KERNELSPEC_ROOT_PATH.":"file:///c%3A/Users/vivlim/AppData/Roaming/jupyter/kernels","VSCode.ABExp.FeatureData":{"features":["account-aa","config.editor.experimental.asyncTokenization","config.jupyter.enableKernelCompletions","config.jupyter.formatStackTracescf","config.jupyter.interactiveWindow.textEditor.normalizeSelectioncf","config.mypy-type-checker.preferDaemoncf","config.python.analysis.addImport.heuristics","config.python.analysis.enablePytestExtra","config.python.analysis.gotoDefinitionInStringLiteral","config.python.analysis.persistAllIndices","config.python.createEnvironment.contentButton","config.python.createEnvironment.trigger","copilotchat.renameSuggestionsDelayBeforeFetch","DataViewerContribution","livesharecontinuousaa","mindaroBinariesVersion","portForwardingServiceEnabled-development","portForwardingServiceEnabled-production","portForwardingServiceEnabled-staging","pythonCreateEnvOnPipInstallcf","pythonRecommendTensorboardExt","pythonREPLSmartSend","pythonTerminalEnvVarActivation","pythonTestAdapter","regionCommentDiagnostics","shouldUseGrpcService"],"assignmentContext":"vsliv368:30146709;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593:30376534;py29gd2263:30899288;c4g48928:30535728;962ge761:30959799;pythongtdpath:30769146;pythonidxpt:30866567;pythonnoceb:30805159;asynctok:30898717;pythontestfixt:30902429;pythonregdiag2:30936856;pyreplss1:30897532;pythonmypyd1:30879173;pythoncet0:30885854;pythontbext0:30879054;dsvsc016:30899300;dsvsc017:30899301;dsvsc020:30976470;pythonait:31006305;dsvsc021:30996838;01bff139:31013167;pythoncenvptcf:31022791;","configs":[{"Id":"vscode","Parameters":{"account-aa":true,"config.editor.experimental.asyncTokenization":true,"config.jupyter.enableKernelCompletions":true,"config.jupyter.formatStackTraces":false,"config.jupyter.interactiveWindow.textEditor.normalizeSelection":false,"config.mypy-type-checker.preferDaemon":false,"config.python.analysis.addImport.heuristics":true,"config.python.analysis.enablePytestExtra":true,"config.python.analysis.gotoDefinitionInStringLiteral":true,"config.python.analysis.persistAllIndices":true,"config.python.createEnvironment.contentButton":"hide","config.python.createEnvironment.trigger":"prompt","copilotchat.renameSuggestionsDelayBeforeFetch":350,"DataViewerContribution":true,"livesharecontinuousaa":true,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"pythonCreateEnvOnPipInstall":false,"pythonRecommendTensorboardExt":true,"pythonREPLSmartSend":true,"pythonTerminalEnvVarActivation":true,"pythonTestAdapter":true,"regionCommentDiagnostics":true,"shouldUseGrpcService":true}}]},"INTERPRETER_PATH_WAS_SELECTED_FOR_JUPYTER_SERVER":true,"DS_InsidersNotebookExecutionCount":559,"DS_ExperimentNotebookExecutionCount":559,"DATASCIENCE.LAST_SAVED_CELL_LANGUAGE":"C#"}'
ms-vscode-remote.remote-containers: '{"localExtensions":["alexcvzz.vscode-sqlite","amodio.tsl-problem-matcher","ankitbko.vscode-pull-request-azdo","appulate.filewatcher","arcanis.vscode-zipfs","bierner.markdown-mermaid","bpruitt-goddard.mermaid-markdown-syntax-highlighting","bungcip.better-toml","ccimage.jsonviewer","ChaitanyaShahare.lazygit","DavidAnson.vscode-markdownlint","dbaeumer.vscode-eslint","donjayamanne.kusto","DotJoshJohnson.xml","dylan700.lru-tabs","eamodio.gitlens","EditorConfig.EditorConfig","egomobile.vscode-powertools","esbenp.prettier-vscode","everettjf.filter-line","fabiospampinato.vscode-diff","GitHub.codespaces","GitHub.copilot","GitHub.copilot-chat","Gruntfuggly.mermaid-export","Gruntfuggly.todo-tree","HookyQR.beautify","k--kato.docomment","kraml.vscode-everything-search-and-open","ms-azure-devops.azure-pipelines","ms-azuretools.vscode-azureresourcegroups","ms-azuretools.vscode-cosmosdb","ms-azuretools.vscode-docker","MS-CEINTL.vscode-language-pack-fr","ms-dotnettools.csdevkit","ms-dotnettools.csharp","ms-dotnettools.dotnet-interactive-vscode","ms-dotnettools.vscode-dotnet-runtime","ms-dotnettools.vscodeintellicode-csharp","ms-mssql.data-workspace-vscode","ms-mssql.mssql","ms-mssql.sql-bindings-vscode","ms-mssql.sql-database-projects-vscode","ms-python.debugpy","ms-python.python","ms-python.vscode-pylance","ms-toolsai.datawrangler","ms-toolsai.jupyter","ms-toolsai.jupyter-keymap","ms-toolsai.jupyter-renderers","ms-toolsai.vscode-jupyter-cell-tags","ms-toolsai.vscode-jupyter-slideshow","ms-vscode-remote.remote-containers","ms-vscode-remote.remote-ssh","ms-vscode-remote.remote-ssh-edit","ms-vscode-remote.remote-wsl","ms-vscode.azure-account","ms-vscode.azurecli","ms-vscode.cpptools","ms-vscode.powershell","ms-vscode.remote-explorer","ms-vscode.vscode-typescript-tslint-plugin","ms-vsliveshare.vsliveshare","nopjmp.fairyfloss","pflannery.vscode-versionlens","phil294.git-log--graph","qcz.text-power-tools","rafaelmaiolla.remote-vscode","redhat.java","rust-lang.rust-analyzer","scottsullivan.vs-workspace-themes","Sujan.code-green","Swellaby.workspace-config-plus","tamasfe.even-better-toml","TheaFlowers.witch-hazel","tintoy.msbuild-project-tools","VisualStudioExptTeam.vscodeintellicode-completions","VisualStudioExptTeam.vscodeintellicode-insiders","vivlim-msft.chaos-emerald","vivlim-msft.sonic","vscjava.vscode-java-debug","vscjava.vscode-java-dependency","vscjava.vscode-java-pack","vscjava.vscode-java-test","vscjava.vscode-maven","Wattenberger.footsteps","zokugun.cron-tasks","zokugun.sync-settings"],"VSCode.ABExp.FeatureData":{"features":["account-aa","config.editor.experimental.asyncTokenization","copilotchat.renameSuggestionsDelayBeforeFetch","copilotchat.summarizedDocument.useScoreFunctioncf","livesharecontinuousaa","mindaroBinariesVersion","portForwardingServiceEnabled-development","portForwardingServiceEnabled-production","portForwardingServiceEnabled-staging","shouldUseGrpcService","testtv"],"assignmentContext":"vsliv368:30146709;vspor879:30202332;vspor708:30202333;vspor363:30204092;tftest:31042121;binariesv615:30325510;vsaa593:30376534;c4g48928:30535728;asynctok:30898717;01bff139:31013167;26j00206:31048877;","configs":[{"Id":"vscode","Parameters":{"account-aa":true,"config.editor.experimental.asyncTokenization":true,"copilotchat.renameSuggestionsDelayBeforeFetch":350,"copilotchat.summarizedDocument.useScoreFunction":false,"livesharecontinuousaa":true,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true,"testtv":true}}]},"devcontainers.controlManifest":{"timestamp":"2024-05-07T02:12:00.130Z","manifest":{"disallowedFeatures":[{"featureIdPrefix":"ghcr.io/devcontainers/features/disallowed-feature","documentationURL":"https://github.com/devcontainers/features/tree/main/src/disallowed-feature#readme"},{"featureIdPrefix":"ghcr.io/chrmarti/test-features/test-disallowed-feature","documentationURL":"https://github.com/chrmarti/test-features/tree/main/src/test-disallowed-feature#readme"}],"featureAdvisories":[{"featureId":"ghcr.io/devcontainers/features/feature-with-advisory","introducedInVersion":"1.0.7","fixedInVersion":"1.1.10","description":"Feature
  with advisory for
  testing.","documentationURL":"https://github.com/devcontainers/features/tree/main/src/feature-with-advisory#readme"},{"featureId":"ghcr.io/chrmarti/test-features/test-feature-with-advisory-one","introducedInVersion":"1.0.0","fixedInVersion":"1.0.2","description":"Feature
  1 with advisory 1 for
  testing.","documentationURL":"https://github.com/chrmarti/test-features/tree/main/src/test-feature-with-advisory-one#readme"},{"featureId":"ghcr.io/chrmarti/test-features/test-feature-with-advisory-two","introducedInVersion":"1.0.1","fixedInVersion":"1.1.0","description":"Feature
  2 with advisory 1 for
  testing.","documentationURL":"https://github.com/chrmarti/test-features/tree/main/src/test-feature-with-advisory-two#readme"},{"featureId":"ghcr.io/chrmarti/test-features/test-feature-with-advisory-two","introducedInVersion":"1.2.0","fixedInVersion":"2.0.0","description":"Feature
  2 with advisory 2 for
  testing.","documentationURL":"https://github.com/chrmarti/test-features/tree/main/src/test-feature-with-advisory-two#readme"}]}},"removeOnStartup":false,"buildNoCache":false}'
ms-vscode-remote.remote-wsl: '{"VSCode.ABExp.FeatureData":{"features":["account-aa","config.editor.experimental.asyncTokenization","copilotchat.renameSuggestionsDelayBeforeFetch","copilotchat.summarizedDocument.useScoreFunctioncf","livesharecontinuousaa","mindaroBinariesVersion","portForwardingServiceEnabled-development","portForwardingServiceEnabled-production","portForwardingServiceEnabled-staging","shouldUseGrpcService","testtv"],"assignmentContext":"vsliv368:30146709;vspor879:30202332;vspor708:30202333;vspor363:30204092;tftest:31042121;binariesv615:30325510;vsaa593:30376534;c4g48928:30535728;asynctok:30898717;01bff139:31013167;26j00206:31048877;","configs":[{"Id":"vscode","Parameters":{"account-aa":true,"config.editor.experimental.asyncTokenization":true,"copilotchat.renameSuggestionsDelayBeforeFetch":350,"copilotchat.summarizedDocument.useScoreFunction":false,"livesharecontinuousaa":true,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true,"testtv":true}}]},"wsl.lastUpdateCheck":1716232713494,"wsl.downloadInProgress":true,"extensionUsed":true,"wsl.usageTime.linux-x64":1713566527696,"wsl.usageTime.linux-legacy-x64":1713567737888}'
ms-vscode.azure-account: '{"lastSeenSettingsCache":{"values":["ADAL","AzureCloud",""]},"nps/lastSessionDate":"Mon
  Mar 04
  2024","nps/sessionCount":9,"VSCode.ABExp.FeatureData":{"features":["account-aa","config.editor.experimental.asyncTokenization","config.mypy-type-checker.preferDaemoncf","config.python.analysis.enablePytestExtra","config.python.analysis.gotoDefinitionInStringLiteral","config.python.analysis.persistAllIndices","config.python.createEnvironment.contentButton","config.python.createEnvironment.trigger","copilotchat.renameSuggestionsDelayBeforeFetch","copilotchat.summarizedDocument.useScoreFunctioncf","livesharecontinuousaa","mindaroBinariesVersion","portForwardingServiceEnabled-development","portForwardingServiceEnabled-production","portForwardingServiceEnabled-staging","pythonRecommendTensorboardExt","pythonTerminalEnvVarActivation","pythonTestAdapter","regionCommentDiagnostics","shouldUseGrpcService","testtv"],"assignmentContext":"vsliv368:30146709;vspor879:30202332;vspor708:30202333;vspor363:30204092;tftest:31042121;binariesv615:30325510;vsaa593:30376534;py29gd2263:31024239;c4g48928:30535728;962ge761:30959799;pythongtdpath:30769146;pythonidxpt:30866567;pythonnoceb:30805159;asynctok:30898717;pythontestfixt:30902429;pythonregdiag2:30936856;pythonmypyd1:30879173;pythoncet0:30885854;pythontbext0:30879054;01bff139:31013167;26j00206:31048877;","configs":[{"Id":"vscode","Parameters":{"account-aa":true,"config.editor.experimental.asyncTokenization":true,"config.mypy-type-checker.preferDaemon":false,"config.python.analysis.enablePytestExtra":true,"config.python.analysis.gotoDefinitionInStringLiteral":true,"config.python.analysis.persistAllIndices":true,"config.python.createEnvironment.contentButton":"hide","config.python.createEnvironment.trigger":"prompt","copilotchat.renameSuggestionsDelayBeforeFetch":350,"copilotchat.summarizedDocument.useScoreFunction":false,"livesharecontinuousaa":true,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"pythonRecommendTensorboardExt":true,"pythonTerminalEnvVarActivation":true,"pythonTestAdapter":true,"regionCommentDiagnostics":true,"shouldUseGrpcService":true,"testtv":true}}]},"nps/isCandidate":false,"nps/skipVersion":"0.11.5"}'
ms-vscode.cpptools: '{"CPP.1.16.3.Progress":300,"VSCode.ABExp.FeatureData":{"features":["account-aa","config.editor.experimental.asyncTokenization","copilotchat.renameSuggestionsDelayBeforeFetch","CppTools1","livesharecontinuousaa","mindaroBinariesVersion","portForwardingServiceEnabled-development","portForwardingServiceEnabled-production","portForwardingServiceEnabled-staging","shouldUseGrpcService"],"assignmentContext":"vsliv368:30146709;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593:30376534;c4g48928:30535728;asynctok:30898717;cppperfnew:31000557;01bff139:31013167;","configs":[{"Id":"vscode","Parameters":{"account-aa":true,"config.editor.experimental.asyncTokenization":true,"copilotchat.renameSuggestionsDelayBeforeFetch":350,"CppTools1":true,"livesharecontinuousaa":true,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true}}]},"CPP.machineId":"e63036ed082773744bfaae167643ebb536d44c7d2e92ee36327dff002f395216","CPP.1.16.3.checkForConflictingExtensions":false,"CPP.1.16.3.ignoreMismatchedCompatibleVsix":false,"CPP.1.19.6.Progress":300,"CPP.1.19.6.ignoreMismatchedCompatibleVsix":false,"CPP.1.19.6.checkForConflictingExtensions":false,"CPP.1.19.7.Progress":300,"CPP.1.19.7.ignoreMismatchedCompatibleVsix":false,"CPP.1.19.7.checkForConflictingExtensions":false,"CPP.1.19.9.Progress":300,"CPP.1.19.9.ignoreMismatchedCompatibleVsix":false,"CPP.1.19.9.checkForConflictingExtensions":false,"CPP.displayedPreReleasePrompt":true}'
ms-vsliveshare.vsliveshare: '{"vsliveshare-first-activation-flag":"1.0.5864","firstActivationTime":1683137814830,"anonymousAuthReloadFlag":null,"wasForceReload":false,"firstActivationVersion":"1.0.5864","VSCode.ABExp.FeatureData":{"features":["account-aa","authProviderPicker","config.editor.experimental.asyncTokenization","copilotchat.renameSuggestionsDelayBeforeFetch","copilotchat.summarizedDocument.useScoreFunctioncf","followIndicator","joinFailureUriOfUndefined","livesharecontinuousaa","mindaroBinariesVersion","nativeAuth","portForwardingServiceEnabled-development","portForwardingServiceEnabled-production","portForwardingServiceEnabled-staging","readWriteAnonymous","resyncOnMisappliedEdit","saveDirtyDocOnReaddcf","shouldUseGrpcService","testtv","waitForPendingEditOnDispose"],"assignmentContext":"vsliv368:30146709;vsrea433:30283384;vspor879:30202332;vspor708:30202333;vspor363:30204092;tftest:31042121;vslsvssav100cf:30294723;vsnat461:30259396;vsjoi176:30286853;binariesv615:30325510;vsfol871:30383134;vslsresync:30385087;vsaa593:30376534;vs954:30425854;c4g48928:30535728;asynctok:30898717;01bff139:31013167;26j00206:31048877;","configs":[{"Id":"vscode","Parameters":{"account-aa":true,"authProviderPicker":true,"config.editor.experimental.asyncTokenization":true,"copilotchat.renameSuggestionsDelayBeforeFetch":350,"copilotchat.summarizedDocument.useScoreFunction":false,"followIndicator":true,"joinFailureUriOfUndefined":true,"livesharecontinuousaa":true,"mindaroBinariesVersion":"1.0.20210615.1","nativeAuth":true,"portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"readWriteAnonymous":true,"resyncOnMisappliedEdit":true,"saveDirtyDocOnReadd":false,"shouldUseGrpcService":true,"testtv":true,"waitForPendingEditOnDispose":true}}]},"authenticationProvider":"microsoft","lastUse":1709772995257}'
rust-lang.rust-analyzer: '{"serverVersion":"0.3.1940"}'
VisualStudioExptTeam.vscodeintellicode-completions: '{"visualstudioexptteam.vscodeintellicode-completions/numberOfCompletionsShown":7893,"visualstudioexptteam.vscodeintellicode-completions/notificationAlreadyShown":true,"visualstudioexptteam.vscodeintellicode-completions/showNotificationAtTime":1633734101414,"VSCode.ABExp.FeatureData":{"features":["account-aa","config.editor.experimental.asyncTokenization","livesharecontinuousaa","portForwardingServiceEnabled-development","portForwardingServiceEnabled-production","portForwardingServiceEnabled-staging","shouldUseGrpcService"],"assignmentContext":"vsliv368:30146709;vspor879:30202332;vspor708:30202333;vspor363:30204092;vsaa593:30376534;c4g48928:30535728;asynctok:30898717;","configs":[{"Id":"vscode","Parameters":{"account-aa":true,"config.editor.experimental.asyncTokenization":true,"livesharecontinuousaa":true,"portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true}}]}}'
VisualStudioExptTeam.vscodeintellicode-insiders: '{"dotnetruntime-vscodeintellicode-insiders-6.0":"c:\\Users\\vivlim\\AppData\\Roaming\\Code\\User\\globalStorage\\ms-dotnettools.vscode-dotnet-runtime\\.dotnet\\6.0.16\\dotnet.exe","visualstudioexptteam.vscodeintellicode-insiders.gaia_is_installed":true}'
vscjava.vscode-java-debug: '{"VSCode.ABExp.FeatureData":{"features":["aa-verification","account-aa","config.editor.experimental.asyncTokenization","DFHDFSDTcf","livesharecontinuousaa","mindaroBinariesVersion","mindaroBinariesVersion-1.0.20210702","mindaroBinariesVersion-1.0.20210723","portForwardingServiceEnabled-development","portForwardingServiceEnabled-production","portForwardingServiceEnabled-staging","RemoveKernelToolbarInInteractiveWindowcf","reusableLinks","shouldUseGrpcService"],"assignmentContext":"vsliv368:30146709;vsreu685:30147344;python383cf:30185419;vspor879:30202332;vspor708:30202333;vspor363:30204092;vsdfh931cf:30280410;vsaa_174:30279596;binariesv615:30325510;bridge0708:30335490;bridge0723:30353136;vsaa593:30376534;c4g48928:30535728;asynctok:30821568;","configs":[{"Id":"vscode","Parameters":{"aa-verification":true,"account-aa":true,"config.editor.experimental.asyncTokenization":true,"DFHDFSDT":false,"livesharecontinuousaa":true,"mindaroBinariesVersion":"1.0.20210615.1","mindaroBinariesVersion-1.0.20210702":"1.0.20210708.15","mindaroBinariesVersion-1.0.20210723":"1.0.20210723.6","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"RemoveKernelToolbarInInteractiveWindow":false,"reusableLinks":true,"shouldUseGrpcService":true}}]}}'
vscjava.vscode-java-dependency: '{"VSCode.ABExp.FeatureData":{"features":["account-aa","config.editor.experimental.asyncTokenization","copilotchat.renameSuggestionsDelayBeforeFetch","livesharecontinuousaa","mindaroBinariesVersion","portForwardingServiceEnabled-development","portForwardingServiceEnabled-production","portForwardingServiceEnabled-staging","shouldUseGrpcService"],"assignmentContext":"vsliv368:30146709;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593:30376534;c4g48928:30535728;asynctok:30898717;01bff139:31013167;","configs":[{"Id":"vscode","Parameters":{"account-aa":true,"config.editor.experimental.asyncTokenization":true,"copilotchat.renameSuggestionsDelayBeforeFetch":350,"livesharecontinuousaa":true,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true}}]}}'
workbench.accounts.experimental.showEntitlements: "false"
workbench.activity.pinnedViewlets2: '[{"id":"workbench.view.explorer","pinned":true,"visible":true,"order":0},{"id":"workbench.view.search","pinned":true,"visible":true,"order":1},{"id":"workbench.view.scm","pinned":true,"visible":true,"order":2},{"id":"workbench.view.debug","pinned":true,"visible":true,"order":3},{"id":"workbench.view.remote","pinned":true,"visible":true,"order":4},{"id":"workbench.view.extensions","pinned":true,"visible":true,"order":4},{"id":"workbench.view.extension.test","pinned":true,"visible":false,"order":6},{"id":"workbench.view.extension.references-view","pinned":true,"visible":false,"order":7},{"id":"workbench.view.extension.bookmarks","pinned":true,"visible":false,"order":8},{"id":"workbench.view.extension.gitlensInspect","pinned":true,"visible":false,"order":11},{"id":"workbench.view.extension.gitlensPatch","pinned":true,"order":12},{"id":"workbench.view.extension.azdo-pull-requests","pinned":true,"order":8},{"id":"workbench.view.extension.jupyter","pinned":true,"visible":false,"order":19},{"id":"workbench.view.extension.PowerShell","pinned":true,"visible":true,"order":20},{"id":"workbench.view.extension.cspell-explorer","pinned":true,"visible":false,"order":18},{"id":"workbench.view.extension.gitlens","pinned":true,"visible":true,"order":10},{"id":"workbench.view.extension.objectExplorer","pinned":true,"visible":true,"order":17},{"id":"workbench.view.extension.PowerShellCommandExplorer","pinned":true,"visible":false,"order":16},{"id":"workbench.view.extension.copilot-sidebar-webview","pinned":true,"visible":false,"order":9},{"id":"workbench.view.extension.azure","pinned":true,"visible":true,"order":14},{"id":"workbench.view.extension.dockerView","pinned":true,"visible":true,"order":15},{"id":"workbench.view.extension.github-pull-requests","pinned":true,"order":14},{"id":"workbench.view.extension.github-pull-request","pinned":true,"order":14},{"id":"workbench.view.extension.cmake__viewContainer","pinned":true,"visible":false,"order":16},{"id":"workbench.view.extension.liveshare","pinned":true,"visible":true,"order":21},{"id":"workbench.view.extension.kusto-explorer","pinned":true,"visible":false,"order":9},{"id":"workbench.view.extension.dataworkspace","pinned":true,"visible":true,"order":16},{"id":"workbench.view.extension.copilot-labs","pinned":true,"visible":true,"order":13},{"id":"workbench.view.extension.tabnine-access","pinned":true,"visible":false,"order":19},{"id":"workbench.view.extension.todo-tree-container","pinned":true,"order":13},{"id":"workbench.view.extension.data-wrangler-primary","pinned":true,"order":18},{"id":"workbench.panel.chatSidebar","pinned":true,"visible":true,"order":100},{"id":"workbench.panel.chatSidebar.copilot","pinned":true,"visible":false,"order":100},{"id":"workbench.view.sync","pinned":true,"visible":false},{"id":"workbench.view.editSessions","pinned":true,"visible":false},{"id":"userDataProfiles","pinned":true,"visible":false}]'
workbench.activity.placeholderViewlets: "[{\"id\":\"workbench.view.explorer\",\
  \"themeIcon\":{\"id\":\"explorer-view-icon\"},\"name\":\"Explorer\",\"isBuilt\
  in\":true,\"views\":[{},{},{},{\"when\":\"timelineHasProvider\"},{\"when\":\"\
  npm:showScriptExplorer\"},{\"when\":\"sqlite.explorer.show\"},{\"when\":\"xml\
  TreeViewEnabled\"},{\"when\":\"solutionExplorerVisible\"},{\"when\":\"livesha\
  re:isCollaborating &&
  liveshare:showExplorer\"},{\"when\":\"config.rust-analyzer.showDependenciesEx\
  plorer &&
  inRustProject\"},{\"when\":\"java:projectManagerActivated\"},{\"when\":\"vsco\
  de-maven:activated || workbenchState ==
  'empty'\"}]},{\"id\":\"workbench.view.search\",\"themeIcon\":{\"id\":\"search\
  -view-icon\"},\"name\":\"Search\",\"isBuiltin\":true,\"views\":[{}]},{\"id\":\
  \"workbench.view.scm\",\"themeIcon\":{\"id\":\"source-control-view-icon\"},\"\
  name\":\"Source
  Control\",\"isBuiltin\":true,\"views\":[{\"when\":\"scm.providerCount &&
  scm.providerCount !=
  '0'\"},{},{\"when\":\"!gitlens:disabled\"},{\"when\":\"!gitlens:disabled\"},{\
  \"when\":\"!gitlens:disabled\"},{\"when\":\"!gitlens:disabled\"},{\"when\":\"\
  !gitlens:disabled &&
  !gitlens:hasVirtualFolders\"},{\"when\":\"!gitlens:disabled\"},{\"when\":\"gi\
  tlens:plus:enabled && !gitlens:disabled &&
  !gitlens:hasVirtualFolders\"},{\"when\":\"!gitlens:disabled\"},{}]},{\"id\":\
  \"workbench.view.debug\",\"themeIcon\":{\"id\":\"run-view-icon\"},\"name\":\"\
  Run and Debug\",\"isBuiltin\":true,\"views\":[{\"when\":\"debugUx ==
  'simple'\"},{\"when\":\"debugUx == 'default'\"},{\"when\":\"debugUx ==
  'default'\"},{\"when\":\"debugUx ==
  'default'\"},{\"when\":\"loadedScriptsSupported && debugUx ==
  'default'\"},{\"when\":\"breakpointsExist || hasDebugged || debugUx ==
  'default'\"},{\"when\":\"debugType == 'pwa-chrome' || debugType ==
  'pwa-msedge'\"},{\"when\":\"jsDebugHasExcludedCallers && debugType ==
  'node-terminal' || jsDebugHasExcludedCallers && debugType == 'pwa-chrome' ||
  jsDebugHasExcludedCallers && debugType == 'pwa-extensionHost' ||
  jsDebugHasExcludedCallers && debugType == 'pwa-msedge' ||
  jsDebugHasExcludedCallers && debugType ==
  'pwa-node'\"},{\"when\":\"cpptools.enableSshTargetsView\"}]},{\"id\":\"workbe\
  nch.view.remote\",\"themeIcon\":{\"id\":\"remote-explorer-view-icon\"},\"name\
  \":\"Remote
  Explorer\",\"isBuiltin\":true,\"views\":[{},{\"when\":\"true\"},{\"when\":\"!\
  hideConnectCommands\"},{\"when\":\"true\"},{\"when\":\"codespaces:views-welco\
  me:version-notification ==
  'Deprecated'\"},{\"when\":\"remote-containers:showDetails &&
  !hideConnectCommands\"},{\"when\":\"codespaces:performance-explorer-enabled &&
  codespaces:views-welcome:version-notification !=
  'Unsupported'\"},{\"when\":\"!hideConnectCommands\"}]},{\"id\":\"workbench.vi\
  ew.extensions\",\"themeIcon\":{\"id\":\"extensions-view-icon\"},\"name\":\"Ex\
  tensions\",\"isBuiltin\":true,\"views\":[{\"when\":\"defaultExtensionViews\"}\
  ,{\"when\":\"searchExtensionUpdates ||
  searchOutdatedExtensions\"},{\"when\":\"recommendedExtensions &&
  workbenchState != 'empty'\"},{\"when\":\"defaultExtensionViews && hasGallery
  && !hasInstalledExtensions\"},{\"when\":\"searchExtensionUpdates ||
  searchRecentlyUpdatedExtensions\"},{\"when\":\"recommendedExtensions\"},{\"wh\
  en\":\"defaultExtensionViews && hasGallery &&
  !config.extensions.showRecommendationsOnlyOnDemand &&
  !sortByUpdateDate\"},{\"when\":\"defaultExtensionViews &&
  hasInstalledExtensions\"},{\"when\":\"defaultExtensionViews &&
  hasInstalledExtensions\"},{\"when\":\"searchMarketplaceExtensions\"},{\"when\
  \":\"installedExtensions ||
  searchInstalledExtensions\"},{\"when\":\"searchEnabledExtensions\"},{\"when\":\
  \"searchDisabledExtensions\"},{\"when\":\"searchBuiltInExtensions\"},{\"when\
  \":\"searchWorkspaceUnsupportedExtensions\"},{\"when\":\"builtInExtensions\"}\
  ,{\"when\":\"builtInExtensions\"},{\"when\":\"builtInExtensions\"},{\"when\":\
  \"searchUnsupportedWorkspaceExtensions\"},{\"when\":\"searchUnsupportedWorksp\
  aceExtensions\"},{\"when\":\"searchUnsupportedWorkspaceExtensions &&
  virtualWorkspace\"},{\"when\":\"searchUnsupportedWorkspaceExtensions &&
  virtualWorkspace\"},{\"when\":\"searchDeprecatedExtensions\"}]},{\"id\":\"wor\
  kbench.view.extension.test\",\"themeIcon\":{\"id\":\"test-view-icon\"},\"name\
  \":\"Testing\",\"isBuiltin\":true,\"views\":[{\"when\":\"testing.providerCount
  >
  0\"},{\"when\":\"testing.isTestCoverageOpen\"}]},{\"id\":\"workbench.view.ext\
  ension.references-view\",\"themeIcon\":{\"id\":\"references\"},\"name\":\"Ref\
  erences\",\"isBuiltin\":false,\"views\":[{\"when\":\"reference-list.isActive\
  \"},{\"when\":\"cpptools.hasReferencesResults\"}]},{\"id\":\"workbench.view.e\
  xtension.bookmarks\",\"isBuiltin\":false},{\"id\":\"workbench.view.extension.\
  gitlensInspect\",\"themeIcon\":{\"id\":\"gitlens-gitlens-inspect\"},\"name\":\
  \"GitLens
  Inspect\",\"isBuiltin\":false,\"views\":[{\"when\":\"!gitlens:disabled\"},{\"\
  when\":\"gitlens:views:pullRequest:visible &&
  !gitlens:disabled\"},{\"when\":\"!gitlens:disabled &&
  !gitlens:hasVirtualFolders\"},{\"when\":\"!gitlens:disabled\"},{\"when\":\"gi\
  tlens:plus:enabled &&
  !gitlens:disabled\"},{\"when\":\"!gitlens:disabled\"}]},{\"id\":\"workbench.v\
  iew.extension.gitlensPatch\",\"themeIcon\":{\"id\":\"gitlens-cloud-patch\"},\
  \"name\":\"GitLens
  Patch\",\"isBuiltin\":false,\"views\":[{\"when\":\"config.gitlens.cloudPatche\
  s.enabled && gitlens:views:patchDetails:mode &&
  !gitlens:untrusted\"}]},{\"id\":\"workbench.view.extension.azdo-pull-requests\
  \",\"iconUrl\":{\"$mid\":1,\"path\":\"%%EXTENSION_DATA_PATH%%/ankitbko.vscode\
  -pull-request-azdo-0.2.2/resources/icons/pull-request.png\",\"scheme\":\"file\
  \"},\"name\":\"Azure
  Devops\",\"isBuiltin\":false,\"views\":[{\"when\":\"ReposManagerStateContext
  ==
  'NeedsAuthentication'\"},{\"when\":\"azdo:inReviewMode\"},{\"when\":\"!azdo:f\
  ocusedReview && ReposManagerStateContext !=
  'NeedsAuthentication'\"},{\"when\":\"azdo:focusedReview\"}]},{\"id\":\"workbe\
  nch.view.extension.jupyter\",\"themeIcon\":{\"id\":\"notebook\"},\"name\":\"J\
  upyter\",\"isBuiltin\":false,\"views\":[]},{\"id\":\"workbench.view.extension\
  .PowerShell\",\"themeIcon\":{\"id\":\"terminal-powershell\"},\"name\":\"Power\
  Shell\",\"isBuiltin\":false,\"views\":[{\"when\":\"config.powershell.sideBar.\
  CommandExplorerVisibility\"}]},{\"id\":\"workbench.view.extension.cspell-expl\
  orer\",\"isBuiltin\":false},{\"id\":\"workbench.view.extension.gitlens\",\"th\
  emeIcon\":{\"id\":\"gitlens-gitlens\"},\"name\":\"GitLens\",\"isBuiltin\":fal\
  se,\"views\":[{},{\"when\":\"config.gitlens.cloudPatches.enabled &&
  gitlens:gk:organization:drafts:enabled && !gitlens:hasVirtualFolders &&
  !gitlens:untrusted\"},{\"when\":\"!gitlens:hasVirtualFolders &&
  !gitlens:untrusted\"},{}]},{\"id\":\"workbench.view.extension.objectExplorer\
  \",\"iconUrl\":{\"$mid\":1,\"path\":\"%%EXTENSION_DATA_PATH%%/ms-mssql.mssql-\
  1.22.1/images/server_page_inverse.svg\",\"scheme\":\"file\"},\"name\":\"SQL
  Server\",\"isBuiltin\":false,\"views\":[{},{\"when\":\"config.mssql.enableQue\
  ryHistoryFeature\"}]},{\"id\":\"workbench.view.extension.PowerShellCommandExp\
  lorer\",\"isBuiltin\":false},{\"id\":\"workbench.view.extension.copilot-sideb\
  ar-webview\",\"isBuiltin\":false},{\"id\":\"workbench.view.extension.azure\",\
  \"themeIcon\":{\"id\":\"azure\"},\"name\":\"Azure\",\"isBuiltin\":false,\"vie\
  ws\":[{\"when\":\"ms-azuretools.vscode-azureresourcegroups.hasFocusedGroup\"}\
  ,{},{},{}]},{\"id\":\"workbench.view.extension.dockerView\",\"iconUrl\":{\"$m\
  id\":1,\"path\":\"%%EXTENSION_DATA_PATH%%/ms-azuretools.vscode-docker-1.29.1/\
  resources/docker.svg\",\"scheme\":\"file\"},\"name\":\"Docker\",\"isBuiltin\"\
  :false,\"views\":[{},{},{},{},{},{},{}]},{\"id\":\"workbench.view.extension.g\
  ithub-pull-requests\",\"name\":\"GitHub Pull
  Requests\",\"isBuiltin\":false},{\"id\":\"workbench.view.extension.github-pul\
  l-request\",\"name\":\"GitHub Pull
  Request\",\"isBuiltin\":false},{\"id\":\"workbench.view.extension.cmake__view\
  Container\",\"isBuiltin\":false},{\"id\":\"workbench.view.extension.liveshare\
  \",\"iconUrl\":{\"$mid\":1,\"path\":\"%%EXTENSION_DATA_PATH%%/ms-vsliveshare.\
  vsliveshare-1.0.5918/images/dark/liveshare.svg\",\"scheme\":\"file\"},\"name\
  \":\"Live
  Share\",\"isBuiltin\":false,\"views\":[{},{\"when\":\"liveshare:isCollaborati\
  ng && liveshare:showExplorer &&
  liveshare:showHelpViewlet\"},{\"when\":\"config.liveshare.teamStatus ||
  liveshare:isTeamMember\"}]},{\"id\":\"workbench.view.extension.kusto-explorer\
  \",\"iconUrl\":{\"$mid\":1,\"path\":\"%%EXTENSION_DATA_PATH%%/donjayamanne.ku\
  sto-0.4.4/resources/icons/kusto.svg\",\"scheme\":\"file\"},\"name\":\"Kusto\",\
  \"isBuiltin\":false,\"views\":[{}]},{\"id\":\"workbench.view.extension.datawo\
  rkspace\",\"iconUrl\":{\"$mid\":1,\"path\":\"%%EXTENSION_DATA_PATH%%/ms-mssql\
  .data-workspace-vscode-0.5.0/images/data-workspace.svg\",\"scheme\":\"file\"},\
  \"name\":\"Database
  Projects\",\"isBuiltin\":false,\"views\":[{}]},{\"id\":\"workbench.view.exten\
  sion.copilot-labs\",\"isBuiltin\":false},{\"id\":\"workbench.view.extension.t\
  abnine-access\",\"isBuiltin\":false},{\"id\":\"workbench.view.extension.todo-\
  tree-container\",\"iconUrl\":{\"$mid\":1,\"path\":\"%%EXTENSION_DATA_PATH%%/g\
  runtfuggly.todo-tree-0.0.226/resources/todo-tree-container.svg\",\"scheme\":\
  \"file\"},\"name\":\"TODOs\",\"isBuiltin\":false,\"views\":[{\"when\":\"!todo\
  -tree-is-empty\"}]},{\"id\":\"workbench.view.extension.data-wrangler-primary\
  \",\"themeIcon\":{\"id\":\"data-wrangler\"},\"name\":\"Data
  Wrangler\",\"isBuiltin\":false,\"views\":[{\"when\":\"dataWrangler.dataWrangl\
  erActive && isWorkspaceTrusted\"},{\"when\":\"dataWrangler.dataViewerActive &&
  isWorkspaceTrusted || dataWrangler.dataWranglerActive &&
  isWorkspaceTrusted\"},{\"when\":\"dataWrangler.dataWranglerActive &&
  isWorkspaceTrusted\"},{\"when\":\"dataWrangler.dataViewerActive &&
  isWorkspaceTrusted\"},{\"when\":\"dataWrangler.dataViewerActive &&
  isWorkspaceTrusted\"}]},{\"id\":\"workbench.panel.chatSidebar\",\"themeIcon\"\
  :{\"id\":\"comment-discussion\"},\"name\":\"Chat\",\"isBuiltin\":true,\"views\
  \":[{\"when\":\"!github.copilot.interactiveSession.disabled\"}]},{\"id\":\"wo\
  rkbench.panel.chatSidebar.copilot\",\"isBuiltin\":false},{\"id\":\"workbench.\
  view.sync\",\"themeIcon\":{\"id\":\"settings-sync-view-icon\"},\"name\":\"Set\
  tings Sync\",\"isBuiltin\":true,\"views\":[{\"when\":\"enableSyncConflictsView
  && hasConflicts\"},{\"when\":\"enableSyncActivityViews &&
  userDataSyncAccountStatus == 'available' && syncStatus !=
  'uninitialized'\"},{\"when\":\"enableSyncActivityViews &&
  userDataSyncAccountStatus == 'available' && syncStatus !=
  'uninitialized'\"},{\"when\":\"enableSyncActivityViews &&
  userDataSyncAccountStatus == 'available' && syncStatus !=
  'uninitialized'\"},{\"when\":\"enableSyncActivityViews\"},{\"when\":\"enableS\
  yncActivityViews\"}]},{\"id\":\"workbench.view.editSessions\",\"themeIcon\":{\
  \"id\":\"edit-sessions-view-icon\"},\"name\":\"Cloud
  Changes\",\"isBuiltin\":true,\"views\":[{\"when\":\"editSessionsShowView\"}]}\
  ,{\"id\":\"userDataProfiles\",\"themeIcon\":{\"id\":\"defaultProfile-icon\"},\
  \"name\":\"Profiles\",\"isBuiltin\":true,\"views\":[]}]"
workbench.activityBar.hidden: "false"
workbench.activityBar.location: default
workbench.auxiliarybar.pinnedPanels: "[]"
workbench.auxiliarybar.placeholderPanels: "[]"
workbench.auxiliaryBar.size: "354"
workbench.chat.experimental.showWelcomeView: "false"
workbench.editor.languageDetectionOpenedLanguages.global: '[["git-commit",true],["typescript",true],["markdown",true],["jsonc",true],["powershell",true],["json",true],["log",true],["csharp",true],["azure-pipelines",true],["xml",true],["yaml",true],["plaintext",true]]'
workbench.explorer.views.state.hidden: '[{"id":"outline","isHidden":false},{"id":"timeline","isHidden":false},{"id":"workbench.explorer.openEditorsView","isHidden":false},{"id":"workbench.explorer.emptyView","isHidden":false},{"id":"workbench.explorer.fileView","isHidden":false},{"id":"npm","isHidden":false},{"id":"sqlite.explorer","isHidden":false},{"id":"liveshare.session.explorer","isHidden":false},{"id":"javaProjectExplorer","isHidden":false},{"id":"mavenProjects","isHidden":false},{"id":"rustDependencies","isHidden":false},{"id":"solutionExplorer","isHidden":false},{"id":"xmlTreeView","isHidden":false},{"id":"github:login","isHidden":false},{"id":"pr:github","isHidden":false},{"id":"issues:github","isHidden":false}]'
workbench.grid.size: '{"height":768,"width":1024}'
workbench.panel.alignment: center
workbench.panel.chatSidebar.copilot.hidden: '[{"id":"workbench.panel.chat.view.copilot","isHidden":false}]'
workbench.panel.chatSidebar.hidden: '[{"id":"workbench.panel.chat.view.copilot","isHidden":false}]'
workbench.panel.lastNonMaximizedHeight: "300"
workbench.panel.lastNonMaximizedWidth: "300"
workbench.panel.markers.hidden: '[{"id":"workbench.panel.markers.view","isHidden":false}]'
workbench.panel.output.hidden: '[{"id":"workbench.panel.output","isHidden":false}]'
workbench.panel.pinnedPanels: '[{"id":"workbench.panel.markers","pinned":true,"visible":true,"order":0},{"id":"workbench.panel.output","pinned":true,"visible":true,"order":1},{"id":"workbench.panel.testResults","pinned":true,"visible":false,"order":3},{"id":"terminal","pinned":true,"visible":true,"order":3},{"id":"workbench.view.extension.polyglot-notebook-panel","pinned":true,"order":8},{"id":"~remote.forwardedPortsContainer","pinned":true,"visible":true,"order":5},{"id":"workbench.view.extension.gitlensPanel","pinned":true,"visible":false,"order":6},{"id":"workbench.view.extension.copilot-message-panel","pinned":true,"visible":false,"order":7},{"id":"workbench.view.extension.azurePanel","pinned":true,"visible":true,"order":7},{"id":"workbench.view.extension.jupyter-variables","pinned":true,"visible":false,"order":10},{"id":"workbench.view.extension.data-wrangler-secondary","pinned":true,"order":9},{"id":"workbench.panel.comments","pinned":true,"visible":false,"order":10},{"id":"refactorPreview","pinned":true,"visible":false},{"id":"workbench.panel.repl","pinned":true,"visible":true,"order":2}]'
workbench.panel.placeholderPanels: '[{"id":"workbench.panel.markers","themeIcon":{"id":"markers-view-icon"},"name":"Problems","isBuiltin":true,"views":[{}]},{"id":"workbench.panel.output","themeIcon":{"id":"output-view-icon"},"name":"Output","isBuiltin":true,"views":[{}]},{"id":"workbench.panel.testResults","themeIcon":{"id":"test-results-icon"},"name":"Test
  Results","isBuiltin":true,"views":[{"when":"testing.hasAnyResults"}]},{"id":"terminal","themeIcon":{"id":"terminal-view-icon"},"name":"Terminal","isBuiltin":true,"views":[{}]},{"id":"workbench.view.extension.polyglot-notebook-panel","iconUrl":{"$mid":1,"path":"%%EXTENSION_DATA_PATH%%/ms-dotnettools.dotnet-interactive-vscode-1.0.5229040/resources/icons/notebook.svg","scheme":"file"},"name":"Polyglot
  Notebook","isBuiltin":false,"views":[{}]},{"id":"~remote.forwardedPortsContainer","themeIcon":{"id":"ports-view-icon"},"name":"Ports","isBuiltin":true,"views":[{}]},{"id":"workbench.view.extension.gitlensPanel","themeIcon":{"id":"gitlens-graph"},"name":"GitLens","isBuiltin":false,"views":[{"when":"gitlens:plus:enabled
  && !gitlens:disabled"},{"when":"gitlens:plus:enabled &&
  !gitlens:disabled"}]},{"id":"workbench.view.extension.copilot-message-panel","isBuiltin":false},{"id":"workbench.view.extension.azurePanel","themeIcon":{"id":"azure"},"name":"Azure","isBuiltin":false,"views":[{}]},{"id":"workbench.view.extension.jupyter-variables","themeIcon":{"id":"notebook"},"name":"Jupyter","isBuiltin":false,"views":[{"when":"jupyter.hasNativeNotebookOrInteractiveWindowOpen"},{"when":"jupyter.hasNativeNotebookOrInteractiveWindowOpen
  &&
  jupyter:showTagsExplorer"}]},{"id":"workbench.view.extension.data-wrangler-secondary","themeIcon":{"id":"data-wrangler"},"name":"Data
  Wrangler","isBuiltin":false,"views":[{"when":"dataWrangler.dataWranglerActive
  &&
  isWorkspaceTrusted"}]},{"id":"workbench.panel.comments","name":"Comments","isBuiltin":false},{"id":"refactorPreview","themeIcon":{"id":"refactor-preview-view-icon"},"name":"Refactor
  Preview","isBuiltin":true,"views":[{"when":"refactorPreview.enabled"}]},{"id":"workbench.panel.repl","themeIcon":{"id":"debug-console-view-icon"},"name":"Debug
  Console","isBuiltin":true,"views":[{"when":"debuggersAvailable"}]}]'
workbench.panel.repl.hidden: '[{"id":"workbench.panel.repl.view","isHidden":false}]'
workbench.panel.size: "265"
workbench.scm.views.state.hidden: '[{"id":"workbench.scm.repositories","isHidden":true},{"id":"workbench.scm","isHidden":false},{"id":"gitlens.views.commits","isHidden":false},{"id":"gitlens.views.repositories","isHidden":true},{"id":"gitlens.views.fileHistory","isHidden":false},{"id":"gitlens.views.lineHistory","isHidden":false},{"id":"gitlens.views.branches","isHidden":false},{"id":"gitlens.views.remotes","isHidden":false},{"id":"gitlens.views.stashes","isHidden":false},{"id":"gitlens.views.tags","isHidden":false},{"id":"gitlens.views.contributors","isHidden":true},{"id":"gitlens.views.searchAndCompare","isHidden":false},{"id":"gitlens.views.worktrees","isHidden":true},{"id":"gitlens.views.commitDetails","isHidden":false},{"id":"workbench.scm.sync","isHidden":false},{"id":"git-log--graph","isHidden":false}]'
workbench.sideBar.position: "0"
workbench.sideBar.size: "230"
workbench.statusBar.hidden: "false"
workbench.statusbar.hidden: '["status.workspaceTrust.1624923594337","status.workspaceTrust.7c0ad020300a674619d78660a703d643","status.workspaceTrust.1624999602634","status.workspaceTrust.cd32efb13f8505ac2fa9ffe94470ae98","status.workspaceTrust.1630092254605","status.workspaceTrust.072621bee9b5b23bf59557aa624b1733","status.workspaceTrust.1aeecb3ce13decd1e251cea3c1bd7b82","status.workspaceTrust.1f023d1214700966ebcd6d3668eb54e3","status.workspaceTrust.e584967c52883cb11f4eaf376b2181dd","status.workspaceTrust.ext-dev","status.workspaceTrust.1633546794618","status.workspaceTrust.1633556496674","status.workspaceTrust.3bf4ffdf917794c194366411a1907cdd","status.workspaceTrust.62718526a325b1ff13b199c4b61268d1","status.workspaceTrust.1633647718419","status.workspaceTrust.1633655247799","status.workspaceTrust.1633655487303","status.workspaceTrust.1633658328139","status.workspaceTrust.1633976098097","status.workspaceTrust.1633983103288","status.workspaceTrust.1633987818215","status.workspaceTrust.1633987837576","status.workspaceTrust.1634000774234","status.workspaceTrust.1634081519983","status.workspaceTrust.1634150789494","status.workspaceTrust.1634150798852","status.workspaceTrust.1634334457754","status.workspaceTrust.05da935a007e1b65d0933899f12dbf08","status.workspaceTrust.1634932777642","status.workspaceTrust.fd1ab4e811ff4fbe936751d364a27ec9","status.workspaceTrust.8d9d906256ca0a76327aca81bce4e6fa","status.workspaceTrust.053840c5d6fd9acff565d571d1688096","status.workspaceTrust.1635806803384","status.workspaceTrust.1635966852876","status.workspaceTrust.1636408876405","status.workspaceTrust.85e4d81aa191b332a58c36680d5cf4f3","status.workspaceTrust.1636409775240","status.workspaceTrust.1636660141632","status.workspaceTrust.1637095840177","status.workspaceTrust.1637705337747","status.workspaceTrust.ed94d14f184832f1c0530b2c4412843d","status.workspaceTrust.87bf44b92192a7f4b606b64f241bd238","status.workspaceTrust.1639520375118","status.workspaceTrust.1639520549917","status.workspaceTrust.1639521118200","status.workspaceTrust.1639523572926","status.workspaceTrust.1639610498351","status.workspaceTrust.1642024384338","status.workspaceTrust.cd93c77f61ffc3f5469dd14aa2fc5542","status.workspaceTrust.12d839b5ce85b59bb71e5a65ab3a3b61","status.workspaceTrust.1642640935261","status.workspaceTrust.1642705179309","status.workspaceTrust.1642711108927","status.workspaceTrust.1642718587491","status.workspaceTrust.1642802399540","status.workspaceTrust.1643155315198","status.workspaceTrust.4dc7fd3803dc81946f094ecc276bbe29","status.workspaceTrust.1643224439937","status.workspaceTrust.1643239340301","status.workspaceTrust.1643329549808","status.workspaceTrust.f4f2b6d0e582f81a72027aacb1d0de99","status.workspaceTrust.fa97987c62e47d3774d4e2fa266c5959","status.workspaceTrust.1644966646275","status.workspaceTrust.1645119100726","status.workspaceTrust.1646768505365","status.workspaceTrust.86e2b3d4c38734f96110e8ad4d2208ff","status.workspaceTrust.1647475503993","status.workspaceTrust.e536757b56a49eb327c7169adcf0e7f9","status.workspaceTrust.1647982598658","status.workspaceTrust.1648592097588","status.workspaceTrust.1648682071833","status.workspaceTrust.9e38b669c6c87e0521c9bf1610e030d8","status.workspaceTrust.1649975531063","status.workspaceTrust.1650054792046","status.workspaceTrust.1650408001720","status.workspaceTrust.1650492232263","status.workspaceTrust.1650492624383","status.workspaceTrust.1650496826378","status.workspaceTrust.586c1a3e10c75dd866c34af5cc855630","status.workspaceTrust.1650497008619","status.workspaceTrust.66ce117cfba830360edb0866b9cb2ad8","status.workspaceTrust.1650499744539","status.workspaceTrust.e2741f09dcd2704b57c389c16b88e0bd","status.workspaceTrust.1650671399305","status.workspaceTrust.1652119172101","status.workspaceTrust.1652742233560","status.workspaceTrust.0c15bcc50ace6c8878abece7e0e46875","status.workspaceTrust.c6938fc6a7469c913a9029dd550924a5","status.workspaceTrust.cf3529862bf95b7e03934d9a998d9e38","status.workspaceTrust.1652902602425","status.workspaceTrust.cd9de48180d2c4a7058f4e1e65b57ed1","status.workspaceTrust.0618ab70823b9b3ca2e110d0c3f2bda3","status.workspaceTrust.2522c6e8e16425a29288f47a0e664f6e","status.workspaceTrust.eb8a9211510e309064514e23124319c0","status.workspaceTrust.da0b1153c9318612f9a8195dee5c9ebb","status.workspaceTrust.1653530303681","status.workspaceTrust.1653530661737","status.workspaceTrust.1655497343416","status.workspaceTrust.497fc33d9755df6f5fdb4dd7667c76d8","status.workspaceTrust.1655915933070","status.workspaceTrust.9f63ba733fad4614eda98259c91cfec9","status.workspaceTrust.1657052432289","status.workspaceTrust.1657149804250","status.workspaceTrust.1657245128293","status.workspaceTrust.e61ffca30c548cb9bd9d6524e6b65535","status.workspaceTrust.1657303058099","status.workspaceTrust.3ba02983a2054bc4071484296855baae","status.workspaceTrust.1657837746923","status.workspaceTrust.1658884558240","status.workspaceTrust.acec79841aaa3051f92bf1bb296fb0b9","status.workspaceTrust.1658956156994","status.workspaceTrust.1658956179297","status.workspaceTrust.a1121b7bf6bb6a39f5ecdbfca39fae6f","status.workspaceTrust.1659387996717","status.workspaceTrust.1660085848545","status.workspaceTrust.1660323925665","status.workspaceTrust.1688598071231","status.workspaceTrust.1689019960456","status.workspaceTrust.ac26070c891f6cf314498e2e4d633f72","status.workspaceTrust.1689874930659","status.workspaceTrust.cd4d50ae607eae0cc8ea692e18f3f26b","status.workspaceTrust.2f1697f903155c736f19960f3c87e341","status.workspaceTrust.02836c513b28f848eda7d79b47d2c971","status.workspaceTrust.1690404861910","status.workspaceTrust.1690592688037","status.workspaceTrust.1691524743606","status.workspaceTrust.36f754afbe1e3ff47e57b721e53fef33","status.workspaceTrust.0297b302a356c7c2ddafbf4fc39760b3","status.workspaceTrust.1692149367596","status.workspaceTrust.252c6bfd3b828af40d7e7f32fc32a598","status.workspaceTrust.1692154290065","status.workspaceTrust.78ace39c8f26de763965b3201d9ebdca","status.workspaceTrust.1692154935985","status.workspaceTrust.1692155244758","status.workspaceTrust.1692155692744","status.workspaceTrust.1692232582562","status.workspaceTrust.2b7aeb203ba5df5baafbfe5d5ff79227","status.workspaceTrust.688172000db2940da24d1cfeed6c801b","status.workspaceTrust.1692409547541","status.workspaceTrust.1692650767132","status.workspaceTrust.5d8feb4d4f4450e6d21d495b7490d438","status.workspaceTrust.1692813418185","status.workspaceTrust.1695153438706","status.workspaceTrust.1695748146590","status.workspaceTrust.1695767356484","status.workspaceTrust.1698171333371","status.workspaceTrust.1698275198241","status.workspaceTrust.1706308886096","status.workspaceTrust.3dcbf779e38d627ee76b1029d3af26f2","status.workspaceTrust.1707170023351","status.workspaceTrust.1707184755840","status.workspaceTrust.1708493247355","status.workspaceTrust.da8e272445bfd417088f0fb68df13cb6","status.workspaceTrust.1708493869859","status.workspaceTrust.aebaf617c90426abe43ba587f5268ca7","status.workspaceTrust.1708545589278","status.workspaceTrust.9db048e12d98c3cec918f44d2dde3e88","status.workspaceTrust.1708631790059","status.workspaceTrust.3f10437101630ee4375e397dce7c07ca","status.workspaceTrust.8033380116ccb02ab14168cb225e5a28","status.workspaceTrust.1708672928526","status.workspaceTrust.1708672996873","status.workspaceTrust.2c24b73834b5896ea28678aeb3436c36","status.workspaceTrust.1708673583179","status.workspaceTrust.1708741545653","status.workspaceTrust.dd2d7e175ed7ac9d1fa129eec6547f2c","status.workspaceTrust.1708976578879","status.workspaceTrust.2b81783d9fea7c41deb272bb808ac610","status.workspaceTrust.de68f659c125996d94b1eec4692f168c","status.workspaceTrust.b6238961542817d2848368801b0593c3","status.workspaceTrust.d7026f9fea521baea57fca273a3748c2","status.workspaceTrust.09db28b1d0899cb147bfab322dad699d","status.workspaceTrust.1709328970679","status.workspaceTrust.a44443e2962291562ab160ea765a2cb3","status.workspaceTrust.1709670633869","status.workspaceTrust.314340cd59d56fd484dba74107682b9c","status.workspaceTrust.3a2ab481ccaefed5cd39ce858540ec26","status.workspaceTrust.eb1f28c48603ca7e2408f921b1d1af7e","status.workspaceTrust.15e54d4be6a40982847ac8596178a52b","status.workspaceTrust.1709681030708","status.workspaceTrust.54fdc16ef056c96d9dda77ba1abc924c","status.workspaceTrust.1709689068386","status.workspaceTrust.25fdf7bfbb7bc456c48b115bfd17bcdf"]'
workbench.telemetryOptOutShown: "true"
workbench.view.debug.state.hidden: '[{"id":"workbench.debug.welcome","isHidden":false},{"id":"workbench.debug.variablesView","isHidden":false},{"id":"workbench.debug.watchExpressionsView","isHidden":false},{"id":"workbench.debug.callStackView","isHidden":false},{"id":"workbench.debug.loadedScriptsView","isHidden":false},{"id":"workbench.debug.breakPointsView","isHidden":false},{"id":"jsBrowserBreakpoints","isHidden":false},{"id":"jsExcludedCallers","isHidden":false},{"id":"CppSshTargetsView","isHidden":false}]'
workbench.view.extension.azdo-pull-requests.state.hidden: '[{"id":"azdo:login","isHidden":false},{"id":"azdoprStatus:azdo","isHidden":false},{"id":"azdopr:azdo","isHidden":false},{"id":"azdo:activePullRequest","isHidden":false}]'
workbench.view.extension.azure.state.hidden: '[{"id":"azureResourceGroups","isHidden":false},{"id":"ms-azuretools.helpAndFeedback","isHidden":false},{"id":"azureDatabasesExplorer","isHidden":false},{"id":"azureWorkspace","isHidden":false},{"id":"azureFocusView","isHidden":true}]'
workbench.view.extension.azurePanel.state.hidden: '[{"id":"azureActivityLog","isHidden":false}]'
workbench.view.extension.bookmarks.state.hidden: '[{"id":"bookmarksExplorer","isHidden":false},{"id":"bookmarksHelpAndFeedback","isHidden":false}]'
workbench.view.extension.copilot-labs.state.hidden: '[{"id":"copilotSidebar.explain","isHidden":false},{"id":"copilotSidebar.translate","isHidden":false},{"id":"copilotSidebar.toolbox","isHidden":false},{"id":"copilotSidebar.generateTests","isHidden":false}]'
workbench.view.extension.dataworkspace.state.hidden: '[{"id":"dataworkspace.views.main","isHidden":false}]'
workbench.view.extension.dockerView.state.hidden: '[{"id":"dockerContainers","isHidden":false},{"id":"dockerImages","isHidden":false},{"id":"dockerRegistries","isHidden":false},{"id":"dockerNetworks","isHidden":false},{"id":"dockerVolumes","isHidden":false},{"id":"vscode-docker.views.dockerContexts","isHidden":false},{"id":"vscode-docker.views.help","isHidden":false}]'
workbench.view.extension.github-pull-request.state.hidden: '[{"id":"github:createPullRequest","isHidden":false},{"id":"github:compareChanges","isHidden":false},{"id":"prStatus:github","isHidden":false},{"id":"github:activePullRequest","isHidden":false},{"id":"github:activePullRequest:welcome","isHidden":false},{"id":"github:createPullRequestWebview","isHidden":false},{"id":"github:compareChangesFiles","isHidden":false},{"id":"github:compareChangesCommits","isHidden":false}]'
workbench.view.extension.github-pull-requests.state.hidden: '[{"id":"github:login","isHidden":false},{"id":"pr:github","isHidden":false},{"id":"issues:github","isHidden":false}]'
workbench.view.extension.gitlens.state.hidden: '[{"id":"gitlens.views.updates","isHidden":false},{"id":"gitlens.views.welcome","isHidden":false},{"id":"gitlens.views.home","isHidden":false},{"id":"gitlens.views.workspaces","isHidden":false},{"id":"gitlens.views.account","isHidden":false},{"id":"gitlens.views.drafts","isHidden":false}]'
workbench.view.extension.gitlensInspect.state.hidden: '[{"id":"gitlens.views.commitDetails","isHidden":false},{"id":"gitlens.views.lineHistory","isHidden":false},{"id":"gitlens.views.fileHistory","isHidden":false},{"id":"gitlens.views.timeline","isHidden":false},{"id":"gitlens.views.searchAndCompare","isHidden":false},{"id":"gitlens.views.pullRequest","isHidden":false}]'
workbench.view.extension.gitlensPanel.state.hidden: '[{"id":"gitlens.views.timeline","isHidden":false},{"id":"gitlens.views.graph","isHidden":false},{"id":"gitlens.views.graphDetails","isHidden":false}]'
workbench.view.extension.jupyter-variables.state.hidden: '[{"id":"jupyterViewVariables","isHidden":false},{"id":"cell-tag","isHidden":false}]'
workbench.view.extension.kusto-explorer.state.hidden: '[{"id":"kustoExplorer","isHidden":false}]'
workbench.view.extension.liveshare.state.hidden: '[{"id":"liveshare.session","isHidden":false},{"id":"liveshare.contacts","isHidden":false},{"id":"liveshare.plannedSessions","isHidden":false},{"id":"liveshare.help","isHidden":false},{"id":"liveshare.devtools","isHidden":false}]'
workbench.view.extension.objectExplorer.state.hidden: '[{"id":"objectExplorer","isHidden":false},{"id":"queryHistory","isHidden":false}]'
workbench.view.extension.polyglot-notebook-panel.state.hidden: '[{"id":"polyglot-notebook-panel-values","isHidden":false}]'
workbench.view.extension.PowerShell.state.hidden: '[{"id":"PowerShellCommands","isHidden":false}]'
workbench.view.extension.PowerShellCommandExplorer.state.hidden: '[{"id":"PowerShellCommands","isHidden":false}]'
workbench.view.extension.references-view.state.hidden: '[{"id":"references-view.tree","isHidden":false},{"id":"CppReferencesView","isHidden":false}]'
workbench.view.extension.test.state.hidden: '[{"id":"workbench.view.testing","isHidden":false},{"id":"workbench.view.testCoverage","isHidden":false}]'
workbench.view.extension.todo-tree-container.state.hidden: '[{"id":"todo-tree-view","isHidden":false}]'
workbench.view.extensions.state.hidden: '[{"id":"workbench.views.extensions.installed.empty","isHidden":false},{"id":"workbench.views.extensions.installed","isHidden":false},{"id":"workbench.views.extensions.workspaceRecommendations","isHidden":false},{"id":"workbench.views.extensions.popular","isHidden":false},{"id":"workbench.views.extensions.otherRecommendations","isHidden":false},{"id":"extensions.recommendedList","isHidden":false},{"id":"workbench.views.extensions.enabled","isHidden":true},{"id":"workbench.views.extensions.disabled","isHidden":true},{"id":"workbench.views.extensions.marketplace","isHidden":false},{"id":"workbench.views.extensions.searchInstalled","isHidden":false},{"id":"workbench.views.extensions.searchEnabled","isHidden":false},{"id":"workbench.views.extensions.searchDisabled","isHidden":false},{"id":"workbench.views.extensions.searchOutdated","isHidden":false},{"id":"workbench.views.extensions.searchBuiltin","isHidden":false},{"id":"workbench.views.extensions.builtinFeatureExtensions","isHidden":false},{"id":"workbench.views.extensions.builtinThemeExtensions","isHidden":false},{"id":"workbench.views.extensions.builtinProgrammingLanguageExtensions","isHidden":false},{"id":"workbench.views.extensions.searchWorkspaceUnsupported","isHidden":false},{"id":"workbench.views.extensions.untrustedUnsupportedExtensions","isHidden":false},{"id":"workbench.views.extensions.untrustedPartiallySupportedExtensions","isHidden":false},{"id":"workbench.views.extensions.virtualUnsupportedExtensions","isHidden":false},{"id":"workbench.views.extensions.virtualPartiallySupportedExtensions","isHidden":false},{"id":"workbench.views.extensions.deprecatedExtensions","isHidden":false},{"id":"workbench.views.extensions.searchRecentlyUpdated","isHidden":false},{"id":"workbench.views.extensions.local.installed","isHidden":false},{"id":"workbench.views.extensions.remote.installed","isHidden":false}]'
workbench.view.remote.state.hidden: '[{"id":"targetsWsl","isHidden":false},{"id":"~remote.helpPanel","isHidden":false},{"id":"github.codespaces.explorer","isHidden":false},{"id":"github.codespaces.warnExplorer","isHidden":false},{"id":"github.codespaces.performanceExplorer","isHidden":false},{"id":"targetsContainers","isHidden":false},{"id":"detailsContainers","isHidden":false},{"id":"devVolumes","isHidden":false},{"id":"sshHosts","isHidden":false},{"id":"remoteTargets","isHidden":false}]'
workbench.view.search.state.hidden: '[{"id":"workbench.view.search","isHidden":false}]'
workbench.view.sync.state.hidden: '[{"id":"workbench.views.sync.merges","isHidden":false},{"id":"workbench.views.sync.remoteActivity","isHidden":false},{"id":"workbench.views.sync.machines","isHidden":false},{"id":"workbench.views.sync.localActivity","isHidden":true},{"id":"workbench.views.sync.troubleshoot","isHidden":true}]'
workbench.views.extensions.installed.size: "89"
workbench.views.extensions.local.installed.size: "85"
workbench.views.extensions.remote.installed.size: "3"
workbench.welcomePage.extensionMetadata.github.copilot: '{"title":"GitHub
  Copilot","description":"Your AI pair
  programmer","imagePath":"https://github.gallerycdn.vsassets.io/extensions/github/copilot/1.135.0/1699439221043/Microsoft.VisualStudio.Services.Icons.Default","date":1699570427473}'
workbench.welcomePage.hiddenCategories: '["Intermediate","ms-vscode-remote.remote-wsl#wslWelcome","github.copilot","SetupWeb"]'
workbench.welcomePage.walkthroughMetadata: '[["vscjava.vscode-java-pack#javaWelcome",{"firstSeen":1630092256389,"stepIDs":["java.runtime","java.extGuide","java.openProjectFolder","java.openProjectFolder.mac","java.showProjectExplorer","java.showProjectExplorer.notActivated","java.showDebugView","java.showTesting","java.showTesting.notActivated","java.tutorial"],"manaullyOpened":false}],["ms-python.python#pythonWelcome",{"firstSeen":1630119494278,"stepIDs":["python.installPythonWin","python.installPythonMac","python.installPythonLinux","python.selectInterpreter","python.runAndDebug","python.runAndDebugMacOS","python.learnMore"],"manaullyOpened":false}],["ms-python.python#pythonDataScienceWelcome",{"firstSeen":1630119494279,"stepIDs":["python.installPython","python.openFolderMac","python.openFolder","python.createNewNotebook","python.openInteractiveWindow","python.dataScienceLearnMore"],"manaullyOpened":false}],["ms-azuretools.vscode-docker#dockerStart",{"firstSeen":1633476725468,"stepIDs":["scaffold","buildImage","runContainer","dockerExplorer","pushImage","azDeploy","learn"],"manaullyOpened":false}],["ms-vscode-remote.remote-wsl#wslWelcome",{"firstSeen":1639075029726,"stepIDs":["explore.commands","open.wslwindow","create.project","open.project","linux.environment","install.tools","run.debug","come.back"],"manaullyOpened":false}],["ms-python.python#pythonWelcomeWithDS",{"firstSeen":1644012073836,"stepIDs":["python.installPythonWin","python.installPythonMac","python.installPythonLinux","python.createPythonFile","python.selectInterpreter","python.runAndDebug","python.learnMoreWithDS"],"manaullyOpened":false}],["eamodio.gitlens#gitlens.welcome",{"firstSeen":1646768506721,"stepIDs":["gitlens.welcome.experience","gitlens.welcome.settings","gitlens.welcome.currentLineBlame","gitlens.welcome.gitCodeLens","gitlens.welcome.revisionHistory","gitlens.welcome.fileAnnotations","gitlens.welcome.gitSideBarViews","gitlens.welcome.hostingServiceIntegrations","gitlens.welcome.gitCommandPalette","gitlens.welcome.interactiveRebaseEditor","gitlens.welcome.terminal","gitlens.welcome.plus"],"manaullyOpened":false}],["eamodio.gitlens#gitlens.plus",{"firstSeen":1646768506721,"stepIDs":["gitlens.plus.intro.tryNow","gitlens.plus.intro.signIn","gitlens.plus.intro","gitlens.plus.visualFileHistory","gitlens.plus.worktrees","gitlens.plus.comingSoon","gitlens.plus.tryNow","gitlens.plus.signIn"],"manaullyOpened":false}],["ms-toolsai.jupyter#jupyterWelcome",{"firstSeen":1646768506721,"stepIDs":["jupyter.createNewNotebook","jupyter.selectKernel","jupyter.exploreAndDebug","jupyter.dataScienceLearnMore"],"manaullyOpened":false}],["ms-azuretools.vscode-azureresourcegroups#azure-get-started",{"firstSeen":1653528265340,"stepIDs":["sign-in","azure-view","grouping-and-focus","activity-log","create-resource"],"manaullyOpened":false}],["ms-vscode.powershell#PowerShell",{"firstSeen":1688598078534,"stepIDs":["version","file","sessions","ise","terminal","explore","feedback"],"manaullyOpened":false}],["ms-python.python#pythonWelcome2",{"firstSeen":1689019966007,"stepIDs":["python.createPythonFolder","python.createPythonFile","python.installPythonWin8","python.installPythonMac","python.installPythonLinux","python.createEnvironment2","python.runAndDebug","python.learnMoreWithDS2"],"manaullyOpened":false}],["ms-vscode-remote.remote-wsl#wslWalkthrough",{"firstSeen":1689019966007,"stepIDs":["explore.commands","open.wslwindow","create.project","open.project","linux.environment","install.tools","run.debug","come.back"],"manaullyOpened":false}],["GitHub.copilot#copilotWelcome",{"firstSeen":1691542567271,"stepIDs":["copilot.signin","copilot.firstsuggest","copilot.realfiles.openrecent","copilot.realfiles.quickopen","copilot.iterate","copilot.creativity"],"manaullyOpened":false}],["ms-dotnettools.csdevkit#csdevkit.gettingStarted",{"firstSeen":1698171341661,"stepIDs":["csdevkit.signInStep","csdevkit.setupEnvironmentStep","csdevkit.openWorkspaceStep","csdevkit.createNewProjectStep","csdevkit.launchDebugAndTestStep","csdevkit.learnMoreStep"],"manaullyOpened":false}],["ms-vscode.cpptools#cppWelcome",{"firstSeen":1709328972548,"stepIDs":["awaiting.activation.mac","awaiting.activation.linux","awaiting.activation.windows","awaiting.activation.windows10","awaiting.activation.windows11","no.compilers.found.mac","no.compilers.found.linux","no.compilers.found.windows","no.compilers.found.windows10","no.compilers.found.windows11","verify.compiler.mac","verify.compiler.linux","verify.compiler.windows","verify.compiler.windows10","verify.compiler.windows11","create.cpp.file","relaunch.developer.command.prompt.windows","run.project.mac","run.project.linux","run.project.windows","customize.debugging.linux","customize.debugging.windows","customize.debugging.mac"],"manaullyOpened":false}],["ms-toolsai.datawrangler#dataWranglerWelcome",{"firstSeen":1715196466935,"stepIDs":["openDataWrangler","openDataWrangler-web-variant","cleanDataUsingOperations","applyYourChanges","exportYourCode","openTitanicCSV"],"manaullyOpened":false}],["eamodio.gitlens#welcome",{"firstSeen":1715891479310,"stepIDs":["get-started","core-features","pro-features","pro-trial","pro-upgrade","pro-reactivate","pro-paid","visualize","launchpad","code-collab","integrations","more"],"manaullyOpened":false}]]'
zokugun.cron-tasks: '{"version":"0.1.2"}'
